{
  "$schema": "http://cyclonedx.org/schema/bom-1.6.schema.json",
  "bomFormat": "CycloneDX",
  "specVersion": "1.6",
  "serialNumber": "urn:uuid:26a0778e-c24e-4208-983d-a8d3a77d54b8",
  "version": 1,
  "metadata": {
    "timestamp": "2025-07-14T13:22:26-04:00",
    "tools": {
      "components": [
        {
          "type": "application",
          "author": "anchore",
          "name": "syft",
          "version": "1.28.0"
        }
      ]
    },
    "component": {
      "bom-ref": "6b4121d50428503b",
      "type": "file",
      "name": "pvlib-python-0.13.0/"
    }
  },
  "components": [
    {
      "bom-ref": "pkg:github/actions/checkout@v4?package-id=0251837398cdc7f5",
      "type": "library",
      "name": "actions/checkout",
      "version": "v4",
      "cpe": "cpe:2.3:a:actions\\/checkout:actions\\/checkout:v4:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/checkout@v4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/asv_check.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/checkout@v4?package-id=6490f9822556a20f",
      "type": "library",
      "name": "actions/checkout",
      "version": "v4",
      "cpe": "cpe:2.3:a:actions\\/checkout:actions\\/checkout:v4:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/checkout@v4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/flake8.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/checkout@v4?package-id=a14e91d06a2ebb93",
      "type": "library",
      "name": "actions/checkout",
      "version": "v4",
      "cpe": "cpe:2.3:a:actions\\/checkout:actions\\/checkout:v4:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/checkout@v4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/publish.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/checkout@v4?package-id=ac6d852ed545a0b1",
      "type": "library",
      "name": "actions/checkout",
      "version": "v4",
      "cpe": "cpe:2.3:a:actions\\/checkout:actions\\/checkout:v4:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/checkout@v4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/pytest-remote-data.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/checkout@v4?package-id=3d8924ed94bcb207",
      "type": "library",
      "name": "actions/checkout",
      "version": "v4",
      "cpe": "cpe:2.3:a:actions\\/checkout:actions\\/checkout:v4:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/checkout@v4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/pytest.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/checkout@v4?package-id=48937ae3f1984283",
      "type": "library",
      "name": "actions/checkout",
      "version": "v4",
      "cpe": "cpe:2.3:a:actions\\/checkout:actions\\/checkout:v4:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/checkout@v4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/top-ranked-issues.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/setup-python@v5?package-id=cd4af41471b49673",
      "type": "library",
      "name": "actions/setup-python",
      "version": "v5",
      "cpe": "cpe:2.3:a:actions\\/setup-python:actions\\/setup-python:v5:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/setup-python@v5",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup-python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/asv_check.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/setup-python@v5?package-id=5cbd0d6a8c97f4b3",
      "type": "library",
      "name": "actions/setup-python",
      "version": "v5",
      "cpe": "cpe:2.3:a:actions\\/setup-python:actions\\/setup-python:v5:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/setup-python@v5",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup-python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/flake8.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/setup-python@v5?package-id=5ce192e5731c5bf6",
      "type": "library",
      "name": "actions/setup-python",
      "version": "v5",
      "cpe": "cpe:2.3:a:actions\\/setup-python:actions\\/setup-python:v5:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/setup-python@v5",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup-python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/publish.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/setup-python@v5?package-id=f48552110aabae2a",
      "type": "library",
      "name": "actions/setup-python",
      "version": "v5",
      "cpe": "cpe:2.3:a:actions\\/setup-python:actions\\/setup-python:v5:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/setup-python@v5",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup-python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/pytest.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/actions/setup-python@v5?package-id=59b3a0e64742c363",
      "type": "library",
      "name": "actions/setup-python",
      "version": "v5",
      "cpe": "cpe:2.3:a:actions\\/setup-python:actions\\/setup-python:v5:*:*:*:*:*:*:*",
      "purl": "pkg:github/actions/setup-python@v5",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup-python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup_python:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup-python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:actions\\/setup:actions\\/setup_python:v5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/top-ranked-issues.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/codecov/codecov-action@v4?package-id=70fede344828e8da",
      "type": "library",
      "name": "codecov/codecov-action",
      "version": "v4",
      "cpe": "cpe:2.3:a:codecov\\/codecov-action:codecov\\/codecov-action:v4:*:*:*:*:*:*:*",
      "purl": "pkg:github/codecov/codecov-action@v4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov-action:codecov\\/codecov_action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov_action:codecov\\/codecov-action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov_action:codecov\\/codecov_action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov:codecov\\/codecov-action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov:codecov\\/codecov_action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/pytest-remote-data.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/codecov/codecov-action@v4?package-id=36ce351d209e0ce6",
      "type": "library",
      "name": "codecov/codecov-action",
      "version": "v4",
      "cpe": "cpe:2.3:a:codecov\\/codecov-action:codecov\\/codecov-action:v4:*:*:*:*:*:*:*",
      "purl": "pkg:github/codecov/codecov-action@v4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov-action:codecov\\/codecov_action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov_action:codecov\\/codecov-action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov_action:codecov\\/codecov_action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov:codecov\\/codecov-action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:codecov\\/codecov:codecov\\/codecov_action:v4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/pytest.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/conda-incubator/setup-miniconda@v3?package-id=ac0466643ba1e6f5",
      "type": "library",
      "name": "conda-incubator/setup-miniconda",
      "version": "v3",
      "cpe": "cpe:2.3:a:conda-incubator\\/setup-miniconda:conda-incubator\\/setup-miniconda:v3:*:*:*:*:*:*:*",
      "purl": "pkg:github/conda-incubator/setup-miniconda@v3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda-incubator\\/setup-miniconda:conda_incubator\\/setup_miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda_incubator\\/setup_miniconda:conda-incubator\\/setup-miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda_incubator\\/setup_miniconda:conda_incubator\\/setup_miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda-incubator\\/setup:conda-incubator\\/setup-miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda-incubator\\/setup:conda_incubator\\/setup_miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda_incubator\\/setup:conda-incubator\\/setup-miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda_incubator\\/setup:conda_incubator\\/setup_miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda:conda-incubator\\/setup-miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:conda:conda_incubator\\/setup_miniconda:v3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/pytest-remote-data.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/mamba-org/setup-micromamba@v1?package-id=85567ddccbf05ab4",
      "type": "library",
      "name": "mamba-org/setup-micromamba",
      "version": "v1",
      "cpe": "cpe:2.3:a:mamba-org\\/setup-micromamba:mamba-org\\/setup-micromamba:v1:*:*:*:*:*:*:*",
      "purl": "pkg:github/mamba-org/setup-micromamba@v1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba-org\\/setup-micromamba:mamba_org\\/setup_micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba_org\\/setup_micromamba:mamba-org\\/setup-micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba_org\\/setup_micromamba:mamba_org\\/setup_micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba-org\\/setup:mamba-org\\/setup-micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba-org\\/setup:mamba_org\\/setup_micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba_org\\/setup:mamba-org\\/setup-micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba_org\\/setup:mamba_org\\/setup_micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba:mamba-org\\/setup-micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mamba:mamba_org\\/setup_micromamba:v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/pytest.yml"
        }
      ]
    },
    {
      "bom-ref": "pkg:github/pypa/gh-action-pypi-publish@release%2Fv1?package-id=2fc65316b457fc42",
      "type": "library",
      "name": "pypa/gh-action-pypi-publish",
      "version": "release/v1",
      "cpe": "cpe:2.3:a:pypa\\/gh-action-pypi-publish:pypa\\/gh-action-pypi-publish:release\\/v1:*:*:*:*:*:*:*",
      "purl": "pkg:github/pypa/gh-action-pypi-publish@release%2Fv1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "github-actions-usage-cataloger"
        },
        {
          "name": "syft:package:type",
          "value": "github-action"
        },
        {
          "name": "syft:package:metadataType",
          "value": "github-actions-use-statement"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh-action-pypi-publish:pypa\\/gh_action_pypi_publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh_action_pypi_publish:pypa\\/gh-action-pypi-publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh_action_pypi_publish:pypa\\/gh_action_pypi_publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh-action-pypi:pypa\\/gh-action-pypi-publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh-action-pypi:pypa\\/gh_action_pypi_publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh_action_pypi:pypa\\/gh-action-pypi-publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh_action_pypi:pypa\\/gh_action_pypi_publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh-action:pypa\\/gh-action-pypi-publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh-action:pypa\\/gh_action_pypi_publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh_action:pypa\\/gh-action-pypi-publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh_action:pypa\\/gh_action_pypi_publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh:pypa\\/gh-action-pypi-publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pypa\\/gh:pypa\\/gh_action_pypi_publish:release\\/v1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/.github/workflows/publish.yml"
        }
      ]
    },
    {
      "bom-ref": "beb43b3d29b4c285",
      "type": "file",
      "name": "/home/pvlib-python-0.13.0/.github/workflows/asv_check.yml",
      "hashes": [
        {
          "alg": "SHA-1",
          "content": "1a013ada68738ac906eaa6319450283159a8d754"
        },
        {
          "alg": "SHA-256",
          "content": "dc9072ad6b0a338b0471d4aa7c50df736fecde2866c2171a3fd58246589b0b49"
        }
      ]
    },
    {
      "bom-ref": "1ad5e0848f7e5ef9",
      "type": "file",
      "name": "/home/pvlib-python-0.13.0/.github/workflows/flake8.yml",
      "hashes": [
        {
          "alg": "SHA-1",
          "content": "07f5b78268b1dc9692a68808c809ab98c3ae0dbc"
        },
        {
          "alg": "SHA-256",
          "content": "a70be1065f079bf4249463cefd75542dbae3070410af92597febd00b1da10b7a"
        }
      ]
    },
    {
      "bom-ref": "c4f6fe4c99130525",
      "type": "file",
      "name": "/home/pvlib-python-0.13.0/.github/workflows/publish.yml",
      "hashes": [
        {
          "alg": "SHA-1",
          "content": "0e97d96c1bdcd8edc6cabacf861e1fd51e2bd097"
        },
        {
          "alg": "SHA-256",
          "content": "ab23a13c85309de0d369450614fff6e58647953d704bcc6b17b4a6333235f23b"
        }
      ]
    },
    {
      "bom-ref": "0a9ff5d5b6fe0a8b",
      "type": "file",
      "name": "/home/pvlib-python-0.13.0/.github/workflows/pytest-remote-data.yml",
      "hashes": [
        {
          "alg": "SHA-1",
          "content": "adc7b586f63d1f48b05367e6382f3ac980b868b5"
        },
        {
          "alg": "SHA-256",
          "content": "6e604ea2e397f5a93db0a3cad478497e7b53757111f6c91752998a6edbc1cdc8"
        }
      ]
    },
    {
      "bom-ref": "b258e6580b7f5ec8",
      "type": "file",
      "name": "/home/pvlib-python-0.13.0/.github/workflows/pytest.yml",
      "hashes": [
        {
          "alg": "SHA-1",
          "content": "f4c8e392f12ef660289c9f58617d2a40d9ee814d"
        },
        {
          "alg": "SHA-256",
          "content": "207e88a1488d125fe8bc928a5f0efe8750d78747714e19a1eb4c6ff6cb22e997"
        }
      ]
    },
    {
      "bom-ref": "b3284470c89d7881",
      "type": "file",
      "name": "/home/pvlib-python-0.13.0/.github/workflows/top-ranked-issues.yml",
      "hashes": [
        {
          "alg": "SHA-1",
          "content": "90281aca77bc2d7005f6184a3694955c71239f25"
        },
        {
          "alg": "SHA-256",
          "content": "310bb24d7df1214cdd68923dc712dcf18df468d5b2c48522091c473164cec29e"
        }
      ]
    }
  ],
  "upgrade": {
    "file_changes": {
      "old_version": "/home/pvlib-python-0.12.0",
      "New file": [
        "/home/pvlib-python-0.13.0/docs/examples/agrivoltaics/plot_agrivoltaics_ground_irradiance.py",
        "/home/pvlib-python-0.13.0/pvlib/iotools/psm4.py",
        "/home/pvlib-python-0.13.0/pvlib/ivtools/sdm/__init__.py",
        "/home/pvlib-python-0.13.0/pvlib/ivtools/sdm/_fit_desoto_pvsyst_sandia.py",
        "/home/pvlib-python-0.13.0/pvlib/ivtools/sdm/cec.py",
        "/home/pvlib-python-0.13.0/pvlib/ivtools/sdm/desoto.py",
        "/home/pvlib-python-0.13.0/pvlib/ivtools/sdm/pvsyst.py",
        "/home/pvlib-python-0.13.0/tests/iotools/test_psm4.py",
        "/home/pvlib-python-0.13.0/tests/ivtools/sdm/conftest.py",
        "/home/pvlib-python-0.13.0/tests/ivtools/sdm/test__fit_desoto_pvsyst_sandia.py",
        "/home/pvlib-python-0.13.0/tests/ivtools/sdm/test_cec.py",
        "/home/pvlib-python-0.13.0/tests/ivtools/sdm/test_desoto.py",
        "/home/pvlib-python-0.13.0/tests/ivtools/sdm/test_pvsyst.py"
      ],
      "Deleted file": [
        "/home/pvlib-python-0.12.0/pvlib/ivtools/sdm.py",
        "/home/pvlib-python-0.12.0/tests/ivtools/test_sdm.py"
      ],
      "Modified file": [
        {
          "file": "/home/pvlib-python-0.13.0/docs/examples/system-models/plot_oedi_9068.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/docs/examples/system-models/plot_oedi_9068.py",
            "+++ /home/pvlib-python-0.13.0/docs/examples/system-models/plot_oedi_9068.py",
            "@@ -161,15 +161,15 @@",
            " # row-to-row shadows affect each cell in the module equally, we can assume",
            " # that the effect of shading is linear with the reduction in incident beam",
            " # irradiance. That means we can use pvlib’s infinite sheds model, which",
            " # penalizes incident beam irradiance according to the calculated shaded",
            " # module fraction and returns the average irradiance over the total module",
            " # surface.",
            " ",
            "-solar_position = location.get_solarposition(psm3.index, latitude, longitude)",
            "+solar_position = location.get_solarposition(psm3.index)",
            " tracker_angles = mount.get_orientation(",
            "     solar_position['apparent_zenith'],",
            "     solar_position['azimuth']",
            " )",
            " dni_extra = pvlib.irradiance.get_extra_radiation(psm3.index)",
            " ",
            " # note: this system is monofacial, so only calculate irradiance for the"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/docs/sphinx/source/conf.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/docs/sphinx/source/conf.py",
            "+++ /home/pvlib-python-0.13.0/docs/sphinx/source/conf.py",
            "@@ -62,15 +62,15 @@",
            " mathjax3_config = {'chtml': {'displayAlign': 'left',",
            "                              'displayIndent': '2em'}}",
            " ",
            " # Example configuration for intersphinx: refer to the Python standard library.",
            " intersphinx_mapping = {",
            "     'python': ('https://docs.python.org/3/', None),",
            "     'numpy': ('https://numpy.org/doc/stable/', None),",
            "-    'scipy': ('https://docs.scipy.org/doc/scipy/reference/', None),",
            "+    'scipy': ('https://docs.scipy.org/doc/scipy/', None),",
            "     'pandas': ('https://pandas.pydata.org/pandas-docs/stable', None),",
            "     'matplotlib': ('https://matplotlib.org/stable', None),",
            " }",
            " ",
            " # Enable hover tooltips",
            " hoverxref_auto_ref = True",
            " hoverxref_roles = [",
            "@@ -408,14 +408,49 @@",
            "                                 ' non-GUI backend, so cannot show the figure.')",
            " ",
            " # %% helper functions for intelligent \"View on Github\" linking",
            " # based on",
            " # https://gist.github.com/flying-sheep/b65875c0ce965fbdd1d9e5d0b9851ef1",
            " ",
            " ",
            "+# select correct base URL depending on the build system context",
            "+def get_source_files_base_url():",
            "+    \"\"\"",
            "+    Get the base URL for the source code to generate links to GitHub source.",
            "+    If the build is on ReadTheDocs and it's a stable version, use the",
            "+    versioned link. If it's a latest version, use the main link.",
            "+",
            "+    For other builds (e.g. pull requests), use the main link.",
            "+    Local builds will also use the main link.",
            "+",
            "+    Resulting base URL should end with a trailing slash.",
            "+",
            "+    See https://docs.readthedocs.com/platform/stable/reference/environment-variables.html",
            "+    \"\"\"  # noqa: E501",
            "+    repo_url = os.environ.get(",
            "+        \"READTHEDOCS_GIT_CLONE_URL\",",
            "+        default=\"https://github.com/pvlib/pvlib-python\",",
            "+    )",
            "+    READTHEDOCS_ENV = os.environ.get(\"READTHEDOCS\", None) == \"True\"",
            "+    READTHEDOCS_VERSION = os.environ.get(\"READTHEDOCS_VERSION\", None)",
            "+    READTHEDOCS_GIT_IDENTIFIER = os.environ.get(",
            "+        \"READTHEDOCS_GIT_IDENTIFIER\", None",
            "+    )",
            "+    if READTHEDOCS_ENV:  # Building docs on ReadTheDocs",
            "+        if READTHEDOCS_VERSION == \"latest\":  # latest version, commited to main",
            "+            repo_url += \"/blob/main/\"",
            "+        elif READTHEDOCS_VERSION == \"stable\":  # stable version, has a tag",
            "+            repo_url += f\"/blob/{READTHEDOCS_GIT_IDENTIFIER}/\"",
            "+        else:  # pull request, user and branch are unknown so use main",
            "+            repo_url += \"/blob/main/\"",
            "+    else:  # Local build",
            "+        repo_url += \"/blob/main/\"  # can't tell where to point to",
            "+    return repo_url",
            "+",
            "+",
            " def get_obj_module(qualname):",
            "     \"\"\"",
            "     Get a module/class/attribute and its original module by qualname.",
            "     Useful for looking up the original location when a function is imported",
            "     into an __init__.py",
            " ",
            "     Examples",
            "@@ -452,26 +487,26 @@",
            "         # This happens for methods that are not explicitly defined",
            "         # such as the __init__ method for a dataclass",
            "         return None, None",
            "     else:",
            "         return start, start + len(lines) - 1",
            " ",
            " ",
            "+URL_BASE = get_source_files_base_url()  # Edit on GitHub source code links",
            "+",
            "+",
            " def make_github_url(file_name):",
            "     \"\"\"",
            "     Generate the appropriate GH link for a given docs page.  This function",
            "     is intended for use in sphinx template files.",
            " ",
            "     The target URL is built differently based on the type of page.  The pydata",
            "     sphinx theme has a built-in `file_name` variable that looks like",
            "-    \"/docs/sphinx/source/api.rst\" or \"generated/pvlib.atmosphere.alt2pres.rst\"",
            "+    \"docs/sphinx/source/api.rst\" or \"generated/pvlib.atmosphere.alt2pres.rst\"",
            "     \"\"\"",
            "-",
            "-    URL_BASE = \"https://github.com/pvlib/pvlib-python/blob/main/\"",
            "-",
            "     # is it a gallery page?",
            "     if any(d in file_name for d in sphinx_gallery_conf['gallery_dirs']):",
            "         example_folder = file_name.split(\"/\")[-2]",
            "         if file_name.split(\"/\")[-1] == \"index.rst\":",
            "             example_file = \"README.rst\"",
            "         else:",
            "             example_file = file_name.split(\"/\")[-1].replace('.rst', '.py')"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/atmosphere.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/atmosphere.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/atmosphere.py",
            "@@ -143,76 +143,85 @@",
            "         Zenith angle of the sun. [degrees]",
            " ",
            "     model : string, default 'kastenyoung1989'",
            "         Available models include the following:",
            " ",
            "         * 'simple' - secant(apparent zenith angle) -",
            "           Note that this gives -Inf at zenith=90",
            "-        * 'kasten1966' - See reference [1] -",
            "-          requires apparent sun zenith",
            "-        * 'youngirvine1967' - See reference [2] -",
            "-          requires true sun zenith",
            "-        * 'kastenyoung1989' (default) - See reference [3] -",
            "-          requires apparent sun zenith",
            "-        * 'gueymard1993' - See reference [4] -",
            "-          requires apparent sun zenith",
            "-        * 'young1994' - See reference [5] -",
            "-          requires true sun zenith",
            "-        * 'pickering2002' - See reference [6] -",
            "-          requires apparent sun zenith",
            "-        * 'gueymard2003' - See references [7] and [8] -",
            "-          requires apparent sun zenith",
            "+        * 'kasten1966' - See [1]_ - requires apparent sun zenith",
            "+        * 'youngirvine1967' - See [2]_ - requires true sun zenith",
            "+        * 'kastenyoung1989' (default) - See [3]_ - requires apparent sun zenith",
            "+        * 'gueymard1993' - See [4]_, [5]_ - requires apparent sun zenith",
            "+        * 'young1994' - See [6]_ - requires true sun zenith",
            "+        * 'pickering2002' - See [7]_ - requires apparent sun zenith",
            "+        * 'gueymard2003' - See [8]_, [9]_ - requires apparent sun zenith",
            " ",
            "     Returns",
            "     -------",
            "     airmass_relative : numeric",
            "         Relative airmass at sea level. Returns NaN values for any",
            "         zenith angle greater than 90 degrees. [unitless]",
            " ",
            "     Notes",
            "     -----",
            "     Some models use apparent (refraction-adjusted) zenith angle while",
            "     other models use true (not refraction-adjusted) zenith angle. Apparent",
            "     zenith angles should be calculated at sea level.",
            " ",
            "+    Comparison among several models is reported in [10]_.",
            "+",
            "     References",
            "     ----------",
            "-    .. [1] Fritz Kasten. \"A New Table and Approximation Formula for the",
            "-       Relative Optical Air Mass\". Technical Report 136, Hanover, N.H.:",
            "-       U.S. Army Material Command, CRREL.",
            "+    .. [1] Fritz Kasten, \"A New Table and Approximation Formula for the",
            "+       Relative Optical Air Mass,\" CRREL (U.S. Army), Hanover, NH, USA,",
            "+       Technical Report 136, 1965.",
            "+       :doi:`11681/5671`",
            " ",
            "     .. [2] A. T. Young and W. M. Irvine, \"Multicolor Photoelectric",
            "-       Photometry of the Brighter Planets,\" The Astronomical Journal, vol.",
            "-       72, pp. 945-950, 1967.",
            "-",
            "-    .. [3] Fritz Kasten and Andrew Young. \"Revised optical air mass tables",
            "-       and approximation formula\". Applied Optics 28:4735-4738",
            "+       Photometry of the Brighter Planets. I. Program and Procedure,\"",
            "+       The Astronomical Journal, vol. 72, pp. 945-950, 1967.",
            "+       :doi:`10.1086/110366`",
            "+",
            "+    .. [3] Fritz Kasten and Andrew Young, \"Revised optical air mass tables",
            "+       and approximation formula,\" Applied Optics 28:4735-4738, 1989.",
            "+       :doi:`10.1364/AO.28.004735`",
            " ",
            "     .. [4] C. Gueymard, \"Critical analysis and performance assessment of",
            "        clear sky solar irradiance models using theoretical and measured",
            "        data,\" Solar Energy, vol. 51, pp. 121-138, 1993.",
            "+       :doi:`10.1016/0038-092X(93)90074-X`",
            " ",
            "-    .. [5] A. T. Young, \"AIR-MASS AND REFRACTION,\" Applied Optics, vol. 33,",
            "-       pp. 1108-1110, Feb 1994.",
            "+    .. [5] C. Gueymard, \"Development and performance assessment of a clear",
            "+       sky spectral radiation model,” in Proc. of the 22nd ASES Conference,",
            "+       Solar ’93, 1993, pp. 433–438.",
            " ",
            "-    .. [6] Keith A. Pickering. \"The Ancient Star Catalog\". DIO 12:1, 20,",
            "+    .. [6] A. T. Young, \"Air-Mass and Refraction,\" Applied Optics, vol. 33,",
            "+       pp. 1108-1110, Feb. 1994.",
            "+       :doi:`10.1364/AO.33.001108`",
            " ",
            "-    .. [7] C. Gueymard, \"Direct solar transmittance and irradiance",
            "+    .. [7] Keith A. Pickering, \"The Southern Limits of the Ancient Star Catalog",
            "+       and the Commentary of Hipparchos,\" DIO, vol. 12, pp. 3-27, Sept. 2002.",
            "+       Available at `DIO <http://dioi.org/jc01.pdf>`_",
            "+",
            "+    .. [8] C. Gueymard, \"Direct solar transmittance and irradiance",
            "        predictions with broadband models. Part I: detailed theoretical",
            "        performance assessment\". Solar Energy, vol 74, pp. 355-379, 2003.",
            "        :doi:`10.1016/S0038-092X(03)00195-6`",
            " ",
            "-    .. [8] C. Gueymard (2019). Clear-Sky Radiation Models and Aerosol Effects.",
            "-       In: Polo, J., Martín-Pomares, L., Sanfilippo, A. (eds) Solar Resources",
            "-       Mapping. Green Energy and Technology. Springer, Cham.",
            "+    .. [9] C. Gueymard, \"Clear-Sky Radiation Models and Aerosol Effects\", in",
            "+       Solar Resources Mapping: Fundamentals and Applications,",
            "+       Polo, J., Martín-Pomares, L., Sanfilippo, A. (Eds), Cham, CH: Springer,",
            "+       2019, pp. 137-182.",
            "        :doi:`10.1007/978-3-319-97484-2_5`",
            " ",
            "-    .. [9] Matthew J. Reno, Clifford W. Hansen and Joshua S. Stein, \"Global",
            "+    .. [10] Matthew J. Reno, Clifford W. Hansen and Joshua S. Stein, \"Global",
            "        Horizontal Irradiance Clear Sky Models: Implementation and Analysis\"",
            "-       Sandia Report, (2012).",
            "+       Sandia National Laboratories, Albuquerque, NM, USA, SAND2012-2389, 2012.",
            "+       :doi:`10.2172/1039404`",
            "+",
            "     '''",
            " ",
            "     # set zenith values greater than 90 to nans",
            "     z = np.where(zenith > 90, np.nan, zenith)",
            "     zenith_rad = np.radians(z)",
            " ",
            "     model = model.lower()",
            "@@ -232,15 +241,15 @@",
            "         am = sec_zen * (1 - 0.0012 * (sec_zen * sec_zen - 1))",
            "     elif 'young1994' == model:",
            "         am = ((1.002432*((np.cos(zenith_rad)) ** 2) +",
            "               0.148386*(np.cos(zenith_rad)) + 0.0096467) /",
            "               (np.cos(zenith_rad) ** 3 +",
            "               0.149864*(np.cos(zenith_rad) ** 2) +",
            "               0.0102963*(np.cos(zenith_rad)) + 0.000303978))",
            "-    elif 'gueymard1993' == model:",
            "+    elif 'gueymard1993' == model:  # [4], Eq. 22 and [5], Eq. 3b",
            "         am = (1.0 / (np.cos(zenith_rad) +",
            "               0.00176759*(z)*((94.37515 - z) ** - 1.21563)))",
            "     elif 'gueymard2003' == model:",
            "         am = (1.0 / (np.cos(zenith_rad) +",
            "               0.48353*(z**0.095846)/(96.741 - z)**1.754))",
            "     else:",
            "         raise ValueError('%s is not a valid model for relativeairmass', model)"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/bifacial/infinite_sheds.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/bifacial/infinite_sheds.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/bifacial/infinite_sheds.py",
            "@@ -5,41 +5,43 @@",
            " import numpy as np",
            " import pandas as pd",
            " from pvlib.tools import cosd, sind, tand",
            " from pvlib.bifacial import utils",
            " from pvlib.irradiance import beam_component, aoi, haydavies",
            " ",
            " ",
            "-def _poa_ground_shadows(poa_ground, f_gnd_beam, df, vf_gnd_sky):",
            "+def _poa_ground_shadows(ghi, dhi, albedo, f_gnd_beam, vf_gnd_sky):",
            "     \"\"\"",
            "     Reduce ground-reflected irradiance to the tilted plane (poa_ground) to",
            "     account for shadows on the ground.",
            " ",
            "     Parameters",
            "     ----------",
            "-    poa_ground : numeric",
            "-        Ground reflected irradiance on the tilted surface, assuming full GHI",
            "-        illumination on all of the ground. [W/m^2]",
            "+    ghi : numeric",
            "+        Global horizontal irradiance, with no adjustments. [W/m^2]",
            "+    dhi : numeric",
            "+        Diffuse horizontal irradiance, with no adjustments. [W/m^2]",
            "+    albedo : numeric",
            "+        Ground albedo, the ratio of reflected to incident irradiance of the",
            "+        ground surface. [W/m^2]",
            "     f_gnd_beam : numeric",
            "         Fraction of the distance between rows that is illuminated (unshaded).",
            "         [unitless]",
            "-    df : numeric",
            "-        Diffuse fraction, the ratio of DHI to GHI. [unitless]",
            "     vf_gnd_sky : numeric",
            "         View factor from the ground to the sky, integrated along the distance",
            "         between rows. [unitless]",
            " ",
            "     Returns",
            "     -------",
            "     poa_gnd_sky : numeric",
            "         Adjusted ground-reflected irradiance accounting for shadows on the",
            "         ground. [W/m^2]",
            " ",
            "     \"\"\"",
            "-    return poa_ground * (f_gnd_beam*(1 - df) + df*vf_gnd_sky)",
            "+    return albedo * (f_gnd_beam * (ghi - dhi) + vf_gnd_sky * dhi)",
            " ",
            " ",
            " def _poa_sky_diffuse_pv(dhi, gcr, surface_tilt):",
            "     r\"\"\"",
            "     Integrated view factors from the shaded and unshaded parts of",
            "     the row slant height to the sky.",
            " ",
            "@@ -335,26 +337,19 @@",
            "     # Total sky diffuse received by both shaded and unshaded portions",
            "     poa_sky_pv = _poa_sky_diffuse_pv(dhi, gcr, surface_tilt)",
            " ",
            "     # irradiance reflected from the ground before accounting for shadows",
            "     # and restricted views",
            "     # this is a deviation from [1], because the row to ground view factor",
            "     # is accounted for in a different manner",
            "-    ground_diffuse = ghi * albedo",
            "-",
            "-    # diffuse fraction",
            "-    diffuse_fraction = np.clip(dhi / ghi, 0., 1.)",
            "-    # make diffuse fraction 0 when ghi is small",
            "-    diffuse_fraction = np.where(ghi < 0.0001, 0., diffuse_fraction)",
            "-",
            "     # Reduce ground-reflected irradiance because other rows in the array",
            "     # block irradiance from reaching the ground.",
            "     # [2], Eq. 9",
            "-    ground_diffuse = _poa_ground_shadows(",
            "-        ground_diffuse, f_gnd_beam, diffuse_fraction, vf_gnd_sky)",
            "+    ground_diffuse = _poa_ground_shadows(ghi, dhi, albedo, f_gnd_beam,",
            "+                                         vf_gnd_sky)",
            " ",
            "     # Ground-reflected irradiance on the row surface accounting for",
            "     # the view to the ground. This deviates from [1], Eq. 10, 11 and",
            "     # subsequent. Here, the row to ground view factor is computed. In [1],",
            "     # the usual ground-reflected irradiance includes the single row to ground",
            "     # view factor (1 - cos(tilt))/2, and Eq. 10, 11 and later multiply",
            "     # this quantity by a ratio of view factors."
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/iotools/__init__.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/iotools/__init__.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/iotools/__init__.py",
            "@@ -7,14 +7,19 @@",
            " from pvlib.iotools.midc import read_midc_raw_data_from_nrel  # noqa: F401",
            " from pvlib.iotools.crn import read_crn  # noqa: F401",
            " from pvlib.iotools.solrad import read_solrad  # noqa: F401",
            " from pvlib.iotools.solrad import get_solrad  # noqa: F401",
            " from pvlib.iotools.psm3 import get_psm3  # noqa: F401",
            " from pvlib.iotools.psm3 import read_psm3  # noqa: F401",
            " from pvlib.iotools.psm3 import parse_psm3  # noqa: F401",
            "+from pvlib.iotools.psm4 import get_nsrdb_psm4_aggregated  # noqa: F401",
            "+from pvlib.iotools.psm4 import get_nsrdb_psm4_tmy  # noqa: F401",
            "+from pvlib.iotools.psm4 import get_nsrdb_psm4_conus  # noqa: F401",
            "+from pvlib.iotools.psm4 import get_nsrdb_psm4_full_disc  # noqa: F401",
            "+from pvlib.iotools.psm4 import read_nsrdb_psm4  # noqa: F401",
            " from pvlib.iotools.pvgis import get_pvgis_tmy, read_pvgis_tmy  # noqa: F401",
            " from pvlib.iotools.pvgis import read_pvgis_hourly  # noqa: F401",
            " from pvlib.iotools.pvgis import get_pvgis_hourly  # noqa: F401",
            " from pvlib.iotools.pvgis import get_pvgis_horizon  # noqa: F401",
            " from pvlib.iotools.bsrn import get_bsrn  # noqa: F401",
            " from pvlib.iotools.bsrn import read_bsrn  # noqa: F401",
            " from pvlib.iotools.bsrn import parse_bsrn  # noqa: F401"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/iotools/bsrn.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/iotools/bsrn.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/iotools/bsrn.py",
            "@@ -5,14 +5,17 @@",
            " import pandas as pd",
            " import gzip",
            " import ftplib",
            " import warnings",
            " import io",
            " import os",
            " ",
            "+from pvlib.tools import _file_context_manager",
            "+from pvlib._deprecation import deprecated",
            "+",
            " BSRN_FTP_URL = \"ftp.bsrn.awi.de\"",
            " ",
            " BSRN_LR0100_COL_SPECS = [(0, 3), (4, 9), (10, 16), (16, 22), (22, 27),",
            "                          (27, 32), (32, 39), (39, 45), (45, 50), (50, 55),",
            "                          (55, 64), (64, 70), (70, 75)]",
            " ",
            " BSRN_LR0300_COL_SPECS = [(1, 3), (4, 9), (10, 16), (16, 22), (22, 27),",
            "@@ -105,15 +108,15 @@",
            "         If the specified station does not exist on the FTP server.",
            " ",
            "     Warns",
            "     -----",
            "     UserWarning",
            "         If one or more requested files are missing a UserWarning is returned",
            "         with a list of the filenames missing. If no files match the specified",
            "-        station and timeframe a seperate UserWarning is given.",
            "+        station and timeframe a separate UserWarning is given.",
            " ",
            "     Notes",
            "     -----",
            "     The username and password for the BSRN FTP server can be obtained for free",
            "     as described in the BSRN's Data Release Guidelines [3]_.",
            " ",
            "     Currently only parsing of logical records 0100, 0300 and 0500 is supported.",
            "@@ -132,15 +135,15 @@",
            "     >>> # Retrieve two months irradiance data from the Cabauw BSRN station",
            "     >>> data, metadata = pvlib.iotools.get_bsrn(  # doctest: +SKIP",
            "     >>>     start=pd.Timestamp(2020,1,1), end=pd.Timestamp(2020,12,1),   # doctest: +SKIP",
            "     >>>     station='cab', username='yourusername', password='yourpassword')  # doctest: +SKIP",
            " ",
            "     See Also",
            "     --------",
            "-    pvlib.iotools.read_bsrn, pvlib.iotools.parse_bsrn",
            "+    pvlib.iotools.read_bsrn",
            " ",
            "     References",
            "     ----------",
            "     .. [1] `World Radiation Monitoring Center - Baseline Surface Radiation",
            "         Network (BSRN)",
            "         <https://bsrn.awi.de/>`_",
            "     .. [2] `BSRN Data Retrieval via FTP",
            "@@ -155,16 +158,15 @@",
            "     station = station.lower()",
            " ",
            "     # Use pd.to_datetime so that strings (e.g. '2021-01-01') are accepted",
            "     start = pd.to_datetime(start)",
            "     end = pd.to_datetime(end)",
            " ",
            "     # Generate list files to download based on start/end (SSSMMYY.dat.gz)",
            "-    filenames = pd.date_range(",
            "-        start, end.replace(day=1) + pd.DateOffset(months=1), freq='1M')\\",
            "+    filenames = pd.date_range(start.date().replace(day=1), end, freq='1MS')\\",
            "         .strftime(f\"{station}%m%y.dat.gz\").tolist()",
            " ",
            "     # Create FTP connection",
            "     with ftplib.FTP(BSRN_FTP_URL, username, password) as ftp:",
            "         # Change to station sub-directory (checks that the station exists)",
            "         try:",
            "             ftp.cwd(f'/{station}')",
            "@@ -187,15 +189,15 @@",
            "                     # Create local file",
            "                     with open(os.path.join(save_path, filename), 'wb') as f:",
            "                         f.write(bio.getbuffer())  # Write local file",
            "                 # Open gzip file and convert to StringIO",
            "                 bio.seek(0)  # reset buffer to start of file",
            "                 gzip_file = io.TextIOWrapper(gzip.GzipFile(fileobj=bio),",
            "                                              encoding='latin1')",
            "-                dfi, metadata = parse_bsrn(gzip_file, logical_records)",
            "+                dfi, metadata = _parse_bsrn(gzip_file, logical_records)",
            "                 dfs.append(dfi)",
            "             # FTP client raises an error if the file does not exist on server",
            "             except ftplib.error_perm as e:",
            "                 if str(e) == '550 Failed to open file.':",
            "                     non_existing_files.append(filename)",
            "                 else:",
            "                     raise ftplib.error_perm(e)",
            "@@ -213,15 +215,15 @@",
            "     else:  # Return empty dataframe",
            "         data = _empty_dataframe_from_logical_records(logical_records)",
            "         metadata = {}",
            "     # Return dataframe and metadata (metadata belongs to last available file)",
            "     return data, metadata",
            " ",
            " ",
            "-def parse_bsrn(fbuf, logical_records=('0100',)):",
            "+def _parse_bsrn(fbuf, logical_records=('0100',)):",
            "     \"\"\"",
            "     Parse a file-like buffer of a BSRN station-to-archive file.",
            " ",
            "     Parameters",
            "     ----------",
            "     fbuf: file-like buffer",
            "         Buffer of a BSRN station-to-archive data file",
            "@@ -378,15 +380,15 @@",
            "     BSRN files are freely available and can be accessed via FTP [3]_. The",
            "     username and password for the BSRN FTP server can be obtained for free as",
            "     described in the BSRN's Data Release Guidelines [3]_.",
            " ",
            "     Parameters",
            "     ----------",
            "     filename: str or path-like",
            "-        Name or path of a BSRN station-to-archive data file",
            "+        Name, path, or in-memory buffer of a BSRN station-to-archive data file",
            "     logical_records: list or tuple, default: ('0100',)",
            "         List of the logical records (LR) to parse. Options include: '0100',",
            "         '0300', and '0500'.",
            " ",
            "     Returns",
            "     -------",
            "     data: DataFrame",
            "@@ -435,15 +437,15 @@",
            "     Hint",
            "     ----",
            "     According to [2]_ \"All time labels in the station-to-archive files denote",
            "     the start of a time interval.\" This corresponds to left bin edge labeling.",
            " ",
            "     See Also",
            "     --------",
            "-    pvlib.iotools.parse_bsrn, pvlib.iotools.get_bsrn",
            "+    pvlib.iotools.get_bsrn",
            " ",
            "     References",
            "     ----------",
            "     .. [1] `World Radiation Monitoring Center - Baseline Surface Radiation",
            "         Network (BSRN)",
            "         <https://bsrn.awi.de/>`_",
            "     .. [2] `Update of the Technical Plan for BSRN Data Management, 2013,",
            "@@ -453,11 +455,15 @@",
            "        <https://bsrn.awi.de/data/data-retrieval-via-ftp/>`_",
            "     .. [4] `BSRN Data Release Guidelines",
            "        <https://bsrn.awi.de/data/conditions-of-data-release/>`_",
            "     \"\"\"  # noqa: E501",
            "     if str(filename).endswith('.gz'):  # check if file is a gzipped (.gz) file",
            "         open_func, mode = gzip.open, 'rt'",
            "     else:",
            "-        open_func, mode = open, 'r'",
            "+        open_func, mode = _file_context_manager, 'r'",
            "     with open_func(filename, mode) as f:",
            "-        content = parse_bsrn(f, logical_records)",
            "+        content = _parse_bsrn(f, logical_records)",
            "     return content",
            "+",
            "+",
            "+parse_bsrn = deprecated(since=\"0.13.0\", name=\"parse_bsrn\",",
            "+                        alternative=\"read_bsrn\")(read_bsrn)"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/iotools/epw.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/iotools/epw.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/iotools/epw.py",
            "@@ -2,14 +2,17 @@",
            " Import functions for EPW data files.",
            " \"\"\"",
            " ",
            " import io",
            " from urllib.request import urlopen, Request",
            " import pandas as pd",
            " ",
            "+from pvlib.tools import _file_context_manager",
            "+from pvlib._deprecation import deprecated",
            "+",
            " ",
            " def read_epw(filename, coerce_year=None):",
            "     r'''",
            "     Read an EPW file in to a pandas dataframe.",
            " ",
            "     Note that values contained in the metadata dictionary are unchanged",
            "     from the EPW file.",
            "@@ -19,15 +22,16 @@",
            "     https://energyplus.net/weather , http://climate.onebuilding.org or",
            "     http://www.ladybug.tools/epwmap/",
            " ",
            " ",
            "     Parameters",
            "     ----------",
            "     filename : String",
            "-        Can be a relative file path, absolute file path, or url.",
            "+        Can be a relative file path, absolute file path, url, or in-memory",
            "+        file buffer.",
            " ",
            "     coerce_year : int, optional",
            "         If supplied, the year of the data will be set to this value. This can",
            "         be a useful feature because EPW data is composed of data from",
            "         different years.",
            "         Warning: EPW files always have 365*24 = 8760 data rows;",
            "         be careful with the use of leap years.",
            "@@ -39,18 +43,14 @@",
            "         A pandas dataframe with the columns described in the table",
            "         below. For more detailed descriptions of each component, please",
            "         consult the EnergyPlus Auxiliary Programs documentation [1]_",
            " ",
            "     metadata : dict",
            "         The site metadata available in the file.",
            " ",
            "-    See Also",
            "-    --------",
            "-    pvlib.iotools.parse_epw",
            "-",
            "     Notes",
            "     -----",
            " ",
            "     The returned structures have the following fields.",
            " ",
            "     ===============   ======  =========================================",
            "     key               format  description",
            "@@ -222,26 +222,25 @@",
            "         # See comments above for possible online sources",
            "         request = Request(filename, headers={'User-Agent': (",
            "             'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) '",
            "             'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 '",
            "             'Safari/537.36')})",
            "         response = urlopen(request)",
            "         with io.StringIO(response.read().decode(errors='ignore')) as csvdata:",
            "-            data, meta = parse_epw(csvdata, coerce_year)",
            "+            data, meta = _parse_epw(csvdata, coerce_year)",
            " ",
            "     else:",
            "-        # Assume it's accessible via the file system",
            "-        with open(str(filename), 'r') as csvdata:",
            "-            data, meta = parse_epw(csvdata, coerce_year)",
            "-",
            "+        # Assume it's a buffer or accessible via the file system",
            "+        with _file_context_manager(filename, 'r') as csvdata:",
            "+            data, meta = _parse_epw(csvdata, coerce_year)",
            " ",
            "     return data, meta",
            " ",
            " ",
            "-def parse_epw(csvdata, coerce_year=None):",
            "+def _parse_epw(csvdata, coerce_year=None):",
            "     \"\"\"",
            "     Given a file-like buffer with data in Energy Plus Weather (EPW) format,",
            "     parse the data into a dataframe.",
            " ",
            "     Parameters",
            "     ----------",
            "     csvdata : file-like buffer",
            "@@ -306,7 +305,11 @@",
            "     hrs = (data['hour'] - 1).astype(str).str.zfill(2)",
            "     dtscat = data['year'].astype(str) + dts['month'] + dts['day'] + hrs",
            "     idx = pd.to_datetime(dtscat, format='%Y%m%d%H')",
            "     idx = idx.dt.tz_localize(int(meta['TZ'] * 3600))",
            "     data.index = idx",
            " ",
            "     return data, meta",
            "+",
            "+",
            "+parse_epw = deprecated(since=\"0.13.0\", name=\"parse_epw\",",
            "+                       alternative=\"read_epw\")(read_epw)"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/iotools/psm3.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/iotools/psm3.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/iotools/psm3.py",
            "@@ -3,16 +3,16 @@",
            " see https://developer.nrel.gov/docs/solar/nsrdb/psm3_data_download/",
            " \"\"\"",
            " ",
            " import io",
            " import requests",
            " import pandas as pd",
            " from json import JSONDecodeError",
            "-import warnings",
            "-from pvlib._deprecation import pvlibDeprecationWarning",
            "+from pvlib._deprecation import deprecated",
            "+from pvlib import tools",
            " ",
            " NSRDB_API_BASE = \"https://developer.nrel.gov\"",
            " PSM_URL = NSRDB_API_BASE + \"/api/nsrdb/v2/solar/psm3-2-2-download.csv\"",
            " TMY_URL = NSRDB_API_BASE + \"/api/nsrdb/v2/solar/psm3-tmy-download.csv\"",
            " PSM5MIN_URL = NSRDB_API_BASE + \"/api/nsrdb/v2/solar/psm3-5min-download.csv\"",
            " ",
            " ATTRIBUTES = (",
            "@@ -123,15 +123,15 @@",
            " ",
            "     Returns",
            "     -------",
            "     data : pandas.DataFrame",
            "         timeseries data from NREL PSM3",
            "     metadata : dict",
            "         metadata from NREL PSM3 about the record, see",
            "-        :func:`pvlib.iotools.parse_psm3` for fields",
            "+        :func:`pvlib.iotools.read_psm3` for fields",
            " ",
            "     Raises",
            "     ------",
            "     requests.HTTPError",
            "         if the request response status is not ok, then the ``'errors'`` field",
            "         from the JSON response or any error message in the content will be",
            "         raised as an exception, for example if the `api_key` was rejected or if",
            "@@ -148,15 +148,15 @@",
            "     .. warning:: PSM3 is limited to data found in the NSRDB, please consult the",
            "         references below for locations with available data. Additionally,",
            "         querying data with < 30-minute resolution uses a different API endpoint",
            "         with fewer available fields (see [4]_).",
            " ",
            "     See Also",
            "     --------",
            "-    pvlib.iotools.read_psm3, pvlib.iotools.parse_psm3",
            "+    pvlib.iotools.read_psm3",
            " ",
            "     References",
            "     ----------",
            " ",
            "     .. [1] `NREL National Solar Radiation Database (NSRDB)",
            "        <https://nsrdb.nrel.gov/>`_",
            "     .. [2] `Physical Solar Model (PSM) v3.2.2",
            "@@ -212,31 +212,31 @@",
            "             errors = response.json()['errors']",
            "         except JSONDecodeError:",
            "             errors = response.content.decode('utf-8')",
            "         raise requests.HTTPError(errors, response=response)",
            "     # the CSV is in the response content as a UTF-8 bytestring",
            "     # to use pandas we need to create a file buffer from the response",
            "     fbuf = io.StringIO(response.content.decode('utf-8'))",
            "-    return parse_psm3(fbuf, map_variables)",
            "+    return read_psm3(fbuf, map_variables)",
            " ",
            " ",
            "-def parse_psm3(fbuf, map_variables=True):",
            "+def read_psm3(filename, map_variables=True):",
            "     \"\"\"",
            "-    Parse an NSRDB PSM3 weather file (formatted as SAM CSV). The NSRDB",
            "+    Read an NSRDB PSM3 weather file (formatted as SAM CSV). The NSRDB",
            "     is described in [1]_ and the SAM CSV format is described in [2]_.",
            " ",
            "     .. versionchanged:: 0.9.0",
            "        The function now returns a tuple where the first element is a dataframe",
            "        and the second element is a dictionary containing metadata. Previous",
            "        versions of this function had the return values switched.",
            " ",
            "     Parameters",
            "     ----------",
            "-    fbuf: file-like object",
            "-        File-like object containing data to read.",
            "+    filename: str, path-like, or buffer",
            "+        Filename or in-memory buffer of a file containing data to read.",
            "     map_variables: bool, default True",
            "         When true, renames columns of the Dataframe to pvlib variable names",
            "         where applicable. See variable :const:`VARIABLE_MAP`.",
            " ",
            "     Returns",
            "     -------",
            "     data : pandas.DataFrame",
            "@@ -298,102 +298,68 @@",
            "     * Fill Flag 5",
            "     * Surface Albedo Units",
            "     * Version",
            " ",
            "     Examples",
            "     --------",
            "     >>> # Read a local PSM3 file:",
            "+    >>> df, metadata = iotools.read_psm3(\"data.csv\")  # doctest: +SKIP",
            "+",
            "+    >>> # Read a file object or an in-memory buffer:",
            "     >>> with open(filename, 'r') as f:  # doctest: +SKIP",
            "-    ...     df, metadata = iotools.parse_psm3(f)  # doctest: +SKIP",
            "+    ...     df, metadata = iotools.read_psm3(f)  # doctest: +SKIP",
            " ",
            "     See Also",
            "     --------",
            "-    pvlib.iotools.read_psm3, pvlib.iotools.get_psm3",
            "+    pvlib.iotools.get_psm3",
            " ",
            "     References",
            "     ----------",
            "     .. [1] `NREL National Solar Radiation Database (NSRDB)",
            "        <https://nsrdb.nrel.gov/>`_",
            "     .. [2] `Standard Time Series Data File Format",
            "        <https://web.archive.org/web/20170207203107/https://sam.nrel.gov/sites/default/files/content/documents/pdf/wfcsv.pdf>`_",
            "     \"\"\"",
            "-    # The first 2 lines of the response are headers with metadata",
            "-    metadata_fields = fbuf.readline().split(',')",
            "-    metadata_fields[-1] = metadata_fields[-1].strip()  # strip trailing newline",
            "-    metadata_values = fbuf.readline().split(',')",
            "-    metadata_values[-1] = metadata_values[-1].strip()  # strip trailing newline",
            "+    with tools._file_context_manager(filename) as fbuf:",
            "+        # The first 2 lines of the response are headers with metadata",
            "+        metadata_fields = fbuf.readline().split(',')",
            "+        metadata_values = fbuf.readline().split(',')",
            "+        # get the column names so we can set the dtypes",
            "+        columns = fbuf.readline().split(',')",
            "+        columns[-1] = columns[-1].strip()  # strip trailing newline",
            "+        # Since the header has so many columns, excel saves blank cols in the",
            "+        # data below the header lines.",
            "+        columns = [col for col in columns if col != '']",
            "+        dtypes = dict.fromkeys(columns, float)  # all floats except datevec",
            "+        dtypes.update({'Year': int, 'Month': int, 'Day': int, 'Hour': int,",
            "+                       'Minute': int, 'Cloud Type': int, 'Fill Flag': int})",
            "+        data = pd.read_csv(",
            "+            fbuf, header=None, names=columns, usecols=columns, dtype=dtypes,",
            "+            delimiter=',', lineterminator='\\n')  # skip carriage returns \\r",
            "+",
            "+    metadata_fields[-1] = metadata_fields[-1].strip()  # trailing newline",
            "+    metadata_values[-1] = metadata_values[-1].strip()  # trailing newline",
            "     metadata = dict(zip(metadata_fields, metadata_values))",
            "     # the response is all strings, so set some metadata types to numbers",
            "     metadata['Local Time Zone'] = int(metadata['Local Time Zone'])",
            "     metadata['Time Zone'] = int(metadata['Time Zone'])",
            "     metadata['Latitude'] = float(metadata['Latitude'])",
            "     metadata['Longitude'] = float(metadata['Longitude'])",
            "     metadata['Elevation'] = int(metadata['Elevation'])",
            "-    # get the column names so we can set the dtypes",
            "-    columns = fbuf.readline().split(',')",
            "-    columns[-1] = columns[-1].strip()  # strip trailing newline",
            "-    # Since the header has so many columns, excel saves blank cols in the",
            "-    # data below the header lines.",
            "-    columns = [col for col in columns if col != '']",
            "-    dtypes = dict.fromkeys(columns, float)  # all floats except datevec",
            "-    dtypes.update(Year=int, Month=int, Day=int, Hour=int, Minute=int)",
            "-    dtypes['Cloud Type'] = int",
            "-    dtypes['Fill Flag'] = int",
            "-    data = pd.read_csv(",
            "-        fbuf, header=None, names=columns, usecols=columns, dtype=dtypes,",
            "-        delimiter=',', lineterminator='\\n')  # skip carriage returns \\r",
            "+",
            "     # the response 1st 5 columns are a date vector, convert to datetime",
            "-    dtidx = pd.to_datetime(",
            "-        data[['Year', 'Month', 'Day', 'Hour', 'Minute']])",
            "+    dtidx = pd.to_datetime(data[['Year', 'Month', 'Day', 'Hour', 'Minute']])",
            "     # in USA all timezones are integers",
            "     tz = 'Etc/GMT%+d' % -metadata['Time Zone']",
            "     data.index = pd.DatetimeIndex(dtidx).tz_localize(tz)",
            " ",
            "     if map_variables:",
            "         data = data.rename(columns=VARIABLE_MAP)",
            "         metadata['latitude'] = metadata.pop('Latitude')",
            "         metadata['longitude'] = metadata.pop('Longitude')",
            "         metadata['altitude'] = metadata.pop('Elevation')",
            " ",
            "     return data, metadata",
            " ",
            " ",
            "-def read_psm3(filename, map_variables=True):",
            "-    \"\"\"",
            "-    Read an NSRDB PSM3 weather file (formatted as SAM CSV). The NSRDB",
            "-    is described in [1]_ and the SAM CSV format is described in [2]_.",
            "-",
            "-    .. versionchanged:: 0.9.0",
            "-       The function now returns a tuple where the first element is a dataframe",
            "-       and the second element is a dictionary containing metadata. Previous",
            "-       versions of this function had the return values switched.",
            "-",
            "-    Parameters",
            "-    ----------",
            "-    filename: str",
            "-        Filename of a file containing data to read.",
            "-    map_variables: bool, default True",
            "-        When true, renames columns of the Dataframe to pvlib variable names",
            "-        where applicable. See variable :const:`VARIABLE_MAP`.",
            "-",
            "-    Returns",
            "-    -------",
            "-    data : pandas.DataFrame",
            "-        timeseries data from NREL PSM3",
            "-    metadata : dict",
            "-        metadata from NREL PSM3 about the record, see",
            "-        :func:`pvlib.iotools.parse_psm3` for fields",
            "-",
            "-    See Also",
            "-    --------",
            "-    pvlib.iotools.parse_psm3, pvlib.iotools.get_psm3",
            "-",
            "-    References",
            "-    ----------",
            "-    .. [1] `NREL National Solar Radiation Database (NSRDB)",
            "-       <https://nsrdb.nrel.gov/>`_",
            "-    .. [2] `Standard Time Series Data File Format",
            "-       <https://web.archive.org/web/20170207203107/https://sam.nrel.gov/sites/default/files/content/documents/pdf/wfcsv.pdf>`_",
            "-    \"\"\"",
            "-    with open(str(filename), 'r') as fbuf:",
            "-        content = parse_psm3(fbuf, map_variables)",
            "-    return content",
            "+parse_psm3 = deprecated(since=\"0.13.0\", name=\"parse_psm3\",",
            "+                        alternative=\"read_psm3\")(read_psm3)"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/iotools/pvgis.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/iotools/pvgis.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/iotools/pvgis.py",
            "@@ -17,15 +17,15 @@",
            " import io",
            " import json",
            " from pathlib import Path",
            " import requests",
            " import numpy as np",
            " import pandas as pd",
            " import pytz",
            "-from pvlib.iotools import read_epw, parse_epw",
            "+from pvlib.iotools import read_epw",
            " ",
            " URL = 'https://re.jrc.ec.europa.eu/api/'",
            " ",
            " # Dictionary mapping PVGIS names to pvlib names",
            " VARIABLE_MAP = {",
            "     'G(h)': 'ghi',",
            "     'Gb(n)': 'dni',",
            "@@ -53,14 +53,20 @@",
            "                      mountingplace='free', loss=0, trackingtype=0,",
            "                      optimal_surface_tilt=False, optimalangles=False,",
            "                      url=URL, map_variables=True, timeout=30):",
            "     \"\"\"Get hourly solar irradiation and modeled PV power output from PVGIS.",
            " ",
            "     PVGIS data is freely available at [1]_.",
            " ",
            "+        .. versionchanged:: 0.13.0",
            "+           The function now returns two items ``(data,meta)``. Previous",
            "+           versions of this function returned three elements",
            "+           ``(data,inputs,meta)``. The ``inputs`` dictionary is now included in",
            "+           ``meta``, which has changed structure to accommodate it.",
            "+",
            "     Parameters",
            "     ----------",
            "     latitude: float",
            "         In decimal degrees, between -90 and 90, north is positive (ISO 19115)",
            "     longitude: float",
            "         In decimal degrees, between -180 and 180, east is positive (ISO 19115)",
            "     start : int or datetime like, optional",
            "@@ -126,16 +132,14 @@",
            "     timeout: int, default: 30",
            "         Time in seconds to wait for server response before timeout",
            " ",
            "     Returns",
            "     -------",
            "     data : pandas.DataFrame",
            "         Time-series of hourly data, see Notes for fields",
            "-    inputs : dict",
            "-        Dictionary of the request input parameters",
            "     metadata : dict",
            "         Dictionary containing metadata",
            " ",
            "     Raises",
            "     ------",
            "     requests.HTTPError",
            "         If the request response status is ``HTTP/1.1 400 BAD REQUEST``, then",
            "@@ -185,15 +189,15 @@",
            "     See Also",
            "     --------",
            "     pvlib.iotools.read_pvgis_hourly, pvlib.iotools.get_pvgis_tmy",
            " ",
            "     Examples",
            "     --------",
            "     >>> # Retrieve two years of irradiance data from PVGIS:",
            "-    >>> data, meta, inputs = pvlib.iotools.get_pvgis_hourly(  # doctest: +SKIP",
            "+    >>> data, meta = pvlib.iotools.get_pvgis_hourly(  # doctest: +SKIP",
            "     >>>    latitude=45, longitude=8, start=2015, end=2016)  # doctest: +SKIP",
            " ",
            "     References",
            "     ----------",
            "     .. [1] `PVGIS <https://ec.europa.eu/jrc/en/pvgis>`_",
            "     .. [2] `PVGIS Hourly Radiation",
            "        <https://ec.europa.eu/jrc/en/PVGIS/tools/hourly-radiation>`_",
            "@@ -237,47 +241,52 @@",
            "             raise requests.HTTPError(err_msg['message'])",
            " ",
            "     return read_pvgis_hourly(io.StringIO(res.text), pvgis_format=outputformat,",
            "                              map_variables=map_variables)",
            " ",
            " ",
            " def _parse_pvgis_hourly_json(src, map_variables):",
            "-    inputs = src['inputs']",
            "-    metadata = src['meta']",
            "+    metadata = src['meta'].copy()",
            "+    # Override the \"inputs\" in metadata",
            "+    metadata['inputs'] = src['inputs']",
            "+    # Re-add the inputs in metadata one-layer down",
            "+    metadata['inputs']['descriptions'] = src['meta']['inputs']",
            "     data = pd.DataFrame(src['outputs']['hourly'])",
            "     data.index = pd.to_datetime(data['time'], format='%Y%m%d:%H%M', utc=True)",
            "     data = data.drop('time', axis=1)",
            "     data = data.astype(dtype={'Int': 'int'})  # The 'Int' column to be integer",
            "     if map_variables:",
            "         data = data.rename(columns=VARIABLE_MAP)",
            "-    return data, inputs, metadata",
            "+    return data, metadata",
            " ",
            " ",
            " def _parse_pvgis_hourly_csv(src, map_variables):",
            "     # The first 4 rows are latitude, longitude, elevation, radiation database",
            "-    inputs = {}",
            "+    metadata = {'inputs': {}, 'descriptions': {}}",
            "+    # 'location' metadata",
            "     # 'Latitude (decimal degrees): 45.000\\r\\n'",
            "-    inputs['latitude'] = float(src.readline().split(':')[1])",
            "+    metadata['inputs']['latitude'] = float(src.readline().split(':')[1])",
            "     # 'Longitude (decimal degrees): 8.000\\r\\n'",
            "-    inputs['longitude'] = float(src.readline().split(':')[1])",
            "+    metadata['inputs']['longitude'] = float(src.readline().split(':')[1])",
            "     # Elevation (m): 1389.0\\r\\n",
            "-    inputs['elevation'] = float(src.readline().split(':')[1])",
            "+    metadata['inputs']['elevation'] = float(src.readline().split(':')[1])",
            "     # 'Radiation database: \\tPVGIS-SARAH\\r\\n'",
            "-    inputs['radiation_database'] = src.readline().split(':')[1].strip()",
            "+    metadata['inputs']['radiation_database'] = \\",
            "+        src.readline().split(':')[1].strip()",
            "     # Parse through the remaining metadata section (the number of lines for",
            "     # this section depends on the requested parameters)",
            "     while True:",
            "         line = src.readline()",
            "         if line.startswith('time,'):  # The data header starts with 'time,'",
            "             # The last line of the metadata section contains the column names",
            "             names = line.strip().split(',')",
            "             break",
            "         # Only retrieve metadata from non-empty lines",
            "         elif line.strip() != '':",
            "-            inputs[line.split(':')[0]] = line.split(':')[1].strip()",
            "+            metadata['inputs'][line.split(':')[0]] = line.split(':')[1].strip()",
            "         elif line == '':  # If end of file is reached",
            "             raise ValueError('No data section was detected. File has probably '",
            "                              'been modified since being downloaded from PVGIS')",
            "     # Save the entries from the data section to a list, until an empty line is",
            "     # reached an empty line. The length of the section depends on the request",
            "     data_lines = []",
            "     while True:",
            "@@ -291,24 +300,31 @@",
            "     data = data.drop('time', axis=1)",
            "     if map_variables:",
            "         data = data.rename(columns=VARIABLE_MAP)",
            "     # All columns should have the dtype=float, except 'Int' which should be",
            "     # integer. It is necessary to convert to float, before converting to int",
            "     data = data.astype(float).astype(dtype={'Int': 'int'})",
            "     # Generate metadata dictionary containing description of parameters",
            "-    metadata = {}",
            "+    metadata['descriptions'] = {}",
            "     for line in src.readlines():",
            "         if ':' in line:",
            "-            metadata[line.split(':')[0]] = line.split(':')[1].strip()",
            "-    return data, inputs, metadata",
            "+            metadata['descriptions'][line.split(':')[0]] = \\",
            "+                line.split(':')[1].strip()",
            "+    return data, metadata",
            " ",
            " ",
            " def read_pvgis_hourly(filename, pvgis_format=None, map_variables=True):",
            "     \"\"\"Read a PVGIS hourly file.",
            " ",
            "+        .. versionchanged:: 0.13.0",
            "+           The function now returns two items ``(data,meta)``. Previous",
            "+           versions of this function returned three elements",
            "+           ``(data,inputs,meta)``. The ``inputs`` dictionary is now included in",
            "+           ``meta``, which has changed structure to accommodate it.",
            "+",
            "     Parameters",
            "     ----------",
            "     filename : str, pathlib.Path, or file-like buffer",
            "         Name, path, or buffer of hourly data file downloaded from PVGIS.",
            "     pvgis_format : str, optional",
            "         Format of PVGIS file or buffer. Equivalent to the ``outputformat``",
            "         parameter in the PVGIS API. If ``filename`` is a file and",
            "@@ -319,16 +335,14 @@",
            "         When true, renames columns of the DataFrame to pvlib variable names",
            "         where applicable. See variable :const:`VARIABLE_MAP`.",
            " ",
            "     Returns",
            "     -------",
            "     data : pandas.DataFrame",
            "         the time series data",
            "-    inputs : dict",
            "-        the inputs",
            "     metadata : dict",
            "         metadata",
            " ",
            "     Warning",
            "     -------",
            "     The azimuth orientation specified in the output metadata does not",
            "     correspond to the pvlib convention, but is offset 180 degrees.",
            "@@ -369,29 +383,30 @@",
            "             src = json.load(filename)",
            "         except AttributeError:  # str/path has no .read() attribute",
            "             with open(str(filename), 'r') as fbuf:",
            "                 src = json.load(fbuf)",
            "         return _parse_pvgis_hourly_json(src, map_variables=map_variables)",
            " ",
            "     # CSV: use _parse_pvgis_hourly_csv()",
            "-    if outputformat == 'csv':",
            "+    elif outputformat == 'csv':",
            "         try:",
            "             pvgis_data = _parse_pvgis_hourly_csv(",
            "                 filename, map_variables=map_variables)",
            "         except AttributeError:  # str/path has no .read() attribute",
            "             with open(str(filename), 'r') as fbuf:",
            "                 pvgis_data = _parse_pvgis_hourly_csv(",
            "                     fbuf, map_variables=map_variables)",
            "         return pvgis_data",
            " ",
            "-    # raise exception if pvgis format isn't in ['csv', 'json']",
            "-    err_msg = (",
            "-        \"pvgis format '{:s}' was unknown, must be either 'json' or 'csv'\")\\",
            "-        .format(outputformat)",
            "-    raise ValueError(err_msg)",
            "+    else:",
            "+        # raise exception if pvgis format isn't in ['csv', 'json']",
            "+        err_msg = (",
            "+            \"pvgis format '{:s}' was unknown, must be either 'json' or 'csv'\")\\",
            "+            .format(outputformat)",
            "+        raise ValueError(err_msg)",
            " ",
            " ",
            " def _coerce_and_roll_tmy(tmy_data, tz, year):",
            "     \"\"\"",
            "     Assumes ``tmy_data`` input is UTC, converts from UTC to ``tz``, rolls",
            "     dataframe so timeseries starts at midnight, and forces all indices to",
            "     ``year``. Only works for integer ``tz``, but ``None`` and ``False`` are",
            "@@ -406,34 +421,44 @@",
            "         timestamp.replace(year=year, tzinfo=tzname)",
            "         for timestamp in tmy_data.index],",
            "         name=f'time({tzname})')",
            "     new_tmy_data = pd.DataFrame(",
            "         np.roll(tmy_data, tz, axis=0),",
            "         columns=tmy_data.columns,",
            "         index=new_index)",
            "+    # GH 2399",
            "+    new_tmy_data = \\",
            "+        new_tmy_data.astype(dtype=dict(zip(tmy_data.columns, tmy_data.dtypes)))",
            "     return new_tmy_data",
            " ",
            " ",
            " def get_pvgis_tmy(latitude, longitude, outputformat='json', usehorizon=True,",
            "                   userhorizon=None, startyear=None, endyear=None,",
            "                   map_variables=True, url=URL, timeout=30,",
            "-                  roll_utc_offset=None, coerce_year=None):",
            "+                  roll_utc_offset=None, coerce_year=1990):",
            "     \"\"\"",
            "     Get TMY data from PVGIS.",
            " ",
            "     For more information see the PVGIS [1]_ TMY tool documentation [2]_.",
            " ",
            "+        .. versionchanged:: 0.13.0",
            "+           The function now returns two items ``(data,meta)``. Previous",
            "+           versions of this function returned four elements",
            "+           ``(data,months_selected,inputs,meta)``. The ``inputs`` dictionary",
            "+           and ``months_selected`` are  now included in ``meta``, which has",
            "+           changed structure to accommodate it.",
            "+",
            "     Parameters",
            "     ----------",
            "     latitude : float",
            "         Latitude in degrees north",
            "     longitude : float",
            "         Longitude in degrees east",
            "     outputformat : str, default 'json'",
            "-        Must be in ``['csv', 'basic', 'epw', 'json']``. See PVGIS TMY tool",
            "+        Must be in ``['csv', 'epw', 'json']``. See PVGIS TMY tool",
            "         documentation [2]_ for more info.",
            "     usehorizon : bool, default True",
            "         include effects of horizon",
            "     userhorizon : list of float, optional",
            "         Optional user-specified elevation of horizon in degrees, at equally",
            "         spaced azimuth clockwise from north. If not specified, PVGIS will",
            "         calculate the horizon [3]_. If specified, requires ``usehorizon=True``.",
            "@@ -448,28 +473,26 @@",
            "         base url of PVGIS API, append ``tmy`` to get TMY endpoint",
            "     timeout : int, default 30",
            "         time in seconds to wait for server response before timeout",
            "     roll_utc_offset: int, optional",
            "         Use to specify a time zone other than the default UTC zero and roll",
            "         dataframe by ``roll_utc_offset`` so it starts at midnight on January",
            "         1st. Ignored if ``None``, otherwise will force year to ``coerce_year``.",
            "-    coerce_year: int, optional",
            "-        Use to force indices to desired year. Will default to 1990 if",
            "-        ``coerce_year`` is not specified, but ``roll_utc_offset`` is specified.",
            "+    coerce_year: int, default 1990",
            "+        Use to force indices to desired year. Defaults to 1990. Specify",
            "+        ``None`` to return the actual indices used for the TMY. If",
            "+        ``coerce_year`` is ``None``, but ``roll_utc_offset`` is specified,",
            "+        then ``coerce_year`` will be set to the default.",
            " ",
            "     Returns",
            "     -------",
            "     data : pandas.DataFrame",
            "         the weather data",
            "-    months_selected : list",
            "-        TMY year for each month, ``None`` for basic and EPW",
            "-    inputs : dict",
            "-        the inputs, ``None`` for basic and EPW",
            "     metadata : list or dict",
            "-        file metadata, ``None`` for basic",
            "+        file metadata",
            " ",
            "     Raises",
            "     ------",
            "     requests.HTTPError",
            "         if the request response status is ``HTTP/1.1 400 BAD REQUEST``, then",
            "         the error message in the response will be raised as an exception,",
            "         otherwise raise whatever ``HTTP/1.1`` error occurred",
            "@@ -505,142 +528,140 @@",
            "         try:",
            "             err_msg = res.json()",
            "         except Exception:",
            "             res.raise_for_status()",
            "         else:",
            "             raise requests.HTTPError(err_msg['message'])",
            "     # initialize data to None in case API fails to respond to bad outputformat",
            "-    data = None, None, None, None",
            "+    data = None, None",
            "     if outputformat == 'json':",
            "         src = res.json()",
            "-        data, months_selected, inputs, meta = _parse_pvgis_tmy_json(src)",
            "+        data, meta = _parse_pvgis_tmy_json(src)",
            "     elif outputformat == 'csv':",
            "         with io.BytesIO(res.content) as src:",
            "-            data, months_selected, inputs, meta = _parse_pvgis_tmy_csv(src)",
            "-    elif outputformat == 'basic':",
            "-        with io.BytesIO(res.content) as src:",
            "-            data, months_selected, inputs, meta = _parse_pvgis_tmy_basic(src)",
            "+            data, meta = _parse_pvgis_tmy_csv(src)",
            "     elif outputformat == 'epw':",
            "         with io.StringIO(res.content.decode('utf-8')) as src:",
            "-            data, meta = parse_epw(src)",
            "-            months_selected, inputs = None, None",
            "-    else:",
            "-        # this line is never reached because if outputformat is not valid then",
            "-        # the response is HTTP/1.1 400 BAD REQUEST which is handled earlier",
            "-        pass",
            "+            data, meta = read_epw(src)",
            "+    elif outputformat == 'basic':",
            "+        err_msg = (\"outputformat='basic' is no longer supported by pvlib, \"",
            "+                   \"please use outputformat='csv' instead.\")",
            "+        raise ValueError(err_msg)",
            " ",
            "     if map_variables:",
            "         data = data.rename(columns=VARIABLE_MAP)",
            " ",
            "     if not (roll_utc_offset is None and coerce_year is None):",
            "         # roll_utc_offset is specified, but coerce_year isn't",
            "         coerce_year = coerce_year or 1990",
            "         data = _coerce_and_roll_tmy(data, roll_utc_offset, coerce_year)",
            " ",
            "-    return data, months_selected, inputs, meta",
            "+    return data, meta",
            " ",
            " ",
            " def _parse_pvgis_tmy_json(src):",
            "-    inputs = src['inputs']",
            "-    meta = src['meta']",
            "-    months_selected = src['outputs']['months_selected']",
            "+    meta = src['meta'].copy()",
            "+    # Override the \"inputs\" in metadata",
            "+    meta['inputs'] = src['inputs']",
            "+    # Re-add the inputs in metadata one-layer down",
            "+    meta['inputs']['descriptions'] = src['meta']['inputs']",
            "+    meta['months_selected'] = src['outputs']['months_selected']",
            "     data = pd.DataFrame(src['outputs']['tmy_hourly'])",
            "     data.index = pd.to_datetime(",
            "         data['time(UTC)'], format='%Y%m%d:%H%M', utc=True)",
            "     data = data.drop('time(UTC)', axis=1)",
            "-    return data, months_selected, inputs, meta",
            "+    return data, meta",
            " ",
            " ",
            " def _parse_pvgis_tmy_csv(src):",
            "     # the first 3 rows are latitude, longitude, elevation",
            "-    inputs = {}",
            "+    meta = {'inputs': {}, 'descriptions': {}}",
            "     # 'Latitude (decimal degrees): 45.000\\r\\n'",
            "-    inputs['latitude'] = float(src.readline().split(b':')[1])",
            "+    meta['inputs']['latitude'] = float(src.readline().split(b':')[1])",
            "     # 'Longitude (decimal degrees): 8.000\\r\\n'",
            "-    inputs['longitude'] = float(src.readline().split(b':')[1])",
            "+    meta['inputs']['longitude'] = float(src.readline().split(b':')[1])",
            "     # Elevation (m): 1389.0\\r\\n",
            "-    inputs['elevation'] = float(src.readline().split(b':')[1])",
            "+    meta['inputs']['elevation'] = float(src.readline().split(b':')[1])",
            " ",
            "     # TMY has an extra line here: Irradiance Time Offset (h): 0.1761\\r\\n",
            "     line = src.readline()",
            "     if line.startswith(b'Irradiance Time Offset'):",
            "-        inputs['irradiance time offset'] = float(line.split(b':')[1])",
            "+        meta['inputs']['irradiance time offset'] = float(line.split(b':')[1])",
            "         src.readline()  # skip over the \"month,year\\r\\n\"",
            "     else:",
            "         # `line` is already the \"month,year\\r\\n\" line, so nothing to do",
            "         pass",
            "     # then there's a 13 row comma separated table with two columns: month, year",
            "     # which contains the year used for that month in the TMY",
            "     months_selected = []",
            "     for month in range(12):",
            "         months_selected.append(",
            "             {'month': month+1, 'year': int(src.readline().split(b',')[1])})",
            "+    meta['months_selected'] = months_selected",
            "     # then there's the TMY (typical meteorological year) data",
            "     # first there's a header row:",
            "     #    time(UTC),T2m,RH,G(h),Gb(n),Gd(h),IR(h),WS10m,WD10m,SP",
            "     headers = [h.decode('utf-8').strip() for h in src.readline().split(b',')]",
            "     data = pd.DataFrame(",
            "         [src.readline().split(b',') for _ in range(8760)], columns=headers)",
            "     dtidx = data['time(UTC)'].apply(lambda dt: dt.decode('utf-8'))",
            "     dtidx = pd.to_datetime(dtidx, format='%Y%m%d:%H%M', utc=True)",
            "     data = data.drop('time(UTC)', axis=1)",
            "     data = pd.DataFrame(data, dtype=float)",
            "     data.index = dtidx",
            "     # finally there's some meta data",
            "-    meta = [line.decode('utf-8').strip() for line in src.readlines()]",
            "-    return data, months_selected, inputs, meta",
            "-",
            "-",
            "-def _parse_pvgis_tmy_basic(src):",
            "-    data = pd.read_csv(src)",
            "-    data.index = pd.to_datetime(",
            "-        data['time(UTC)'], format='%Y%m%d:%H%M', utc=True)",
            "-    data = data.drop('time(UTC)', axis=1)",
            "-    return data, None, None, None",
            "+    meta['descriptions'] = {}",
            "+    for line in src.readlines():",
            "+        line = line.decode('utf-8').strip()",
            "+        if ':' in line:",
            "+            meta['descriptions'][line.split(':')[0]] = \\",
            "+                line.split(':')[1].strip()",
            "+    return data, meta",
            " ",
            " ",
            " def read_pvgis_tmy(filename, pvgis_format=None, map_variables=True):",
            "     \"\"\"",
            "-    Read a file downloaded from PVGIS.",
            "+    Read a TMY file downloaded from PVGIS.",
            "+",
            "+        .. versionchanged:: 0.13.0",
            "+           The function now returns two items ``(data,meta)``. Previous",
            "+           versions of this function returned four elements",
            "+           ``(data,months_selected,inputs,meta)``. The ``inputs`` dictionary",
            "+           and ``months_selected`` are  now included in ``meta``, which has",
            "+           changed structure to accommodate it.",
            " ",
            "     Parameters",
            "     ----------",
            "     filename : str, pathlib.Path, or file-like buffer",
            "         Name, path, or buffer of file downloaded from PVGIS.",
            "     pvgis_format : str, optional",
            "         Format of PVGIS file or buffer. Equivalent to the ``outputformat``",
            "         parameter in the PVGIS TMY API. If ``filename`` is a file and",
            "         ``pvgis_format`` is not specified then the file extension will be used",
            "-        to determine the PVGIS format to parse. For PVGIS files from the API",
            "-        with ``outputformat='basic'``, please set ``pvgis_format`` to",
            "-        ``'basic'``.",
            "+        to determine the PVGIS format to parse.",
            "         If ``filename`` is a buffer, then ``pvgis_format`` is required and must",
            "-        be in ``['csv', 'epw', 'json', 'basic']``.",
            "+        be in ``['csv', 'epw', 'json']``.",
            "     map_variables: bool, default True",
            "         When true, renames columns of the Dataframe to pvlib variable names",
            "         where applicable. See variable :const:`VARIABLE_MAP`.",
            " ",
            " ",
            "     Returns",
            "     -------",
            "     data : pandas.DataFrame",
            "         the weather data",
            "-    months_selected : list",
            "-        TMY year for each month, ``None`` for basic and EPW",
            "-    inputs : dict",
            "-        the inputs, ``None`` for basic and EPW",
            "     metadata : list or dict",
            "-        file metadata, ``None`` for basic",
            "+        file metadata",
            " ",
            "     Raises",
            "     ------",
            "     ValueError",
            "         if ``pvgis_format`` is not specified and the file extension is neither",
            "         ``.csv``, ``.json``, nor ``.epw``, or if ``pvgis_format`` is provided",
            "-        as input but isn't in ``['csv', 'epw', 'json', 'basic']``",
            "+        as input but isn't in ``['csv', 'epw', 'json']``",
            "     TypeError",
            "         if ``pvgis_format`` is not specified and ``filename`` is a buffer",
            " ",
            "     See Also",
            "     --------",
            "     get_pvgis_tmy",
            "     \"\"\"",
            "@@ -648,63 +669,57 @@",
            "     if pvgis_format is None:",
            "         # get the file extension from suffix, but remove the dot and make sure",
            "         # it's lower case to compare with epw, csv, or json",
            "         # NOTE: raises TypeError if filename is a buffer",
            "         outputformat = Path(filename).suffix[1:].lower()",
            "     else:",
            "         outputformat = pvgis_format",
            "-    # parse the pvgis file based on the output format, either 'epw', 'json',",
            "-    # 'csv', or 'basic'",
            "+    # parse pvgis file based on outputformat, either 'epw', 'json', or 'csv'",
            " ",
            "     # EPW: use the EPW parser from the pvlib.iotools epw.py module",
            "     if outputformat == 'epw':",
            "-        try:",
            "-            data, meta = parse_epw(filename)",
            "-        except AttributeError:  # str/path has no .read() attribute",
            "-            data, meta = read_epw(filename)",
            "-        months_selected, inputs = None, None",
            "+        data, meta = read_epw(filename)",
            " ",
            "-    # NOTE: json, csv, and basic output formats have parsers defined as private",
            "+    # NOTE: json and csv output formats have parsers defined as private",
            "     # functions in this module",
            " ",
            "     # JSON: use Python built-in json module to convert file contents to a",
            "     # Python dictionary, and pass the dictionary to the _parse_pvgis_tmy_json()",
            "     # function from this module",
            "     elif outputformat == 'json':",
            "         try:",
            "             src = json.load(filename)",
            "         except AttributeError:  # str/path has no .read() attribute",
            "             with open(str(filename), 'r') as fbuf:",
            "                 src = json.load(fbuf)",
            "-        data, months_selected, inputs, meta = _parse_pvgis_tmy_json(src)",
            "+        data, meta = _parse_pvgis_tmy_json(src)",
            " ",
            "-    # CSV or basic: use the correct parser from this module",
            "-    # eg: _parse_pvgis_tmy_csv() or _parse_pvgist_tmy_basic()",
            "-    elif outputformat in ['csv', 'basic']:",
            "-        # get the correct parser function for this output format from globals()",
            "-        pvgis_parser = globals()['_parse_pvgis_tmy_{:s}'.format(outputformat)]",
            "-        # NOTE: pvgis_parse() is a pvgis parser function from this module,",
            "-        # either _parse_pvgis_tmy_csv() or _parse_pvgist_tmy_basic()",
            "+    elif outputformat == 'csv':",
            "         try:",
            "-            data, months_selected, inputs, meta = pvgis_parser(filename)",
            "+            data, meta = _parse_pvgis_tmy_csv(filename)",
            "         except AttributeError:  # str/path has no .read() attribute",
            "             with open(str(filename), 'rb') as fbuf:",
            "-                data, months_selected, inputs, meta = pvgis_parser(fbuf)",
            "+                data, meta = _parse_pvgis_tmy_csv(fbuf)",
            "+",
            "+    elif outputformat == 'basic':",
            "+        err_msg = \"outputformat='basic' is no longer supported, please use \" \\",
            "+            \"outputformat='csv' instead.\"",
            "+        raise ValueError(err_msg)",
            " ",
            "     else:",
            "-        # raise exception if pvgis format isn't in ['csv','basic','epw','json']",
            "+        # raise exception if pvgis format isn't in ['csv','epw','json']",
            "         err_msg = (",
            "-            \"pvgis format '{:s}' was unknown, must be either 'epw', 'json', \"",
            "-            \"'csv', or 'basic'\").format(outputformat)",
            "+            \"pvgis format '{:s}' was unknown, must be either 'json', 'csv',\"",
            "+            \"or 'epw'\").format(outputformat)",
            "         raise ValueError(err_msg)",
            " ",
            "     if map_variables:",
            "         data = data.rename(columns=VARIABLE_MAP)",
            " ",
            "-    return data, months_selected, inputs, meta",
            "+    return data, meta",
            " ",
            " ",
            " def get_pvgis_horizon(latitude, longitude, url=URL, **kwargs):",
            "     \"\"\"Get horizon data from PVGIS.",
            " ",
            "     Parameters",
            "     ----------",
            "@@ -716,15 +731,15 @@",
            "         Base URL for PVGIS",
            "     kwargs:",
            "         Passed to requests.get",
            " ",
            "     Returns",
            "     -------",
            "     data : pd.Series",
            "-        Pandas Series of the retrived horizon elevation angles. Index is the",
            "+        Pandas Series of the retrieved horizon elevation angles. Index is the",
            "         corresponding horizon azimuth angles.",
            "     metadata : dict",
            "         Metadata returned by PVGIS.",
            " ",
            "     Notes",
            "     -----",
            "     The horizon azimuths are specified clockwise from north, e.g., south=180."
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/iotools/sodapro.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/iotools/sodapro.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/iotools/sodapro.py",
            "@@ -3,15 +3,17 @@",
            " .. codeauthor:: Adam R. Jensen<adam-r-j@hotmail.com>",
            " \"\"\"",
            " ",
            " import pandas as pd",
            " import requests",
            " import io",
            " import warnings",
            "+from pvlib import tools",
            " ",
            "+from pvlib._deprecation import deprecated, renamed_kwarg_warning",
            " ",
            " URL = 'api.soda-solardata.com'",
            " ",
            " CAMS_INTEGRATED_COLUMNS = [",
            "     'TOA', 'Clear sky GHI', 'Clear sky BHI', 'Clear sky DHI', 'Clear sky BNI',",
            "     'GHI', 'BHI', 'DHI', 'BNI',",
            "     'GHI no corr', 'BHI no corr', 'DHI no corr', 'BNI no corr']",
            "@@ -39,18 +41,23 @@",
            " SUMMATION_PERIOD_TO_TIME_STEP = {'0 year 0 month 0 day 0 h 1 min 0 s': '1min',",
            "                                  '0 year 0 month 0 day 0 h 15 min 0 s': '15min',  # noqa",
            "                                  '0 year 0 month 0 day 1 h 0 min 0 s': '1h',",
            "                                  '0 year 0 month 1 day 0 h 0 min 0 s': '1d',",
            "                                  '0 year 1 month 0 day 0 h 0 min 0 s': '1M'}",
            " ",
            " ",
            "+@renamed_kwarg_warning(",
            "+    since='0.13.0',",
            "+    old_param_name='server',",
            "+    new_param_name='url',",
            "+    removal=\"0.14.0\")",
            " def get_cams(latitude, longitude, start, end, email, identifier='mcclear',",
            "              altitude=None, time_step='1h', time_ref='UT', verbose=False,",
            "              integrated=False, label=None, map_variables=True,",
            "-             server=URL, timeout=30):",
            "+             url=URL, timeout=30):",
            "     \"\"\"Retrieve irradiance and clear-sky time series from CAMS.",
            " ",
            "     Time-series of radiation and/or clear-sky global, beam, and",
            "     diffuse radiation from CAMS (see [1]_). Data is retrieved from SoDa [2]_.",
            " ",
            "     Time coverage: 2004-01-01 to two days ago",
            " ",
            "@@ -92,15 +99,15 @@",
            "         or as average irradiance values (W/m^2) (pvlib preferred units)",
            "     label : {'right', 'left'}, optional",
            "         Which bin edge label to label time-step with. The default is 'left' for",
            "         all time steps except for '1M' which has a default of 'right'.",
            "     map_variables: bool, default: True",
            "         When true, renames columns of the DataFrame to pvlib variable names",
            "         where applicable. See variable :const:`VARIABLE_MAP`.",
            "-    server: str, default: :const:`pvlib.iotools.sodapro.URL`",
            "+    url: str, default: :const:`pvlib.iotools.sodapro.URL`",
            "         Base url of the SoDa Pro CAMS Radiation API.",
            "     timeout : int, default: 30",
            "         Time in seconds to wait for server response before timeout",
            " ",
            "     Returns",
            "     -------",
            "     data: pandas.DataFrame",
            "@@ -139,33 +146,41 @@",
            "     Note that it is recommended to specify the latitude and longitude to at",
            "     least the fourth decimal place.",
            " ",
            "     Variables corresponding to standard pvlib variables are renamed,",
            "     e.g. `sza` becomes `solar_zenith`. See variable :const:`VARIABLE_MAP` for",
            "     the complete mapping.",
            " ",
            "+    For large geospatial areas, CAMS offers a pre-calculated",
            "+    gridded dataset [4]_ over land and coastal areas. This dataset",
            "+    may not include the most recent data coverage and may not be",
            "+    based on the most recent CAMS version. This dataset is not available",
            "+    through pvlib.",
            "+",
            "     See Also",
            "     --------",
            "-    pvlib.iotools.read_cams, pvlib.iotools.parse_cams",
            "+    pvlib.iotools.read_cams",
            " ",
            "     Raises",
            "     ------",
            "     requests.HTTPError",
            "         If the request is invalid, then an XML file is returned by the CAMS",
            "         service and the error message will be raised as an exception.",
            " ",
            "     References",
            "     ----------",
            "-    .. [1] `CAMS solar radiation documentation",
            "-       <https://atmosphere.copernicus.eu/solar-radiation>`_",
            "+    .. [1] `CAMS solar radiation time-series documentation. Climate Data Store.",
            "+       <https://ads.atmosphere.copernicus.eu/datasets/cams-solar-radiation-timeseries>`_",
            "     .. [2] `CAMS Radiation Automatic Access (SoDa)",
            "        <https://www.soda-pro.com/help/cams-services/cams-radiation-service/automatic-access>`_",
            "     .. [3] A. R. Jensen et al., pvlib iotools — Open-source Python functions",
            "        for seamless access to solar irradiance data. Solar Energy. 2023. Vol",
            "        266, pp. 112092. :doi:`10.1016/j.solener.2023.112092`",
            "+    .. [4] `CAMS gridded solar radiation documentation.",
            "+       <https://ads.atmosphere.copernicus.eu/datasets/cams-gridded-solar-radiation>`_",
            "     \"\"\"",
            "     try:",
            "         time_step_str = TIME_STEPS_MAP[time_step]",
            "     except KeyError:",
            "         raise ValueError(f'Time step not recognized. Must be one of '",
            "                          f'{list(TIME_STEPS_MAP.keys())}')",
            " ",
            "@@ -185,40 +200,40 @@",
            "     # Start and end date should be in the format: yyyy-mm-dd",
            "     start = pd.to_datetime(start).strftime('%Y-%m-%d')",
            "     end = pd.to_datetime(end).strftime('%Y-%m-%d')",
            " ",
            "     email = email.replace('@', '%2540')  # Format email address",
            "     identifier = 'get_{}'.format(identifier.lower())  # Format identifier str",
            " ",
            "-    base_url = f\"https://{server}/service/wps\"",
            "+    base_url = f\"https://{url}/service/wps\"",
            " ",
            "     data_inputs_dict = {",
            "         'latitude': latitude,",
            "         'longitude': longitude,",
            "         'altitude': altitude,",
            "         'date_begin': start,",
            "         'date_end': end,",
            "         'time_ref': time_ref,",
            "         'summarization': time_step_str,",
            "         'username': email,",
            "         'verbose': verbose}",
            " ",
            "-    # Manual formatting of the input parameters seperating each by a semicolon",
            "+    # Manual formatting of the input parameters separating each by a semicolon",
            "     data_inputs = \";\".join([f\"{key}={value}\" for key, value in",
            "                             data_inputs_dict.items()])",
            " ",
            "     params = {'Service': 'WPS',",
            "               'Request': 'Execute',",
            "               'Identifier': identifier,",
            "               'version': '1.0.0',",
            "               'RawDataOutput': 'irradiation',",
            "               }",
            " ",
            "     # The DataInputs parameter of the URL has to be manually formatted and",
            "-    # added to the base URL as it contains sub-parameters seperated by",
            "+    # added to the base URL as it contains sub-parameters separated by",
            "     # semi-colons, which gets incorrectly formatted by the requests function",
            "     # if passed using the params argument.",
            "     res = requests.get(base_url + '?DataInputs=' + data_inputs, params=params,",
            "                        timeout=timeout)",
            " ",
            "     # Response from CAMS follows the status and reason format of PyWPS4",
            "     # If an error occurs on server side, it will return error 400 - bad request",
            "@@ -227,28 +242,30 @@",
            "     if not res.ok:",
            "         errors = res.text.split('ows:ExceptionText')[1][1:-2]",
            "         res.reason = \"%s: <%s>\" % (res.reason, errors)",
            "         res.raise_for_status()",
            "     # Successful requests returns a csv data file",
            "     else:",
            "         fbuf = io.StringIO(res.content.decode('utf-8'))",
            "-        data, metadata = parse_cams(fbuf, integrated=integrated, label=label,",
            "-                                    map_variables=map_variables)",
            "+        data, metadata = read_cams(fbuf, integrated=integrated, label=label,",
            "+                                   map_variables=map_variables)",
            "         return data, metadata",
            " ",
            " ",
            "-def parse_cams(fbuf, integrated=False, label=None, map_variables=True):",
            "+def read_cams(filename, integrated=False, label=None, map_variables=True):",
            "     \"\"\"",
            "-    Parse a file-like buffer with data in the format of a CAMS Radiation or",
            "-    McClear file. The CAMS solar radiation services are described in [1]_.",
            "+    Read a file or file-like buffer with data in the format of a CAMS",
            "+    Radiation or McClear file.",
            "+",
            "+    The CAMS solar radiation services are described in [1]_.",
            " ",
            "     Parameters",
            "     ----------",
            "-    fbuf: file-like object",
            "-        File-like object containing data to read.",
            "+    filename: str, path-like, or buffer",
            "+        Filename or in-memory buffer of a file containing data to read.",
            "     integrated: boolean, default False",
            "         Whether to return radiation parameters as integrated values (Wh/m^2)",
            "         or as average irradiance values (W/m^2) (pvlib preferred units)",
            "     label : {'right', 'left'}, optional",
            "         Which bin edge label to label time-step with. The default is 'left' for",
            "         all time steps except for '1M' which has a default of 'right'.",
            "     map_variables: bool, default: True",
            "@@ -260,31 +277,39 @@",
            "     data: pandas.DataFrame",
            "         Timeseries data from CAMS Radiation or McClear",
            "     metadata: dict",
            "         Metadata available in the file.",
            " ",
            "     See Also",
            "     --------",
            "-    pvlib.iotools.read_cams, pvlib.iotools.get_cams",
            "+    pvlib.iotools.get_cams",
            " ",
            "     References",
            "     ----------",
            "-    .. [1] `CAMS solar radiation documentation",
            "-       <https://atmosphere.copernicus.eu/solar-radiation>`_",
            "+    .. [1] `CAMS solar radiation time-series documentation. Climate Data Store.",
            "+       <https://ads.atmosphere.copernicus.eu/datasets/cams-solar-radiation-timeseries>`_",
            "     \"\"\"",
            "     metadata = {}",
            "-    # Initial lines starting with # contain metadata",
            "-    while True:",
            "-        line = fbuf.readline().rstrip('\\n')",
            "-        if line.startswith('# Observation period'):",
            "-            # The last line of the metadata section contains the column names",
            "-            names = line.lstrip('# ').split(';')",
            "-            break  # End of metadata section has been reached",
            "-        elif ': ' in line:",
            "-            metadata[line.split(': ')[0].lstrip('# ')] = line.split(': ')[1]",
            "+",
            "+    with tools._file_context_manager(filename) as fbuf:",
            "+",
            "+        # Initial lines starting with # contain metadata",
            "+        while True:",
            "+            line = fbuf.readline().rstrip('\\n')",
            "+            if line.startswith('# Observation period'):",
            "+                # The last line of the metadata section has the column names",
            "+                names = line.lstrip('# ').split(';')",
            "+                break  # End of metadata section has been reached",
            "+            elif ': ' in line:",
            "+                key = line.split(': ')[0].lstrip('# ')",
            "+                value = line.split(': ')[1]",
            "+                metadata[key] = value",
            "+",
            "+        data = pd.read_csv(fbuf, sep=';', comment='#', header=None,",
            "+                           names=names)",
            " ",
            "     # Convert latitude, longitude, and altitude values from strings to floats",
            "     for k_old in list(metadata.keys()):",
            "         k_new = k_old.lstrip().split(' ')[0].lower()",
            "         if k_new in ['latitude', 'longitude', 'altitude']:",
            "             metadata[k_new] = float(metadata.pop(k_old))",
            " ",
            "@@ -292,16 +317,14 @@",
            "         {True: 'Wh/m^2', False: 'W/m^2'}[integrated]",
            " ",
            "     # Determine the time_step from the metadata dictionary",
            "     time_step = SUMMATION_PERIOD_TO_TIME_STEP[",
            "         metadata['Summarization (integration) period']]",
            "     metadata['time_step'] = time_step",
            " ",
            "-    data = pd.read_csv(fbuf, sep=';', comment='#', header=None, names=names)",
            "-",
            "     obs_period = data['Observation period'].str.split('/')",
            " ",
            "     # Set index as the start observation time (left) and localize to UTC",
            "     if (label == 'left') | ((label is None) & (time_step != '1M')):",
            "         data.index = pd.to_datetime(obs_period.str[0], utc=True)",
            "     # Set index as the stop observation time (right) and localize to UTC",
            "     # default label for monthly data is 'right' following Pandas' convention",
            "@@ -332,47 +355,9 @@",
            "     data.index.name = None  # Set index name to None",
            "     if map_variables:",
            "         data = data.rename(columns=VARIABLE_MAP)",
            " ",
            "     return data, metadata",
            " ",
            " ",
            "-def read_cams(filename, integrated=False, label=None, map_variables=True):",
            "-    \"\"\"",
            "-    Read a CAMS Radiation or McClear file into a pandas DataFrame.",
            "-",
            "-    CAMS Radiation and McClear are described in [1]_.",
            "-",
            "-    Parameters",
            "-    ----------",
            "-    filename: str",
            "-        Filename of a file containing data to read.",
            "-    integrated: boolean, default False",
            "-        Whether to return radiation parameters as integrated values (Wh/m^2)",
            "-        or as average irradiance values (W/m^2) (pvlib preferred units)",
            "-    label : {'right', 'left}, optional",
            "-        Which bin edge label to label time-step with. The default is 'left' for",
            "-        all time steps except for '1M' which has a default of 'right'.",
            "-    map_variables: bool, default: True",
            "-        When true, renames columns of the Dataframe to pvlib variable names",
            "-        where applicable. See variable :const:`VARIABLE_MAP`.",
            "-",
            "-    Returns",
            "-    -------",
            "-    data: pandas.DataFrame",
            "-        Timeseries data from CAMS Radiation or McClear.",
            "-        See :func:`pvlib.iotools.get_cams` for fields.",
            "-    metadata: dict",
            "-        Metadata available in the file.",
            "-",
            "-    See Also",
            "-    --------",
            "-    pvlib.iotools.parse_cams, pvlib.iotools.get_cams",
            "-",
            "-    References",
            "-    ----------",
            "-    .. [1] `CAMS solar radiation documentation",
            "-       <https://atmosphere.copernicus.eu/solar-radiation>`_",
            "-    \"\"\"",
            "-    with open(str(filename), 'r') as fbuf:",
            "-        content = parse_cams(fbuf, integrated, label, map_variables)",
            "-    return content",
            "+parse_cams = deprecated(since=\"0.13.0\", name=\"parse_cams\",",
            "+                        alternative=\"read_cams\")(read_cams)"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/iotools/srml.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/iotools/srml.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/iotools/srml.py",
            "@@ -232,16 +232,15 @@",
            "        http://solardata.uoregon.edu/StationIDCodes.html",
            "     \"\"\"",
            "     # Use pd.to_datetime so that strings (e.g. '2021-01-01') are accepted",
            "     start = pd.to_datetime(start)",
            "     end = pd.to_datetime(end)",
            " ",
            "     # Generate list of months",
            "-    months = pd.date_range(",
            "-        start, end.replace(day=1) + pd.DateOffset(months=1), freq='1M')",
            "+    months = pd.date_range(start.date().replace(day=1), end, freq='1MS')",
            "     months_str = months.strftime('%y%m')",
            " ",
            "     # Generate list of filenames",
            "     filenames = [f\"{station}{filetype}{m}.txt\" for m in months_str]",
            " ",
            "     dfs = []  # Initialize list of monthly dataframes",
            "     for f in filenames:"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/irradiance.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/irradiance.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/irradiance.py",
            "@@ -31,60 +31,69 @@",
            " ",
            " ",
            " def get_extra_radiation(datetime_or_doy, solar_constant=1366.1,",
            "                         method='spencer', epoch_year=2014, **kwargs):",
            "     \"\"\"",
            "     Determine extraterrestrial radiation from day of year.",
            " ",
            "+    Specific references for each method are cited in the parameter descriptions",
            "+    below, while a more general discussion of the different models may also be",
            "+    found in [1]_ and [2]_.",
            "+",
            "     Parameters",
            "     ----------",
            "     datetime_or_doy : numeric, array, date, datetime, Timestamp, DatetimeIndex",
            "         Day of year, array of days of year, or datetime-like object",
            " ",
            "     solar_constant : float, default 1366.1",
            "-        The solar constant.",
            "+        The solar constant. [Wm⁻²]",
            " ",
            "-    method : string, default 'spencer'",
            "-        The method by which the ET radiation should be calculated.",
            "-        Options include ``'pyephem', 'spencer', 'asce', 'nrel'``.",
            "+    method : string, default `spencer`",
            "+        The method by which the extraterrestrial radiation should be",
            "+        calculated. Options include: `pyephem`, `spencer` [3]_, `asce` [4]_,",
            "+        'nrel' [6]_.",
            " ",
            "     epoch_year : int, default 2014",
            "         The year in which a day of year input will be calculated. Only",
            "-        applies to day of year input used with the pyephem or nrel",
            "+        applies to day of year input used with the `pyephem` or `nrel`",
            "         methods.",
            " ",
            "     kwargs :",
            "-        Passed to solarposition.nrel_earthsun_distance",
            "+        Passed to :py:func:`~pvlib.solarposition.nrel_earthsun_distance`.",
            " ",
            "     Returns",
            "     -------",
            "     dni_extra : float, array, or Series",
            "         The extraterrestrial radiation present in watts per square meter",
            "         on a surface which is normal to the sun. Pandas Timestamp and",
            "         DatetimeIndex inputs will yield a Pandas TimeSeries. All other",
            "         inputs will yield a float or an array of floats.",
            " ",
            "     References",
            "     ----------",
            "     .. [1] M. Reno, C. Hansen, and J. Stein, \"Global Horizontal Irradiance",
            "        Clear Sky Models: Implementation and Analysis\", Sandia National",
            "        Laboratories, SAND2012-2389, 2012.",
            "+       :doi:`10.2172/1039404`",
            " ",
            "-    .. [2] http://solardata.uoregon.edu/SolarRadiationBasics.html, Eqs.",
            "-       SR1 and SR2",
            "-",
            "-    .. [3] Partridge, G. W. and Platt, C. M. R. 1976. Radiative Processes",
            "-       in Meteorology and Climatology.",
            "-",
            "-    .. [4] Duffie, J. A. and Beckman, W. A. 1991. Solar Engineering of",
            "-       Thermal Processes, 2nd edn. J. Wiley and Sons, New York.",
            "-",
            "-    .. [5] ASCE, 2005. The ASCE Standardized Reference Evapotranspiration",
            "-       Equation, Environmental and Water Resources Institute of the American",
            "-       Civil Engineers, Ed. R. G. Allen et al.",
            "+    .. [2] J. A. Duffie, W. A. Beckman, N. Blair, \"Solar Radiation\", in Solar",
            "+       Engineering of Thermal Processes, Photovoltaics and Wind, 5th ed,",
            "+       New York, USA: J. Wiley and Sons, 2020, pp. 3-44.",
            "+       :doi:`10.1002/9781119540328`",
            "+",
            "+    .. [3] J. W. Spencer, \"Fourier series representation of the sun,\" Search,",
            "+       vol. 2, p. 172, 1971.",
            "+",
            "+    .. [4] R. G. Allen et al., Eds. The ASCE standardized reference",
            "+       evapotranspiration equation. Reston, Va.: American Society of Civil",
            "+       Engineers, 2005. :doi:`10.1061/9780784408056`",
            "+",
            "+    .. [6] I. Reda, A. Andreas, \"Solar position algorithm for solar",
            "+       radiation applications\" NREL Golden, USA. NREL/TP-560-34302,",
            "+       Revised 2008. :doi:`10.2172/15003974`",
            "     \"\"\"",
            " ",
            "     to_doy, to_datetimeindex, to_output = \\",
            "         _handle_extra_radiation_types(datetime_or_doy, epoch_year)",
            " ",
            "     # consider putting asce and spencer methods in their own functions",
            "     method = method.lower()",
            "@@ -1614,15 +1623,15 @@",
            "         return ghi",
            " ",
            " ",
            " @renamed_kwarg_warning(",
            "     since='0.11.2',",
            "     old_param_name='clearsky_ghi',",
            "     new_param_name='ghi_clear',",
            "-    removal=\"0.13.0\")",
            "+    removal=\"0.14.0\")",
            " def clearsky_index(ghi, ghi_clear, max_clearsky_index=2.0):",
            "     \"\"\"",
            "     Calculate the clearsky index.",
            " ",
            "     The clearsky index is the ratio of global to clearsky global irradiance.",
            "     Negative and non-finite clearsky index values will be truncated to zero.",
            " ",
            "@@ -2159,20 +2168,20 @@",
            "     return kt_prime_bin, zenith_bin, w_bin, delta_kt_prime_bin",
            " ",
            " ",
            " @renamed_kwarg_warning(",
            "     since='0.11.2',",
            "     old_param_name='ghi_clearsky',",
            "     new_param_name='ghi_clear',",
            "-    removal=\"0.13.0\")",
            "+    removal=\"0.14.0\")",
            " @renamed_kwarg_warning(",
            "     since='0.11.2',",
            "     old_param_name='dni_clearsky',",
            "     new_param_name='dni_clear',",
            "-    removal=\"0.13.0\")",
            "+    removal=\"0.14.0\")",
            " def dirindex(ghi, ghi_clear, dni_clear, zenith, times, pressure=101325.,",
            "              use_delta_kt_prime=True, temp_dew=None, min_cos_zenith=0.065,",
            "              max_zenith=87):",
            "     \"\"\"",
            "     Determine DNI from GHI using the DIRINDEX model.",
            " ",
            "     The DIRINDEX model [1]_ modifies the DIRINT model implemented in",
            "@@ -3649,15 +3658,15 @@",
            "     return coeffs[1:, 1:, :, :]",
            " ",
            " ",
            " @renamed_kwarg_warning(",
            "     since='0.11.2',",
            "     old_param_name='clearsky_dni',",
            "     new_param_name='dni_clear',",
            "-    removal=\"0.13.0\")",
            "+    removal=\"0.14.0\")",
            " def dni(ghi, dhi, zenith, dni_clear=None, clearsky_tolerance=1.1,",
            "         zenith_threshold_for_zero_dni=88.0,",
            "         zenith_threshold_for_clearsky_limit=80.0):",
            "     \"\"\"",
            "     Determine DNI from GHI and DHI.",
            " ",
            "     When calculating the DNI from GHI and DHI the calculated DNI may be"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/modelchain.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/modelchain.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/modelchain.py",
            "@@ -607,15 +607,15 @@",
            "         else:",
            "             self._dc_model = partial(model, self)",
            " ",
            "     def infer_dc_model(self):",
            "         \"\"\"Infer DC power model from Array module parameters.\"\"\"",
            "         params = _common_keys(",
            "             tuple(array.module_parameters for array in self.system.arrays))",
            "-        if {'A0', 'A1', 'C7'} <= params:",
            "+        if {'A0', 'A1', 'C3'} <= params:",
            "             return self.sapm, 'sapm'",
            "         elif {'a_ref', 'I_L_ref', 'I_o_ref', 'R_sh_ref', 'R_s',",
            "               'Adjust'} <= params:",
            "             return self.cec, 'cec'",
            "         elif {'a_ref', 'I_L_ref', 'I_o_ref', 'R_sh_ref', 'R_s'} <= params:",
            "             return self.desoto, 'desoto'",
            "         elif {'gamma_ref', 'mu_gamma', 'I_L_ref', 'I_o_ref', 'R_sh_ref',"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/pvsystem.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/pvsystem.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/pvsystem.py",
            "@@ -22,6861 +22,7007 @@",
            " 00000150: 2061 7320 7064 0a66 726f 6d20 6461 7461   as pd.from data",
            " 00000160: 636c 6173 7365 7320 696d 706f 7274 2064  classes import d",
            " 00000170: 6174 6163 6c61 7373 0a66 726f 6d20 6162  ataclass.from ab",
            " 00000180: 6320 696d 706f 7274 2041 4243 2c20 6162  c import ABC, ab",
            " 00000190: 7374 7261 6374 6d65 7468 6f64 0a66 726f  stractmethod.fro",
            " 000001a0: 6d20 7479 7069 6e67 2069 6d70 6f72 7420  m typing import ",
            " 000001b0: 4f70 7469 6f6e 616c 2c20 556e 696f 6e0a  Optional, Union.",
            "-000001c0: 0a66 726f 6d20 7076 6c69 622e 5f64 6570  .from pvlib._dep",
            "-000001d0: 7265 6361 7469 6f6e 2069 6d70 6f72 7420  recation import ",
            "-000001e0: 6465 7072 6563 6174 6564 0a0a 696d 706f  deprecated..impo",
            "-000001f0: 7274 2070 766c 6962 2020 2320 7573 6564  rt pvlib  # used",
            "-00000200: 2074 6f20 6176 6f69 6420 616c 6265 646f   to avoid albedo",
            "-00000210: 206e 616d 6520 636f 6c6c 6973 696f 6e20   name collision ",
            "-00000220: 696e 2074 6865 2041 7272 6179 2063 6c61  in the Array cla",
            "-00000230: 7373 0a66 726f 6d20 7076 6c69 6220 696d  ss.from pvlib im",
            "-00000240: 706f 7274 2028 6174 6d6f 7370 6865 7265  port (atmosphere",
            "-00000250: 2c20 6961 6d2c 2069 6e76 6572 7465 722c  , iam, inverter,",
            "-00000260: 2069 7272 6164 6961 6e63 652c 0a20 2020   irradiance,.   ",
            "-00000270: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00000280: 7369 6e67 6c65 6469 6f64 6520 6173 205f  singlediode as _",
            "-00000290: 7369 6e67 6c65 6469 6f64 652c 2073 7065  singlediode, spe",
            "-000002a0: 6374 7275 6d2c 2074 656d 7065 7261 7475  ctrum, temperatu",
            "-000002b0: 7265 290a 6672 6f6d 2070 766c 6962 2e74  re).from pvlib.t",
            "-000002c0: 6f6f 6c73 2069 6d70 6f72 7420 5f62 7569  ools import _bui",
            "-000002d0: 6c64 5f6b 7761 7267 732c 205f 6275 696c  ld_kwargs, _buil",
            "-000002e0: 645f 6172 6773 0a69 6d70 6f72 7420 7076  d_args.import pv",
            "-000002f0: 6c69 622e 746f 6f6c 7320 6173 2074 6f6f  lib.tools as too",
            "-00000300: 6c73 0a0a 0a23 2061 2064 6963 7420 6f66  ls...# a dict of",
            "-00000310: 2072 6571 7569 7265 6420 7061 7261 6d65   required parame",
            "-00000320: 7465 7220 6e61 6d65 7320 666f 7220 6561  ter names for ea",
            "-00000330: 6368 2044 4320 706f 7765 7220 6d6f 6465  ch DC power mode",
            "-00000340: 6c0a 5f44 435f 4d4f 4445 4c5f 5041 5241  l._DC_MODEL_PARA",
            "-00000350: 4d53 203d 207b 0a20 2020 2027 7361 706d  MS = {.    'sapm",
            "-00000360: 273a 207b 0a20 2020 2020 2020 2027 4330  ': {.        'C0",
            "-00000370: 272c 2027 4331 272c 2027 4332 272c 2027  ', 'C1', 'C2', '",
            "-00000380: 4333 272c 2027 4334 272c 2027 4335 272c  C3', 'C4', 'C5',",
            "-00000390: 2027 4336 272c 2027 4337 272c 0a20 2020   'C6', 'C7',.   ",
            "-000003a0: 2020 2020 2027 4973 636f 272c 2027 496d       'Isco', 'Im",
            "-000003b0: 706f 272c 2027 566f 636f 272c 2027 566d  po', 'Voco', 'Vm",
            "-000003c0: 706f 272c 2027 4169 7363 272c 2027 4169  po', 'Aisc', 'Ai",
            "-000003d0: 6d70 272c 2027 4276 6f63 6f27 2c0a 2020  mp', 'Bvoco',.  ",
            "-000003e0: 2020 2020 2020 274d 6276 6f63 272c 2027        'Mbvoc', '",
            "-000003f0: 4276 6d70 6f27 2c20 274d 6276 6d70 272c  Bvmpo', 'Mbvmp',",
            "-00000400: 2027 4e27 2c20 2743 656c 6c73 5f69 6e5f   'N', 'Cells_in_",
            "-00000410: 5365 7269 6573 272c 0a20 2020 2020 2020  Series',.       ",
            "-00000420: 2027 4958 4f27 2c20 2749 5858 4f27 7d2c   'IXO', 'IXXO'},",
            "-00000430: 0a20 2020 2027 6465 736f 746f 273a 207b  .    'desoto': {",
            "-00000440: 0a20 2020 2020 2020 2027 616c 7068 615f  .        'alpha_",
            "-00000450: 7363 272c 2027 615f 7265 6627 2c20 2749  sc', 'a_ref', 'I",
            "-00000460: 5f4c 5f72 6566 272c 2027 495f 6f5f 7265  _L_ref', 'I_o_re",
            "-00000470: 6627 2c0a 2020 2020 2020 2020 2752 5f73  f',.        'R_s",
            "-00000480: 685f 7265 6627 2c20 2752 5f73 277d 2c0a  h_ref', 'R_s'},.",
            "-00000490: 2020 2020 2763 6563 273a 207b 0a20 2020      'cec': {.   ",
            "-000004a0: 2020 2020 2027 616c 7068 615f 7363 272c       'alpha_sc',",
            "-000004b0: 2027 615f 7265 6627 2c20 2749 5f4c 5f72   'a_ref', 'I_L_r",
            "-000004c0: 6566 272c 2027 495f 6f5f 7265 6627 2c0a  ef', 'I_o_ref',.",
            "-000004d0: 2020 2020 2020 2020 2752 5f73 685f 7265          'R_sh_re",
            "-000004e0: 6627 2c20 2752 5f73 272c 2027 4164 6a75  f', 'R_s', 'Adju",
            "-000004f0: 7374 277d 2c0a 2020 2020 2770 7673 7973  st'},.    'pvsys",
            "-00000500: 7427 3a20 7b0a 2020 2020 2020 2020 2767  t': {.        'g",
            "-00000510: 616d 6d61 5f72 6566 272c 2027 6d75 5f67  amma_ref', 'mu_g",
            "-00000520: 616d 6d61 272c 2027 495f 4c5f 7265 6627  amma', 'I_L_ref'",
            "-00000530: 2c20 2749 5f6f 5f72 6566 272c 0a20 2020  , 'I_o_ref',.   ",
            "-00000540: 2020 2020 2027 525f 7368 5f72 6566 272c       'R_sh_ref',",
            "-00000550: 2027 525f 7368 5f30 272c 2027 525f 7327   'R_sh_0', 'R_s'",
            "-00000560: 2c20 2761 6c70 6861 5f73 6327 2c20 2745  , 'alpha_sc', 'E",
            "-00000570: 6752 6566 272c 0a20 2020 2020 2020 2027  gRef',.        '",
            "-00000580: 6365 6c6c 735f 696e 5f73 6572 6965 7327  cells_in_series'",
            "-00000590: 7d2c 0a20 2020 2027 7369 6e67 6c65 6469  },.    'singledi",
            "-000005a0: 6f64 6527 3a20 7b0a 2020 2020 2020 2020  ode': {.        ",
            "-000005b0: 2761 6c70 6861 5f73 6327 2c20 2761 5f72  'alpha_sc', 'a_r",
            "-000005c0: 6566 272c 2027 495f 4c5f 7265 6627 2c20  ef', 'I_L_ref', ",
            "-000005d0: 2749 5f6f 5f72 6566 272c 0a20 2020 2020  'I_o_ref',.     ",
            "-000005e0: 2020 2027 525f 7368 5f72 6566 272c 2027     'R_sh_ref', '",
            "-000005f0: 525f 7327 7d2c 0a20 2020 2027 7076 7761  R_s'},.    'pvwa",
            "-00000600: 7474 7327 3a20 7b27 7064 6330 272c 2027  tts': {'pdc0', '",
            "-00000610: 6761 6d6d 615f 7064 6327 7d0a 7d0a 0a0a  gamma_pdc'}.}...",
            "-00000620: 6465 6620 5f75 6e77 7261 705f 7369 6e67  def _unwrap_sing",
            "-00000630: 6c65 5f76 616c 7565 2866 756e 6329 3a0a  le_value(func):.",
            "-00000640: 2020 2020 2222 2244 6563 6f72 6174 6f72      \"\"\"Decorator",
            "-00000650: 2066 6f72 2066 756e 6374 696f 6e73 2074   for functions t",
            "-00000660: 6861 7420 7265 7475 726e 2069 7465 7261  hat return itera",
            "-00000670: 626c 6573 2e0a 0a20 2020 2049 6620 7468  bles...    If th",
            "-00000680: 6520 6c65 6e67 7468 206f 6620 7468 6520  e length of the ",
            "-00000690: 6974 6572 6162 6c65 2072 6574 7572 6e65  iterable returne",
            "-000006a0: 6420 6279 2060 6675 6e63 6020 6973 2031  d by `func` is 1",
            "-000006b0: 2c20 7468 656e 0a20 2020 2074 6865 2073  , then.    the s",
            "-000006c0: 696e 676c 6520 6d65 6d62 6572 206f 6620  ingle member of ",
            "-000006d0: 7468 6520 6974 6572 6162 6c65 2069 7320  the iterable is ",
            "-000006e0: 7265 7475 726e 6564 2e20 4966 2074 6865  returned. If the",
            "-000006f0: 206c 656e 6774 6820 6973 0a20 2020 2067   length is.    g",
            "-00000700: 7265 6174 6572 2074 6861 6e20 312c 2074  reater than 1, t",
            "-00000710: 6865 6e20 656e 7469 7265 2069 7465 7261  hen entire itera",
            "-00000720: 626c 6520 6973 2072 6574 7572 6e65 642e  ble is returned.",
            "-00000730: 0a0a 2020 2020 4164 6473 2027 756e 7772  ..    Adds 'unwr",
            "-00000740: 6170 2720 6173 2061 206b 6579 776f 7264  ap' as a keyword",
            "-00000750: 2061 7267 756d 656e 7420 7468 6174 2063   argument that c",
            "-00000760: 616e 2062 6520 7365 7420 746f 2046 616c  an be set to Fal",
            "-00000770: 7365 0a20 2020 2074 6f20 666f 7263 6520  se.    to force ",
            "-00000780: 7468 6520 7265 7475 726e 2076 616c 7565  the return value",
            "-00000790: 2074 6f20 6265 2061 2074 7570 6c65 2c20   to be a tuple, ",
            "-000007a0: 7265 6761 7264 6c65 7373 206f 6620 6974  regardless of it",
            "-000007b0: 7320 6c65 6e67 7468 2e0a 2020 2020 2222  s length..    \"\"",
            "-000007c0: 220a 2020 2020 4066 756e 6374 6f6f 6c73  \".    @functools",
            "-000007d0: 2e77 7261 7073 2866 756e 6329 0a20 2020  .wraps(func).   ",
            "-000007e0: 2064 6566 2066 282a 6172 6773 2c20 2a2a   def f(*args, **",
            "-000007f0: 6b77 6172 6773 293a 0a20 2020 2020 2020  kwargs):.       ",
            "-00000800: 2075 6e77 7261 7020 3d20 6b77 6172 6773   unwrap = kwargs",
            "-00000810: 2e70 6f70 2827 756e 7772 6170 272c 2054  .pop('unwrap', T",
            "-00000820: 7275 6529 0a20 2020 2020 2020 2078 203d  rue).        x =",
            "-00000830: 2066 756e 6328 2a61 7267 732c 202a 2a6b   func(*args, **k",
            "-00000840: 7761 7267 7329 0a20 2020 2020 2020 2069  wargs).        i",
            "-00000850: 6620 756e 7772 6170 2061 6e64 206c 656e  f unwrap and len",
            "-00000860: 2878 2920 3d3d 2031 3a0a 2020 2020 2020  (x) == 1:.      ",
            "-00000870: 2020 2020 2020 7265 7475 726e 2078 5b30        return x[0",
            "-00000880: 5d0a 2020 2020 2020 2020 7265 7475 726e  ].        return",
            "-00000890: 2078 0a20 2020 2072 6574 7572 6e20 660a   x.    return f.",
            "-000008a0: 0a0a 2320 6e6f 7420 7375 7265 2069 6620  ..# not sure if ",
            "-000008b0: 7468 6973 2062 656c 6f6e 6773 2069 6e20  this belongs in ",
            "-000008c0: 7468 6520 7076 7379 7374 656d 206d 6f64  the pvsystem mod",
            "-000008d0: 756c 652e 0a23 206d 6179 6265 2073 6f6d  ule..# maybe som",
            "-000008e0: 6574 6869 6e67 206d 6f72 6520 6c69 6b65  ething more like",
            "-000008f0: 2063 6f72 652e 7079 3f20 4974 206d 6179   core.py? It may",
            "-00000900: 2065 7665 6e74 7561 6c6c 7920 6772 6f77   eventually grow",
            "-00000910: 2074 6f0a 2320 696d 706f 7274 2061 206c   to.# import a l",
            "-00000920: 6f74 206d 6f72 6520 6675 6e63 7469 6f6e  ot more function",
            "-00000930: 616c 6974 7920 6672 6f6d 206f 7468 6572  ality from other",
            "-00000940: 206d 6f64 756c 6573 2e0a 636c 6173 7320   modules..class ",
            "-00000950: 5056 5379 7374 656d 3a0a 2020 2020 2222  PVSystem:.    \"\"",
            "-00000960: 220a 2020 2020 5468 6520 5056 5379 7374  \".    The PVSyst",
            "-00000970: 656d 2063 6c61 7373 2064 6566 696e 6573  em class defines",
            "-00000980: 2061 2073 7461 6e64 6172 6420 7365 7420   a standard set ",
            "-00000990: 6f66 2050 5620 7379 7374 656d 2061 7474  of PV system att",
            "-000009a0: 7269 6275 7465 730a 2020 2020 616e 6420  ributes.    and ",
            "-000009b0: 6d6f 6465 6c69 6e67 2066 756e 6374 696f  modeling functio",
            "-000009c0: 6e73 2e20 5468 6973 2063 6c61 7373 2064  ns. This class d",
            "-000009d0: 6573 6372 6962 6573 2074 6865 2063 6f6c  escribes the col",
            "-000009e0: 6c65 6374 696f 6e20 616e 640a 2020 2020  lection and.    ",
            "-000009f0: 696e 7465 7261 6374 696f 6e73 206f 6620  interactions of ",
            "-00000a00: 5056 2073 7973 7465 6d20 636f 6d70 6f6e  PV system compon",
            "-00000a10: 656e 7473 2072 6174 6865 7220 7468 616e  ents rather than",
            "-00000a20: 2061 6e20 696e 7374 616c 6c65 6420 7379   an installed sy",
            "-00000a30: 7374 656d 0a20 2020 206f 6e20 7468 6520  stem.    on the ",
            "-00000a40: 6772 6f75 6e64 2e20 4974 2069 7320 7479  ground. It is ty",
            "-00000a50: 7069 6361 6c6c 7920 7573 6564 2069 6e20  pically used in ",
            "-00000a60: 636f 6d62 696e 6174 696f 6e20 7769 7468  combination with",
            "-00000a70: 0a20 2020 203a 7079 3a63 6c61 7373 3a60  .    :py:class:`",
            "-00000a80: 7e70 766c 6962 2e6c 6f63 6174 696f 6e2e  ~pvlib.location.",
            "-00000a90: 4c6f 6361 7469 6f6e 6020 616e 640a 2020  Location` and.  ",
            "-00000aa0: 2020 3a70 793a 636c 6173 733a 607e 7076    :py:class:`~pv",
            "-00000ab0: 6c69 622e 6d6f 6465 6c63 6861 696e 2e4d  lib.modelchain.M",
            "-00000ac0: 6f64 656c 4368 6169 6e60 0a20 2020 206f  odelChain`.    o",
            "-00000ad0: 626a 6563 7473 2e0a 0a20 2020 2054 6865  bjects...    The",
            "-00000ae0: 2063 6c61 7373 2073 7570 706f 7274 7320   class supports ",
            "-00000af0: 6261 7369 6320 7379 7374 656d 2074 6f70  basic system top",
            "-00000b00: 6f6c 6f67 6965 7320 636f 6e73 6973 7469  ologies consisti",
            "-00000b10: 6e67 206f 663a 0a0a 2020 2020 2020 2020  ng of:..        ",
            "-00000b20: 2a20 604e 6020 746f 7461 6c20 6d6f 6475  * `N` total modu",
            "-00000b30: 6c65 7320 6172 7261 6e67 6564 2069 6e20  les arranged in ",
            "-00000b40: 7365 7269 6573 0a20 2020 2020 2020 2020  series.         ",
            "-00000b50: 2028 606d 6f64 756c 6573 5f70 6572 5f73   (`modules_per_s",
            "-00000b60: 7472 696e 673d 4e60 2c20 6073 7472 696e  tring=N`, `strin",
            "-00000b70: 6773 5f70 6572 5f69 6e76 6572 7465 723d  gs_per_inverter=",
            "-00000b80: 3160 292e 0a20 2020 2020 2020 202a 2060  1`)..        * `",
            "-00000b90: 4d60 2074 6f74 616c 206d 6f64 756c 6573  M` total modules",
            "-00000ba0: 2061 7272 616e 6765 6420 696e 2070 6172   arranged in par",
            "-00000bb0: 616c 6c65 6c0a 2020 2020 2020 2020 2020  allel.          ",
            "-00000bc0: 2860 6d6f 6475 6c65 735f 7065 725f 7374  (`modules_per_st",
            "-00000bd0: 7269 6e67 3d31 602c 2060 7374 7269 6e67  ring=1`, `string",
            "-00000be0: 735f 7065 725f 696e 7665 7274 6572 3d4d  s_per_inverter=M",
            "-00000bf0: 6029 2e0a 2020 2020 2020 2020 2a20 604e  `)..        * `N",
            "-00000c00: 784d 6020 746f 7461 6c20 6d6f 6475 6c65  xM` total module",
            "-00000c10: 7320 6172 7261 6e67 6564 2069 6e20 604d  s arranged in `M",
            "-00000c20: 6020 7374 7269 6e67 7320 6f66 2060 4e60  ` strings of `N`",
            "-00000c30: 206d 6f64 756c 6573 2065 6163 680a 2020   modules each.  ",
            "-00000c40: 2020 2020 2020 2020 2860 6d6f 6475 6c65          (`module",
            "-00000c50: 735f 7065 725f 7374 7269 6e67 3d4e 602c  s_per_string=N`,",
            "-00000c60: 2060 7374 7269 6e67 735f 7065 725f 696e   `strings_per_in",
            "-00000c70: 7665 7274 6572 3d4d 6029 2e0a 0a20 2020  verter=M`)...   ",
            "-00000c80: 2054 6865 2063 6c61 7373 2069 7320 636f   The class is co",
            "-00000c90: 6d70 6c65 6d65 6e74 6172 7920 746f 2074  mplementary to t",
            "-00000ca0: 6865 206d 6f64 756c 652d 6c65 7665 6c20  he module-level ",
            "-00000cb0: 6675 6e63 7469 6f6e 732e 0a0a 2020 2020  functions...    ",
            "-00000cc0: 5468 6520 6174 7472 6962 7574 6573 2073  The attributes s",
            "-00000cd0: 686f 756c 6420 6765 6e65 7261 6c6c 7920  hould generally ",
            "-00000ce0: 6265 2074 6869 6e67 7320 7468 6174 2064  be things that d",
            "-00000cf0: 6f6e 2774 2063 6861 6e67 6520 6162 6f75  on't change abou",
            "-00000d00: 740a 2020 2020 7468 6520 7379 7374 656d  t.    the system",
            "-00000d10: 2c20 7375 6368 2074 6865 2074 7970 6520  , such the type ",
            "-00000d20: 6f66 206d 6f64 756c 6520 616e 6420 7468  of module and th",
            "-00000d30: 6520 696e 7665 7274 6572 2e20 5468 6520  e inverter. The ",
            "-00000d40: 696e 7374 616e 6365 0a20 2020 206d 6574  instance.    met",
            "-00000d50: 686f 6473 2061 6363 6570 7420 6172 6775  hods accept argu",
            "-00000d60: 6d65 6e74 7320 666f 7220 7468 696e 6773  ments for things",
            "-00000d70: 2074 6861 7420 646f 2063 6861 6e67 652c   that do change,",
            "-00000d80: 2073 7563 6820 6173 0a20 2020 2069 7272   such as.    irr",
            "-00000d90: 6164 6961 6e63 6520 616e 6420 7465 6d70  adiance and temp",
            "-00000da0: 6572 6174 7572 652e 0a0a 2020 2020 5061  erature...    Pa",
            "-00000db0: 7261 6d65 7465 7273 0a20 2020 202d 2d2d  rameters.    ---",
            "-00000dc0: 2d2d 2d2d 2d2d 2d0a 2020 2020 6172 7261  -------.    arra",
            "-00000dd0: 7973 203a 2041 7272 6179 206f 7220 6974  ys : Array or it",
            "-00000de0: 6572 6162 6c65 206f 6620 4172 7261 792c  erable of Array,",
            "-00000df0: 206f 7074 696f 6e61 6c0a 2020 2020 2020   optional.      ",
            "-00000e00: 2020 416e 2041 7272 6179 206f 7220 6c69    An Array or li",
            "-00000e10: 7374 206f 6620 6172 7261 7973 2074 6861  st of arrays tha",
            "-00000e20: 7420 6172 6520 7061 7274 206f 6620 7468  t are part of th",
            "-00000e30: 6520 7379 7374 656d 2e20 4966 206e 6f74  e system. If not",
            "-00000e40: 0a20 2020 2020 2020 2073 7065 6369 6669  .        specifi",
            "-00000e50: 6564 2c20 6120 7369 6e67 6c65 2061 7272  ed, a single arr",
            "-00000e60: 6179 2069 7320 6372 6561 7465 6420 6672  ay is created fr",
            "-00000e70: 6f6d 2074 6865 206f 7468 6572 2070 6172  om the other par",
            "-00000e80: 616d 6574 6572 7320 2865 2e67 2e0a 2020  ameters (e.g..  ",
            "-00000e90: 2020 2020 2020 6073 7572 6661 6365 5f74        `surface_t",
            "-00000ea0: 696c 7460 2c20 6073 7572 6661 6365 5f61  ilt`, `surface_a",
            "-00000eb0: 7a69 6d75 7468 6029 2e20 4966 2073 7065  zimuth`). If spe",
            "-00000ec0: 6369 6669 6564 2061 7320 6120 6c69 7374  cified as a list",
            "-00000ed0: 2c20 7468 6520 6c69 7374 0a20 2020 2020  , the list.     ",
            "-00000ee0: 2020 206d 7573 7420 636f 6e74 6169 6e20     must contain ",
            "-00000ef0: 6174 206c 6561 7374 206f 6e65 2041 7272  at least one Arr",
            "-00000f00: 6179 3b0a 2020 2020 2020 2020 6966 206c  ay;.        if l",
            "-00000f10: 656e 6774 6820 6f66 2061 7272 6179 7320  ength of arrays ",
            "-00000f20: 6973 2030 2061 2056 616c 7565 4572 726f  is 0 a ValueErro",
            "-00000f30: 7220 6973 2072 6169 7365 642e 2049 6620  r is raised. If ",
            "-00000f40: 6061 7272 6179 7360 2069 730a 2020 2020  `arrays` is.    ",
            "-00000f50: 2020 2020 7370 6563 6966 6965 6420 7468      specified th",
            "-00000f60: 6520 666f 6c6c 6f77 696e 6720 5056 5379  e following PVSy",
            "-00000f70: 7374 656d 2070 6172 616d 6574 6572 7320  stem parameters ",
            "-00000f80: 6172 6520 6967 6e6f 7265 643a 0a0a 2020  are ignored:..  ",
            "-00000f90: 2020 2020 2020 2d20 6060 7375 7266 6163        - ``surfac",
            "-00000fa0: 655f 7469 6c74 6060 0a20 2020 2020 2020  e_tilt``.       ",
            "-00000fb0: 202d 2060 6073 7572 6661 6365 5f61 7a69   - ``surface_azi",
            "-00000fc0: 6d75 7468 6060 0a20 2020 2020 2020 202d  muth``.        -",
            "-00000fd0: 2060 6061 6c62 6564 6f60 600a 2020 2020   ``albedo``.    ",
            "-00000fe0: 2020 2020 2d20 6060 7375 7266 6163 655f      - ``surface_",
            "-00000ff0: 7479 7065 6060 0a20 2020 2020 2020 202d  type``.        -",
            "-00001000: 2060 606d 6f64 756c 6560 600a 2020 2020   ``module``.    ",
            "-00001010: 2020 2020 2d20 6060 6d6f 6475 6c65 5f74      - ``module_t",
            "-00001020: 7970 6560 600a 2020 2020 2020 2020 2d20  ype``.        - ",
            "-00001030: 6060 6d6f 6475 6c65 5f70 6172 616d 6574  ``module_paramet",
            "-00001040: 6572 7360 600a 2020 2020 2020 2020 2d20  ers``.        - ",
            "-00001050: 6060 7465 6d70 6572 6174 7572 655f 6d6f  ``temperature_mo",
            "-00001060: 6465 6c5f 7061 7261 6d65 7465 7273 6060  del_parameters``",
            "-00001070: 0a20 2020 2020 2020 202d 2060 606d 6f64  .        - ``mod",
            "-00001080: 756c 6573 5f70 6572 5f73 7472 696e 6760  ules_per_string`",
            "-00001090: 600a 2020 2020 2020 2020 2d20 6060 7374  `.        - ``st",
            "-000010a0: 7269 6e67 735f 7065 725f 696e 7665 7274  rings_per_invert",
            "-000010b0: 6572 6060 0a0a 2020 2020 7375 7266 6163  er``..    surfac",
            "-000010c0: 655f 7469 6c74 3a20 666c 6f61 7420 6f72  e_tilt: float or",
            "-000010d0: 2061 7272 6179 2d6c 696b 652c 2064 6566   array-like, def",
            "-000010e0: 6175 6c74 2030 0a20 2020 2020 2020 2053  ault 0.        S",
            "-000010f0: 7572 6661 6365 2074 696c 7420 616e 676c  urface tilt angl",
            "-00001100: 6573 2069 6e20 6465 6369 6d61 6c20 6465  es in decimal de",
            "-00001110: 6772 6565 732e 0a20 2020 2020 2020 2054  grees..        T",
            "-00001120: 6865 2074 696c 7420 616e 676c 6520 6973  he tilt angle is",
            "-00001130: 2064 6566 696e 6564 2061 7320 6465 6772   defined as degr",
            "-00001140: 6565 7320 6672 6f6d 2068 6f72 697a 6f6e  ees from horizon",
            "-00001150: 7461 6c0a 2020 2020 2020 2020 2865 2e67  tal.        (e.g",
            "-00001160: 2e20 7375 7266 6163 6520 6661 6369 6e67  . surface facing",
            "-00001170: 2075 7020 3d20 302c 2073 7572 6661 6365   up = 0, surface",
            "-00001180: 2066 6163 696e 6720 686f 7269 7a6f 6e20   facing horizon ",
            "-00001190: 3d20 3930 290a 0a20 2020 2073 7572 6661  = 90)..    surfa",
            "-000011a0: 6365 5f61 7a69 6d75 7468 3a20 666c 6f61  ce_azimuth: floa",
            "-000011b0: 7420 6f72 2061 7272 6179 2d6c 696b 652c  t or array-like,",
            "-000011c0: 2064 6566 6175 6c74 2031 3830 0a20 2020   default 180.   ",
            "-000011d0: 2020 2020 2041 7a69 6d75 7468 2061 6e67       Azimuth ang",
            "-000011e0: 6c65 206f 6620 7468 6520 6d6f 6475 6c65  le of the module",
            "-000011f0: 2073 7572 6661 6365 2069 6e20 6465 6369   surface in deci",
            "-00001200: 6d61 6c20 6465 6772 6565 732e 0a20 2020  mal degrees..   ",
            "-00001210: 2020 2020 204e 6f72 7468 3d30 2c20 4561       North=0, Ea",
            "-00001220: 7374 3d39 302c 2053 6f75 7468 3d31 3830  st=90, South=180",
            "-00001230: 2c20 5765 7374 3d32 3730 2e0a 0a20 2020  , West=270...   ",
            "-00001240: 2061 6c62 6564 6f20 3a20 666c 6f61 742c   albedo : float,",
            "-00001250: 206f 7074 696f 6e61 6c0a 2020 2020 2020   optional.      ",
            "-00001260: 2020 4772 6f75 6e64 2073 7572 6661 6365    Ground surface",
            "-00001270: 2061 6c62 6564 6f2e 2049 6620 6e6f 7420   albedo. If not ",
            "-00001280: 7375 7070 6c69 6564 2c20 7468 656e 2060  supplied, then `",
            "-00001290: 6073 7572 6661 6365 5f74 7970 6560 6020  `surface_type`` ",
            "-000012a0: 6973 2075 7365 640a 2020 2020 2020 2020  is used.        ",
            "-000012b0: 746f 206c 6f6f 6b20 7570 2061 2076 616c  to look up a val",
            "-000012c0: 7565 2069 6e20 203a 7079 3a63 6f6e 7374  ue in  :py:const",
            "-000012d0: 3a60 7076 6c69 622e 616c 6265 646f 2e53  :`pvlib.albedo.S",
            "-000012e0: 5552 4641 4345 5f41 4c42 4544 4f53 602e  URFACE_ALBEDOS`.",
            "-000012f0: 0a20 2020 2020 2020 2049 6620 6060 7375  .        If ``su",
            "-00001300: 7266 6163 655f 7479 7065 6060 2069 7320  rface_type`` is ",
            "-00001310: 616c 736f 206e 6f74 2073 7570 706c 6965  also not supplie",
            "-00001320: 6420 7468 656e 2061 2067 726f 756e 6420  d then a ground ",
            "-00001330: 7375 7266 6163 6520 616c 6265 646f 0a20  surface albedo. ",
            "-00001340: 2020 2020 2020 206f 6620 302e 3235 2069         of 0.25 i",
            "-00001350: 7320 7573 6564 2e0a 0a20 2020 2073 7572  s used...    sur",
            "-00001360: 6661 6365 5f74 7970 6520 3a20 7374 7269  face_type : stri",
            "-00001370: 6e67 2c20 6f70 7469 6f6e 616c 0a20 2020  ng, optional.   ",
            "-00001380: 2020 2020 2054 6865 2067 726f 756e 6420       The ground ",
            "-00001390: 7375 7266 6163 6520 7479 7065 2e20 5365  surface type. Se",
            "-000013a0: 6520 203a 7079 3a63 6f6e 7374 3a60 7076  e  :py:const:`pv",
            "-000013b0: 6c69 622e 616c 6265 646f 2e53 5552 4641  lib.albedo.SURFA",
            "-000013c0: 4345 5f41 4c42 4544 4f53 600a 2020 2020  CE_ALBEDOS`.    ",
            "-000013d0: 2020 2020 666f 7220 7661 6c69 6420 7661      for valid va",
            "-000013e0: 6c75 6573 2e0a 0a20 2020 206d 6f64 756c  lues...    modul",
            "-000013f0: 6520 3a20 7374 7269 6e67 2c20 6f70 7469  e : string, opti",
            "-00001400: 6f6e 616c 0a20 2020 2020 2020 2054 6865  onal.        The",
            "-00001410: 206d 6f64 656c 206e 616d 6520 6f66 2074   model name of t",
            "-00001420: 6865 206d 6f64 756c 6573 2e0a 0a20 2020  he modules...   ",
            "-00001430: 206d 6f64 756c 655f 7479 7065 203a 2073   module_type : s",
            "-00001440: 7472 696e 672c 2064 6566 6175 6c74 2027  tring, default '",
            "-00001450: 676c 6173 735f 706f 6c79 6d65 7227 0a20  glass_polymer'. ",
            "-00001460: 2020 2020 2020 2020 4465 7363 7269 6265          Describe",
            "-00001470: 7320 7468 6520 6d6f 6475 6c65 2773 2063  s the module's c",
            "-00001480: 6f6e 7374 7275 6374 696f 6e2e 2056 616c  onstruction. Val",
            "-00001490: 6964 2073 7472 696e 6773 2061 7265 2027  id strings are '",
            "-000014a0: 676c 6173 735f 706f 6c79 6d65 7227 0a20  glass_polymer'. ",
            "-000014b0: 2020 2020 2020 2020 616e 6420 2767 6c61          and 'gla",
            "-000014c0: 7373 5f67 6c61 7373 272e 2055 7365 6420  ss_glass'. Used ",
            "-000014d0: 666f 7220 6365 6c6c 2061 6e64 206d 6f64  for cell and mod",
            "-000014e0: 756c 6520 7465 6d70 6572 6174 7572 6520  ule temperature ",
            "-000014f0: 6361 6c63 756c 6174 696f 6e73 2e0a 0a20  calculations... ",
            "-00001500: 2020 206d 6f64 756c 655f 7061 7261 6d65     module_parame",
            "-00001510: 7465 7273 203a 2064 6963 7420 6f72 2053  ters : dict or S",
            "-00001520: 6572 6965 732c 206f 7074 696f 6e61 6c0a  eries, optional.",
            "-00001530: 2020 2020 2020 2020 4d6f 6475 6c65 2070          Module p",
            "-00001540: 6172 616d 6574 6572 7320 6173 2064 6566  arameters as def",
            "-00001550: 696e 6564 2062 7920 7468 6520 5341 504d  ined by the SAPM",
            "-00001560: 2c20 4345 432c 206f 7220 6f74 6865 722e  , CEC, or other.",
            "-00001570: 0a0a 2020 2020 7465 6d70 6572 6174 7572  ..    temperatur",
            "-00001580: 655f 6d6f 6465 6c5f 7061 7261 6d65 7465  e_model_paramete",
            "-00001590: 7273 203a 2064 6963 7420 6f72 2053 6572  rs : dict or Ser",
            "-000015a0: 6965 732c 206f 7074 696f 6e61 6c0a 2020  ies, optional.  ",
            "-000015b0: 2020 2020 2020 5465 6d70 6572 6174 7572        Temperatur",
            "-000015c0: 6520 6d6f 6465 6c20 7061 7261 6d65 7465  e model paramete",
            "-000015d0: 7273 2061 7320 7265 7175 6972 6564 2062  rs as required b",
            "-000015e0: 7920 6f6e 6520 6f66 2074 6865 206d 6f64  y one of the mod",
            "-000015f0: 656c 7320 696e 0a20 2020 2020 2020 203a  els in.        :",
            "-00001600: 7079 3a6d 6f64 3a60 7076 6c69 622e 7465  py:mod:`pvlib.te",
            "-00001610: 6d70 6572 6174 7572 6560 2028 6578 636c  mperature` (excl",
            "-00001620: 7564 696e 6720 6060 706f 615f 676c 6f62  uding ``poa_glob",
            "-00001630: 616c 6060 2c20 6060 7465 6d70 5f61 6972  al``, ``temp_air",
            "-00001640: 6060 2061 6e64 0a20 2020 2020 2020 2060  `` and.        `",
            "-00001650: 6077 696e 645f 7370 6565 6460 6029 2e0a  `wind_speed``)..",
            "-00001660: 0a20 2020 206d 6f64 756c 6573 5f70 6572  .    modules_per",
            "-00001670: 5f73 7472 696e 673a 2069 6e74 206f 7220  _string: int or ",
            "-00001680: 666c 6f61 742c 2064 6566 6175 6c74 2031  float, default 1",
            "-00001690: 0a20 2020 2020 2020 2053 6565 2073 7973  .        See sys",
            "-000016a0: 7465 6d20 746f 706f 6c6f 6779 2064 6973  tem topology dis",
            "-000016b0: 6375 7373 696f 6e20 6162 6f76 652e 0a0a  cussion above...",
            "-000016c0: 2020 2020 7374 7269 6e67 735f 7065 725f      strings_per_",
            "-000016d0: 696e 7665 7274 6572 3a20 696e 7420 6f72  inverter: int or",
            "-000016e0: 2066 6c6f 6174 2c20 6465 6661 756c 7420   float, default ",
            "-000016f0: 310a 2020 2020 2020 2020 5365 6520 7379  1.        See sy",
            "-00001700: 7374 656d 2074 6f70 6f6c 6f67 7920 6469  stem topology di",
            "-00001710: 7363 7573 7369 6f6e 2061 626f 7665 2e0a  scussion above..",
            "-00001720: 0a20 2020 2069 6e76 6572 7465 7220 3a20  .    inverter : ",
            "-00001730: 7374 7269 6e67 2c20 6f70 7469 6f6e 616c  string, optional",
            "-00001740: 0a20 2020 2020 2020 2054 6865 206d 6f64  .        The mod",
            "-00001750: 656c 206e 616d 6520 6f66 2074 6865 2069  el name of the i",
            "-00001760: 6e76 6572 7465 7273 2e0a 0a20 2020 2069  nverters...    i",
            "-00001770: 6e76 6572 7465 725f 7061 7261 6d65 7465  nverter_paramete",
            "-00001780: 7273 203a 2064 6963 7420 6f72 2053 6572  rs : dict or Ser",
            "-00001790: 6965 732c 206f 7074 696f 6e61 6c0a 2020  ies, optional.  ",
            "-000017a0: 2020 2020 2020 496e 7665 7274 6572 2070        Inverter p",
            "-000017b0: 6172 616d 6574 6572 7320 6173 2064 6566  arameters as def",
            "-000017c0: 696e 6564 2062 7920 7468 6520 5341 504d  ined by the SAPM",
            "-000017d0: 2c20 4345 432c 206f 7220 6f74 6865 722e  , CEC, or other.",
            "-000017e0: 0a0a 2020 2020 7261 636b 696e 675f 6d6f  ..    racking_mo",
            "-000017f0: 6465 6c20 3a20 7374 7269 6e67 2c20 6f70  del : string, op",
            "-00001800: 7469 6f6e 616c 0a20 2020 2020 2020 2056  tional.        V",
            "-00001810: 616c 6964 2073 7472 696e 6773 2061 7265  alid strings are",
            "-00001820: 2060 6027 6f70 656e 5f72 6163 6b27 6060   ``'open_rack'``",
            "-00001830: 2c20 6060 2763 6c6f 7365 5f6d 6f75 6e74  , ``'close_mount",
            "-00001840: 2760 602c 0a20 2020 2020 2020 2060 6027  '``,.        ``'",
            "-00001850: 696e 7375 6c61 7465 645f 6261 636b 2760  insulated_back'`",
            "-00001860: 602c 2060 6027 6672 6565 7374 616e 6469  `, ``'freestandi",
            "-00001870: 6e67 2760 6020 616e 6420 6060 2769 6e73  ng'`` and ``'ins",
            "-00001880: 756c 6174 6564 2760 602e 0a20 2020 2020  ulated'``..     ",
            "-00001890: 2020 2055 7365 6420 746f 2069 6465 6e74     Used to ident",
            "-000018a0: 6966 7920 6120 7061 7261 6d65 7465 7220  ify a parameter ",
            "-000018b0: 7365 7420 666f 7220 7468 6520 5341 504d  set for the SAPM",
            "-000018c0: 206f 7220 5056 7379 7374 2063 656c 6c0a   or PVsyst cell.",
            "-000018d0: 2020 2020 2020 2020 7465 6d70 6572 6174          temperat",
            "-000018e0: 7572 6520 6d6f 6465 6c2e 0a20 2020 2020  ure model..     ",
            "-000018f0: 2020 2053 6565 203a 7079 3a66 756e 633a     See :py:func:",
            "-00001900: 607e 7076 6c69 622e 7465 6d70 6572 6174  `~pvlib.temperat",
            "-00001910: 7572 652e 7361 706d 5f6d 6f64 756c 6560  ure.sapm_module`",
            "-00001920: 2061 6e64 0a20 2020 2020 2020 203a 7079   and.        :py",
            "-00001930: 3a66 756e 633a 607e 7076 6c69 622e 7465  :func:`~pvlib.te",
            "-00001940: 6d70 6572 6174 7572 652e 7076 7379 7374  mperature.pvsyst",
            "-00001950: 5f63 656c 6c60 2066 6f72 2064 6566 696e  _cell` for defin",
            "-00001960: 6974 696f 6e73 2e0a 0a20 2020 206c 6f73  itions...    los",
            "-00001970: 7365 735f 7061 7261 6d65 7465 7273 203a  ses_parameters :",
            "-00001980: 2064 6963 7420 6f72 2053 6572 6965 732c   dict or Series,",
            "-00001990: 206f 7074 696f 6e61 6c0a 2020 2020 2020   optional.      ",
            "-000019a0: 2020 4c6f 7373 6573 2070 6172 616d 6574    Losses paramet",
            "-000019b0: 6572 7320 6173 2064 6566 696e 6564 2062  ers as defined b",
            "-000019c0: 7920 5056 5761 7474 7320 6f72 206f 7468  y PVWatts or oth",
            "-000019d0: 6572 2e0a 0a20 2020 206e 616d 6520 3a20  er...    name : ",
            "-000019e0: 7374 7269 6e67 2c20 6f70 7469 6f6e 616c  string, optional",
            "-000019f0: 0a0a 2020 2020 2a2a 6b77 6172 6773 0a20  ..    **kwargs. ",
            "-00001a00: 2020 2020 2020 2041 7262 6974 7261 7279         Arbitrary",
            "-00001a10: 206b 6579 776f 7264 2061 7267 756d 656e   keyword argumen",
            "-00001a20: 7473 2e0a 2020 2020 2020 2020 496e 636c  ts..        Incl",
            "-00001a30: 7564 6564 2066 6f72 2063 6f6d 7061 7469  uded for compati",
            "-00001a40: 6269 6c69 7479 2c20 6275 7420 6e6f 7420  bility, but not ",
            "-00001a50: 7573 6564 2e0a 0a20 2020 2052 6169 7365  used...    Raise",
            "-00001a60: 730a 2020 2020 2d2d 2d2d 2d2d 0a20 2020  s.    ------.   ",
            "-00001a70: 2056 616c 7565 4572 726f 720a 2020 2020   ValueError.    ",
            "-00001a80: 2020 2020 4966 2060 6061 7272 6179 7360      If ``arrays`",
            "-00001a90: 6020 6973 206e 6f74 204e 6f6e 6520 616e  ` is not None an",
            "-00001aa0: 6420 6861 7320 6c65 6e67 7468 2030 2e0a  d has length 0..",
            "-00001ab0: 0a20 2020 2053 6565 2061 6c73 6f0a 2020  .    See also.  ",
            "-00001ac0: 2020 2d2d 2d2d 2d2d 2d2d 0a20 2020 2070    --------.    p",
            "-00001ad0: 766c 6962 2e6c 6f63 6174 696f 6e2e 4c6f  vlib.location.Lo",
            "-00001ae0: 6361 7469 6f6e 0a20 2020 2022 2222 0a0a  cation.    \"\"\"..",
            "-00001af0: 2020 2020 6465 6620 5f5f 696e 6974 5f5f      def __init__",
            "-00001b00: 2873 656c 662c 0a20 2020 2020 2020 2020  (self,.         ",
            "-00001b10: 2020 2020 2020 2020 6172 7261 7973 3d4e          arrays=N",
            "-00001b20: 6f6e 652c 0a20 2020 2020 2020 2020 2020  one,.           ",
            "-00001b30: 2020 2020 2020 7375 7266 6163 655f 7469        surface_ti",
            "-00001b40: 6c74 3d30 2c20 7375 7266 6163 655f 617a  lt=0, surface_az",
            "-00001b50: 696d 7574 683d 3138 302c 0a20 2020 2020  imuth=180,.     ",
            "-00001b60: 2020 2020 2020 2020 2020 2020 616c 6265              albe",
            "-00001b70: 646f 3d4e 6f6e 652c 2073 7572 6661 6365  do=None, surface",
            "-00001b80: 5f74 7970 653d 4e6f 6e65 2c0a 2020 2020  _type=None,.    ",
            "-00001b90: 2020 2020 2020 2020 2020 2020 206d 6f64               mod",
            "-00001ba0: 756c 653d 4e6f 6e65 2c20 6d6f 6475 6c65  ule=None, module",
            "-00001bb0: 5f74 7970 653d 4e6f 6e65 2c0a 2020 2020  _type=None,.    ",
            "-00001bc0: 2020 2020 2020 2020 2020 2020 206d 6f64               mod",
            "-00001bd0: 756c 655f 7061 7261 6d65 7465 7273 3d4e  ule_parameters=N",
            "-00001be0: 6f6e 652c 0a20 2020 2020 2020 2020 2020  one,.           ",
            "-00001bf0: 2020 2020 2020 7465 6d70 6572 6174 7572        temperatur",
            "-00001c00: 655f 6d6f 6465 6c5f 7061 7261 6d65 7465  e_model_paramete",
            "-00001c10: 7273 3d4e 6f6e 652c 0a20 2020 2020 2020  rs=None,.       ",
            "-00001c20: 2020 2020 2020 2020 2020 6d6f 6475 6c65            module",
            "-00001c30: 735f 7065 725f 7374 7269 6e67 3d31 2c20  s_per_string=1, ",
            "-00001c40: 7374 7269 6e67 735f 7065 725f 696e 7665  strings_per_inve",
            "-00001c50: 7274 6572 3d31 2c0a 2020 2020 2020 2020  rter=1,.        ",
            "-00001c60: 2020 2020 2020 2020 2069 6e76 6572 7465           inverte",
            "-00001c70: 723d 4e6f 6e65 2c20 696e 7665 7274 6572  r=None, inverter",
            "-00001c80: 5f70 6172 616d 6574 6572 733d 4e6f 6e65  _parameters=None",
            "-00001c90: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "-00001ca0: 2020 2072 6163 6b69 6e67 5f6d 6f64 656c     racking_model",
            "-00001cb0: 3d4e 6f6e 652c 206c 6f73 7365 735f 7061  =None, losses_pa",
            "-00001cc0: 7261 6d65 7465 7273 3d4e 6f6e 652c 206e  rameters=None, n",
            "-00001cd0: 616d 653d 4e6f 6e65 293a 0a0a 2020 2020  ame=None):..    ",
            "-00001ce0: 2020 2020 6966 2061 7272 6179 7320 6973      if arrays is",
            "-00001cf0: 204e 6f6e 653a 0a20 2020 2020 2020 2020   None:.         ",
            "-00001d00: 2020 2069 6620 6c6f 7373 6573 5f70 6172     if losses_par",
            "-00001d10: 616d 6574 6572 7320 6973 204e 6f6e 653a  ameters is None:",
            "-00001d20: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00001d30: 2061 7272 6179 5f6c 6f73 7365 735f 7061   array_losses_pa",
            "-00001d40: 7261 6d65 7465 7273 203d 207b 7d0a 2020  rameters = {}.  ",
            "-00001d50: 2020 2020 2020 2020 2020 656c 7365 3a0a            else:.",
            "-00001d60: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00001d70: 6172 7261 795f 6c6f 7373 6573 5f70 6172  array_losses_par",
            "-00001d80: 616d 6574 6572 7320 3d20 5f62 7569 6c64  ameters = _build",
            "-00001d90: 5f6b 7761 7267 7328 5b27 6463 5f6f 686d  _kwargs(['dc_ohm",
            "-00001da0: 6963 5f70 6572 6365 6e74 275d 2c0a 2020  ic_percent'],.  ",
            "-00001db0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00001dc0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000001c0: 6672 6f6d 2070 766c 6962 2e5f 6465 7072  from pvlib._depr",
            "+000001d0: 6563 6174 696f 6e20 696d 706f 7274 2072  ecation import r",
            "+000001e0: 656e 616d 6564 5f6b 7761 7267 5f77 6172  enamed_kwarg_war",
            "+000001f0: 6e69 6e67 0a69 6d70 6f72 7420 7076 6c69  ning.import pvli",
            "+00000200: 6220 2023 2075 7365 6420 746f 2061 766f  b  # used to avo",
            "+00000210: 6964 2061 6c62 6564 6f20 6e61 6d65 2063  id albedo name c",
            "+00000220: 6f6c 6c69 7369 6f6e 2069 6e20 7468 6520  ollision in the ",
            "+00000230: 4172 7261 7920 636c 6173 730a 6672 6f6d  Array class.from",
            "+00000240: 2070 766c 6962 2069 6d70 6f72 7420 2861   pvlib import (a",
            "+00000250: 746d 6f73 7068 6572 652c 2069 616d 2c20  tmosphere, iam, ",
            "+00000260: 696e 7665 7274 6572 2c20 6972 7261 6469  inverter, irradi",
            "+00000270: 616e 6365 2c0a 2020 2020 2020 2020 2020  ance,.          ",
            "+00000280: 2020 2020 2020 2020 2073 696e 676c 6564           singled",
            "+00000290: 696f 6465 2061 7320 5f73 696e 676c 6564  iode as _singled",
            "+000002a0: 696f 6465 2c20 7370 6563 7472 756d 2c20  iode, spectrum, ",
            "+000002b0: 7465 6d70 6572 6174 7572 6529 0a66 726f  temperature).fro",
            "+000002c0: 6d20 7076 6c69 622e 746f 6f6c 7320 696d  m pvlib.tools im",
            "+000002d0: 706f 7274 205f 6275 696c 645f 6b77 6172  port _build_kwar",
            "+000002e0: 6773 2c20 5f62 7569 6c64 5f61 7267 730a  gs, _build_args.",
            "+000002f0: 696d 706f 7274 2070 766c 6962 2e74 6f6f  import pvlib.too",
            "+00000300: 6c73 2061 7320 746f 6f6c 730a 0a0a 2320  ls as tools...# ",
            "+00000310: 6120 6469 6374 206f 6620 7265 7175 6972  a dict of requir",
            "+00000320: 6564 2070 6172 616d 6574 6572 206e 616d  ed parameter nam",
            "+00000330: 6573 2066 6f72 2065 6163 6820 4443 2070  es for each DC p",
            "+00000340: 6f77 6572 206d 6f64 656c 0a5f 4443 5f4d  ower model._DC_M",
            "+00000350: 4f44 454c 5f50 4152 414d 5320 3d20 7b0a  ODEL_PARAMS = {.",
            "+00000360: 2020 2020 2773 6170 6d27 3a20 7b0a 2020      'sapm': {.  ",
            "+00000370: 2020 2020 2020 2320 695f 7820 616e 6420        # i_x and ",
            "+00000380: 695f 7878 2070 6172 616d 7320 2849 584f  i_xx params (IXO",
            "+00000390: 2c20 4958 584f 2c20 4334 2d43 3729 206e  , IXXO, C4-C7) n",
            "+000003a0: 6f74 2072 6571 7569 7265 640a 2020 2020  ot required.    ",
            "+000003b0: 2020 2020 2743 3027 2c20 2743 3127 2c20      'C0', 'C1', ",
            "+000003c0: 2743 3227 2c20 2743 3327 2c0a 2020 2020  'C2', 'C3',.    ",
            "+000003d0: 2020 2020 2749 7363 6f27 2c20 2749 6d70      'Isco', 'Imp",
            "+000003e0: 6f27 2c20 2756 6f63 6f27 2c20 2756 6d70  o', 'Voco', 'Vmp",
            "+000003f0: 6f27 2c20 2741 6973 6327 2c20 2741 696d  o', 'Aisc', 'Aim",
            "+00000400: 7027 2c20 2742 766f 636f 272c 0a20 2020  p', 'Bvoco',.   ",
            "+00000410: 2020 2020 2027 4d62 766f 6327 2c20 2742       'Mbvoc', 'B",
            "+00000420: 766d 706f 272c 2027 4d62 766d 7027 2c20  vmpo', 'Mbvmp', ",
            "+00000430: 274e 272c 2027 4365 6c6c 735f 696e 5f53  'N', 'Cells_in_S",
            "+00000440: 6572 6965 7327 7d2c 0a20 2020 2027 6465  eries'},.    'de",
            "+00000450: 736f 746f 273a 207b 0a20 2020 2020 2020  soto': {.       ",
            "+00000460: 2027 616c 7068 615f 7363 272c 2027 615f   'alpha_sc', 'a_",
            "+00000470: 7265 6627 2c20 2749 5f4c 5f72 6566 272c  ref', 'I_L_ref',",
            "+00000480: 2027 495f 6f5f 7265 6627 2c0a 2020 2020   'I_o_ref',.    ",
            "+00000490: 2020 2020 2752 5f73 685f 7265 6627 2c20      'R_sh_ref', ",
            "+000004a0: 2752 5f73 277d 2c0a 2020 2020 2763 6563  'R_s'},.    'cec",
            "+000004b0: 273a 207b 0a20 2020 2020 2020 2027 616c  ': {.        'al",
            "+000004c0: 7068 615f 7363 272c 2027 615f 7265 6627  pha_sc', 'a_ref'",
            "+000004d0: 2c20 2749 5f4c 5f72 6566 272c 2027 495f  , 'I_L_ref', 'I_",
            "+000004e0: 6f5f 7265 6627 2c0a 2020 2020 2020 2020  o_ref',.        ",
            "+000004f0: 2752 5f73 685f 7265 6627 2c20 2752 5f73  'R_sh_ref', 'R_s",
            "+00000500: 272c 2027 4164 6a75 7374 277d 2c0a 2020  ', 'Adjust'},.  ",
            "+00000510: 2020 2770 7673 7973 7427 3a20 7b0a 2020    'pvsyst': {.  ",
            "+00000520: 2020 2020 2020 2767 616d 6d61 5f72 6566        'gamma_ref",
            "+00000530: 272c 2027 6d75 5f67 616d 6d61 272c 2027  ', 'mu_gamma', '",
            "+00000540: 495f 4c5f 7265 6627 2c20 2749 5f6f 5f72  I_L_ref', 'I_o_r",
            "+00000550: 6566 272c 0a20 2020 2020 2020 2027 525f  ef',.        'R_",
            "+00000560: 7368 5f72 6566 272c 2027 525f 7368 5f30  sh_ref', 'R_sh_0",
            "+00000570: 272c 2027 525f 7327 2c20 2761 6c70 6861  ', 'R_s', 'alpha",
            "+00000580: 5f73 6327 2c20 2745 6752 6566 272c 0a20  _sc', 'EgRef',. ",
            "+00000590: 2020 2020 2020 2027 6365 6c6c 735f 696e         'cells_in",
            "+000005a0: 5f73 6572 6965 7327 7d2c 0a20 2020 2027  _series'},.    '",
            "+000005b0: 7369 6e67 6c65 6469 6f64 6527 3a20 7b0a  singlediode': {.",
            "+000005c0: 2020 2020 2020 2020 2761 6c70 6861 5f73          'alpha_s",
            "+000005d0: 6327 2c20 2761 5f72 6566 272c 2027 495f  c', 'a_ref', 'I_",
            "+000005e0: 4c5f 7265 6627 2c20 2749 5f6f 5f72 6566  L_ref', 'I_o_ref",
            "+000005f0: 272c 0a20 2020 2020 2020 2027 525f 7368  ',.        'R_sh",
            "+00000600: 5f72 6566 272c 2027 525f 7327 7d2c 0a20  _ref', 'R_s'},. ",
            "+00000610: 2020 2027 7076 7761 7474 7327 3a20 7b27     'pvwatts': {'",
            "+00000620: 7064 6330 272c 2027 6761 6d6d 615f 7064  pdc0', 'gamma_pd",
            "+00000630: 6327 7d0a 7d0a 0a0a 6465 6620 5f75 6e77  c'}.}...def _unw",
            "+00000640: 7261 705f 7369 6e67 6c65 5f76 616c 7565  rap_single_value",
            "+00000650: 2866 756e 6329 3a0a 2020 2020 2222 2244  (func):.    \"\"\"D",
            "+00000660: 6563 6f72 6174 6f72 2066 6f72 2066 756e  ecorator for fun",
            "+00000670: 6374 696f 6e73 2074 6861 7420 7265 7475  ctions that retu",
            "+00000680: 726e 2069 7465 7261 626c 6573 2e0a 0a20  rn iterables... ",
            "+00000690: 2020 2049 6620 7468 6520 6c65 6e67 7468     If the length",
            "+000006a0: 206f 6620 7468 6520 6974 6572 6162 6c65   of the iterable",
            "+000006b0: 2072 6574 7572 6e65 6420 6279 2060 6675   returned by `fu",
            "+000006c0: 6e63 6020 6973 2031 2c20 7468 656e 0a20  nc` is 1, then. ",
            "+000006d0: 2020 2074 6865 2073 696e 676c 6520 6d65     the single me",
            "+000006e0: 6d62 6572 206f 6620 7468 6520 6974 6572  mber of the iter",
            "+000006f0: 6162 6c65 2069 7320 7265 7475 726e 6564  able is returned",
            "+00000700: 2e20 4966 2074 6865 206c 656e 6774 6820  . If the length ",
            "+00000710: 6973 0a20 2020 2067 7265 6174 6572 2074  is.    greater t",
            "+00000720: 6861 6e20 312c 2074 6865 6e20 656e 7469  han 1, then enti",
            "+00000730: 7265 2069 7465 7261 626c 6520 6973 2072  re iterable is r",
            "+00000740: 6574 7572 6e65 642e 0a0a 2020 2020 4164  eturned...    Ad",
            "+00000750: 6473 2027 756e 7772 6170 2720 6173 2061  ds 'unwrap' as a",
            "+00000760: 206b 6579 776f 7264 2061 7267 756d 656e   keyword argumen",
            "+00000770: 7420 7468 6174 2063 616e 2062 6520 7365  t that can be se",
            "+00000780: 7420 746f 2046 616c 7365 0a20 2020 2074  t to False.    t",
            "+00000790: 6f20 666f 7263 6520 7468 6520 7265 7475  o force the retu",
            "+000007a0: 726e 2076 616c 7565 2074 6f20 6265 2061  rn value to be a",
            "+000007b0: 2074 7570 6c65 2c20 7265 6761 7264 6c65   tuple, regardle",
            "+000007c0: 7373 206f 6620 6974 7320 6c65 6e67 7468  ss of its length",
            "+000007d0: 2e0a 2020 2020 2222 220a 2020 2020 4066  ..    \"\"\".    @f",
            "+000007e0: 756e 6374 6f6f 6c73 2e77 7261 7073 2866  unctools.wraps(f",
            "+000007f0: 756e 6329 0a20 2020 2064 6566 2066 282a  unc).    def f(*",
            "+00000800: 6172 6773 2c20 2a2a 6b77 6172 6773 293a  args, **kwargs):",
            "+00000810: 0a20 2020 2020 2020 2075 6e77 7261 7020  .        unwrap ",
            "+00000820: 3d20 6b77 6172 6773 2e70 6f70 2827 756e  = kwargs.pop('un",
            "+00000830: 7772 6170 272c 2054 7275 6529 0a20 2020  wrap', True).   ",
            "+00000840: 2020 2020 2078 203d 2066 756e 6328 2a61       x = func(*a",
            "+00000850: 7267 732c 202a 2a6b 7761 7267 7329 0a20  rgs, **kwargs). ",
            "+00000860: 2020 2020 2020 2069 6620 756e 7772 6170         if unwrap",
            "+00000870: 2061 6e64 206c 656e 2878 2920 3d3d 2031   and len(x) == 1",
            "+00000880: 3a0a 2020 2020 2020 2020 2020 2020 7265  :.            re",
            "+00000890: 7475 726e 2078 5b30 5d0a 2020 2020 2020  turn x[0].      ",
            "+000008a0: 2020 7265 7475 726e 2078 0a20 2020 2072    return x.    r",
            "+000008b0: 6574 7572 6e20 660a 0a0a 2320 6e6f 7420  eturn f...# not ",
            "+000008c0: 7375 7265 2069 6620 7468 6973 2062 656c  sure if this bel",
            "+000008d0: 6f6e 6773 2069 6e20 7468 6520 7076 7379  ongs in the pvsy",
            "+000008e0: 7374 656d 206d 6f64 756c 652e 0a23 206d  stem module..# m",
            "+000008f0: 6179 6265 2073 6f6d 6574 6869 6e67 206d  aybe something m",
            "+00000900: 6f72 6520 6c69 6b65 2063 6f72 652e 7079  ore like core.py",
            "+00000910: 3f20 4974 206d 6179 2065 7665 6e74 7561  ? It may eventua",
            "+00000920: 6c6c 7920 6772 6f77 2074 6f0a 2320 696d  lly grow to.# im",
            "+00000930: 706f 7274 2061 206c 6f74 206d 6f72 6520  port a lot more ",
            "+00000940: 6675 6e63 7469 6f6e 616c 6974 7920 6672  functionality fr",
            "+00000950: 6f6d 206f 7468 6572 206d 6f64 756c 6573  om other modules",
            "+00000960: 2e0a 636c 6173 7320 5056 5379 7374 656d  ..class PVSystem",
            "+00000970: 3a0a 2020 2020 2222 220a 2020 2020 5468  :.    \"\"\".    Th",
            "+00000980: 6520 5056 5379 7374 656d 2063 6c61 7373  e PVSystem class",
            "+00000990: 2064 6566 696e 6573 2061 2073 7461 6e64   defines a stand",
            "+000009a0: 6172 6420 7365 7420 6f66 2050 5620 7379  ard set of PV sy",
            "+000009b0: 7374 656d 2061 7474 7269 6275 7465 730a  stem attributes.",
            "+000009c0: 2020 2020 616e 6420 6d6f 6465 6c69 6e67      and modeling",
            "+000009d0: 2066 756e 6374 696f 6e73 2e20 5468 6973   functions. This",
            "+000009e0: 2063 6c61 7373 2064 6573 6372 6962 6573   class describes",
            "+000009f0: 2074 6865 2063 6f6c 6c65 6374 696f 6e20   the collection ",
            "+00000a00: 616e 640a 2020 2020 696e 7465 7261 6374  and.    interact",
            "+00000a10: 696f 6e73 206f 6620 5056 2073 7973 7465  ions of PV syste",
            "+00000a20: 6d20 636f 6d70 6f6e 656e 7473 2072 6174  m components rat",
            "+00000a30: 6865 7220 7468 616e 2061 6e20 696e 7374  her than an inst",
            "+00000a40: 616c 6c65 6420 7379 7374 656d 0a20 2020  alled system.   ",
            "+00000a50: 206f 6e20 7468 6520 6772 6f75 6e64 2e20   on the ground. ",
            "+00000a60: 4974 2069 7320 7479 7069 6361 6c6c 7920  It is typically ",
            "+00000a70: 7573 6564 2069 6e20 636f 6d62 696e 6174  used in combinat",
            "+00000a80: 696f 6e20 7769 7468 0a20 2020 203a 7079  ion with.    :py",
            "+00000a90: 3a63 6c61 7373 3a60 7e70 766c 6962 2e6c  :class:`~pvlib.l",
            "+00000aa0: 6f63 6174 696f 6e2e 4c6f 6361 7469 6f6e  ocation.Location",
            "+00000ab0: 6020 616e 640a 2020 2020 3a70 793a 636c  ` and.    :py:cl",
            "+00000ac0: 6173 733a 607e 7076 6c69 622e 6d6f 6465  ass:`~pvlib.mode",
            "+00000ad0: 6c63 6861 696e 2e4d 6f64 656c 4368 6169  lchain.ModelChai",
            "+00000ae0: 6e60 0a20 2020 206f 626a 6563 7473 2e0a  n`.    objects..",
            "+00000af0: 0a20 2020 2054 6865 2063 6c61 7373 2073  .    The class s",
            "+00000b00: 7570 706f 7274 7320 6261 7369 6320 7379  upports basic sy",
            "+00000b10: 7374 656d 2074 6f70 6f6c 6f67 6965 7320  stem topologies ",
            "+00000b20: 636f 6e73 6973 7469 6e67 206f 663a 0a0a  consisting of:..",
            "+00000b30: 2020 2020 2020 2020 2a20 604e 6020 746f          * `N` to",
            "+00000b40: 7461 6c20 6d6f 6475 6c65 7320 6172 7261  tal modules arra",
            "+00000b50: 6e67 6564 2069 6e20 7365 7269 6573 0a20  nged in series. ",
            "+00000b60: 2020 2020 2020 2020 2028 606d 6f64 756c           (`modul",
            "+00000b70: 6573 5f70 6572 5f73 7472 696e 673d 4e60  es_per_string=N`",
            "+00000b80: 2c20 6073 7472 696e 6773 5f70 6572 5f69  , `strings_per_i",
            "+00000b90: 6e76 6572 7465 723d 3160 292e 0a20 2020  nverter=1`)..   ",
            "+00000ba0: 2020 2020 202a 2060 4d60 2074 6f74 616c       * `M` total",
            "+00000bb0: 206d 6f64 756c 6573 2061 7272 616e 6765   modules arrange",
            "+00000bc0: 6420 696e 2070 6172 616c 6c65 6c0a 2020  d in parallel.  ",
            "+00000bd0: 2020 2020 2020 2020 2860 6d6f 6475 6c65          (`module",
            "+00000be0: 735f 7065 725f 7374 7269 6e67 3d31 602c  s_per_string=1`,",
            "+00000bf0: 2060 7374 7269 6e67 735f 7065 725f 696e   `strings_per_in",
            "+00000c00: 7665 7274 6572 3d4d 6029 2e0a 2020 2020  verter=M`)..    ",
            "+00000c10: 2020 2020 2a20 604e 784d 6020 746f 7461      * `NxM` tota",
            "+00000c20: 6c20 6d6f 6475 6c65 7320 6172 7261 6e67  l modules arrang",
            "+00000c30: 6564 2069 6e20 604d 6020 7374 7269 6e67  ed in `M` string",
            "+00000c40: 7320 6f66 2060 4e60 206d 6f64 756c 6573  s of `N` modules",
            "+00000c50: 2065 6163 680a 2020 2020 2020 2020 2020   each.          ",
            "+00000c60: 2860 6d6f 6475 6c65 735f 7065 725f 7374  (`modules_per_st",
            "+00000c70: 7269 6e67 3d4e 602c 2060 7374 7269 6e67  ring=N`, `string",
            "+00000c80: 735f 7065 725f 696e 7665 7274 6572 3d4d  s_per_inverter=M",
            "+00000c90: 6029 2e0a 0a20 2020 2054 6865 2063 6c61  `)...    The cla",
            "+00000ca0: 7373 2069 7320 636f 6d70 6c65 6d65 6e74  ss is complement",
            "+00000cb0: 6172 7920 746f 2074 6865 206d 6f64 756c  ary to the modul",
            "+00000cc0: 652d 6c65 7665 6c20 6675 6e63 7469 6f6e  e-level function",
            "+00000cd0: 732e 0a0a 2020 2020 5468 6520 6174 7472  s...    The attr",
            "+00000ce0: 6962 7574 6573 2073 686f 756c 6420 6765  ibutes should ge",
            "+00000cf0: 6e65 7261 6c6c 7920 6265 2074 6869 6e67  nerally be thing",
            "+00000d00: 7320 7468 6174 2064 6f6e 2774 2063 6861  s that don't cha",
            "+00000d10: 6e67 6520 6162 6f75 740a 2020 2020 7468  nge about.    th",
            "+00000d20: 6520 7379 7374 656d 2c20 7375 6368 2074  e system, such t",
            "+00000d30: 6865 2074 7970 6520 6f66 206d 6f64 756c  he type of modul",
            "+00000d40: 6520 616e 6420 7468 6520 696e 7665 7274  e and the invert",
            "+00000d50: 6572 2e20 5468 6520 696e 7374 616e 6365  er. The instance",
            "+00000d60: 0a20 2020 206d 6574 686f 6473 2061 6363  .    methods acc",
            "+00000d70: 6570 7420 6172 6775 6d65 6e74 7320 666f  ept arguments fo",
            "+00000d80: 7220 7468 696e 6773 2074 6861 7420 646f  r things that do",
            "+00000d90: 2063 6861 6e67 652c 2073 7563 6820 6173   change, such as",
            "+00000da0: 0a20 2020 2069 7272 6164 6961 6e63 6520  .    irradiance ",
            "+00000db0: 616e 6420 7465 6d70 6572 6174 7572 652e  and temperature.",
            "+00000dc0: 0a0a 2020 2020 5061 7261 6d65 7465 7273  ..    Parameters",
            "+00000dd0: 0a20 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a  .    ----------.",
            "+00000de0: 2020 2020 6172 7261 7973 203a 2041 7272      arrays : Arr",
            "+00000df0: 6179 206f 7220 6974 6572 6162 6c65 206f  ay or iterable o",
            "+00000e00: 6620 4172 7261 792c 206f 7074 696f 6e61  f Array, optiona",
            "+00000e10: 6c0a 2020 2020 2020 2020 416e 2041 7272  l.        An Arr",
            "+00000e20: 6179 206f 7220 6c69 7374 206f 6620 6172  ay or list of ar",
            "+00000e30: 7261 7973 2074 6861 7420 6172 6520 7061  rays that are pa",
            "+00000e40: 7274 206f 6620 7468 6520 7379 7374 656d  rt of the system",
            "+00000e50: 2e20 4966 206e 6f74 0a20 2020 2020 2020  . If not.       ",
            "+00000e60: 2073 7065 6369 6669 6564 2c20 6120 7369   specified, a si",
            "+00000e70: 6e67 6c65 2061 7272 6179 2069 7320 6372  ngle array is cr",
            "+00000e80: 6561 7465 6420 6672 6f6d 2074 6865 206f  eated from the o",
            "+00000e90: 7468 6572 2070 6172 616d 6574 6572 7320  ther parameters ",
            "+00000ea0: 2865 2e67 2e0a 2020 2020 2020 2020 6073  (e.g..        `s",
            "+00000eb0: 7572 6661 6365 5f74 696c 7460 2c20 6073  urface_tilt`, `s",
            "+00000ec0: 7572 6661 6365 5f61 7a69 6d75 7468 6029  urface_azimuth`)",
            "+00000ed0: 2e20 4966 2073 7065 6369 6669 6564 2061  . If specified a",
            "+00000ee0: 7320 6120 6c69 7374 2c20 7468 6520 6c69  s a list, the li",
            "+00000ef0: 7374 0a20 2020 2020 2020 206d 7573 7420  st.        must ",
            "+00000f00: 636f 6e74 6169 6e20 6174 206c 6561 7374  contain at least",
            "+00000f10: 206f 6e65 2041 7272 6179 3b0a 2020 2020   one Array;.    ",
            "+00000f20: 2020 2020 6966 206c 656e 6774 6820 6f66      if length of",
            "+00000f30: 2061 7272 6179 7320 6973 2030 2061 2056   arrays is 0 a V",
            "+00000f40: 616c 7565 4572 726f 7220 6973 2072 6169  alueError is rai",
            "+00000f50: 7365 642e 2049 6620 6061 7272 6179 7360  sed. If `arrays`",
            "+00000f60: 2069 730a 2020 2020 2020 2020 7370 6563   is.        spec",
            "+00000f70: 6966 6965 6420 7468 6520 666f 6c6c 6f77  ified the follow",
            "+00000f80: 696e 6720 5056 5379 7374 656d 2070 6172  ing PVSystem par",
            "+00000f90: 616d 6574 6572 7320 6172 6520 6967 6e6f  ameters are igno",
            "+00000fa0: 7265 643a 0a0a 2020 2020 2020 2020 2d20  red:..        - ",
            "+00000fb0: 6060 7375 7266 6163 655f 7469 6c74 6060  ``surface_tilt``",
            "+00000fc0: 0a20 2020 2020 2020 202d 2060 6073 7572  .        - ``sur",
            "+00000fd0: 6661 6365 5f61 7a69 6d75 7468 6060 0a20  face_azimuth``. ",
            "+00000fe0: 2020 2020 2020 202d 2060 6061 6c62 6564         - ``albed",
            "+00000ff0: 6f60 600a 2020 2020 2020 2020 2d20 6060  o``.        - ``",
            "+00001000: 7375 7266 6163 655f 7479 7065 6060 0a20  surface_type``. ",
            "+00001010: 2020 2020 2020 202d 2060 606d 6f64 756c         - ``modul",
            "+00001020: 6560 600a 2020 2020 2020 2020 2d20 6060  e``.        - ``",
            "+00001030: 6d6f 6475 6c65 5f74 7970 6560 600a 2020  module_type``.  ",
            "+00001040: 2020 2020 2020 2d20 6060 6d6f 6475 6c65        - ``module",
            "+00001050: 5f70 6172 616d 6574 6572 7360 600a 2020  _parameters``.  ",
            "+00001060: 2020 2020 2020 2d20 6060 7465 6d70 6572        - ``temper",
            "+00001070: 6174 7572 655f 6d6f 6465 6c5f 7061 7261  ature_model_para",
            "+00001080: 6d65 7465 7273 6060 0a20 2020 2020 2020  meters``.       ",
            "+00001090: 202d 2060 606d 6f64 756c 6573 5f70 6572   - ``modules_per",
            "+000010a0: 5f73 7472 696e 6760 600a 2020 2020 2020  _string``.      ",
            "+000010b0: 2020 2d20 6060 7374 7269 6e67 735f 7065    - ``strings_pe",
            "+000010c0: 725f 696e 7665 7274 6572 6060 0a0a 2020  r_inverter``..  ",
            "+000010d0: 2020 7375 7266 6163 655f 7469 6c74 3a20    surface_tilt: ",
            "+000010e0: 666c 6f61 7420 6f72 2061 7272 6179 2d6c  float or array-l",
            "+000010f0: 696b 652c 2064 6566 6175 6c74 2030 0a20  ike, default 0. ",
            "+00001100: 2020 2020 2020 2053 7572 6661 6365 2074         Surface t",
            "+00001110: 696c 7420 616e 676c 6573 2069 6e20 6465  ilt angles in de",
            "+00001120: 6369 6d61 6c20 6465 6772 6565 732e 0a20  cimal degrees.. ",
            "+00001130: 2020 2020 2020 2054 6865 2074 696c 7420         The tilt ",
            "+00001140: 616e 676c 6520 6973 2064 6566 696e 6564  angle is defined",
            "+00001150: 2061 7320 6465 6772 6565 7320 6672 6f6d   as degrees from",
            "+00001160: 2068 6f72 697a 6f6e 7461 6c0a 2020 2020   horizontal.    ",
            "+00001170: 2020 2020 2865 2e67 2e20 7375 7266 6163      (e.g. surfac",
            "+00001180: 6520 6661 6369 6e67 2075 7020 3d20 302c  e facing up = 0,",
            "+00001190: 2073 7572 6661 6365 2066 6163 696e 6720   surface facing ",
            "+000011a0: 686f 7269 7a6f 6e20 3d20 3930 290a 0a20  horizon = 90).. ",
            "+000011b0: 2020 2073 7572 6661 6365 5f61 7a69 6d75     surface_azimu",
            "+000011c0: 7468 3a20 666c 6f61 7420 6f72 2061 7272  th: float or arr",
            "+000011d0: 6179 2d6c 696b 652c 2064 6566 6175 6c74  ay-like, default",
            "+000011e0: 2031 3830 0a20 2020 2020 2020 2041 7a69   180.        Azi",
            "+000011f0: 6d75 7468 2061 6e67 6c65 206f 6620 7468  muth angle of th",
            "+00001200: 6520 6d6f 6475 6c65 2073 7572 6661 6365  e module surface",
            "+00001210: 2069 6e20 6465 6369 6d61 6c20 6465 6772   in decimal degr",
            "+00001220: 6565 732e 0a20 2020 2020 2020 204e 6f72  ees..        Nor",
            "+00001230: 7468 3d30 2c20 4561 7374 3d39 302c 2053  th=0, East=90, S",
            "+00001240: 6f75 7468 3d31 3830 2c20 5765 7374 3d32  outh=180, West=2",
            "+00001250: 3730 2e0a 0a20 2020 2061 6c62 6564 6f20  70...    albedo ",
            "+00001260: 3a20 666c 6f61 742c 206f 7074 696f 6e61  : float, optiona",
            "+00001270: 6c0a 2020 2020 2020 2020 4772 6f75 6e64  l.        Ground",
            "+00001280: 2073 7572 6661 6365 2061 6c62 6564 6f2e   surface albedo.",
            "+00001290: 2049 6620 6e6f 7420 7375 7070 6c69 6564   If not supplied",
            "+000012a0: 2c20 7468 656e 2060 6073 7572 6661 6365  , then ``surface",
            "+000012b0: 5f74 7970 6560 6020 6973 2075 7365 640a  _type`` is used.",
            "+000012c0: 2020 2020 2020 2020 746f 206c 6f6f 6b20          to look ",
            "+000012d0: 7570 2061 2076 616c 7565 2069 6e20 203a  up a value in  :",
            "+000012e0: 7079 3a63 6f6e 7374 3a60 7076 6c69 622e  py:const:`pvlib.",
            "+000012f0: 616c 6265 646f 2e53 5552 4641 4345 5f41  albedo.SURFACE_A",
            "+00001300: 4c42 4544 4f53 602e 0a20 2020 2020 2020  LBEDOS`..       ",
            "+00001310: 2049 6620 6060 7375 7266 6163 655f 7479   If ``surface_ty",
            "+00001320: 7065 6060 2069 7320 616c 736f 206e 6f74  pe`` is also not",
            "+00001330: 2073 7570 706c 6965 6420 7468 656e 2061   supplied then a",
            "+00001340: 2067 726f 756e 6420 7375 7266 6163 6520   ground surface ",
            "+00001350: 616c 6265 646f 0a20 2020 2020 2020 206f  albedo.        o",
            "+00001360: 6620 302e 3235 2069 7320 7573 6564 2e0a  f 0.25 is used..",
            "+00001370: 0a20 2020 2073 7572 6661 6365 5f74 7970  .    surface_typ",
            "+00001380: 6520 3a20 7374 7269 6e67 2c20 6f70 7469  e : string, opti",
            "+00001390: 6f6e 616c 0a20 2020 2020 2020 2054 6865  onal.        The",
            "+000013a0: 2067 726f 756e 6420 7375 7266 6163 6520   ground surface ",
            "+000013b0: 7479 7065 2e20 5365 6520 203a 7079 3a63  type. See  :py:c",
            "+000013c0: 6f6e 7374 3a60 7076 6c69 622e 616c 6265  onst:`pvlib.albe",
            "+000013d0: 646f 2e53 5552 4641 4345 5f41 4c42 4544  do.SURFACE_ALBED",
            "+000013e0: 4f53 600a 2020 2020 2020 2020 666f 7220  OS`.        for ",
            "+000013f0: 7661 6c69 6420 7661 6c75 6573 2e0a 0a20  valid values... ",
            "+00001400: 2020 206d 6f64 756c 6520 3a20 7374 7269     module : stri",
            "+00001410: 6e67 2c20 6f70 7469 6f6e 616c 0a20 2020  ng, optional.   ",
            "+00001420: 2020 2020 2054 6865 206d 6f64 656c 206e       The model n",
            "+00001430: 616d 6520 6f66 2074 6865 206d 6f64 756c  ame of the modul",
            "+00001440: 6573 2e0a 0a20 2020 206d 6f64 756c 655f  es...    module_",
            "+00001450: 7479 7065 203a 2073 7472 696e 672c 2064  type : string, d",
            "+00001460: 6566 6175 6c74 2027 676c 6173 735f 706f  efault 'glass_po",
            "+00001470: 6c79 6d65 7227 0a20 2020 2020 2020 2020  lymer'.         ",
            "+00001480: 4465 7363 7269 6265 7320 7468 6520 6d6f  Describes the mo",
            "+00001490: 6475 6c65 2773 2063 6f6e 7374 7275 6374  dule's construct",
            "+000014a0: 696f 6e2e 2056 616c 6964 2073 7472 696e  ion. Valid strin",
            "+000014b0: 6773 2061 7265 2027 676c 6173 735f 706f  gs are 'glass_po",
            "+000014c0: 6c79 6d65 7227 0a20 2020 2020 2020 2020  lymer'.         ",
            "+000014d0: 616e 6420 2767 6c61 7373 5f67 6c61 7373  and 'glass_glass",
            "+000014e0: 272e 2055 7365 6420 666f 7220 6365 6c6c  '. Used for cell",
            "+000014f0: 2061 6e64 206d 6f64 756c 6520 7465 6d70   and module temp",
            "+00001500: 6572 6174 7572 6520 6361 6c63 756c 6174  erature calculat",
            "+00001510: 696f 6e73 2e0a 0a20 2020 206d 6f64 756c  ions...    modul",
            "+00001520: 655f 7061 7261 6d65 7465 7273 203a 2064  e_parameters : d",
            "+00001530: 6963 7420 6f72 2053 6572 6965 732c 206f  ict or Series, o",
            "+00001540: 7074 696f 6e61 6c0a 2020 2020 2020 2020  ptional.        ",
            "+00001550: 4d6f 6475 6c65 2070 6172 616d 6574 6572  Module parameter",
            "+00001560: 7320 6173 2064 6566 696e 6564 2062 7920  s as defined by ",
            "+00001570: 7468 6520 5341 504d 2c20 4345 432c 206f  the SAPM, CEC, o",
            "+00001580: 7220 6f74 6865 722e 0a0a 2020 2020 7465  r other...    te",
            "+00001590: 6d70 6572 6174 7572 655f 6d6f 6465 6c5f  mperature_model_",
            "+000015a0: 7061 7261 6d65 7465 7273 203a 2064 6963  parameters : dic",
            "+000015b0: 7420 6f72 2053 6572 6965 732c 206f 7074  t or Series, opt",
            "+000015c0: 696f 6e61 6c0a 2020 2020 2020 2020 5465  ional.        Te",
            "+000015d0: 6d70 6572 6174 7572 6520 6d6f 6465 6c20  mperature model ",
            "+000015e0: 7061 7261 6d65 7465 7273 2061 7320 7265  parameters as re",
            "+000015f0: 7175 6972 6564 2062 7920 6f6e 6520 6f66  quired by one of",
            "+00001600: 2074 6865 206d 6f64 656c 7320 696e 0a20   the models in. ",
            "+00001610: 2020 2020 2020 203a 7079 3a6d 6f64 3a60         :py:mod:`",
            "+00001620: 7076 6c69 622e 7465 6d70 6572 6174 7572  pvlib.temperatur",
            "+00001630: 6560 2028 6578 636c 7564 696e 6720 6060  e` (excluding ``",
            "+00001640: 706f 615f 676c 6f62 616c 6060 2c20 6060  poa_global``, ``",
            "+00001650: 7465 6d70 5f61 6972 6060 2061 6e64 0a20  temp_air`` and. ",
            "+00001660: 2020 2020 2020 2060 6077 696e 645f 7370         ``wind_sp",
            "+00001670: 6565 6460 6029 2e0a 0a20 2020 206d 6f64  eed``)...    mod",
            "+00001680: 756c 6573 5f70 6572 5f73 7472 696e 673a  ules_per_string:",
            "+00001690: 2069 6e74 206f 7220 666c 6f61 742c 2064   int or float, d",
            "+000016a0: 6566 6175 6c74 2031 0a20 2020 2020 2020  efault 1.       ",
            "+000016b0: 2053 6565 2073 7973 7465 6d20 746f 706f   See system topo",
            "+000016c0: 6c6f 6779 2064 6973 6375 7373 696f 6e20  logy discussion ",
            "+000016d0: 6162 6f76 652e 0a0a 2020 2020 7374 7269  above...    stri",
            "+000016e0: 6e67 735f 7065 725f 696e 7665 7274 6572  ngs_per_inverter",
            "+000016f0: 3a20 696e 7420 6f72 2066 6c6f 6174 2c20  : int or float, ",
            "+00001700: 6465 6661 756c 7420 310a 2020 2020 2020  default 1.      ",
            "+00001710: 2020 5365 6520 7379 7374 656d 2074 6f70    See system top",
            "+00001720: 6f6c 6f67 7920 6469 7363 7573 7369 6f6e  ology discussion",
            "+00001730: 2061 626f 7665 2e0a 0a20 2020 2069 6e76   above...    inv",
            "+00001740: 6572 7465 7220 3a20 7374 7269 6e67 2c20  erter : string, ",
            "+00001750: 6f70 7469 6f6e 616c 0a20 2020 2020 2020  optional.       ",
            "+00001760: 2054 6865 206d 6f64 656c 206e 616d 6520   The model name ",
            "+00001770: 6f66 2074 6865 2069 6e76 6572 7465 7273  of the inverters",
            "+00001780: 2e0a 0a20 2020 2069 6e76 6572 7465 725f  ...    inverter_",
            "+00001790: 7061 7261 6d65 7465 7273 203a 2064 6963  parameters : dic",
            "+000017a0: 7420 6f72 2053 6572 6965 732c 206f 7074  t or Series, opt",
            "+000017b0: 696f 6e61 6c0a 2020 2020 2020 2020 496e  ional.        In",
            "+000017c0: 7665 7274 6572 2070 6172 616d 6574 6572  verter parameter",
            "+000017d0: 7320 6173 2064 6566 696e 6564 2062 7920  s as defined by ",
            "+000017e0: 7468 6520 5341 504d 2c20 4345 432c 206f  the SAPM, CEC, o",
            "+000017f0: 7220 6f74 6865 722e 0a0a 2020 2020 7261  r other...    ra",
            "+00001800: 636b 696e 675f 6d6f 6465 6c20 3a20 7374  cking_model : st",
            "+00001810: 7269 6e67 2c20 6f70 7469 6f6e 616c 0a20  ring, optional. ",
            "+00001820: 2020 2020 2020 2056 616c 6964 2073 7472         Valid str",
            "+00001830: 696e 6773 2061 7265 2060 6027 6f70 656e  ings are ``'open",
            "+00001840: 5f72 6163 6b27 6060 2c20 6060 2763 6c6f  _rack'``, ``'clo",
            "+00001850: 7365 5f6d 6f75 6e74 2760 602c 0a20 2020  se_mount'``,.   ",
            "+00001860: 2020 2020 2060 6027 696e 7375 6c61 7465       ``'insulate",
            "+00001870: 645f 6261 636b 2760 602c 2060 6027 6672  d_back'``, ``'fr",
            "+00001880: 6565 7374 616e 6469 6e67 2760 6020 616e  eestanding'`` an",
            "+00001890: 6420 6060 2769 6e73 756c 6174 6564 2760  d ``'insulated'`",
            "+000018a0: 602e 0a20 2020 2020 2020 2055 7365 6420  `..        Used ",
            "+000018b0: 746f 2069 6465 6e74 6966 7920 6120 7061  to identify a pa",
            "+000018c0: 7261 6d65 7465 7220 7365 7420 666f 7220  rameter set for ",
            "+000018d0: 7468 6520 5341 504d 206f 7220 5056 7379  the SAPM or PVsy",
            "+000018e0: 7374 2063 656c 6c0a 2020 2020 2020 2020  st cell.        ",
            "+000018f0: 7465 6d70 6572 6174 7572 6520 6d6f 6465  temperature mode",
            "+00001900: 6c2e 0a20 2020 2020 2020 2053 6565 203a  l..        See :",
            "+00001910: 7079 3a66 756e 633a 607e 7076 6c69 622e  py:func:`~pvlib.",
            "+00001920: 7465 6d70 6572 6174 7572 652e 7361 706d  temperature.sapm",
            "+00001930: 5f6d 6f64 756c 6560 2061 6e64 0a20 2020  _module` and.   ",
            "+00001940: 2020 2020 203a 7079 3a66 756e 633a 607e       :py:func:`~",
            "+00001950: 7076 6c69 622e 7465 6d70 6572 6174 7572  pvlib.temperatur",
            "+00001960: 652e 7076 7379 7374 5f63 656c 6c60 2066  e.pvsyst_cell` f",
            "+00001970: 6f72 2064 6566 696e 6974 696f 6e73 2e0a  or definitions..",
            "+00001980: 0a20 2020 206c 6f73 7365 735f 7061 7261  .    losses_para",
            "+00001990: 6d65 7465 7273 203a 2064 6963 7420 6f72  meters : dict or",
            "+000019a0: 2053 6572 6965 732c 206f 7074 696f 6e61   Series, optiona",
            "+000019b0: 6c0a 2020 2020 2020 2020 4c6f 7373 6573  l.        Losses",
            "+000019c0: 2070 6172 616d 6574 6572 7320 6173 2064   parameters as d",
            "+000019d0: 6566 696e 6564 2062 7920 5056 5761 7474  efined by PVWatt",
            "+000019e0: 7320 6f72 206f 7468 6572 2e0a 0a20 2020  s or other...   ",
            "+000019f0: 206e 616d 6520 3a20 7374 7269 6e67 2c20   name : string, ",
            "+00001a00: 6f70 7469 6f6e 616c 0a0a 2020 2020 2a2a  optional..    **",
            "+00001a10: 6b77 6172 6773 0a20 2020 2020 2020 2041  kwargs.        A",
            "+00001a20: 7262 6974 7261 7279 206b 6579 776f 7264  rbitrary keyword",
            "+00001a30: 2061 7267 756d 656e 7473 2e0a 2020 2020   arguments..    ",
            "+00001a40: 2020 2020 496e 636c 7564 6564 2066 6f72      Included for",
            "+00001a50: 2063 6f6d 7061 7469 6269 6c69 7479 2c20   compatibility, ",
            "+00001a60: 6275 7420 6e6f 7420 7573 6564 2e0a 0a20  but not used... ",
            "+00001a70: 2020 2052 6169 7365 730a 2020 2020 2d2d     Raises.    --",
            "+00001a80: 2d2d 2d2d 0a20 2020 2056 616c 7565 4572  ----.    ValueEr",
            "+00001a90: 726f 720a 2020 2020 2020 2020 4966 2060  ror.        If `",
            "+00001aa0: 6061 7272 6179 7360 6020 6973 206e 6f74  `arrays`` is not",
            "+00001ab0: 204e 6f6e 6520 616e 6420 6861 7320 6c65   None and has le",
            "+00001ac0: 6e67 7468 2030 2e0a 0a20 2020 2053 6565  ngth 0...    See",
            "+00001ad0: 2061 6c73 6f0a 2020 2020 2d2d 2d2d 2d2d   also.    ------",
            "+00001ae0: 2d2d 0a20 2020 2070 766c 6962 2e6c 6f63  --.    pvlib.loc",
            "+00001af0: 6174 696f 6e2e 4c6f 6361 7469 6f6e 0a20  ation.Location. ",
            "+00001b00: 2020 2022 2222 0a0a 2020 2020 6465 6620     \"\"\"..    def ",
            "+00001b10: 5f5f 696e 6974 5f5f 2873 656c 662c 0a20  __init__(self,. ",
            "+00001b20: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00001b30: 6172 7261 7973 3d4e 6f6e 652c 0a20 2020  arrays=None,.   ",
            "+00001b40: 2020 2020 2020 2020 2020 2020 2020 7375                su",
            "+00001b50: 7266 6163 655f 7469 6c74 3d30 2c20 7375  rface_tilt=0, su",
            "+00001b60: 7266 6163 655f 617a 696d 7574 683d 3138  rface_azimuth=18",
            "+00001b70: 302c 0a20 2020 2020 2020 2020 2020 2020  0,.             ",
            "+00001b80: 2020 2020 616c 6265 646f 3d4e 6f6e 652c      albedo=None,",
            "+00001b90: 2073 7572 6661 6365 5f74 7970 653d 4e6f   surface_type=No",
            "+00001ba0: 6e65 2c0a 2020 2020 2020 2020 2020 2020  ne,.            ",
            "+00001bb0: 2020 2020 206d 6f64 756c 653d 4e6f 6e65       module=None",
            "+00001bc0: 2c20 6d6f 6475 6c65 5f74 7970 653d 4e6f  , module_type=No",
            "+00001bd0: 6e65 2c0a 2020 2020 2020 2020 2020 2020  ne,.            ",
            "+00001be0: 2020 2020 206d 6f64 756c 655f 7061 7261       module_para",
            "+00001bf0: 6d65 7465 7273 3d4e 6f6e 652c 0a20 2020  meters=None,.   ",
            "+00001c00: 2020 2020 2020 2020 2020 2020 2020 7465                te",
            "+00001c10: 6d70 6572 6174 7572 655f 6d6f 6465 6c5f  mperature_model_",
            "+00001c20: 7061 7261 6d65 7465 7273 3d4e 6f6e 652c  parameters=None,",
            "+00001c30: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+00001c40: 2020 6d6f 6475 6c65 735f 7065 725f 7374    modules_per_st",
            "+00001c50: 7269 6e67 3d31 2c20 7374 7269 6e67 735f  ring=1, strings_",
            "+00001c60: 7065 725f 696e 7665 7274 6572 3d31 2c0a  per_inverter=1,.",
            "+00001c70: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00001c80: 2069 6e76 6572 7465 723d 4e6f 6e65 2c20   inverter=None, ",
            "+00001c90: 696e 7665 7274 6572 5f70 6172 616d 6574  inverter_paramet",
            "+00001ca0: 6572 733d 4e6f 6e65 2c0a 2020 2020 2020  ers=None,.      ",
            "+00001cb0: 2020 2020 2020 2020 2020 2072 6163 6b69             racki",
            "+00001cc0: 6e67 5f6d 6f64 656c 3d4e 6f6e 652c 206c  ng_model=None, l",
            "+00001cd0: 6f73 7365 735f 7061 7261 6d65 7465 7273  osses_parameters",
            "+00001ce0: 3d4e 6f6e 652c 206e 616d 653d 4e6f 6e65  =None, name=None",
            "+00001cf0: 293a 0a0a 2020 2020 2020 2020 6966 2061  ):..        if a",
            "+00001d00: 7272 6179 7320 6973 204e 6f6e 653a 0a20  rrays is None:. ",
            "+00001d10: 2020 2020 2020 2020 2020 2069 6620 6c6f             if lo",
            "+00001d20: 7373 6573 5f70 6172 616d 6574 6572 7320  sses_parameters ",
            "+00001d30: 6973 204e 6f6e 653a 0a20 2020 2020 2020  is None:.       ",
            "+00001d40: 2020 2020 2020 2020 2061 7272 6179 5f6c           array_l",
            "+00001d50: 6f73 7365 735f 7061 7261 6d65 7465 7273  osses_parameters",
            "+00001d60: 203d 207b 7d0a 2020 2020 2020 2020 2020   = {}.          ",
            "+00001d70: 2020 656c 7365 3a0a 2020 2020 2020 2020    else:.        ",
            "+00001d80: 2020 2020 2020 2020 6172 7261 795f 6c6f          array_lo",
            "+00001d90: 7373 6573 5f70 6172 616d 6574 6572 7320  sses_parameters ",
            "+00001da0: 3d20 5f62 7569 6c64 5f6b 7761 7267 7328  = _build_kwargs(",
            "+00001db0: 5b27 6463 5f6f 686d 6963 5f70 6572 6365  ['dc_ohmic_perce",
            "+00001dc0: 6e74 275d 2c0a 2020 2020 2020 2020 2020  nt'],.          ",
            " 00001dd0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00001de0: 2020 2020 2020 6c6f 7373 6573 5f70 6172        losses_par",
            "-00001df0: 616d 6574 6572 7329 0a20 2020 2020 2020  ameters).       ",
            "-00001e00: 2020 2020 2073 656c 662e 6172 7261 7973       self.arrays",
            "-00001e10: 203d 2028 4172 7261 7928 0a20 2020 2020   = (Array(.     ",
            "-00001e20: 2020 2020 2020 2020 2020 2046 6978 6564             Fixed",
            "-00001e30: 4d6f 756e 7428 7375 7266 6163 655f 7469  Mount(surface_ti",
            "-00001e40: 6c74 2c20 7375 7266 6163 655f 617a 696d  lt, surface_azim",
            "-00001e50: 7574 682c 2072 6163 6b69 6e67 5f6d 6f64  uth, racking_mod",
            "-00001e60: 656c 292c 0a20 2020 2020 2020 2020 2020  el),.           ",
            "-00001e70: 2020 2020 2061 6c62 6564 6f2c 0a20 2020       albedo,.   ",
            "-00001e80: 2020 2020 2020 2020 2020 2020 2073 7572               sur",
            "-00001e90: 6661 6365 5f74 7970 652c 0a20 2020 2020  face_type,.     ",
            "-00001ea0: 2020 2020 2020 2020 2020 206d 6f64 756c             modul",
            "+00001de0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00001df0: 2020 2020 2020 2020 2020 2020 2020 6c6f                lo",
            "+00001e00: 7373 6573 5f70 6172 616d 6574 6572 7329  sses_parameters)",
            "+00001e10: 0a20 2020 2020 2020 2020 2020 2073 656c  .            sel",
            "+00001e20: 662e 6172 7261 7973 203d 2028 4172 7261  f.arrays = (Arra",
            "+00001e30: 7928 0a20 2020 2020 2020 2020 2020 2020  y(.             ",
            "+00001e40: 2020 2046 6978 6564 4d6f 756e 7428 7375     FixedMount(su",
            "+00001e50: 7266 6163 655f 7469 6c74 2c20 7375 7266  rface_tilt, surf",
            "+00001e60: 6163 655f 617a 696d 7574 682c 2072 6163  ace_azimuth, rac",
            "+00001e70: 6b69 6e67 5f6d 6f64 656c 292c 0a20 2020  king_model),.   ",
            "+00001e80: 2020 2020 2020 2020 2020 2020 2061 6c62               alb",
            "+00001e90: 6564 6f2c 0a20 2020 2020 2020 2020 2020  edo,.           ",
            "+00001ea0: 2020 2020 2073 7572 6661 6365 5f74 7970       surface_typ",
            " 00001eb0: 652c 0a20 2020 2020 2020 2020 2020 2020  e,.             ",
            "-00001ec0: 2020 206d 6f64 756c 655f 7479 7065 2c0a     module_type,.",
            "-00001ed0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00001ee0: 6d6f 6475 6c65 5f70 6172 616d 6574 6572  module_parameter",
            "-00001ef0: 732c 0a20 2020 2020 2020 2020 2020 2020  s,.             ",
            "-00001f00: 2020 2074 656d 7065 7261 7475 7265 5f6d     temperature_m",
            "-00001f10: 6f64 656c 5f70 6172 616d 6574 6572 732c  odel_parameters,",
            "-00001f20: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00001f30: 206d 6f64 756c 6573 5f70 6572 5f73 7472   modules_per_str",
            "-00001f40: 696e 672c 0a20 2020 2020 2020 2020 2020  ing,.           ",
            "-00001f50: 2020 2020 2073 7472 696e 6773 5f70 6572       strings_per",
            "-00001f60: 5f69 6e76 6572 7465 722c 0a20 2020 2020  _inverter,.     ",
            "-00001f70: 2020 2020 2020 2020 2020 2061 7272 6179             array",
            "-00001f80: 5f6c 6f73 7365 735f 7061 7261 6d65 7465  _losses_paramete",
            "-00001f90: 7273 2c0a 2020 2020 2020 2020 2020 2020  rs,.            ",
            "-00001fa0: 292c 290a 2020 2020 2020 2020 656c 6966  ),).        elif",
            "-00001fb0: 2069 7369 6e73 7461 6e63 6528 6172 7261   isinstance(arra",
            "-00001fc0: 7973 2c20 4172 7261 7929 3a0a 2020 2020  ys, Array):.    ",
            "-00001fd0: 2020 2020 2020 2020 7365 6c66 2e61 7272          self.arr",
            "-00001fe0: 6179 7320 3d20 2861 7272 6179 732c 290a  ays = (arrays,).",
            "-00001ff0: 2020 2020 2020 2020 656c 6966 206c 656e          elif len",
            "-00002000: 2861 7272 6179 7329 203d 3d20 303a 0a20  (arrays) == 0:. ",
            "-00002010: 2020 2020 2020 2020 2020 2072 6169 7365             raise",
            "-00002020: 2056 616c 7565 4572 726f 7228 2250 5653   ValueError(\"PVS",
            "-00002030: 7973 7465 6d20 6d75 7374 2068 6176 6520  ystem must have ",
            "-00002040: 6174 206c 6561 7374 206f 6e65 2041 7272  at least one Arr",
            "-00002050: 6179 2e20 220a 2020 2020 2020 2020 2020  ay. \".          ",
            "-00002060: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00002070: 2020 2022 4966 2079 6f75 2077 616e 7420     \"If you want ",
            "-00002080: 746f 2063 7265 6174 6520 6120 5056 5379  to create a PVSy",
            "-00002090: 7374 656d 2069 6e73 7461 6e63 6520 220a  stem instance \".",
            "-000020a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000020b0: 2020 2020 2020 2020 2020 2020 2022 7769               \"wi",
            "-000020c0: 7468 2061 2073 696e 676c 6520 4172 7261  th a single Arra",
            "-000020d0: 7920 7061 7373 2060 6172 7261 7973 3d4e  y pass `arrays=N",
            "-000020e0: 6f6e 6560 2061 6e64 2070 6173 7320 220a  one` and pass \".",
            "-000020f0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00002100: 2020 2020 2020 2020 2020 2020 2022 7661               \"va",
            "-00002110: 6c75 6573 2064 6972 6563 746c 7920 746f  lues directly to",
            "-00002120: 2050 5653 7973 7465 6d20 6174 7472 6962   PVSystem attrib",
            "-00002130: 7574 6573 2c20 652e 672e 2c20 220a 2020  utes, e.g., \".  ",
            "-00002140: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00002150: 2020 2020 2020 2020 2020 2022 6073 7572             \"`sur",
            "-00002160: 6661 6365 5f74 696c 743d 3330 6022 290a  face_tilt=30`\").",
            "-00002170: 2020 2020 2020 2020 656c 7365 3a0a 2020          else:.  ",
            "-00002180: 2020 2020 2020 2020 2020 7365 6c66 2e61            self.a",
            "-00002190: 7272 6179 7320 3d20 7475 706c 6528 6172  rrays = tuple(ar",
            "-000021a0: 7261 7973 290a 0a20 2020 2020 2020 2073  rays)..        s",
            "-000021b0: 656c 662e 696e 7665 7274 6572 203d 2069  elf.inverter = i",
            "-000021c0: 6e76 6572 7465 720a 2020 2020 2020 2020  nverter.        ",
            "-000021d0: 6966 2069 6e76 6572 7465 725f 7061 7261  if inverter_para",
            "-000021e0: 6d65 7465 7273 2069 7320 4e6f 6e65 3a0a  meters is None:.",
            "-000021f0: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "-00002200: 2e69 6e76 6572 7465 725f 7061 7261 6d65  .inverter_parame",
            "-00002210: 7465 7273 203d 207b 7d0a 2020 2020 2020  ters = {}.      ",
            "-00002220: 2020 656c 7365 3a0a 2020 2020 2020 2020    else:.        ",
            "-00002230: 2020 2020 7365 6c66 2e69 6e76 6572 7465      self.inverte",
            "-00002240: 725f 7061 7261 6d65 7465 7273 203d 2069  r_parameters = i",
            "-00002250: 6e76 6572 7465 725f 7061 7261 6d65 7465  nverter_paramete",
            "-00002260: 7273 0a0a 2020 2020 2020 2020 6966 206c  rs..        if l",
            "-00002270: 6f73 7365 735f 7061 7261 6d65 7465 7273  osses_parameters",
            "-00002280: 2069 7320 4e6f 6e65 3a0a 2020 2020 2020   is None:.      ",
            "-00002290: 2020 2020 2020 7365 6c66 2e6c 6f73 7365        self.losse",
            "-000022a0: 735f 7061 7261 6d65 7465 7273 203d 207b  s_parameters = {",
            "-000022b0: 7d0a 2020 2020 2020 2020 656c 7365 3a0a  }.        else:.",
            "-000022c0: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "-000022d0: 2e6c 6f73 7365 735f 7061 7261 6d65 7465  .losses_paramete",
            "-000022e0: 7273 203d 206c 6f73 7365 735f 7061 7261  rs = losses_para",
            "-000022f0: 6d65 7465 7273 0a0a 2020 2020 2020 2020  meters..        ",
            "-00002300: 7365 6c66 2e6e 616d 6520 3d20 6e61 6d65  self.name = name",
            "-00002310: 0a0a 2020 2020 6465 6620 5f5f 7265 7072  ..    def __repr",
            "-00002320: 5f5f 2873 656c 6629 3a0a 2020 2020 2020  __(self):.      ",
            "-00002330: 2020 7265 7072 203d 2066 2750 5653 7973    repr = f'PVSys",
            "-00002340: 7465 6d3a 5c6e 2020 6e61 6d65 3a20 7b73  tem:\\n  name: {s",
            "-00002350: 656c 662e 6e61 6d65 7d5c 6e20 2027 0a20  elf.name}\\n  '. ",
            "-00002360: 2020 2020 2020 2066 6f72 2061 7272 6179         for array",
            "-00002370: 2069 6e20 7365 6c66 2e61 7272 6179 733a   in self.arrays:",
            "-00002380: 0a20 2020 2020 2020 2020 2020 2072 6570  .            rep",
            "-00002390: 7220 2b3d 2027 5c6e 2020 272e 6a6f 696e  r += '\\n  '.join",
            "-000023a0: 2861 7272 6179 2e5f 5f72 6570 725f 5f28  (array.__repr__(",
            "-000023b0: 292e 7370 6c69 7428 275c 6e27 2929 0a20  ).split('\\n')). ",
            "-000023c0: 2020 2020 2020 2020 2020 2072 6570 7220             repr ",
            "-000023d0: 2b3d 2027 5c6e 2020 270a 2020 2020 2020  += '\\n  '.      ",
            "-000023e0: 2020 7265 7072 202b 3d20 6627 696e 7665    repr += f'inve",
            "-000023f0: 7274 6572 3a20 7b73 656c 662e 696e 7665  rter: {self.inve",
            "-00002400: 7274 6572 7d27 0a20 2020 2020 2020 2072  rter}'.        r",
            "-00002410: 6574 7572 6e20 7265 7072 0a0a 2020 2020  eturn repr..    ",
            "-00002420: 6465 6620 5f76 616c 6964 6174 655f 7065  def _validate_pe",
            "-00002430: 725f 6172 7261 7928 7365 6c66 2c20 7661  r_array(self, va",
            "-00002440: 6c75 6573 2c20 7379 7374 656d 5f77 6964  lues, system_wid",
            "-00002450: 653d 4661 6c73 6529 3a0a 2020 2020 2020  e=False):.      ",
            "-00002460: 2020 2222 2243 6865 636b 2074 6861 7420    \"\"\"Check that ",
            "-00002470: 6076 616c 7565 7360 2069 7320 6120 7475  `values` is a tu",
            "-00002480: 706c 6520 6f66 2074 6865 2073 616d 6520  ple of the same ",
            "-00002490: 6c65 6e67 7468 2061 730a 2020 2020 2020  length as.      ",
            "-000024a0: 2020 6073 656c 662e 6172 7261 7973 602e    `self.arrays`.",
            "-000024b0: 0a0a 2020 2020 2020 2020 4966 2060 7661  ..        If `va",
            "-000024c0: 6c75 6573 6020 6973 206e 6f74 2061 2074  lues` is not a t",
            "-000024d0: 7570 6c65 2069 7420 6973 2070 6163 6b65  uple it is packe",
            "-000024e0: 6420 696e 2074 6f20 6120 6c65 6e67 7468  d in to a length",
            "-000024f0: 2d31 2074 7570 6c65 2062 6566 6f72 650a  -1 tuple before.",
            "-00002500: 2020 2020 2020 2020 7468 6520 6368 6563          the chec",
            "-00002510: 6b2e 2049 6620 7468 6520 6c65 6e67 7468  k. If the length",
            "-00002520: 7320 6172 6520 6e6f 7420 7468 6520 7361  s are not the sa",
            "-00002530: 6d65 2061 2056 616c 7565 4572 726f 7220  me a ValueError ",
            "-00002540: 6973 2072 6169 7365 642c 0a20 2020 2020  is raised,.     ",
            "-00002550: 2020 206f 7468 6572 7769 7365 2074 6865     otherwise the",
            "-00002560: 2074 7570 6c65 2060 7661 6c75 6573 6020   tuple `values` ",
            "-00002570: 6973 2072 6574 7572 6e65 642e 0a0a 2020  is returned...  ",
            "-00002580: 2020 2020 2020 5768 656e 2060 7379 7374        When `syst",
            "-00002590: 656d 5f77 6964 6560 2069 7320 5472 7565  em_wide` is True",
            "-000025a0: 2061 6e64 2060 7661 6c75 6573 6020 6973   and `values` is",
            "-000025b0: 206e 6f74 2061 2074 7570 6c65 2c20 6076   not a tuple, `v",
            "-000025c0: 616c 7565 7360 0a20 2020 2020 2020 2069  alues`.        i",
            "-000025d0: 7320 7265 706c 6963 6174 6564 2074 6f20  s replicated to ",
            "-000025e0: 6120 7475 706c 6520 6f66 2074 6865 2073  a tuple of the s",
            "-000025f0: 616d 6520 6c65 6e67 7468 2061 7320 6073  ame length as `s",
            "-00002600: 656c 662e 6172 7261 7973 6020 616e 6420  elf.arrays` and ",
            "-00002610: 7468 6174 0a20 2020 2020 2020 2074 7570  that.        tup",
            "-00002620: 6c65 2069 7320 7265 7475 726e 6564 2e0a  le is returned..",
            "-00002630: 2020 2020 2020 2020 2222 220a 2020 2020          \"\"\".    ",
            "-00002640: 2020 2020 6966 2073 7973 7465 6d5f 7769      if system_wi",
            "-00002650: 6465 2061 6e64 206e 6f74 2069 7369 6e73  de and not isins",
            "-00002660: 7461 6e63 6528 7661 6c75 6573 2c20 7475  tance(values, tu",
            "-00002670: 706c 6529 3a0a 2020 2020 2020 2020 2020  ple):.          ",
            "-00002680: 2020 7265 7475 726e 2028 7661 6c75 6573    return (values",
            "-00002690: 2c29 202a 2073 656c 662e 6e75 6d5f 6172  ,) * self.num_ar",
            "-000026a0: 7261 7973 0a20 2020 2020 2020 2069 6620  rays.        if ",
            "-000026b0: 6e6f 7420 6973 696e 7374 616e 6365 2876  not isinstance(v",
            "-000026c0: 616c 7565 732c 2074 7570 6c65 293a 0a20  alues, tuple):. ",
            "-000026d0: 2020 2020 2020 2020 2020 2076 616c 7565             value",
            "-000026e0: 7320 3d20 2876 616c 7565 732c 290a 2020  s = (values,).  ",
            "-000026f0: 2020 2020 2020 6966 206c 656e 2876 616c        if len(val",
            "-00002700: 7565 7329 2021 3d20 6c65 6e28 7365 6c66  ues) != len(self",
            "-00002710: 2e61 7272 6179 7329 3a0a 2020 2020 2020  .arrays):.      ",
            "-00002720: 2020 2020 2020 7261 6973 6520 5661 6c75        raise Valu",
            "-00002730: 6545 7272 6f72 2822 4c65 6e67 7468 206d  eError(\"Length m",
            "-00002740: 6973 6d61 7463 6820 666f 7220 7065 722d  ismatch for per-",
            "-00002750: 6172 7261 7920 7061 7261 6d65 7465 7222  array parameter\"",
            "-00002760: 290a 2020 2020 2020 2020 7265 7475 726e  ).        return",
            "-00002770: 2076 616c 7565 730a 0a20 2020 2040 5f75   values..    @_u",
            "-00002780: 6e77 7261 705f 7369 6e67 6c65 5f76 616c  nwrap_single_val",
            "-00002790: 7565 0a20 2020 2064 6566 205f 696e 6665  ue.    def _infe",
            "-000027a0: 725f 6365 6c6c 5f74 7970 6528 7365 6c66  r_cell_type(self",
            "-000027b0: 293a 0a20 2020 2020 2020 2022 2222 0a20  ):.        \"\"\". ",
            "-000027c0: 2020 2020 2020 2045 7861 6d69 6e65 7320         Examines ",
            "-000027d0: 6d6f 6475 6c65 5f70 6172 616d 6574 6572  module_parameter",
            "-000027e0: 7320 616e 6420 6d61 7073 2074 6865 2054  s and maps the T",
            "-000027f0: 6563 686e 6f6c 6f67 7920 6b65 7920 666f  echnology key fo",
            "-00002800: 7220 7468 6520 4345 430a 2020 2020 2020  r the CEC.      ",
            "-00002810: 2020 6461 7461 6261 7365 2061 6e64 2074    database and t",
            "-00002820: 6865 204d 6174 6572 6961 6c20 6b65 7920  he Material key ",
            "-00002830: 666f 7220 7468 6520 5361 6e64 6961 2064  for the Sandia d",
            "-00002840: 6174 6162 6173 6520 746f 2061 2063 6f6d  atabase to a com",
            "-00002850: 6d6f 6e0a 2020 2020 2020 2020 6c69 7374  mon.        list",
            "-00002860: 206f 6620 7374 7269 6e67 7320 666f 7220   of strings for ",
            "-00002870: 6365 6c6c 2074 7970 652e 0a0a 2020 2020  cell type...    ",
            "-00002880: 2020 2020 5265 7475 726e 730a 2020 2020      Returns.    ",
            "-00002890: 2020 2020 2d2d 2d2d 2d2d 2d0a 2020 2020      -------.    ",
            "-000028a0: 2020 2020 6365 6c6c 5f74 7970 653a 2073      cell_type: s",
            "-000028b0: 7472 0a20 2020 2020 2020 2022 2222 0a20  tr.        \"\"\". ",
            "-000028c0: 2020 2020 2020 2072 6574 7572 6e20 7475         return tu",
            "-000028d0: 706c 6528 6172 7261 792e 5f69 6e66 6572  ple(array._infer",
            "-000028e0: 5f63 656c 6c5f 7479 7065 2829 2066 6f72  _cell_type() for",
            "-000028f0: 2061 7272 6179 2069 6e20 7365 6c66 2e61   array in self.a",
            "-00002900: 7272 6179 7329 0a0a 2020 2020 405f 756e  rrays)..    @_un",
            "-00002910: 7772 6170 5f73 696e 676c 655f 7661 6c75  wrap_single_valu",
            "-00002920: 650a 2020 2020 6465 6620 6765 745f 616f  e.    def get_ao",
            "-00002930: 6928 7365 6c66 2c20 736f 6c61 725f 7a65  i(self, solar_ze",
            "-00002940: 6e69 7468 2c20 736f 6c61 725f 617a 696d  nith, solar_azim",
            "-00002950: 7574 6829 3a0a 2020 2020 2020 2020 2222  uth):.        \"\"",
            "-00002960: 2247 6574 2074 6865 2061 6e67 6c65 206f  \"Get the angle o",
            "-00002970: 6620 696e 6369 6465 6e63 6520 6f6e 2074  f incidence on t",
            "-00002980: 6865 2041 7272 6179 2873 2920 696e 2074  he Array(s) in t",
            "-00002990: 6865 2073 7973 7465 6d2e 0a0a 2020 2020  he system...    ",
            "-000029a0: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "-000029b0: 2020 2020 2020 202d 2d2d 2d2d 2d2d 2d2d         ---------",
            "-000029c0: 2d0a 2020 2020 2020 2020 736f 6c61 725f  -.        solar_",
            "-000029d0: 7a65 6e69 7468 203a 2066 6c6f 6174 206f  zenith : float o",
            "-000029e0: 7220 5365 7269 6573 2e0a 2020 2020 2020  r Series..      ",
            "-000029f0: 2020 2020 2020 536f 6c61 7220 7a65 6e69        Solar zeni",
            "-00002a00: 7468 2061 6e67 6c65 2e0a 2020 2020 2020  th angle..      ",
            "-00002a10: 2020 736f 6c61 725f 617a 696d 7574 6820    solar_azimuth ",
            "-00002a20: 3a20 666c 6f61 7420 6f72 2053 6572 6965  : float or Serie",
            "-00002a30: 732e 0a20 2020 2020 2020 2020 2020 2053  s..            S",
            "-00002a40: 6f6c 6172 2061 7a69 6d75 7468 2061 6e67  olar azimuth ang",
            "-00002a50: 6c65 2e0a 0a20 2020 2020 2020 2052 6574  le...        Ret",
            "-00002a60: 7572 6e73 0a20 2020 2020 2020 202d 2d2d  urns.        ---",
            "-00002a70: 2d2d 2d2d 0a20 2020 2020 2020 2061 6f69  ----.        aoi",
            "-00002a80: 203a 2053 6572 6965 7320 6f72 2074 7570   : Series or tup",
            "-00002a90: 6c65 206f 6620 5365 7269 6573 0a20 2020  le of Series.   ",
            "-00002aa0: 2020 2020 2020 2020 2054 6865 2061 6e67           The ang",
            "-00002ab0: 6c65 206f 6620 696e 6369 6465 6e63 650a  le of incidence.",
            "-00002ac0: 2020 2020 2020 2020 2222 220a 0a20 2020          \"\"\"..   ",
            "-00002ad0: 2020 2020 2072 6574 7572 6e20 7475 706c       return tupl",
            "-00002ae0: 6528 6172 7261 792e 6765 745f 616f 6928  e(array.get_aoi(",
            "-00002af0: 736f 6c61 725f 7a65 6e69 7468 2c20 736f  solar_zenith, so",
            "-00002b00: 6c61 725f 617a 696d 7574 6829 0a20 2020  lar_azimuth).   ",
            "-00002b10: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00002b20: 2020 666f 7220 6172 7261 7920 696e 2073    for array in s",
            "-00002b30: 656c 662e 6172 7261 7973 290a 0a20 2020  elf.arrays)..   ",
            "-00002b40: 2040 5f75 6e77 7261 705f 7369 6e67 6c65   @_unwrap_single",
            "-00002b50: 5f76 616c 7565 0a20 2020 2064 6566 2067  _value.    def g",
            "-00002b60: 6574 5f69 7272 6164 6961 6e63 6528 7365  et_irradiance(se",
            "-00002b70: 6c66 2c20 736f 6c61 725f 7a65 6e69 7468  lf, solar_zenith",
            "-00002b80: 2c20 736f 6c61 725f 617a 696d 7574 682c  , solar_azimuth,",
            "-00002b90: 2064 6e69 2c20 6768 692c 2064 6869 2c0a   dni, ghi, dhi,.",
            "-00002ba0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00002bb0: 2020 2020 2020 2064 6e69 5f65 7874 7261         dni_extra",
            "-00002bc0: 3d4e 6f6e 652c 2061 6972 6d61 7373 3d4e  =None, airmass=N",
            "-00002bd0: 6f6e 652c 2061 6c62 6564 6f3d 4e6f 6e65  one, albedo=None",
            "-00002be0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "-00002bf0: 2020 2020 2020 2020 206d 6f64 656c 3d27           model='",
            "-00002c00: 6861 7964 6176 6965 7327 2c20 2a2a 6b77  haydavies', **kw",
            "-00002c10: 6172 6773 293a 0a20 2020 2020 2020 2022  args):.        \"",
            "-00002c20: 2222 0a20 2020 2020 2020 2055 7365 7320  \"\".        Uses ",
            "-00002c30: 3a70 793a 6675 6e63 3a60 7076 6c69 622e  :py:func:`pvlib.",
            "-00002c40: 6972 7261 6469 616e 6365 2e67 6574 5f74  irradiance.get_t",
            "-00002c50: 6f74 616c 5f69 7272 6164 6961 6e63 6560  otal_irradiance`",
            "-00002c60: 2074 6f0a 2020 2020 2020 2020 6361 6c63   to.        calc",
            "-00002c70: 756c 6174 6520 7468 6520 706c 616e 6520  ulate the plane ",
            "-00002c80: 6f66 2061 7272 6179 2069 7272 6164 6961  of array irradia",
            "-00002c90: 6e63 6520 636f 6d70 6f6e 656e 7473 206f  nce components o",
            "-00002ca0: 6e20 7468 6520 7469 6c74 6564 0a20 2020  n the tilted.   ",
            "-00002cb0: 2020 2020 2073 7572 6661 6365 7320 6465       surfaces de",
            "-00002cc0: 6669 6e65 6420 6279 2065 6163 6820 6172  fined by each ar",
            "-00002cd0: 7261 7927 7320 6060 7375 7266 6163 655f  ray's ``surface_",
            "-00002ce0: 7469 6c74 6060 2061 6e64 0a20 2020 2020  tilt`` and.     ",
            "-00002cf0: 2020 2060 6073 7572 6661 6365 5f61 7a69     ``surface_azi",
            "-00002d00: 6d75 7468 6060 2e0a 0a20 2020 2020 2020  muth``...       ",
            "-00002d10: 2050 6172 616d 6574 6572 730a 2020 2020   Parameters.    ",
            "-00002d20: 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20      ----------. ",
            "-00002d30: 2020 2020 2020 2073 6f6c 6172 5f7a 656e         solar_zen",
            "-00002d40: 6974 6820 3a20 666c 6f61 7420 6f72 2053  ith : float or S",
            "-00002d50: 6572 6965 730a 2020 2020 2020 2020 2020  eries.          ",
            "-00002d60: 2020 536f 6c61 7220 7a65 6e69 7468 2061    Solar zenith a",
            "-00002d70: 6e67 6c65 2e0a 2020 2020 2020 2020 736f  ngle..        so",
            "-00002d80: 6c61 725f 617a 696d 7574 6820 3a20 666c  lar_azimuth : fl",
            "-00002d90: 6f61 7420 6f72 2053 6572 6965 730a 2020  oat or Series.  ",
            "-00002da0: 2020 2020 2020 2020 2020 536f 6c61 7220            Solar ",
            "-00002db0: 617a 696d 7574 6820 616e 676c 652e 0a20  azimuth angle.. ",
            "-00002dc0: 2020 2020 2020 2064 6e69 203a 2066 6c6f         dni : flo",
            "-00002dd0: 6174 2c20 5365 7269 6573 2c20 6f72 2074  at, Series, or t",
            "-00002de0: 7570 6c65 206f 6620 666c 6f61 7420 6f72  uple of float or",
            "-00002df0: 2053 6572 6965 730a 2020 2020 2020 2020   Series.        ",
            "-00002e00: 2020 2020 4469 7265 6374 204e 6f72 6d61      Direct Norma",
            "-00002e10: 6c20 4972 7261 6469 616e 6365 2e20 5b57  l Irradiance. [W",
            "-00002e20: 2f6d 325d 0a20 2020 2020 2020 2067 6869  /m2].        ghi",
            "-00002e30: 203a 2066 6c6f 6174 2c20 5365 7269 6573   : float, Series",
            "-00002e40: 2c20 6f72 2074 7570 6c65 206f 6620 666c  , or tuple of fl",
            "-00002e50: 6f61 7420 6f72 2053 6572 6965 730a 2020  oat or Series.  ",
            "-00002e60: 2020 2020 2020 2020 2020 476c 6f62 616c            Global",
            "-00002e70: 2068 6f72 697a 6f6e 7461 6c20 6972 7261   horizontal irra",
            "-00002e80: 6469 616e 6365 2e20 5b57 2f6d 325d 0a20  diance. [W/m2]. ",
            "-00002e90: 2020 2020 2020 2064 6869 203a 2066 6c6f         dhi : flo",
            "-00002ea0: 6174 2c20 5365 7269 6573 2c20 6f72 2074  at, Series, or t",
            "-00002eb0: 7570 6c65 206f 6620 666c 6f61 7420 6f72  uple of float or",
            "-00002ec0: 2053 6572 6965 730a 2020 2020 2020 2020   Series.        ",
            "-00002ed0: 2020 2020 4469 6666 7573 6520 686f 7269      Diffuse hori",
            "-00002ee0: 7a6f 6e74 616c 2069 7272 6164 6961 6e63  zontal irradianc",
            "-00002ef0: 652e 205b 572f 6d32 5d0a 2020 2020 2020  e. [W/m2].      ",
            "-00002f00: 2020 646e 695f 6578 7472 6120 3a20 666c    dni_extra : fl",
            "-00002f10: 6f61 742c 2053 6572 6965 7320 6f72 2074  oat, Series or t",
            "-00002f20: 7570 6c65 206f 6620 666c 6f61 7420 6f72  uple of float or",
            "-00002f30: 2053 6572 6965 732c 206f 7074 696f 6e61   Series, optiona",
            "-00002f40: 6c0a 2020 2020 2020 2020 2020 2020 4578  l.            Ex",
            "-00002f50: 7472 6174 6572 7265 7374 7269 616c 2064  traterrestrial d",
            "-00002f60: 6972 6563 7420 6e6f 726d 616c 2069 7272  irect normal irr",
            "-00002f70: 6164 6961 6e63 652e 205b 572f 6d32 5d0a  adiance. [W/m2].",
            "-00002f80: 2020 2020 2020 2020 6169 726d 6173 7320          airmass ",
            "-00002f90: 3a20 666c 6f61 7420 6f72 2053 6572 6965  : float or Serie",
            "-00002fa0: 732c 206f 7074 696f 6e61 6c0a 2020 2020  s, optional.    ",
            "-00002fb0: 2020 2020 2020 2020 4169 726d 6173 732e          Airmass.",
            "-00002fc0: 205b 756e 6974 6c65 7373 5d0a 2020 2020   [unitless].    ",
            "-00002fd0: 2020 2020 616c 6265 646f 203a 2066 6c6f      albedo : flo",
            "-00002fe0: 6174 206f 7220 5365 7269 6573 2c20 6f70  at or Series, op",
            "-00002ff0: 7469 6f6e 616c 0a20 2020 2020 2020 2020  tional.         ",
            "-00003000: 2020 2047 726f 756e 6420 7375 7266 6163     Ground surfac",
            "-00003010: 6520 616c 6265 646f 2e20 5b75 6e69 746c  e albedo. [unitl",
            "-00003020: 6573 735d 0a20 2020 2020 2020 206d 6f64  ess].        mod",
            "-00003030: 656c 203a 2053 7472 696e 672c 2064 6566  el : String, def",
            "-00003040: 6175 6c74 2027 6861 7964 6176 6965 7327  ault 'haydavies'",
            "-00003050: 0a20 2020 2020 2020 2020 2020 2049 7272  .            Irr",
            "-00003060: 6164 6961 6e63 6520 6d6f 6465 6c2e 0a0a  adiance model...",
            "-00003070: 2020 2020 2020 2020 6b77 6172 6773 0a20          kwargs. ",
            "-00003080: 2020 2020 2020 2020 2020 2045 7874 7261             Extra",
            "-00003090: 2070 6172 616d 6574 6572 7320 7061 7373   parameters pass",
            "-000030a0: 6564 2074 6f0a 2020 2020 2020 2020 2020  ed to.          ",
            "-000030b0: 2020 3a70 793a 6675 6e63 3a60 7076 6c69    :py:func:`pvli",
            "-000030c0: 622e 6972 7261 6469 616e 6365 2e67 6574  b.irradiance.get",
            "-000030d0: 5f74 6f74 616c 5f69 7272 6164 6961 6e63  _total_irradianc",
            "-000030e0: 6560 2e0a 0a20 2020 2020 2020 204e 6f74  e`...        Not",
            "-000030f0: 6573 0a20 2020 2020 2020 202d 2d2d 2d2d  es.        -----",
            "-00003100: 0a20 2020 2020 2020 2045 6163 6820 6f66  .        Each of",
            "-00003110: 2060 6064 6e69 6060 2c20 6060 6768 6960   ``dni``, ``ghi`",
            "-00003120: 602c 2061 6e64 2060 6064 6e69 6060 206d  `, and ``dni`` m",
            "-00003130: 6179 2062 6520 7061 7373 6564 2061 7320  ay be passed as ",
            "-00003140: 6120 666c 6f61 742c 2053 6572 6965 732c  a float, Series,",
            "-00003150: 0a20 2020 2020 2020 206f 7220 7475 706c  .        or tupl",
            "-00003160: 6520 6f66 2066 6c6f 6174 206f 7220 5365  e of float or Se",
            "-00003170: 7269 6573 2e20 4966 2070 6173 7365 6420  ries. If passed ",
            "-00003180: 6173 2061 2066 6c6f 6174 206f 7220 5365  as a float or Se",
            "-00003190: 7269 6573 2c20 7468 6573 650a 2020 2020  ries, these.    ",
            "-000031a0: 2020 2020 7661 6c75 6573 2061 7265 2075      values are u",
            "-000031b0: 7365 6420 666f 7220 616c 6c20 4172 7261  sed for all Arra",
            "-000031c0: 7973 2e20 4966 2070 6173 7365 6420 6173  ys. If passed as",
            "-000031d0: 2061 2074 7570 6c65 2c20 7468 6520 7475   a tuple, the tu",
            "-000031e0: 706c 6520 6c65 6e67 7468 0a20 2020 2020  ple length.     ",
            "-000031f0: 2020 206d 7573 7420 6265 2074 6865 2073     must be the s",
            "-00003200: 616d 6520 6173 2074 6865 206e 756d 6265  ame as the numbe",
            "-00003210: 7220 6f66 2041 7272 6179 732e 2054 6865  r of Arrays. The",
            "-00003220: 2066 6972 7374 2074 7570 6c65 2065 6c65   first tuple ele",
            "-00003230: 6d65 6e74 2069 730a 2020 2020 2020 2020  ment is.        ",
            "-00003240: 7573 6564 2066 6f72 2074 6865 2066 6972  used for the fir",
            "-00003250: 7374 2041 7272 6179 2c20 7468 6520 7365  st Array, the se",
            "-00003260: 636f 6e64 2074 7570 6c65 2065 6c65 6d65  cond tuple eleme",
            "-00003270: 6e74 2066 6f72 2074 6865 2073 6563 6f6e  nt for the secon",
            "-00003280: 640a 2020 2020 2020 2020 4172 7261 792c  d.        Array,",
            "-00003290: 2061 6e64 2073 6f20 666f 7274 682e 0a0a   and so forth...",
            "-000032a0: 2020 2020 2020 2020 536f 6d65 2073 6b79          Some sky",
            "-000032b0: 2069 7272 6164 6961 6e63 6520 6d6f 6465   irradiance mode",
            "-000032c0: 6c73 2072 6571 7569 7265 2060 6064 6e69  ls require ``dni",
            "-000032d0: 5f65 7874 7261 6060 2e20 466f 7220 7468  _extra``. For th",
            "-000032e0: 6573 6520 6d6f 6465 6c73 2c0a 2020 2020  ese models,.    ",
            "-000032f0: 2020 2020 6966 2060 6064 6e69 5f65 7874      if ``dni_ext",
            "-00003300: 7261 6060 2069 7320 6e6f 7420 7072 6f76  ra`` is not prov",
            "-00003310: 6964 6564 2061 6e64 2060 6073 6f6c 6172  ided and ``solar",
            "-00003320: 5f7a 656e 6974 6860 6020 6861 7320 610a  _zenith`` has a.",
            "-00003330: 2020 2020 2020 2020 6060 4461 7465 7469          ``Dateti",
            "-00003340: 6d65 496e 6465 7860 602c 2074 6865 6e20  meIndex``, then ",
            "-00003350: 6060 646e 695f 6578 7472 6160 6020 6973  ``dni_extra`` is",
            "-00003360: 2063 616c 6375 6c61 7465 642e 0a20 2020   calculated..   ",
            "-00003370: 2020 2020 204f 7468 6572 7769 7365 2c20       Otherwise, ",
            "-00003380: 6060 646e 695f 6578 7472 613d 3133 3637  ``dni_extra=1367",
            "-00003390: 6060 2069 7320 6173 7375 6d65 642e 0a0a  `` is assumed...",
            "-000033a0: 2020 2020 2020 2020 5265 7475 726e 730a          Returns.",
            "-000033b0: 2020 2020 2020 2020 2d2d 2d2d 2d2d 2d0a          -------.",
            "-000033c0: 2020 2020 2020 2020 706f 615f 6972 7261          poa_irra",
            "-000033d0: 6469 616e 6365 203a 2044 6174 6146 7261  diance : DataFra",
            "-000033e0: 6d65 206f 7220 7475 706c 6520 6f66 2044  me or tuple of D",
            "-000033f0: 6174 6146 7261 6d65 0a20 2020 2020 2020  ataFrame.       ",
            "-00003400: 2020 2020 2043 6f6c 756d 6e20 6e61 6d65       Column name",
            "-00003410: 7320 6172 653a 2060 6027 706f 615f 676c  s are: ``'poa_gl",
            "-00003420: 6f62 616c 272c 2027 706f 615f 6469 7265  obal', 'poa_dire",
            "-00003430: 6374 272c 2027 706f 615f 6469 6666 7573  ct', 'poa_diffus",
            "-00003440: 6527 2c0a 2020 2020 2020 2020 2020 2020  e',.            ",
            "-00003450: 2770 6f61 5f73 6b79 5f64 6966 6675 7365  'poa_sky_diffuse",
            "-00003460: 272c 2027 706f 615f 6772 6f75 6e64 5f64  ', 'poa_ground_d",
            "-00003470: 6966 6675 7365 2760 602e 0a0a 2020 2020  iffuse'``...    ",
            "-00003480: 2020 2020 5365 6520 616c 736f 0a20 2020      See also.   ",
            "-00003490: 2020 2020 202d 2d2d 2d2d 2d2d 2d0a 2020       --------.  ",
            "-000034a0: 2020 2020 2020 7076 6c69 622e 6972 7261        pvlib.irra",
            "-000034b0: 6469 616e 6365 2e67 6574 5f74 6f74 616c  diance.get_total",
            "-000034c0: 5f69 7272 6164 6961 6e63 650a 2020 2020  _irradiance.    ",
            "-000034d0: 2020 2020 2222 220a 2020 2020 2020 2020      \"\"\".        ",
            "-000034e0: 646e 6920 3d20 7365 6c66 2e5f 7661 6c69  dni = self._vali",
            "-000034f0: 6461 7465 5f70 6572 5f61 7272 6179 2864  date_per_array(d",
            "-00003500: 6e69 2c20 7379 7374 656d 5f77 6964 653d  ni, system_wide=",
            "-00003510: 5472 7565 290a 2020 2020 2020 2020 6768  True).        gh",
            "-00003520: 6920 3d20 7365 6c66 2e5f 7661 6c69 6461  i = self._valida",
            "-00003530: 7465 5f70 6572 5f61 7272 6179 2867 6869  te_per_array(ghi",
            "-00003540: 2c20 7379 7374 656d 5f77 6964 653d 5472  , system_wide=Tr",
            "-00003550: 7565 290a 2020 2020 2020 2020 6468 6920  ue).        dhi ",
            "-00003560: 3d20 7365 6c66 2e5f 7661 6c69 6461 7465  = self._validate",
            "-00003570: 5f70 6572 5f61 7272 6179 2864 6869 2c20  _per_array(dhi, ",
            "-00003580: 7379 7374 656d 5f77 6964 653d 5472 7565  system_wide=True",
            "-00003590: 290a 0a20 2020 2020 2020 2061 6c62 6564  )..        albed",
            "-000035a0: 6f20 3d20 7365 6c66 2e5f 7661 6c69 6461  o = self._valida",
            "-000035b0: 7465 5f70 6572 5f61 7272 6179 2861 6c62  te_per_array(alb",
            "-000035c0: 6564 6f2c 2073 7973 7465 6d5f 7769 6465  edo, system_wide",
            "-000035d0: 3d54 7275 6529 0a0a 2020 2020 2020 2020  =True)..        ",
            "-000035e0: 7265 7475 726e 2074 7570 6c65 280a 2020  return tuple(.  ",
            "-000035f0: 2020 2020 2020 2020 2020 6172 7261 792e            array.",
            "-00003600: 6765 745f 6972 7261 6469 616e 6365 2873  get_irradiance(s",
            "-00003610: 6f6c 6172 5f7a 656e 6974 682c 2073 6f6c  olar_zenith, sol",
            "-00003620: 6172 5f61 7a69 6d75 7468 2c0a 2020 2020  ar_azimuth,.    ",
            "-00003630: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00003640: 2020 2020 2020 2020 2020 2020 2064 6e69               dni",
            "-00003650: 2c20 6768 692c 2064 6869 2c0a 2020 2020  , ghi, dhi,.    ",
            "-00003660: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00003670: 2020 2020 2020 2020 2020 2020 2064 6e69               dni",
            "-00003680: 5f65 7874 7261 3d64 6e69 5f65 7874 7261  _extra=dni_extra",
            "-00003690: 2c20 6169 726d 6173 733d 6169 726d 6173  , airmass=airmas",
            "-000036a0: 732c 0a20 2020 2020 2020 2020 2020 2020  s,.             ",
            "-000036b0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000036c0: 2020 2020 616c 6265 646f 3d61 6c62 6564      albedo=albed",
            "-000036d0: 6f2c 206d 6f64 656c 3d6d 6f64 656c 2c20  o, model=model, ",
            "-000036e0: 2a2a 6b77 6172 6773 290a 2020 2020 2020  **kwargs).      ",
            "-000036f0: 2020 2020 2020 666f 7220 6172 7261 792c        for array,",
            "-00003700: 2064 6e69 2c20 6768 692c 2064 6869 2c20   dni, ghi, dhi, ",
            "-00003710: 616c 6265 646f 2069 6e20 7a69 7028 0a20  albedo in zip(. ",
            "-00003720: 2020 2020 2020 2020 2020 2020 2020 2073                 s",
            "-00003730: 656c 662e 6172 7261 7973 2c20 646e 692c  elf.arrays, dni,",
            "-00003740: 2067 6869 2c20 6468 692c 2061 6c62 6564   ghi, dhi, albed",
            "-00003750: 6f0a 2020 2020 2020 2020 2020 2020 290a  o.            ).",
            "-00003760: 2020 2020 2020 2020 290a 0a20 2020 2040          )..    @",
            "-00003770: 5f75 6e77 7261 705f 7369 6e67 6c65 5f76  _unwrap_single_v",
            "-00003780: 616c 7565 0a20 2020 2064 6566 2067 6574  alue.    def get",
            "-00003790: 5f69 616d 2873 656c 662c 2061 6f69 2c20  _iam(self, aoi, ",
            "-000037a0: 6961 6d5f 6d6f 6465 6c3d 2770 6879 7369  iam_model='physi",
            "-000037b0: 6361 6c27 293a 0a20 2020 2020 2020 2022  cal'):.        \"",
            "-000037c0: 2222 0a20 2020 2020 2020 2044 6574 6572  \"\".        Deter",
            "-000037d0: 6d69 6e65 2074 6865 2069 6e63 6964 656e  mine the inciden",
            "-000037e0: 6365 2061 6e67 6c65 206d 6f64 6966 6965  ce angle modifie",
            "-000037f0: 7220 7573 696e 6720 7468 6520 6d65 7468  r using the meth",
            "-00003800: 6f64 2073 7065 6369 6669 6564 2062 790a  od specified by.",
            "-00003810: 2020 2020 2020 2020 6060 6961 6d5f 6d6f          ``iam_mo",
            "-00003820: 6465 6c60 602e 0a0a 2020 2020 2020 2020  del``...        ",
            "-00003830: 5061 7261 6d65 7465 7273 2066 6f72 2074  Parameters for t",
            "-00003840: 6865 2073 656c 6563 7465 6420 4941 4d20  he selected IAM ",
            "-00003850: 6d6f 6465 6c20 6172 6520 6578 7065 6374  model are expect",
            "-00003860: 6564 2074 6f20 6265 2069 6e0a 2020 2020  ed to be in.    ",
            "-00003870: 2020 2020 6060 5056 5379 7374 656d 2e6d      ``PVSystem.m",
            "-00003880: 6f64 756c 655f 7061 7261 6d65 7465 7273  odule_parameters",
            "-00003890: 6060 2e20 4465 6661 756c 7420 7061 7261  ``. Default para",
            "-000038a0: 6d65 7465 7273 2061 7265 2061 7661 696c  meters are avail",
            "-000038b0: 6162 6c65 2066 6f72 0a20 2020 2020 2020  able for.       ",
            "-000038c0: 2074 6865 2027 7068 7973 6963 616c 272c   the 'physical',",
            "-000038d0: 2027 6173 6872 6165 2720 616e 6420 276d   'ashrae' and 'm",
            "-000038e0: 6172 7469 6e5f 7275 697a 2720 6d6f 6465  artin_ruiz' mode",
            "-000038f0: 6c73 2e0a 0a20 2020 2020 2020 2050 6172  ls...        Par",
            "-00003900: 616d 6574 6572 730a 2020 2020 2020 2020  ameters.        ",
            "-00003910: 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020 2020  ----------.     ",
            "-00003920: 2020 2061 6f69 203a 206e 756d 6572 6963     aoi : numeric",
            "-00003930: 206f 7220 7475 706c 6520 6f66 206e 756d   or tuple of num",
            "-00003940: 6572 6963 0a20 2020 2020 2020 2020 2020  eric.           ",
            "-00003950: 2054 6865 2061 6e67 6c65 206f 6620 696e   The angle of in",
            "-00003960: 6369 6465 6e63 6520 696e 2064 6567 7265  cidence in degre",
            "-00003970: 6573 2e0a 0a20 2020 2020 2020 2061 6f69  es...        aoi",
            "-00003980: 5f6d 6f64 656c 203a 2073 7472 696e 672c  _model : string,",
            "-00003990: 2064 6566 6175 6c74 2027 7068 7973 6963   default 'physic",
            "-000039a0: 616c 270a 2020 2020 2020 2020 2020 2020  al'.            ",
            "-000039b0: 5468 6520 4941 4d20 6d6f 6465 6c20 746f  The IAM model to",
            "-000039c0: 2062 6520 7573 6564 2e20 5661 6c69 6420   be used. Valid ",
            "-000039d0: 7374 7269 6e67 7320 6172 6520 2770 6879  strings are 'phy",
            "-000039e0: 7369 6361 6c27 2c20 2761 7368 7261 6527  sical', 'ashrae'",
            "-000039f0: 2c0a 2020 2020 2020 2020 2020 2020 276d  ,.            'm",
            "-00003a00: 6172 7469 6e5f 7275 697a 272c 2027 7361  artin_ruiz', 'sa",
            "-00003a10: 706d 2720 616e 6420 2769 6e74 6572 7027  pm' and 'interp'",
            "-00003a20: 2e0a 2020 2020 2020 2020 5265 7475 726e  ..        Return",
            "-00003a30: 730a 2020 2020 2020 2020 2d2d 2d2d 2d2d  s.        ------",
            "-00003a40: 2d0a 2020 2020 2020 2020 6961 6d20 3a20  -.        iam : ",
            "-00003a50: 6e75 6d65 7269 6320 6f72 2074 7570 6c65  numeric or tuple",
            "-00003a60: 206f 6620 6e75 6d65 7269 630a 2020 2020   of numeric.    ",
            "-00003a70: 2020 2020 2020 2020 5468 6520 414f 4920          The AOI ",
            "-00003a80: 6d6f 6469 6669 6572 2e0a 0a20 2020 2020  modifier...     ",
            "-00003a90: 2020 2052 6169 7365 730a 2020 2020 2020     Raises.      ",
            "-00003aa0: 2020 2d2d 2d2d 2d2d 0a20 2020 2020 2020    ------.       ",
            "-00003ab0: 2056 616c 7565 4572 726f 720a 2020 2020   ValueError.    ",
            "-00003ac0: 2020 2020 2020 2020 6966 2060 6961 6d5f          if `iam_",
            "-00003ad0: 6d6f 6465 6c60 2069 7320 6e6f 7420 6120  model` is not a ",
            "-00003ae0: 7661 6c69 6420 6d6f 6465 6c20 6e61 6d65  valid model name",
            "-00003af0: 2e0a 2020 2020 2020 2020 2222 220a 2020  ..        \"\"\".  ",
            "-00003b00: 2020 2020 2020 616f 6920 3d20 7365 6c66        aoi = self",
            "-00003b10: 2e5f 7661 6c69 6461 7465 5f70 6572 5f61  ._validate_per_a",
            "-00003b20: 7272 6179 2861 6f69 290a 2020 2020 2020  rray(aoi).      ",
            "-00003b30: 2020 7265 7475 726e 2074 7570 6c65 2861    return tuple(a",
            "-00003b40: 7272 6179 2e67 6574 5f69 616d 2861 6f69  rray.get_iam(aoi",
            "-00003b50: 2c20 6961 6d5f 6d6f 6465 6c29 0a20 2020  , iam_model).   ",
            "-00003b60: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00003b70: 2020 666f 7220 6172 7261 792c 2061 6f69    for array, aoi",
            "-00003b80: 2069 6e20 7a69 7028 7365 6c66 2e61 7272   in zip(self.arr",
            "-00003b90: 6179 732c 2061 6f69 2929 0a0a 2020 2020  ays, aoi))..    ",
            "-00003ba0: 405f 756e 7772 6170 5f73 696e 676c 655f  @_unwrap_single_",
            "-00003bb0: 7661 6c75 650a 2020 2020 6465 6620 6765  value.    def ge",
            "-00003bc0: 745f 6365 6c6c 5f74 656d 7065 7261 7475  t_cell_temperatu",
            "-00003bd0: 7265 2873 656c 662c 2070 6f61 5f67 6c6f  re(self, poa_glo",
            "-00003be0: 6261 6c2c 2074 656d 705f 6169 722c 2077  bal, temp_air, w",
            "-00003bf0: 696e 645f 7370 6565 642c 206d 6f64 656c  ind_speed, model",
            "-00003c00: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "-00003c10: 2020 2020 2020 2020 2020 2020 2020 2065                 e",
            "-00003c20: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "-00003c30: 6e63 653d 4e6f 6e65 293a 0a20 2020 2020  nce=None):.     ",
            "-00003c40: 2020 2022 2222 0a20 2020 2020 2020 2044     \"\"\".        D",
            "-00003c50: 6574 6572 6d69 6e65 2063 656c 6c20 7465  etermine cell te",
            "-00003c60: 6d70 6572 6174 7572 6520 7573 696e 6720  mperature using ",
            "-00003c70: 7468 6520 6d65 7468 6f64 2073 7065 6369  the method speci",
            "-00003c80: 6669 6564 2062 7920 6060 6d6f 6465 6c60  fied by ``model`",
            "-00003c90: 602e 0a0a 2020 2020 2020 2020 5061 7261  `...        Para",
            "-00003ca0: 6d65 7465 7273 0a20 2020 2020 2020 202d  meters.        -",
            "-00003cb0: 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020 2020  ---------.      ",
            "-00003cc0: 2020 706f 615f 676c 6f62 616c 203a 206e    poa_global : n",
            "-00003cd0: 756d 6572 6963 206f 7220 7475 706c 6520  umeric or tuple ",
            "-00003ce0: 6f66 206e 756d 6572 6963 0a20 2020 2020  of numeric.     ",
            "-00003cf0: 2020 2020 2020 2054 6f74 616c 2069 6e63         Total inc",
            "-00003d00: 6964 656e 7420 6972 7261 6469 616e 6365  ident irradiance",
            "-00003d10: 2069 6e20 572f 6d5e 322e 0a0a 2020 2020   in W/m^2...    ",
            "-00003d20: 2020 2020 7465 6d70 5f61 6972 203a 206e      temp_air : n",
            "-00003d30: 756d 6572 6963 206f 7220 7475 706c 6520  umeric or tuple ",
            "-00003d40: 6f66 206e 756d 6572 6963 0a20 2020 2020  of numeric.     ",
            "-00003d50: 2020 2020 2020 2041 6d62 6965 6e74 2064         Ambient d",
            "-00003d60: 7279 2062 756c 6220 7465 6d70 6572 6174  ry bulb temperat",
            "-00003d70: 7572 6520 696e 2064 6567 7265 6573 2043  ure in degrees C",
            "-00003d80: 2e0a 0a20 2020 2020 2020 2077 696e 645f  ...        wind_",
            "-00003d90: 7370 6565 6420 3a20 6e75 6d65 7269 6320  speed : numeric ",
            "-00003da0: 6f72 2074 7570 6c65 206f 6620 6e75 6d65  or tuple of nume",
            "-00003db0: 7269 630a 2020 2020 2020 2020 2020 2020  ric.            ",
            "-00003dc0: 5769 6e64 2073 7065 6564 2069 6e20 6d2f  Wind speed in m/",
            "-00003dd0: 732e 0a0a 2020 2020 2020 2020 6d6f 6465  s...        mode",
            "-00003de0: 6c20 3a20 7374 720a 2020 2020 2020 2020  l : str.        ",
            "-00003df0: 2020 2020 5375 7070 6f72 7465 6420 6d6f      Supported mo",
            "-00003e00: 6465 6c73 2069 6e63 6c75 6465 2060 6027  dels include ``'",
            "-00003e10: 7361 706d 2760 602c 2060 6027 7076 7379  sapm'``, ``'pvsy",
            "-00003e20: 7374 2760 602c 0a20 2020 2020 2020 2020  st'``,.         ",
            "-00003e30: 2020 2060 6027 6661 696d 616e 2760 602c     ``'faiman'``,",
            "-00003e40: 2060 6027 6675 656e 7465 7327 6060 2c20   ``'fuentes'``, ",
            "-00003e50: 616e 6420 6060 276e 6f63 745f 7361 6d27  and ``'noct_sam'",
            "-00003e60: 6060 0a0a 2020 2020 2020 2020 6566 6665  ``..        effe",
            "-00003e70: 6374 6976 655f 6972 7261 6469 616e 6365  ctive_irradiance",
            "-00003e80: 203a 206e 756d 6572 6963 206f 7220 7475   : numeric or tu",
            "-00003e90: 706c 6520 6f66 206e 756d 6572 6963 2c20  ple of numeric, ",
            "-00003ea0: 6f70 7469 6f6e 616c 0a20 2020 2020 2020  optional.       ",
            "-00003eb0: 2020 2020 2054 6865 2069 7272 6164 6961       The irradia",
            "-00003ec0: 6e63 6520 7468 6174 2069 7320 636f 6e76  nce that is conv",
            "-00003ed0: 6572 7465 6420 746f 2070 686f 746f 6375  erted to photocu",
            "-00003ee0: 7272 656e 7420 696e 2057 2f6d 5e32 2e0a  rrent in W/m^2..",
            "-00003ef0: 2020 2020 2020 2020 2020 2020 4f6e 6c79              Only",
            "-00003f00: 2075 7365 6420 666f 7220 736f 6d65 206d   used for some m",
            "-00003f10: 6f64 656c 732e 0a0a 2020 2020 2020 2020  odels...        ",
            "-00003f20: 5265 7475 726e 730a 2020 2020 2020 2020  Returns.        ",
            "-00003f30: 2d2d 2d2d 2d2d 2d0a 2020 2020 2020 2020  -------.        ",
            "-00003f40: 6e75 6d65 7269 6320 6f72 2074 7570 6c65  numeric or tuple",
            "-00003f50: 206f 6620 6e75 6d65 7269 630a 2020 2020   of numeric.    ",
            "-00003f60: 2020 2020 2020 2020 5661 6c75 6573 2069          Values i",
            "-00003f70: 6e20 6465 6772 6565 7320 432e 0a0a 2020  n degrees C...  ",
            "-00003f80: 2020 2020 2020 5365 6520 416c 736f 0a20        See Also. ",
            "-00003f90: 2020 2020 2020 202d 2d2d 2d2d 2d2d 2d0a         --------.",
            "-00003fa0: 2020 2020 2020 2020 4172 7261 792e 6765          Array.ge",
            "-00003fb0: 745f 6365 6c6c 5f74 656d 7065 7261 7475  t_cell_temperatu",
            "-00003fc0: 7265 0a0a 2020 2020 2020 2020 4e6f 7465  re..        Note",
            "-00003fd0: 730a 2020 2020 2020 2020 2d2d 2d2d 2d0a  s.        -----.",
            "-00003fe0: 2020 2020 2020 2020 5468 6520 6074 656d          The `tem",
            "-00003ff0: 705f 6169 7260 2061 6e64 2060 7769 6e64  p_air` and `wind",
            "-00004000: 5f73 7065 6564 6020 7061 7261 6d65 7465  _speed` paramete",
            "-00004010: 7273 206d 6179 2062 6520 7061 7373 6564  rs may be passed",
            "-00004020: 2061 7320 7475 706c 6573 0a20 2020 2020   as tuples.     ",
            "-00004030: 2020 2074 6f20 7072 6f76 6964 6520 6469     to provide di",
            "-00004040: 6666 6572 656e 7420 7661 6c75 6573 2066  fferent values f",
            "-00004050: 6f72 2065 6163 6820 4172 7261 7920 696e  or each Array in",
            "-00004060: 2074 6865 2073 7973 7465 6d2e 2049 6620   the system. If ",
            "-00004070: 7061 7373 6564 2061 730a 2020 2020 2020  passed as.      ",
            "-00004080: 2020 6120 7475 706c 6520 7468 6520 6c65    a tuple the le",
            "-00004090: 6e67 7468 206d 7573 7420 6265 2074 6865  ngth must be the",
            "-000040a0: 2073 616d 6520 6173 2074 6865 206e 756d   same as the num",
            "-000040b0: 6265 7220 6f66 2041 7272 6179 732e 2049  ber of Arrays. I",
            "-000040c0: 6620 6e6f 740a 2020 2020 2020 2020 7061  f not.        pa",
            "-000040d0: 7373 6564 2061 7320 6120 7475 706c 6520  ssed as a tuple ",
            "-000040e0: 7468 656e 2074 6865 2073 616d 6520 7661  then the same va",
            "-000040f0: 6c75 6520 6973 2075 7365 6420 666f 7220  lue is used for ",
            "-00004100: 6561 6368 2041 7272 6179 2e0a 2020 2020  each Array..    ",
            "-00004110: 2020 2020 2222 220a 2020 2020 2020 2020      \"\"\".        ",
            "-00004120: 706f 615f 676c 6f62 616c 203d 2073 656c  poa_global = sel",
            "-00004130: 662e 5f76 616c 6964 6174 655f 7065 725f  f._validate_per_",
            "-00004140: 6172 7261 7928 706f 615f 676c 6f62 616c  array(poa_global",
            "-00004150: 290a 2020 2020 2020 2020 7465 6d70 5f61  ).        temp_a",
            "-00004160: 6972 203d 2073 656c 662e 5f76 616c 6964  ir = self._valid",
            "-00004170: 6174 655f 7065 725f 6172 7261 7928 7465  ate_per_array(te",
            "-00004180: 6d70 5f61 6972 2c20 7379 7374 656d 5f77  mp_air, system_w",
            "-00004190: 6964 653d 5472 7565 290a 2020 2020 2020  ide=True).      ",
            "-000041a0: 2020 7769 6e64 5f73 7065 6564 203d 2073    wind_speed = s",
            "-000041b0: 656c 662e 5f76 616c 6964 6174 655f 7065  elf._validate_pe",
            "-000041c0: 725f 6172 7261 7928 7769 6e64 5f73 7065  r_array(wind_spe",
            "-000041d0: 6564 2c20 7379 7374 656d 5f77 6964 653d  ed, system_wide=",
            "-000041e0: 5472 7565 290a 2020 2020 2020 2020 2320  True).        # ",
            "-000041f0: 4e6f 7420 7573 6564 2066 6f72 2061 6c6c  Not used for all",
            "-00004200: 206d 6f64 656c 732c 2062 7574 2041 7272   models, but Arr",
            "-00004210: 6179 2e67 6574 5f63 656c 6c5f 7465 6d70  ay.get_cell_temp",
            "-00004220: 6572 6174 7572 6520 6861 6e64 6c65 7320  erature handles ",
            "-00004230: 6974 0a20 2020 2020 2020 2065 6666 6563  it.        effec",
            "-00004240: 7469 7665 5f69 7272 6164 6961 6e63 6520  tive_irradiance ",
            "-00004250: 3d20 7365 6c66 2e5f 7661 6c69 6461 7465  = self._validate",
            "-00004260: 5f70 6572 5f61 7272 6179 2865 6666 6563  _per_array(effec",
            "-00004270: 7469 7665 5f69 7272 6164 6961 6e63 652c  tive_irradiance,",
            "-00004280: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00004290: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00001ec0: 2020 206d 6f64 756c 652c 0a20 2020 2020     module,.     ",
            "+00001ed0: 2020 2020 2020 2020 2020 206d 6f64 756c             modul",
            "+00001ee0: 655f 7479 7065 2c0a 2020 2020 2020 2020  e_type,.        ",
            "+00001ef0: 2020 2020 2020 2020 6d6f 6475 6c65 5f70          module_p",
            "+00001f00: 6172 616d 6574 6572 732c 0a20 2020 2020  arameters,.     ",
            "+00001f10: 2020 2020 2020 2020 2020 2074 656d 7065             tempe",
            "+00001f20: 7261 7475 7265 5f6d 6f64 656c 5f70 6172  rature_model_par",
            "+00001f30: 616d 6574 6572 732c 0a20 2020 2020 2020  ameters,.       ",
            "+00001f40: 2020 2020 2020 2020 206d 6f64 756c 6573           modules",
            "+00001f50: 5f70 6572 5f73 7472 696e 672c 0a20 2020  _per_string,.   ",
            "+00001f60: 2020 2020 2020 2020 2020 2020 2073 7472               str",
            "+00001f70: 696e 6773 5f70 6572 5f69 6e76 6572 7465  ings_per_inverte",
            "+00001f80: 722c 0a20 2020 2020 2020 2020 2020 2020  r,.             ",
            "+00001f90: 2020 2061 7272 6179 5f6c 6f73 7365 735f     array_losses_",
            "+00001fa0: 7061 7261 6d65 7465 7273 2c0a 2020 2020  parameters,.    ",
            "+00001fb0: 2020 2020 2020 2020 292c 290a 2020 2020          ),).    ",
            "+00001fc0: 2020 2020 656c 6966 2069 7369 6e73 7461      elif isinsta",
            "+00001fd0: 6e63 6528 6172 7261 7973 2c20 4172 7261  nce(arrays, Arra",
            "+00001fe0: 7929 3a0a 2020 2020 2020 2020 2020 2020  y):.            ",
            "+00001ff0: 7365 6c66 2e61 7272 6179 7320 3d20 2861  self.arrays = (a",
            "+00002000: 7272 6179 732c 290a 2020 2020 2020 2020  rrays,).        ",
            "+00002010: 656c 6966 206c 656e 2861 7272 6179 7329  elif len(arrays)",
            "+00002020: 203d 3d20 303a 0a20 2020 2020 2020 2020   == 0:.         ",
            "+00002030: 2020 2072 6169 7365 2056 616c 7565 4572     raise ValueEr",
            "+00002040: 726f 7228 2250 5653 7973 7465 6d20 6d75  ror(\"PVSystem mu",
            "+00002050: 7374 2068 6176 6520 6174 206c 6561 7374  st have at least",
            "+00002060: 206f 6e65 2041 7272 6179 2e20 220a 2020   one Array. \".  ",
            "+00002070: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00002080: 2020 2020 2020 2020 2020 2022 4966 2079             \"If y",
            "+00002090: 6f75 2077 616e 7420 746f 2063 7265 6174  ou want to creat",
            "+000020a0: 6520 6120 5056 5379 7374 656d 2069 6e73  e a PVSystem ins",
            "+000020b0: 7461 6e63 6520 220a 2020 2020 2020 2020  tance \".        ",
            "+000020c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000020d0: 2020 2020 2022 7769 7468 2061 2073 696e       \"with a sin",
            "+000020e0: 676c 6520 4172 7261 7920 7061 7373 2060  gle Array pass `",
            "+000020f0: 6172 7261 7973 3d4e 6f6e 6560 2061 6e64  arrays=None` and",
            "+00002100: 2070 6173 7320 220a 2020 2020 2020 2020   pass \".        ",
            "+00002110: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00002120: 2020 2020 2022 7661 6c75 6573 2064 6972       \"values dir",
            "+00002130: 6563 746c 7920 746f 2050 5653 7973 7465  ectly to PVSyste",
            "+00002140: 6d20 6174 7472 6962 7574 6573 2c20 652e  m attributes, e.",
            "+00002150: 672e 2c20 220a 2020 2020 2020 2020 2020  g., \".          ",
            "+00002160: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00002170: 2020 2022 6073 7572 6661 6365 5f74 696c     \"`surface_til",
            "+00002180: 743d 3330 6022 290a 2020 2020 2020 2020  t=30`\").        ",
            "+00002190: 656c 7365 3a0a 2020 2020 2020 2020 2020  else:.          ",
            "+000021a0: 2020 7365 6c66 2e61 7272 6179 7320 3d20    self.arrays = ",
            "+000021b0: 7475 706c 6528 6172 7261 7973 290a 0a20  tuple(arrays).. ",
            "+000021c0: 2020 2020 2020 2073 656c 662e 696e 7665         self.inve",
            "+000021d0: 7274 6572 203d 2069 6e76 6572 7465 720a  rter = inverter.",
            "+000021e0: 2020 2020 2020 2020 6966 2069 6e76 6572          if inver",
            "+000021f0: 7465 725f 7061 7261 6d65 7465 7273 2069  ter_parameters i",
            "+00002200: 7320 4e6f 6e65 3a0a 2020 2020 2020 2020  s None:.        ",
            "+00002210: 2020 2020 7365 6c66 2e69 6e76 6572 7465      self.inverte",
            "+00002220: 725f 7061 7261 6d65 7465 7273 203d 207b  r_parameters = {",
            "+00002230: 7d0a 2020 2020 2020 2020 656c 7365 3a0a  }.        else:.",
            "+00002240: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "+00002250: 2e69 6e76 6572 7465 725f 7061 7261 6d65  .inverter_parame",
            "+00002260: 7465 7273 203d 2069 6e76 6572 7465 725f  ters = inverter_",
            "+00002270: 7061 7261 6d65 7465 7273 0a0a 2020 2020  parameters..    ",
            "+00002280: 2020 2020 6966 206c 6f73 7365 735f 7061      if losses_pa",
            "+00002290: 7261 6d65 7465 7273 2069 7320 4e6f 6e65  rameters is None",
            "+000022a0: 3a0a 2020 2020 2020 2020 2020 2020 7365  :.            se",
            "+000022b0: 6c66 2e6c 6f73 7365 735f 7061 7261 6d65  lf.losses_parame",
            "+000022c0: 7465 7273 203d 207b 7d0a 2020 2020 2020  ters = {}.      ",
            "+000022d0: 2020 656c 7365 3a0a 2020 2020 2020 2020    else:.        ",
            "+000022e0: 2020 2020 7365 6c66 2e6c 6f73 7365 735f      self.losses_",
            "+000022f0: 7061 7261 6d65 7465 7273 203d 206c 6f73  parameters = los",
            "+00002300: 7365 735f 7061 7261 6d65 7465 7273 0a0a  ses_parameters..",
            "+00002310: 2020 2020 2020 2020 7365 6c66 2e6e 616d          self.nam",
            "+00002320: 6520 3d20 6e61 6d65 0a0a 2020 2020 6465  e = name..    de",
            "+00002330: 6620 5f5f 7265 7072 5f5f 2873 656c 6629  f __repr__(self)",
            "+00002340: 3a0a 2020 2020 2020 2020 7265 7072 203d  :.        repr =",
            "+00002350: 2066 2750 5653 7973 7465 6d3a 5c6e 2020   f'PVSystem:\\n  ",
            "+00002360: 6e61 6d65 3a20 7b73 656c 662e 6e61 6d65  name: {self.name",
            "+00002370: 7d5c 6e20 2027 0a20 2020 2020 2020 2066  }\\n  '.        f",
            "+00002380: 6f72 2061 7272 6179 2069 6e20 7365 6c66  or array in self",
            "+00002390: 2e61 7272 6179 733a 0a20 2020 2020 2020  .arrays:.       ",
            "+000023a0: 2020 2020 2072 6570 7220 2b3d 2027 5c6e       repr += '\\n",
            "+000023b0: 2020 272e 6a6f 696e 2861 7272 6179 2e5f    '.join(array._",
            "+000023c0: 5f72 6570 725f 5f28 292e 7370 6c69 7428  _repr__().split(",
            "+000023d0: 275c 6e27 2929 0a20 2020 2020 2020 2020  '\\n')).         ",
            "+000023e0: 2020 2072 6570 7220 2b3d 2027 5c6e 2020     repr += '\\n  ",
            "+000023f0: 270a 2020 2020 2020 2020 7265 7072 202b  '.        repr +",
            "+00002400: 3d20 6627 696e 7665 7274 6572 3a20 7b73  = f'inverter: {s",
            "+00002410: 656c 662e 696e 7665 7274 6572 7d27 0a20  elf.inverter}'. ",
            "+00002420: 2020 2020 2020 2072 6574 7572 6e20 7265         return re",
            "+00002430: 7072 0a0a 2020 2020 6465 6620 5f76 616c  pr..    def _val",
            "+00002440: 6964 6174 655f 7065 725f 6172 7261 7928  idate_per_array(",
            "+00002450: 7365 6c66 2c20 7661 6c75 6573 2c20 7379  self, values, sy",
            "+00002460: 7374 656d 5f77 6964 653d 4661 6c73 6529  stem_wide=False)",
            "+00002470: 3a0a 2020 2020 2020 2020 2222 2243 6865  :.        \"\"\"Che",
            "+00002480: 636b 2074 6861 7420 6076 616c 7565 7360  ck that `values`",
            "+00002490: 2069 7320 6120 7475 706c 6520 6f66 2074   is a tuple of t",
            "+000024a0: 6865 2073 616d 6520 6c65 6e67 7468 2061  he same length a",
            "+000024b0: 730a 2020 2020 2020 2020 6073 656c 662e  s.        `self.",
            "+000024c0: 6172 7261 7973 602e 0a0a 2020 2020 2020  arrays`...      ",
            "+000024d0: 2020 4966 2060 7661 6c75 6573 6020 6973    If `values` is",
            "+000024e0: 206e 6f74 2061 2074 7570 6c65 2069 7420   not a tuple it ",
            "+000024f0: 6973 2070 6163 6b65 6420 696e 2074 6f20  is packed in to ",
            "+00002500: 6120 6c65 6e67 7468 2d31 2074 7570 6c65  a length-1 tuple",
            "+00002510: 2062 6566 6f72 650a 2020 2020 2020 2020   before.        ",
            "+00002520: 7468 6520 6368 6563 6b2e 2049 6620 7468  the check. If th",
            "+00002530: 6520 6c65 6e67 7468 7320 6172 6520 6e6f  e lengths are no",
            "+00002540: 7420 7468 6520 7361 6d65 2061 2056 616c  t the same a Val",
            "+00002550: 7565 4572 726f 7220 6973 2072 6169 7365  ueError is raise",
            "+00002560: 642c 0a20 2020 2020 2020 206f 7468 6572  d,.        other",
            "+00002570: 7769 7365 2074 6865 2074 7570 6c65 2060  wise the tuple `",
            "+00002580: 7661 6c75 6573 6020 6973 2072 6574 7572  values` is retur",
            "+00002590: 6e65 642e 0a0a 2020 2020 2020 2020 5768  ned...        Wh",
            "+000025a0: 656e 2060 7379 7374 656d 5f77 6964 6560  en `system_wide`",
            "+000025b0: 2069 7320 5472 7565 2061 6e64 2060 7661   is True and `va",
            "+000025c0: 6c75 6573 6020 6973 206e 6f74 2061 2074  lues` is not a t",
            "+000025d0: 7570 6c65 2c20 6076 616c 7565 7360 0a20  uple, `values`. ",
            "+000025e0: 2020 2020 2020 2069 7320 7265 706c 6963         is replic",
            "+000025f0: 6174 6564 2074 6f20 6120 7475 706c 6520  ated to a tuple ",
            "+00002600: 6f66 2074 6865 2073 616d 6520 6c65 6e67  of the same leng",
            "+00002610: 7468 2061 7320 6073 656c 662e 6172 7261  th as `self.arra",
            "+00002620: 7973 6020 616e 6420 7468 6174 0a20 2020  ys` and that.   ",
            "+00002630: 2020 2020 2074 7570 6c65 2069 7320 7265       tuple is re",
            "+00002640: 7475 726e 6564 2e0a 2020 2020 2020 2020  turned..        ",
            "+00002650: 2222 220a 2020 2020 2020 2020 6966 2073  \"\"\".        if s",
            "+00002660: 7973 7465 6d5f 7769 6465 2061 6e64 206e  ystem_wide and n",
            "+00002670: 6f74 2069 7369 6e73 7461 6e63 6528 7661  ot isinstance(va",
            "+00002680: 6c75 6573 2c20 7475 706c 6529 3a0a 2020  lues, tuple):.  ",
            "+00002690: 2020 2020 2020 2020 2020 7265 7475 726e            return",
            "+000026a0: 2028 7661 6c75 6573 2c29 202a 2073 656c   (values,) * sel",
            "+000026b0: 662e 6e75 6d5f 6172 7261 7973 0a20 2020  f.num_arrays.   ",
            "+000026c0: 2020 2020 2069 6620 6e6f 7420 6973 696e       if not isin",
            "+000026d0: 7374 616e 6365 2876 616c 7565 732c 2074  stance(values, t",
            "+000026e0: 7570 6c65 293a 0a20 2020 2020 2020 2020  uple):.         ",
            "+000026f0: 2020 2076 616c 7565 7320 3d20 2876 616c     values = (val",
            "+00002700: 7565 732c 290a 2020 2020 2020 2020 6966  ues,).        if",
            "+00002710: 206c 656e 2876 616c 7565 7329 2021 3d20   len(values) != ",
            "+00002720: 6c65 6e28 7365 6c66 2e61 7272 6179 7329  len(self.arrays)",
            "+00002730: 3a0a 2020 2020 2020 2020 2020 2020 7261  :.            ra",
            "+00002740: 6973 6520 5661 6c75 6545 7272 6f72 2822  ise ValueError(\"",
            "+00002750: 4c65 6e67 7468 206d 6973 6d61 7463 6820  Length mismatch ",
            "+00002760: 666f 7220 7065 722d 6172 7261 7920 7061  for per-array pa",
            "+00002770: 7261 6d65 7465 7222 290a 2020 2020 2020  rameter\").      ",
            "+00002780: 2020 7265 7475 726e 2076 616c 7565 730a    return values.",
            "+00002790: 0a20 2020 2040 5f75 6e77 7261 705f 7369  .    @_unwrap_si",
            "+000027a0: 6e67 6c65 5f76 616c 7565 0a20 2020 2064  ngle_value.    d",
            "+000027b0: 6566 205f 696e 6665 725f 6365 6c6c 5f74  ef _infer_cell_t",
            "+000027c0: 7970 6528 7365 6c66 293a 0a20 2020 2020  ype(self):.     ",
            "+000027d0: 2020 2022 2222 0a20 2020 2020 2020 2045     \"\"\".        E",
            "+000027e0: 7861 6d69 6e65 7320 6d6f 6475 6c65 5f70  xamines module_p",
            "+000027f0: 6172 616d 6574 6572 7320 616e 6420 6d61  arameters and ma",
            "+00002800: 7073 2074 6865 2054 6563 686e 6f6c 6f67  ps the Technolog",
            "+00002810: 7920 6b65 7920 666f 7220 7468 6520 4345  y key for the CE",
            "+00002820: 430a 2020 2020 2020 2020 6461 7461 6261  C.        databa",
            "+00002830: 7365 2061 6e64 2074 6865 204d 6174 6572  se and the Mater",
            "+00002840: 6961 6c20 6b65 7920 666f 7220 7468 6520  ial key for the ",
            "+00002850: 5361 6e64 6961 2064 6174 6162 6173 6520  Sandia database ",
            "+00002860: 746f 2061 2063 6f6d 6d6f 6e0a 2020 2020  to a common.    ",
            "+00002870: 2020 2020 6c69 7374 206f 6620 7374 7269      list of stri",
            "+00002880: 6e67 7320 666f 7220 6365 6c6c 2074 7970  ngs for cell typ",
            "+00002890: 652e 0a0a 2020 2020 2020 2020 5265 7475  e...        Retu",
            "+000028a0: 726e 730a 2020 2020 2020 2020 2d2d 2d2d  rns.        ----",
            "+000028b0: 2d2d 2d0a 2020 2020 2020 2020 6365 6c6c  ---.        cell",
            "+000028c0: 5f74 7970 653a 2073 7472 0a20 2020 2020  _type: str.     ",
            "+000028d0: 2020 2022 2222 0a20 2020 2020 2020 2072     \"\"\".        r",
            "+000028e0: 6574 7572 6e20 7475 706c 6528 6172 7261  eturn tuple(arra",
            "+000028f0: 792e 5f69 6e66 6572 5f63 656c 6c5f 7479  y._infer_cell_ty",
            "+00002900: 7065 2829 2066 6f72 2061 7272 6179 2069  pe() for array i",
            "+00002910: 6e20 7365 6c66 2e61 7272 6179 7329 0a0a  n self.arrays)..",
            "+00002920: 2020 2020 405f 756e 7772 6170 5f73 696e      @_unwrap_sin",
            "+00002930: 676c 655f 7661 6c75 650a 2020 2020 6465  gle_value.    de",
            "+00002940: 6620 6765 745f 616f 6928 7365 6c66 2c20  f get_aoi(self, ",
            "+00002950: 736f 6c61 725f 7a65 6e69 7468 2c20 736f  solar_zenith, so",
            "+00002960: 6c61 725f 617a 696d 7574 6829 3a0a 2020  lar_azimuth):.  ",
            "+00002970: 2020 2020 2020 2222 2247 6574 2074 6865        \"\"\"Get the",
            "+00002980: 2061 6e67 6c65 206f 6620 696e 6369 6465   angle of incide",
            "+00002990: 6e63 6520 6f6e 2074 6865 2041 7272 6179  nce on the Array",
            "+000029a0: 2873 2920 696e 2074 6865 2073 7973 7465  (s) in the syste",
            "+000029b0: 6d2e 0a0a 2020 2020 2020 2020 5061 7261  m...        Para",
            "+000029c0: 6d65 7465 7273 0a20 2020 2020 2020 202d  meters.        -",
            "+000029d0: 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020 2020  ---------.      ",
            "+000029e0: 2020 736f 6c61 725f 7a65 6e69 7468 203a    solar_zenith :",
            "+000029f0: 2066 6c6f 6174 206f 7220 5365 7269 6573   float or Series",
            "+00002a00: 2e0a 2020 2020 2020 2020 2020 2020 536f  ..            So",
            "+00002a10: 6c61 7220 7a65 6e69 7468 2061 6e67 6c65  lar zenith angle",
            "+00002a20: 2e0a 2020 2020 2020 2020 736f 6c61 725f  ..        solar_",
            "+00002a30: 617a 696d 7574 6820 3a20 666c 6f61 7420  azimuth : float ",
            "+00002a40: 6f72 2053 6572 6965 732e 0a20 2020 2020  or Series..     ",
            "+00002a50: 2020 2020 2020 2053 6f6c 6172 2061 7a69         Solar azi",
            "+00002a60: 6d75 7468 2061 6e67 6c65 2e0a 0a20 2020  muth angle...   ",
            "+00002a70: 2020 2020 2052 6574 7572 6e73 0a20 2020       Returns.   ",
            "+00002a80: 2020 2020 202d 2d2d 2d2d 2d2d 0a20 2020       -------.   ",
            "+00002a90: 2020 2020 2061 6f69 203a 2053 6572 6965       aoi : Serie",
            "+00002aa0: 7320 6f72 2074 7570 6c65 206f 6620 5365  s or tuple of Se",
            "+00002ab0: 7269 6573 0a20 2020 2020 2020 2020 2020  ries.           ",
            "+00002ac0: 2054 6865 2061 6e67 6c65 206f 6620 696e   The angle of in",
            "+00002ad0: 6369 6465 6e63 650a 2020 2020 2020 2020  cidence.        ",
            "+00002ae0: 2222 220a 0a20 2020 2020 2020 2072 6574  \"\"\"..        ret",
            "+00002af0: 7572 6e20 7475 706c 6528 6172 7261 792e  urn tuple(array.",
            "+00002b00: 6765 745f 616f 6928 736f 6c61 725f 7a65  get_aoi(solar_ze",
            "+00002b10: 6e69 7468 2c20 736f 6c61 725f 617a 696d  nith, solar_azim",
            "+00002b20: 7574 6829 0a20 2020 2020 2020 2020 2020  uth).           ",
            "+00002b30: 2020 2020 2020 2020 2020 666f 7220 6172            for ar",
            "+00002b40: 7261 7920 696e 2073 656c 662e 6172 7261  ray in self.arra",
            "+00002b50: 7973 290a 0a20 2020 2040 5f75 6e77 7261  ys)..    @_unwra",
            "+00002b60: 705f 7369 6e67 6c65 5f76 616c 7565 0a20  p_single_value. ",
            "+00002b70: 2020 2064 6566 2067 6574 5f69 7272 6164     def get_irrad",
            "+00002b80: 6961 6e63 6528 7365 6c66 2c20 736f 6c61  iance(self, sola",
            "+00002b90: 725f 7a65 6e69 7468 2c20 736f 6c61 725f  r_zenith, solar_",
            "+00002ba0: 617a 696d 7574 682c 2064 6e69 2c20 6768  azimuth, dni, gh",
            "+00002bb0: 692c 2064 6869 2c0a 2020 2020 2020 2020  i, dhi,.        ",
            "+00002bc0: 2020 2020 2020 2020 2020 2020 2020 2064                 d",
            "+00002bd0: 6e69 5f65 7874 7261 3d4e 6f6e 652c 2061  ni_extra=None, a",
            "+00002be0: 6972 6d61 7373 3d4e 6f6e 652c 2061 6c62  irmass=None, alb",
            "+00002bf0: 6564 6f3d 4e6f 6e65 2c0a 2020 2020 2020  edo=None,.      ",
            "+00002c00: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00002c10: 206d 6f64 656c 3d27 6861 7964 6176 6965   model='haydavie",
            "+00002c20: 7327 2c20 2a2a 6b77 6172 6773 293a 0a20  s', **kwargs):. ",
            "+00002c30: 2020 2020 2020 2022 2222 0a20 2020 2020         \"\"\".     ",
            "+00002c40: 2020 2055 7365 7320 3a70 793a 6675 6e63     Uses :py:func",
            "+00002c50: 3a60 7076 6c69 622e 6972 7261 6469 616e  :`pvlib.irradian",
            "+00002c60: 6365 2e67 6574 5f74 6f74 616c 5f69 7272  ce.get_total_irr",
            "+00002c70: 6164 6961 6e63 6560 2074 6f0a 2020 2020  adiance` to.    ",
            "+00002c80: 2020 2020 6361 6c63 756c 6174 6520 7468      calculate th",
            "+00002c90: 6520 706c 616e 6520 6f66 2061 7272 6179  e plane of array",
            "+00002ca0: 2069 7272 6164 6961 6e63 6520 636f 6d70   irradiance comp",
            "+00002cb0: 6f6e 656e 7473 206f 6e20 7468 6520 7469  onents on the ti",
            "+00002cc0: 6c74 6564 0a20 2020 2020 2020 2073 7572  lted.        sur",
            "+00002cd0: 6661 6365 7320 6465 6669 6e65 6420 6279  faces defined by",
            "+00002ce0: 2065 6163 6820 6172 7261 7927 7320 6060   each array's ``",
            "+00002cf0: 7375 7266 6163 655f 7469 6c74 6060 2061  surface_tilt`` a",
            "+00002d00: 6e64 0a20 2020 2020 2020 2060 6073 7572  nd.        ``sur",
            "+00002d10: 6661 6365 5f61 7a69 6d75 7468 6060 2e0a  face_azimuth``..",
            "+00002d20: 0a20 2020 2020 2020 2050 6172 616d 6574  .        Paramet",
            "+00002d30: 6572 730a 2020 2020 2020 2020 2d2d 2d2d  ers.        ----",
            "+00002d40: 2d2d 2d2d 2d2d 0a20 2020 2020 2020 2073  ------.        s",
            "+00002d50: 6f6c 6172 5f7a 656e 6974 6820 3a20 666c  olar_zenith : fl",
            "+00002d60: 6f61 7420 6f72 2053 6572 6965 730a 2020  oat or Series.  ",
            "+00002d70: 2020 2020 2020 2020 2020 536f 6c61 7220            Solar ",
            "+00002d80: 7a65 6e69 7468 2061 6e67 6c65 2e0a 2020  zenith angle..  ",
            "+00002d90: 2020 2020 2020 736f 6c61 725f 617a 696d        solar_azim",
            "+00002da0: 7574 6820 3a20 666c 6f61 7420 6f72 2053  uth : float or S",
            "+00002db0: 6572 6965 730a 2020 2020 2020 2020 2020  eries.          ",
            "+00002dc0: 2020 536f 6c61 7220 617a 696d 7574 6820    Solar azimuth ",
            "+00002dd0: 616e 676c 652e 0a20 2020 2020 2020 2064  angle..        d",
            "+00002de0: 6e69 203a 2066 6c6f 6174 2c20 5365 7269  ni : float, Seri",
            "+00002df0: 6573 2c20 6f72 2074 7570 6c65 206f 6620  es, or tuple of ",
            "+00002e00: 666c 6f61 7420 6f72 2053 6572 6965 730a  float or Series.",
            "+00002e10: 2020 2020 2020 2020 2020 2020 4469 7265              Dire",
            "+00002e20: 6374 204e 6f72 6d61 6c20 4972 7261 6469  ct Normal Irradi",
            "+00002e30: 616e 6365 2e20 5b57 2f6d 325d 0a20 2020  ance. [W/m2].   ",
            "+00002e40: 2020 2020 2067 6869 203a 2066 6c6f 6174       ghi : float",
            "+00002e50: 2c20 5365 7269 6573 2c20 6f72 2074 7570  , Series, or tup",
            "+00002e60: 6c65 206f 6620 666c 6f61 7420 6f72 2053  le of float or S",
            "+00002e70: 6572 6965 730a 2020 2020 2020 2020 2020  eries.          ",
            "+00002e80: 2020 476c 6f62 616c 2068 6f72 697a 6f6e    Global horizon",
            "+00002e90: 7461 6c20 6972 7261 6469 616e 6365 2e20  tal irradiance. ",
            "+00002ea0: 5b57 2f6d 325d 0a20 2020 2020 2020 2064  [W/m2].        d",
            "+00002eb0: 6869 203a 2066 6c6f 6174 2c20 5365 7269  hi : float, Seri",
            "+00002ec0: 6573 2c20 6f72 2074 7570 6c65 206f 6620  es, or tuple of ",
            "+00002ed0: 666c 6f61 7420 6f72 2053 6572 6965 730a  float or Series.",
            "+00002ee0: 2020 2020 2020 2020 2020 2020 4469 6666              Diff",
            "+00002ef0: 7573 6520 686f 7269 7a6f 6e74 616c 2069  use horizontal i",
            "+00002f00: 7272 6164 6961 6e63 652e 205b 572f 6d32  rradiance. [W/m2",
            "+00002f10: 5d0a 2020 2020 2020 2020 646e 695f 6578  ].        dni_ex",
            "+00002f20: 7472 6120 3a20 666c 6f61 742c 2053 6572  tra : float, Ser",
            "+00002f30: 6965 7320 6f72 2074 7570 6c65 206f 6620  ies or tuple of ",
            "+00002f40: 666c 6f61 7420 6f72 2053 6572 6965 732c  float or Series,",
            "+00002f50: 206f 7074 696f 6e61 6c0a 2020 2020 2020   optional.      ",
            "+00002f60: 2020 2020 2020 4578 7472 6174 6572 7265        Extraterre",
            "+00002f70: 7374 7269 616c 2064 6972 6563 7420 6e6f  strial direct no",
            "+00002f80: 726d 616c 2069 7272 6164 6961 6e63 652e  rmal irradiance.",
            "+00002f90: 205b 572f 6d32 5d0a 2020 2020 2020 2020   [W/m2].        ",
            "+00002fa0: 6169 726d 6173 7320 3a20 666c 6f61 7420  airmass : float ",
            "+00002fb0: 6f72 2053 6572 6965 732c 206f 7074 696f  or Series, optio",
            "+00002fc0: 6e61 6c0a 2020 2020 2020 2020 2020 2020  nal.            ",
            "+00002fd0: 4169 726d 6173 732e 205b 756e 6974 6c65  Airmass. [unitle",
            "+00002fe0: 7373 5d0a 2020 2020 2020 2020 616c 6265  ss].        albe",
            "+00002ff0: 646f 203a 2066 6c6f 6174 206f 7220 5365  do : float or Se",
            "+00003000: 7269 6573 2c20 6f70 7469 6f6e 616c 0a20  ries, optional. ",
            "+00003010: 2020 2020 2020 2020 2020 2047 726f 756e             Groun",
            "+00003020: 6420 7375 7266 6163 6520 616c 6265 646f  d surface albedo",
            "+00003030: 2e20 5b75 6e69 746c 6573 735d 0a20 2020  . [unitless].   ",
            "+00003040: 2020 2020 206d 6f64 656c 203a 2053 7472       model : Str",
            "+00003050: 696e 672c 2064 6566 6175 6c74 2027 6861  ing, default 'ha",
            "+00003060: 7964 6176 6965 7327 0a20 2020 2020 2020  ydavies'.       ",
            "+00003070: 2020 2020 2049 7272 6164 6961 6e63 6520       Irradiance ",
            "+00003080: 6d6f 6465 6c2e 0a0a 2020 2020 2020 2020  model...        ",
            "+00003090: 6b77 6172 6773 0a20 2020 2020 2020 2020  kwargs.         ",
            "+000030a0: 2020 2045 7874 7261 2070 6172 616d 6574     Extra paramet",
            "+000030b0: 6572 7320 7061 7373 6564 2074 6f0a 2020  ers passed to.  ",
            "+000030c0: 2020 2020 2020 2020 2020 3a70 793a 6675            :py:fu",
            "+000030d0: 6e63 3a60 7076 6c69 622e 6972 7261 6469  nc:`pvlib.irradi",
            "+000030e0: 616e 6365 2e67 6574 5f74 6f74 616c 5f69  ance.get_total_i",
            "+000030f0: 7272 6164 6961 6e63 6560 2e0a 0a20 2020  rradiance`...   ",
            "+00003100: 2020 2020 204e 6f74 6573 0a20 2020 2020       Notes.     ",
            "+00003110: 2020 202d 2d2d 2d2d 0a20 2020 2020 2020     -----.       ",
            "+00003120: 2045 6163 6820 6f66 2060 6064 6e69 6060   Each of ``dni``",
            "+00003130: 2c20 6060 6768 6960 602c 2061 6e64 2060  , ``ghi``, and `",
            "+00003140: 6064 6e69 6060 206d 6179 2062 6520 7061  `dni`` may be pa",
            "+00003150: 7373 6564 2061 7320 6120 666c 6f61 742c  ssed as a float,",
            "+00003160: 2053 6572 6965 732c 0a20 2020 2020 2020   Series,.       ",
            "+00003170: 206f 7220 7475 706c 6520 6f66 2066 6c6f   or tuple of flo",
            "+00003180: 6174 206f 7220 5365 7269 6573 2e20 4966  at or Series. If",
            "+00003190: 2070 6173 7365 6420 6173 2061 2066 6c6f   passed as a flo",
            "+000031a0: 6174 206f 7220 5365 7269 6573 2c20 7468  at or Series, th",
            "+000031b0: 6573 650a 2020 2020 2020 2020 7661 6c75  ese.        valu",
            "+000031c0: 6573 2061 7265 2075 7365 6420 666f 7220  es are used for ",
            "+000031d0: 616c 6c20 4172 7261 7973 2e20 4966 2070  all Arrays. If p",
            "+000031e0: 6173 7365 6420 6173 2061 2074 7570 6c65  assed as a tuple",
            "+000031f0: 2c20 7468 6520 7475 706c 6520 6c65 6e67  , the tuple leng",
            "+00003200: 7468 0a20 2020 2020 2020 206d 7573 7420  th.        must ",
            "+00003210: 6265 2074 6865 2073 616d 6520 6173 2074  be the same as t",
            "+00003220: 6865 206e 756d 6265 7220 6f66 2041 7272  he number of Arr",
            "+00003230: 6179 732e 2054 6865 2066 6972 7374 2074  ays. The first t",
            "+00003240: 7570 6c65 2065 6c65 6d65 6e74 2069 730a  uple element is.",
            "+00003250: 2020 2020 2020 2020 7573 6564 2066 6f72          used for",
            "+00003260: 2074 6865 2066 6972 7374 2041 7272 6179   the first Array",
            "+00003270: 2c20 7468 6520 7365 636f 6e64 2074 7570  , the second tup",
            "+00003280: 6c65 2065 6c65 6d65 6e74 2066 6f72 2074  le element for t",
            "+00003290: 6865 2073 6563 6f6e 640a 2020 2020 2020  he second.      ",
            "+000032a0: 2020 4172 7261 792c 2061 6e64 2073 6f20    Array, and so ",
            "+000032b0: 666f 7274 682e 0a0a 2020 2020 2020 2020  forth...        ",
            "+000032c0: 536f 6d65 2073 6b79 2069 7272 6164 6961  Some sky irradia",
            "+000032d0: 6e63 6520 6d6f 6465 6c73 2072 6571 7569  nce models requi",
            "+000032e0: 7265 2060 6064 6e69 5f65 7874 7261 6060  re ``dni_extra``",
            "+000032f0: 2e20 466f 7220 7468 6573 6520 6d6f 6465  . For these mode",
            "+00003300: 6c73 2c0a 2020 2020 2020 2020 6966 2060  ls,.        if `",
            "+00003310: 6064 6e69 5f65 7874 7261 6060 2069 7320  `dni_extra`` is ",
            "+00003320: 6e6f 7420 7072 6f76 6964 6564 2061 6e64  not provided and",
            "+00003330: 2060 6073 6f6c 6172 5f7a 656e 6974 6860   ``solar_zenith`",
            "+00003340: 6020 6861 7320 610a 2020 2020 2020 2020  ` has a.        ",
            "+00003350: 6060 4461 7465 7469 6d65 496e 6465 7860  ``DatetimeIndex`",
            "+00003360: 602c 2074 6865 6e20 6060 646e 695f 6578  `, then ``dni_ex",
            "+00003370: 7472 6160 6020 6973 2063 616c 6375 6c61  tra`` is calcula",
            "+00003380: 7465 642e 0a20 2020 2020 2020 204f 7468  ted..        Oth",
            "+00003390: 6572 7769 7365 2c20 6060 646e 695f 6578  erwise, ``dni_ex",
            "+000033a0: 7472 613d 3133 3637 6060 2069 7320 6173  tra=1367`` is as",
            "+000033b0: 7375 6d65 642e 0a0a 2020 2020 2020 2020  sumed...        ",
            "+000033c0: 5265 7475 726e 730a 2020 2020 2020 2020  Returns.        ",
            "+000033d0: 2d2d 2d2d 2d2d 2d0a 2020 2020 2020 2020  -------.        ",
            "+000033e0: 706f 615f 6972 7261 6469 616e 6365 203a  poa_irradiance :",
            "+000033f0: 2044 6174 6146 7261 6d65 206f 7220 7475   DataFrame or tu",
            "+00003400: 706c 6520 6f66 2044 6174 6146 7261 6d65  ple of DataFrame",
            "+00003410: 0a20 2020 2020 2020 2020 2020 2043 6f6c  .            Col",
            "+00003420: 756d 6e20 6e61 6d65 7320 6172 653a 2060  umn names are: `",
            "+00003430: 6027 706f 615f 676c 6f62 616c 272c 2027  `'poa_global', '",
            "+00003440: 706f 615f 6469 7265 6374 272c 2027 706f  poa_direct', 'po",
            "+00003450: 615f 6469 6666 7573 6527 2c0a 2020 2020  a_diffuse',.    ",
            "+00003460: 2020 2020 2020 2020 2770 6f61 5f73 6b79          'poa_sky",
            "+00003470: 5f64 6966 6675 7365 272c 2027 706f 615f  _diffuse', 'poa_",
            "+00003480: 6772 6f75 6e64 5f64 6966 6675 7365 2760  ground_diffuse'`",
            "+00003490: 602e 0a0a 2020 2020 2020 2020 5365 6520  `...        See ",
            "+000034a0: 616c 736f 0a20 2020 2020 2020 202d 2d2d  also.        ---",
            "+000034b0: 2d2d 2d2d 2d0a 2020 2020 2020 2020 7076  -----.        pv",
            "+000034c0: 6c69 622e 6972 7261 6469 616e 6365 2e67  lib.irradiance.g",
            "+000034d0: 6574 5f74 6f74 616c 5f69 7272 6164 6961  et_total_irradia",
            "+000034e0: 6e63 650a 2020 2020 2020 2020 2222 220a  nce.        \"\"\".",
            "+000034f0: 2020 2020 2020 2020 646e 6920 3d20 7365          dni = se",
            "+00003500: 6c66 2e5f 7661 6c69 6461 7465 5f70 6572  lf._validate_per",
            "+00003510: 5f61 7272 6179 2864 6e69 2c20 7379 7374  _array(dni, syst",
            "+00003520: 656d 5f77 6964 653d 5472 7565 290a 2020  em_wide=True).  ",
            "+00003530: 2020 2020 2020 6768 6920 3d20 7365 6c66        ghi = self",
            "+00003540: 2e5f 7661 6c69 6461 7465 5f70 6572 5f61  ._validate_per_a",
            "+00003550: 7272 6179 2867 6869 2c20 7379 7374 656d  rray(ghi, system",
            "+00003560: 5f77 6964 653d 5472 7565 290a 2020 2020  _wide=True).    ",
            "+00003570: 2020 2020 6468 6920 3d20 7365 6c66 2e5f      dhi = self._",
            "+00003580: 7661 6c69 6461 7465 5f70 6572 5f61 7272  validate_per_arr",
            "+00003590: 6179 2864 6869 2c20 7379 7374 656d 5f77  ay(dhi, system_w",
            "+000035a0: 6964 653d 5472 7565 290a 0a20 2020 2020  ide=True)..     ",
            "+000035b0: 2020 2061 6c62 6564 6f20 3d20 7365 6c66     albedo = self",
            "+000035c0: 2e5f 7661 6c69 6461 7465 5f70 6572 5f61  ._validate_per_a",
            "+000035d0: 7272 6179 2861 6c62 6564 6f2c 2073 7973  rray(albedo, sys",
            "+000035e0: 7465 6d5f 7769 6465 3d54 7275 6529 0a0a  tem_wide=True)..",
            "+000035f0: 2020 2020 2020 2020 7265 7475 726e 2074          return t",
            "+00003600: 7570 6c65 280a 2020 2020 2020 2020 2020  uple(.          ",
            "+00003610: 2020 6172 7261 792e 6765 745f 6972 7261    array.get_irra",
            "+00003620: 6469 616e 6365 2873 6f6c 6172 5f7a 656e  diance(solar_zen",
            "+00003630: 6974 682c 2073 6f6c 6172 5f61 7a69 6d75  ith, solar_azimu",
            "+00003640: 7468 2c0a 2020 2020 2020 2020 2020 2020  th,.            ",
            "+00003650: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00003660: 2020 2020 2064 6e69 2c20 6768 692c 2064       dni, ghi, d",
            "+00003670: 6869 2c0a 2020 2020 2020 2020 2020 2020  hi,.            ",
            "+00003680: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00003690: 2020 2020 2064 6e69 5f65 7874 7261 3d64       dni_extra=d",
            "+000036a0: 6e69 5f65 7874 7261 2c20 6169 726d 6173  ni_extra, airmas",
            "+000036b0: 733d 6169 726d 6173 732c 0a20 2020 2020  s=airmass,.     ",
            "+000036c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000036d0: 2020 2020 2020 2020 2020 2020 616c 6265              albe",
            "+000036e0: 646f 3d61 6c62 6564 6f2c 206d 6f64 656c  do=albedo, model",
            "+000036f0: 3d6d 6f64 656c 2c20 2a2a 6b77 6172 6773  =model, **kwargs",
            "+00003700: 290a 2020 2020 2020 2020 2020 2020 666f  ).            fo",
            "+00003710: 7220 6172 7261 792c 2064 6e69 2c20 6768  r array, dni, gh",
            "+00003720: 692c 2064 6869 2c20 616c 6265 646f 2069  i, dhi, albedo i",
            "+00003730: 6e20 7a69 7028 0a20 2020 2020 2020 2020  n zip(.         ",
            "+00003740: 2020 2020 2020 2073 656c 662e 6172 7261         self.arra",
            "+00003750: 7973 2c20 646e 692c 2067 6869 2c20 6468  ys, dni, ghi, dh",
            "+00003760: 692c 2061 6c62 6564 6f0a 2020 2020 2020  i, albedo.      ",
            "+00003770: 2020 2020 2020 290a 2020 2020 2020 2020        ).        ",
            "+00003780: 290a 0a20 2020 2040 5f75 6e77 7261 705f  )..    @_unwrap_",
            "+00003790: 7369 6e67 6c65 5f76 616c 7565 0a20 2020  single_value.   ",
            "+000037a0: 2064 6566 2067 6574 5f69 616d 2873 656c   def get_iam(sel",
            "+000037b0: 662c 2061 6f69 2c20 6961 6d5f 6d6f 6465  f, aoi, iam_mode",
            "+000037c0: 6c3d 2770 6879 7369 6361 6c27 293a 0a20  l='physical'):. ",
            "+000037d0: 2020 2020 2020 2022 2222 0a20 2020 2020         \"\"\".     ",
            "+000037e0: 2020 2044 6574 6572 6d69 6e65 2074 6865     Determine the",
            "+000037f0: 2069 6e63 6964 656e 6365 2061 6e67 6c65   incidence angle",
            "+00003800: 206d 6f64 6966 6965 7220 7573 696e 6720   modifier using ",
            "+00003810: 7468 6520 6d65 7468 6f64 2073 7065 6369  the method speci",
            "+00003820: 6669 6564 2062 790a 2020 2020 2020 2020  fied by.        ",
            "+00003830: 6060 6961 6d5f 6d6f 6465 6c60 602e 0a0a  ``iam_model``...",
            "+00003840: 2020 2020 2020 2020 5061 7261 6d65 7465          Paramete",
            "+00003850: 7273 2066 6f72 2074 6865 2073 656c 6563  rs for the selec",
            "+00003860: 7465 6420 4941 4d20 6d6f 6465 6c20 6172  ted IAM model ar",
            "+00003870: 6520 6578 7065 6374 6564 2074 6f20 6265  e expected to be",
            "+00003880: 2069 6e0a 2020 2020 2020 2020 6060 5056   in.        ``PV",
            "+00003890: 5379 7374 656d 2e6d 6f64 756c 655f 7061  System.module_pa",
            "+000038a0: 7261 6d65 7465 7273 6060 2e20 4465 6661  rameters``. Defa",
            "+000038b0: 756c 7420 7061 7261 6d65 7465 7273 2061  ult parameters a",
            "+000038c0: 7265 2061 7661 696c 6162 6c65 2066 6f72  re available for",
            "+000038d0: 0a20 2020 2020 2020 2074 6865 2027 7068  .        the 'ph",
            "+000038e0: 7973 6963 616c 272c 2027 6173 6872 6165  ysical', 'ashrae",
            "+000038f0: 2720 616e 6420 276d 6172 7469 6e5f 7275  ' and 'martin_ru",
            "+00003900: 697a 2720 6d6f 6465 6c73 2e0a 0a20 2020  iz' models...   ",
            "+00003910: 2020 2020 2050 6172 616d 6574 6572 730a       Parameters.",
            "+00003920: 2020 2020 2020 2020 2d2d 2d2d 2d2d 2d2d          --------",
            "+00003930: 2d2d 0a20 2020 2020 2020 2061 6f69 203a  --.        aoi :",
            "+00003940: 206e 756d 6572 6963 206f 7220 7475 706c   numeric or tupl",
            "+00003950: 6520 6f66 206e 756d 6572 6963 0a20 2020  e of numeric.   ",
            "+00003960: 2020 2020 2020 2020 2054 6865 2061 6e67           The ang",
            "+00003970: 6c65 206f 6620 696e 6369 6465 6e63 6520  le of incidence ",
            "+00003980: 696e 2064 6567 7265 6573 2e0a 0a20 2020  in degrees...   ",
            "+00003990: 2020 2020 2061 6f69 5f6d 6f64 656c 203a       aoi_model :",
            "+000039a0: 2073 7472 696e 672c 2064 6566 6175 6c74   string, default",
            "+000039b0: 2027 7068 7973 6963 616c 270a 2020 2020   'physical'.    ",
            "+000039c0: 2020 2020 2020 2020 5468 6520 4941 4d20          The IAM ",
            "+000039d0: 6d6f 6465 6c20 746f 2062 6520 7573 6564  model to be used",
            "+000039e0: 2e20 5661 6c69 6420 7374 7269 6e67 7320  . Valid strings ",
            "+000039f0: 6172 6520 2770 6879 7369 6361 6c27 2c20  are 'physical', ",
            "+00003a00: 2761 7368 7261 6527 2c0a 2020 2020 2020  'ashrae',.      ",
            "+00003a10: 2020 2020 2020 276d 6172 7469 6e5f 7275        'martin_ru",
            "+00003a20: 697a 272c 2027 7361 706d 2720 616e 6420  iz', 'sapm' and ",
            "+00003a30: 2769 6e74 6572 7027 2e0a 2020 2020 2020  'interp'..      ",
            "+00003a40: 2020 5265 7475 726e 730a 2020 2020 2020    Returns.      ",
            "+00003a50: 2020 2d2d 2d2d 2d2d 2d0a 2020 2020 2020    -------.      ",
            "+00003a60: 2020 6961 6d20 3a20 6e75 6d65 7269 6320    iam : numeric ",
            "+00003a70: 6f72 2074 7570 6c65 206f 6620 6e75 6d65  or tuple of nume",
            "+00003a80: 7269 630a 2020 2020 2020 2020 2020 2020  ric.            ",
            "+00003a90: 5468 6520 414f 4920 6d6f 6469 6669 6572  The AOI modifier",
            "+00003aa0: 2e0a 0a20 2020 2020 2020 2052 6169 7365  ...        Raise",
            "+00003ab0: 730a 2020 2020 2020 2020 2d2d 2d2d 2d2d  s.        ------",
            "+00003ac0: 0a20 2020 2020 2020 2056 616c 7565 4572  .        ValueEr",
            "+00003ad0: 726f 720a 2020 2020 2020 2020 2020 2020  ror.            ",
            "+00003ae0: 6966 2060 6961 6d5f 6d6f 6465 6c60 2069  if `iam_model` i",
            "+00003af0: 7320 6e6f 7420 6120 7661 6c69 6420 6d6f  s not a valid mo",
            "+00003b00: 6465 6c20 6e61 6d65 2e0a 2020 2020 2020  del name..      ",
            "+00003b10: 2020 2222 220a 2020 2020 2020 2020 616f    \"\"\".        ao",
            "+00003b20: 6920 3d20 7365 6c66 2e5f 7661 6c69 6461  i = self._valida",
            "+00003b30: 7465 5f70 6572 5f61 7272 6179 2861 6f69  te_per_array(aoi",
            "+00003b40: 290a 2020 2020 2020 2020 7265 7475 726e  ).        return",
            "+00003b50: 2074 7570 6c65 2861 7272 6179 2e67 6574   tuple(array.get",
            "+00003b60: 5f69 616d 2861 6f69 2c20 6961 6d5f 6d6f  _iam(aoi, iam_mo",
            "+00003b70: 6465 6c29 0a20 2020 2020 2020 2020 2020  del).           ",
            "+00003b80: 2020 2020 2020 2020 2020 666f 7220 6172            for ar",
            "+00003b90: 7261 792c 2061 6f69 2069 6e20 7a69 7028  ray, aoi in zip(",
            "+00003ba0: 7365 6c66 2e61 7272 6179 732c 2061 6f69  self.arrays, aoi",
            "+00003bb0: 2929 0a0a 2020 2020 405f 756e 7772 6170  ))..    @_unwrap",
            "+00003bc0: 5f73 696e 676c 655f 7661 6c75 650a 2020  _single_value.  ",
            "+00003bd0: 2020 6465 6620 6765 745f 6365 6c6c 5f74    def get_cell_t",
            "+00003be0: 656d 7065 7261 7475 7265 2873 656c 662c  emperature(self,",
            "+00003bf0: 2070 6f61 5f67 6c6f 6261 6c2c 2074 656d   poa_global, tem",
            "+00003c00: 705f 6169 722c 2077 696e 645f 7370 6565  p_air, wind_spee",
            "+00003c10: 642c 206d 6f64 656c 2c0a 2020 2020 2020  d, model,.      ",
            "+00003c20: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00003c30: 2020 2020 2020 2065 6666 6563 7469 7665         effective",
            "+00003c40: 5f69 7272 6164 6961 6e63 653d 4e6f 6e65  _irradiance=None",
            "+00003c50: 293a 0a20 2020 2020 2020 2022 2222 0a20  ):.        \"\"\". ",
            "+00003c60: 2020 2020 2020 2044 6574 6572 6d69 6e65         Determine",
            "+00003c70: 2063 656c 6c20 7465 6d70 6572 6174 7572   cell temperatur",
            "+00003c80: 6520 7573 696e 6720 7468 6520 6d65 7468  e using the meth",
            "+00003c90: 6f64 2073 7065 6369 6669 6564 2062 7920  od specified by ",
            "+00003ca0: 6060 6d6f 6465 6c60 602e 0a0a 2020 2020  ``model``...    ",
            "+00003cb0: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "+00003cc0: 2020 2020 2020 202d 2d2d 2d2d 2d2d 2d2d         ---------",
            "+00003cd0: 2d0a 2020 2020 2020 2020 706f 615f 676c  -.        poa_gl",
            "+00003ce0: 6f62 616c 203a 206e 756d 6572 6963 206f  obal : numeric o",
            "+00003cf0: 7220 7475 706c 6520 6f66 206e 756d 6572  r tuple of numer",
            "+00003d00: 6963 0a20 2020 2020 2020 2020 2020 2054  ic.            T",
            "+00003d10: 6f74 616c 2069 6e63 6964 656e 7420 6972  otal incident ir",
            "+00003d20: 7261 6469 616e 6365 2069 6e20 572f 6d5e  radiance in W/m^",
            "+00003d30: 322e 0a0a 2020 2020 2020 2020 7465 6d70  2...        temp",
            "+00003d40: 5f61 6972 203a 206e 756d 6572 6963 206f  _air : numeric o",
            "+00003d50: 7220 7475 706c 6520 6f66 206e 756d 6572  r tuple of numer",
            "+00003d60: 6963 0a20 2020 2020 2020 2020 2020 2041  ic.            A",
            "+00003d70: 6d62 6965 6e74 2064 7279 2062 756c 6220  mbient dry bulb ",
            "+00003d80: 7465 6d70 6572 6174 7572 6520 696e 2064  temperature in d",
            "+00003d90: 6567 7265 6573 2043 2e0a 0a20 2020 2020  egrees C...     ",
            "+00003da0: 2020 2077 696e 645f 7370 6565 6420 3a20     wind_speed : ",
            "+00003db0: 6e75 6d65 7269 6320 6f72 2074 7570 6c65  numeric or tuple",
            "+00003dc0: 206f 6620 6e75 6d65 7269 630a 2020 2020   of numeric.    ",
            "+00003dd0: 2020 2020 2020 2020 5769 6e64 2073 7065          Wind spe",
            "+00003de0: 6564 2069 6e20 6d2f 732e 0a0a 2020 2020  ed in m/s...    ",
            "+00003df0: 2020 2020 6d6f 6465 6c20 3a20 7374 720a      model : str.",
            "+00003e00: 2020 2020 2020 2020 2020 2020 5375 7070              Supp",
            "+00003e10: 6f72 7465 6420 6d6f 6465 6c73 2069 6e63  orted models inc",
            "+00003e20: 6c75 6465 2060 6027 7361 706d 2760 602c  lude ``'sapm'``,",
            "+00003e30: 2060 6027 7076 7379 7374 2760 602c 0a20   ``'pvsyst'``,. ",
            "+00003e40: 2020 2020 2020 2020 2020 2060 6027 6661             ``'fa",
            "+00003e50: 696d 616e 2760 602c 2060 6027 6675 656e  iman'``, ``'fuen",
            "+00003e60: 7465 7327 6060 2c20 616e 6420 6060 276e  tes'``, and ``'n",
            "+00003e70: 6f63 745f 7361 6d27 6060 0a0a 2020 2020  oct_sam'``..    ",
            "+00003e80: 2020 2020 6566 6665 6374 6976 655f 6972      effective_ir",
            "+00003e90: 7261 6469 616e 6365 203a 206e 756d 6572  radiance : numer",
            "+00003ea0: 6963 206f 7220 7475 706c 6520 6f66 206e  ic or tuple of n",
            "+00003eb0: 756d 6572 6963 2c20 6f70 7469 6f6e 616c  umeric, optional",
            "+00003ec0: 0a20 2020 2020 2020 2020 2020 2054 6865  .            The",
            "+00003ed0: 2069 7272 6164 6961 6e63 6520 7468 6174   irradiance that",
            "+00003ee0: 2069 7320 636f 6e76 6572 7465 6420 746f   is converted to",
            "+00003ef0: 2070 686f 746f 6375 7272 656e 7420 696e   photocurrent in",
            "+00003f00: 2057 2f6d 5e32 2e0a 2020 2020 2020 2020   W/m^2..        ",
            "+00003f10: 2020 2020 4f6e 6c79 2075 7365 6420 666f      Only used fo",
            "+00003f20: 7220 736f 6d65 206d 6f64 656c 732e 0a0a  r some models...",
            "+00003f30: 2020 2020 2020 2020 5265 7475 726e 730a          Returns.",
            "+00003f40: 2020 2020 2020 2020 2d2d 2d2d 2d2d 2d0a          -------.",
            "+00003f50: 2020 2020 2020 2020 6e75 6d65 7269 6320          numeric ",
            "+00003f60: 6f72 2074 7570 6c65 206f 6620 6e75 6d65  or tuple of nume",
            "+00003f70: 7269 630a 2020 2020 2020 2020 2020 2020  ric.            ",
            "+00003f80: 5661 6c75 6573 2069 6e20 6465 6772 6565  Values in degree",
            "+00003f90: 7320 432e 0a0a 2020 2020 2020 2020 5365  s C...        Se",
            "+00003fa0: 6520 416c 736f 0a20 2020 2020 2020 202d  e Also.        -",
            "+00003fb0: 2d2d 2d2d 2d2d 2d0a 2020 2020 2020 2020  -------.        ",
            "+00003fc0: 4172 7261 792e 6765 745f 6365 6c6c 5f74  Array.get_cell_t",
            "+00003fd0: 656d 7065 7261 7475 7265 0a0a 2020 2020  emperature..    ",
            "+00003fe0: 2020 2020 4e6f 7465 730a 2020 2020 2020      Notes.      ",
            "+00003ff0: 2020 2d2d 2d2d 2d0a 2020 2020 2020 2020    -----.        ",
            "+00004000: 5468 6520 6074 656d 705f 6169 7260 2061  The `temp_air` a",
            "+00004010: 6e64 2060 7769 6e64 5f73 7065 6564 6020  nd `wind_speed` ",
            "+00004020: 7061 7261 6d65 7465 7273 206d 6179 2062  parameters may b",
            "+00004030: 6520 7061 7373 6564 2061 7320 7475 706c  e passed as tupl",
            "+00004040: 6573 0a20 2020 2020 2020 2074 6f20 7072  es.        to pr",
            "+00004050: 6f76 6964 6520 6469 6666 6572 656e 7420  ovide different ",
            "+00004060: 7661 6c75 6573 2066 6f72 2065 6163 6820  values for each ",
            "+00004070: 4172 7261 7920 696e 2074 6865 2073 7973  Array in the sys",
            "+00004080: 7465 6d2e 2049 6620 7061 7373 6564 2061  tem. If passed a",
            "+00004090: 730a 2020 2020 2020 2020 6120 7475 706c  s.        a tupl",
            "+000040a0: 6520 7468 6520 6c65 6e67 7468 206d 7573  e the length mus",
            "+000040b0: 7420 6265 2074 6865 2073 616d 6520 6173  t be the same as",
            "+000040c0: 2074 6865 206e 756d 6265 7220 6f66 2041   the number of A",
            "+000040d0: 7272 6179 732e 2049 6620 6e6f 740a 2020  rrays. If not.  ",
            "+000040e0: 2020 2020 2020 7061 7373 6564 2061 7320        passed as ",
            "+000040f0: 6120 7475 706c 6520 7468 656e 2074 6865  a tuple then the",
            "+00004100: 2073 616d 6520 7661 6c75 6520 6973 2075   same value is u",
            "+00004110: 7365 6420 666f 7220 6561 6368 2041 7272  sed for each Arr",
            "+00004120: 6179 2e0a 2020 2020 2020 2020 2222 220a  ay..        \"\"\".",
            "+00004130: 2020 2020 2020 2020 706f 615f 676c 6f62          poa_glob",
            "+00004140: 616c 203d 2073 656c 662e 5f76 616c 6964  al = self._valid",
            "+00004150: 6174 655f 7065 725f 6172 7261 7928 706f  ate_per_array(po",
            "+00004160: 615f 676c 6f62 616c 290a 2020 2020 2020  a_global).      ",
            "+00004170: 2020 7465 6d70 5f61 6972 203d 2073 656c    temp_air = sel",
            "+00004180: 662e 5f76 616c 6964 6174 655f 7065 725f  f._validate_per_",
            "+00004190: 6172 7261 7928 7465 6d70 5f61 6972 2c20  array(temp_air, ",
            "+000041a0: 7379 7374 656d 5f77 6964 653d 5472 7565  system_wide=True",
            "+000041b0: 290a 2020 2020 2020 2020 7769 6e64 5f73  ).        wind_s",
            "+000041c0: 7065 6564 203d 2073 656c 662e 5f76 616c  peed = self._val",
            "+000041d0: 6964 6174 655f 7065 725f 6172 7261 7928  idate_per_array(",
            "+000041e0: 7769 6e64 5f73 7065 6564 2c20 7379 7374  wind_speed, syst",
            "+000041f0: 656d 5f77 6964 653d 5472 7565 290a 2020  em_wide=True).  ",
            "+00004200: 2020 2020 2020 2320 4e6f 7420 7573 6564        # Not used",
            "+00004210: 2066 6f72 2061 6c6c 206d 6f64 656c 732c   for all models,",
            "+00004220: 2062 7574 2041 7272 6179 2e67 6574 5f63   but Array.get_c",
            "+00004230: 656c 6c5f 7465 6d70 6572 6174 7572 6520  ell_temperature ",
            "+00004240: 6861 6e64 6c65 7320 6974 0a20 2020 2020  handles it.     ",
            "+00004250: 2020 2065 6666 6563 7469 7665 5f69 7272     effective_irr",
            "+00004260: 6164 6961 6e63 6520 3d20 7365 6c66 2e5f  adiance = self._",
            "+00004270: 7661 6c69 6461 7465 5f70 6572 5f61 7272  validate_per_arr",
            "+00004280: 6179 2865 6666 6563 7469 7665 5f69 7272  ay(effective_irr",
            "+00004290: 6164 6961 6e63 652c 0a20 2020 2020 2020  adiance,.       ",
            " 000042a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000042b0: 2020 2020 2020 2020 2073 7973 7465 6d5f           system_",
            "-000042c0: 7769 6465 3d54 7275 6529 0a0a 2020 2020  wide=True)..    ",
            "-000042d0: 2020 2020 7265 7475 726e 2074 7570 6c65      return tuple",
            "-000042e0: 280a 2020 2020 2020 2020 2020 2020 6172  (.            ar",
            "-000042f0: 7261 792e 6765 745f 6365 6c6c 5f74 656d  ray.get_cell_tem",
            "-00004300: 7065 7261 7475 7265 2870 6f61 5f67 6c6f  perature(poa_glo",
            "-00004310: 6261 6c2c 2074 656d 705f 6169 722c 2077  bal, temp_air, w",
            "-00004320: 696e 645f 7370 6565 642c 0a20 2020 2020  ind_speed,.     ",
            "-00004330: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00004340: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00004350: 2020 6d6f 6465 6c2c 2065 6666 6563 7469    model, effecti",
            "-00004360: 7665 5f69 7272 6164 6961 6e63 6529 0a20  ve_irradiance). ",
            "-00004370: 2020 2020 2020 2020 2020 2066 6f72 2061             for a",
            "-00004380: 7272 6179 2c20 706f 615f 676c 6f62 616c  rray, poa_global",
            "-00004390: 2c20 7465 6d70 5f61 6972 2c20 7769 6e64  , temp_air, wind",
            "-000043a0: 5f73 7065 6564 2c20 6566 6665 6374 6976  _speed, effectiv",
            "-000043b0: 655f 6972 7261 6469 616e 6365 0a20 2020  e_irradiance.   ",
            "-000043c0: 2020 2020 2020 2020 2069 6e20 7a69 7028           in zip(",
            "-000043d0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-000043e0: 2073 656c 662e 6172 7261 7973 2c20 706f   self.arrays, po",
            "-000043f0: 615f 676c 6f62 616c 2c20 7465 6d70 5f61  a_global, temp_a",
            "-00004400: 6972 2c20 7769 6e64 5f73 7065 6564 2c0a  ir, wind_speed,.",
            "-00004410: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00004420: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "-00004430: 616e 6365 0a20 2020 2020 2020 2020 2020  ance.           ",
            "-00004440: 2029 0a20 2020 2020 2020 2029 0a0a 2020   ).        )..  ",
            "-00004450: 2020 405f 756e 7772 6170 5f73 696e 676c    @_unwrap_singl",
            "-00004460: 655f 7661 6c75 650a 2020 2020 6465 6620  e_value.    def ",
            "-00004470: 6361 6c63 7061 7261 6d73 5f64 6573 6f74  calcparams_desot",
            "-00004480: 6f28 7365 6c66 2c20 6566 6665 6374 6976  o(self, effectiv",
            "-00004490: 655f 6972 7261 6469 616e 6365 2c20 7465  e_irradiance, te",
            "-000044a0: 6d70 5f63 656c 6c29 3a0a 2020 2020 2020  mp_cell):.      ",
            "-000044b0: 2020 2222 220a 2020 2020 2020 2020 5573    \"\"\".        Us",
            "-000044c0: 6520 7468 6520 3a70 793a 6675 6e63 3a60  e the :py:func:`",
            "-000044d0: 6361 6c63 7061 7261 6d73 5f64 6573 6f74  calcparams_desot",
            "-000044e0: 6f60 2066 756e 6374 696f 6e2c 2074 6865  o` function, the",
            "-000044f0: 2069 6e70 7574 0a20 2020 2020 2020 2070   input.        p",
            "-00004500: 6172 616d 6574 6572 7320 616e 6420 6060  arameters and ``",
            "-00004510: 7365 6c66 2e6d 6f64 756c 655f 7061 7261  self.module_para",
            "-00004520: 6d65 7465 7273 6060 2074 6f20 6361 6c63  meters`` to calc",
            "-00004530: 756c 6174 6520 7468 650a 2020 2020 2020  ulate the.      ",
            "-00004540: 2020 6d6f 6475 6c65 2063 7572 7265 6e74    module current",
            "-00004550: 7320 616e 6420 7265 7369 7374 616e 6365  s and resistance",
            "-00004560: 732e 0a0a 2020 2020 2020 2020 5061 7261  s...        Para",
            "-00004570: 6d65 7465 7273 0a20 2020 2020 2020 202d  meters.        -",
            "-00004580: 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020 2020  ---------.      ",
            "-00004590: 2020 6566 6665 6374 6976 655f 6972 7261    effective_irra",
            "-000045a0: 6469 616e 6365 203a 206e 756d 6572 6963  diance : numeric",
            "-000045b0: 206f 7220 7475 706c 6520 6f66 206e 756d   or tuple of num",
            "-000045c0: 6572 6963 0a20 2020 2020 2020 2020 2020  eric.           ",
            "-000045d0: 2054 6865 2069 7272 6164 6961 6e63 6520   The irradiance ",
            "-000045e0: 2857 2f6d 3229 2074 6861 7420 6973 2063  (W/m2) that is c",
            "-000045f0: 6f6e 7665 7274 6564 2074 6f20 7068 6f74  onverted to phot",
            "-00004600: 6f63 7572 7265 6e74 2e0a 0a20 2020 2020  ocurrent...     ",
            "-00004610: 2020 2074 656d 705f 6365 6c6c 203a 2066     temp_cell : f",
            "-00004620: 6c6f 6174 206f 7220 5365 7269 6573 206f  loat or Series o",
            "-00004630: 7220 7475 706c 6520 6f66 2066 6c6f 6174  r tuple of float",
            "-00004640: 206f 7220 5365 7269 6573 0a20 2020 2020   or Series.     ",
            "-00004650: 2020 2020 2020 2054 6865 2061 7665 7261         The avera",
            "-00004660: 6765 2063 656c 6c20 7465 6d70 6572 6174  ge cell temperat",
            "-00004670: 7572 6520 6f66 2063 656c 6c73 2077 6974  ure of cells wit",
            "-00004680: 6869 6e20 6120 6d6f 6475 6c65 2069 6e20  hin a module in ",
            "-00004690: 432e 0a0a 2020 2020 2020 2020 5265 7475  C...        Retu",
            "-000046a0: 726e 730a 2020 2020 2020 2020 2d2d 2d2d  rns.        ----",
            "-000046b0: 2d2d 2d0a 2020 2020 2020 2020 5365 6520  ---.        See ",
            "-000046c0: 7076 7379 7374 656d 2e63 616c 6370 6172  pvsystem.calcpar",
            "-000046d0: 616d 735f 6465 736f 746f 2066 6f72 2064  ams_desoto for d",
            "-000046e0: 6574 6169 6c73 0a20 2020 2020 2020 2022  etails.        \"",
            "-000046f0: 2222 0a20 2020 2020 2020 2065 6666 6563  \"\".        effec",
            "-00004700: 7469 7665 5f69 7272 6164 6961 6e63 6520  tive_irradiance ",
            "-00004710: 3d20 7365 6c66 2e5f 7661 6c69 6461 7465  = self._validate",
            "-00004720: 5f70 6572 5f61 7272 6179 2865 6666 6563  _per_array(effec",
            "-00004730: 7469 7665 5f69 7272 6164 6961 6e63 6529  tive_irradiance)",
            "-00004740: 0a20 2020 2020 2020 2074 656d 705f 6365  .        temp_ce",
            "-00004750: 6c6c 203d 2073 656c 662e 5f76 616c 6964  ll = self._valid",
            "-00004760: 6174 655f 7065 725f 6172 7261 7928 7465  ate_per_array(te",
            "-00004770: 6d70 5f63 656c 6c29 0a0a 2020 2020 2020  mp_cell)..      ",
            "-00004780: 2020 6275 696c 645f 6b77 6172 6773 203d    build_kwargs =",
            "-00004790: 2066 756e 6374 6f6f 6c73 2e70 6172 7469   functools.parti",
            "-000047a0: 616c 280a 2020 2020 2020 2020 2020 2020  al(.            ",
            "-000047b0: 5f62 7569 6c64 5f6b 7761 7267 732c 0a20  _build_kwargs,. ",
            "-000047c0: 2020 2020 2020 2020 2020 205b 2761 5f72             ['a_r",
            "-000047d0: 6566 272c 2027 495f 4c5f 7265 6627 2c20  ef', 'I_L_ref', ",
            "-000047e0: 2749 5f6f 5f72 6566 272c 2027 525f 7368  'I_o_ref', 'R_sh",
            "-000047f0: 5f72 6566 272c 0a20 2020 2020 2020 2020  _ref',.         ",
            "-00004800: 2020 2020 2752 5f73 272c 2027 616c 7068      'R_s', 'alph",
            "-00004810: 615f 7363 272c 2027 4567 5265 6627 2c20  a_sc', 'EgRef', ",
            "-00004820: 2764 4567 6454 272c 0a20 2020 2020 2020  'dEgdT',.       ",
            "-00004830: 2020 2020 2020 2769 7272 6164 5f72 6566        'irrad_ref",
            "-00004840: 272c 2027 7465 6d70 5f72 6566 275d 0a20  ', 'temp_ref']. ",
            "-00004850: 2020 2020 2020 2029 0a0a 2020 2020 2020         )..      ",
            "-00004860: 2020 7265 7475 726e 2074 7570 6c65 280a    return tuple(.",
            "-00004870: 2020 2020 2020 2020 2020 2020 6361 6c63              calc",
            "-00004880: 7061 7261 6d73 5f64 6573 6f74 6f28 0a20  params_desoto(. ",
            "-00004890: 2020 2020 2020 2020 2020 2020 2020 2065                 e",
            "-000048a0: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "-000048b0: 6e63 652c 2074 656d 705f 6365 6c6c 2c0a  nce, temp_cell,.",
            "-000048c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000048d0: 2a2a 6275 696c 645f 6b77 6172 6773 2861  **build_kwargs(a",
            "-000048e0: 7272 6179 2e6d 6f64 756c 655f 7061 7261  rray.module_para",
            "-000048f0: 6d65 7465 7273 290a 2020 2020 2020 2020  meters).        ",
            "-00004900: 2020 2020 290a 2020 2020 2020 2020 2020      ).          ",
            "-00004910: 2020 666f 7220 6172 7261 792c 2065 6666    for array, eff",
            "-00004920: 6563 7469 7665 5f69 7272 6164 6961 6e63  ective_irradianc",
            "-00004930: 652c 2074 656d 705f 6365 6c6c 0a20 2020  e, temp_cell.   ",
            "-00004940: 2020 2020 2020 2020 2069 6e20 7a69 7028           in zip(",
            "-00004950: 7365 6c66 2e61 7272 6179 732c 2065 6666  self.arrays, eff",
            "-00004960: 6563 7469 7665 5f69 7272 6164 6961 6e63  ective_irradianc",
            "-00004970: 652c 2074 656d 705f 6365 6c6c 290a 2020  e, temp_cell).  ",
            "-00004980: 2020 2020 2020 290a 0a20 2020 2040 5f75        )..    @_u",
            "-00004990: 6e77 7261 705f 7369 6e67 6c65 5f76 616c  nwrap_single_val",
            "-000049a0: 7565 0a20 2020 2064 6566 2063 616c 6370  ue.    def calcp",
            "-000049b0: 6172 616d 735f 6365 6328 7365 6c66 2c20  arams_cec(self, ",
            "-000049c0: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "-000049d0: 616e 6365 2c20 7465 6d70 5f63 656c 6c29  ance, temp_cell)",
            "-000049e0: 3a0a 2020 2020 2020 2020 2222 220a 2020  :.        \"\"\".  ",
            "-000049f0: 2020 2020 2020 5573 6520 7468 6520 3a70        Use the :p",
            "-00004a00: 793a 6675 6e63 3a60 6361 6c63 7061 7261  y:func:`calcpara",
            "-00004a10: 6d73 5f63 6563 6020 6675 6e63 7469 6f6e  ms_cec` function",
            "-00004a20: 2c20 7468 6520 696e 7075 740a 2020 2020  , the input.    ",
            "-00004a30: 2020 2020 7061 7261 6d65 7465 7273 2061      parameters a",
            "-00004a40: 6e64 2060 6073 656c 662e 6d6f 6475 6c65  nd ``self.module",
            "-00004a50: 5f70 6172 616d 6574 6572 7360 6020 746f  _parameters`` to",
            "-00004a60: 2063 616c 6375 6c61 7465 2074 6865 0a20   calculate the. ",
            "-00004a70: 2020 2020 2020 206d 6f64 756c 6520 6375         module cu",
            "-00004a80: 7272 656e 7473 2061 6e64 2072 6573 6973  rrents and resis",
            "-00004a90: 7461 6e63 6573 2e0a 0a20 2020 2020 2020  tances...       ",
            "-00004aa0: 2050 6172 616d 6574 6572 730a 2020 2020   Parameters.    ",
            "-00004ab0: 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20      ----------. ",
            "-00004ac0: 2020 2020 2020 2065 6666 6563 7469 7665         effective",
            "-00004ad0: 5f69 7272 6164 6961 6e63 6520 3a20 6e75  _irradiance : nu",
            "-00004ae0: 6d65 7269 6320 6f72 2074 7570 6c65 206f  meric or tuple o",
            "-00004af0: 6620 6e75 6d65 7269 630a 2020 2020 2020  f numeric.      ",
            "-00004b00: 2020 2020 2020 5468 6520 6972 7261 6469        The irradi",
            "-00004b10: 616e 6365 2028 572f 6d32 2920 7468 6174  ance (W/m2) that",
            "-00004b20: 2069 7320 636f 6e76 6572 7465 6420 746f   is converted to",
            "-00004b30: 2070 686f 746f 6375 7272 656e 742e 0a0a   photocurrent...",
            "-00004b40: 2020 2020 2020 2020 7465 6d70 5f63 656c          temp_cel",
            "-00004b50: 6c20 3a20 666c 6f61 7420 6f72 2053 6572  l : float or Ser",
            "-00004b60: 6965 7320 6f72 2074 7570 6c65 206f 6620  ies or tuple of ",
            "-00004b70: 666c 6f61 7420 6f72 2053 6572 6965 730a  float or Series.",
            "-00004b80: 2020 2020 2020 2020 2020 2020 5468 6520              The ",
            "-00004b90: 6176 6572 6167 6520 6365 6c6c 2074 656d  average cell tem",
            "-00004ba0: 7065 7261 7475 7265 206f 6620 6365 6c6c  perature of cell",
            "-00004bb0: 7320 7769 7468 696e 2061 206d 6f64 756c  s within a modul",
            "-00004bc0: 6520 696e 2043 2e0a 0a20 2020 2020 2020  e in C...       ",
            "-00004bd0: 2052 6574 7572 6e73 0a20 2020 2020 2020   Returns.       ",
            "-00004be0: 202d 2d2d 2d2d 2d2d 0a20 2020 2020 2020   -------.       ",
            "-00004bf0: 2053 6565 2070 7673 7973 7465 6d2e 6361   See pvsystem.ca",
            "-00004c00: 6c63 7061 7261 6d73 5f63 6563 2066 6f72  lcparams_cec for",
            "-00004c10: 2064 6574 6169 6c73 0a20 2020 2020 2020   details.       ",
            "-00004c20: 2022 2222 0a20 2020 2020 2020 2065 6666   \"\"\".        eff",
            "-00004c30: 6563 7469 7665 5f69 7272 6164 6961 6e63  ective_irradianc",
            "-00004c40: 6520 3d20 7365 6c66 2e5f 7661 6c69 6461  e = self._valida",
            "-00004c50: 7465 5f70 6572 5f61 7272 6179 2865 6666  te_per_array(eff",
            "-00004c60: 6563 7469 7665 5f69 7272 6164 6961 6e63  ective_irradianc",
            "-00004c70: 6529 0a20 2020 2020 2020 2074 656d 705f  e).        temp_",
            "-00004c80: 6365 6c6c 203d 2073 656c 662e 5f76 616c  cell = self._val",
            "-00004c90: 6964 6174 655f 7065 725f 6172 7261 7928  idate_per_array(",
            "-00004ca0: 7465 6d70 5f63 656c 6c29 0a0a 2020 2020  temp_cell)..    ",
            "-00004cb0: 2020 2020 6275 696c 645f 6b77 6172 6773      build_kwargs",
            "-00004cc0: 203d 2066 756e 6374 6f6f 6c73 2e70 6172   = functools.par",
            "-00004cd0: 7469 616c 280a 2020 2020 2020 2020 2020  tial(.          ",
            "-00004ce0: 2020 5f62 7569 6c64 5f6b 7761 7267 732c    _build_kwargs,",
            "-00004cf0: 0a20 2020 2020 2020 2020 2020 205b 2761  .            ['a",
            "-00004d00: 5f72 6566 272c 2027 495f 4c5f 7265 6627  _ref', 'I_L_ref'",
            "-00004d10: 2c20 2749 5f6f 5f72 6566 272c 2027 525f  , 'I_o_ref', 'R_",
            "-00004d20: 7368 5f72 6566 272c 0a20 2020 2020 2020  sh_ref',.       ",
            "-00004d30: 2020 2020 2020 2752 5f73 272c 2027 616c        'R_s', 'al",
            "-00004d40: 7068 615f 7363 272c 2027 4164 6a75 7374  pha_sc', 'Adjust",
            "-00004d50: 272c 2027 4567 5265 6627 2c20 2764 4567  ', 'EgRef', 'dEg",
            "-00004d60: 6454 272c 0a20 2020 2020 2020 2020 2020  dT',.           ",
            "-00004d70: 2020 2769 7272 6164 5f72 6566 272c 2027    'irrad_ref', '",
            "-00004d80: 7465 6d70 5f72 6566 275d 0a20 2020 2020  temp_ref'].     ",
            "-00004d90: 2020 2029 0a0a 2020 2020 2020 2020 7265     )..        re",
            "-00004da0: 7475 726e 2074 7570 6c65 280a 2020 2020  turn tuple(.    ",
            "-00004db0: 2020 2020 2020 2020 6361 6c63 7061 7261          calcpara",
            "-00004dc0: 6d73 5f63 6563 280a 2020 2020 2020 2020  ms_cec(.        ",
            "-00004dd0: 2020 2020 2020 2020 6566 6665 6374 6976          effectiv",
            "-00004de0: 655f 6972 7261 6469 616e 6365 2c20 7465  e_irradiance, te",
            "-00004df0: 6d70 5f63 656c 6c2c 0a20 2020 2020 2020  mp_cell,.       ",
            "-00004e00: 2020 2020 2020 2020 202a 2a62 7569 6c64           **build",
            "-00004e10: 5f6b 7761 7267 7328 6172 7261 792e 6d6f  _kwargs(array.mo",
            "-00004e20: 6475 6c65 5f70 6172 616d 6574 6572 7329  dule_parameters)",
            "-00004e30: 0a20 2020 2020 2020 2020 2020 2029 0a20  .            ). ",
            "-00004e40: 2020 2020 2020 2020 2020 2066 6f72 2061             for a",
            "-00004e50: 7272 6179 2c20 6566 6665 6374 6976 655f  rray, effective_",
            "-00004e60: 6972 7261 6469 616e 6365 2c20 7465 6d70  irradiance, temp",
            "-00004e70: 5f63 656c 6c0a 2020 2020 2020 2020 2020  _cell.          ",
            "-00004e80: 2020 696e 207a 6970 2873 656c 662e 6172    in zip(self.ar",
            "-00004e90: 7261 7973 2c20 6566 6665 6374 6976 655f  rays, effective_",
            "-00004ea0: 6972 7261 6469 616e 6365 2c20 7465 6d70  irradiance, temp",
            "-00004eb0: 5f63 656c 6c29 0a20 2020 2020 2020 2029  _cell).        )",
            "-00004ec0: 0a0a 2020 2020 405f 756e 7772 6170 5f73  ..    @_unwrap_s",
            "-00004ed0: 696e 676c 655f 7661 6c75 650a 2020 2020  ingle_value.    ",
            "-00004ee0: 6465 6620 6361 6c63 7061 7261 6d73 5f70  def calcparams_p",
            "-00004ef0: 7673 7973 7428 7365 6c66 2c20 6566 6665  vsyst(self, effe",
            "-00004f00: 6374 6976 655f 6972 7261 6469 616e 6365  ctive_irradiance",
            "-00004f10: 2c20 7465 6d70 5f63 656c 6c29 3a0a 2020  , temp_cell):.  ",
            "-00004f20: 2020 2020 2020 2222 220a 2020 2020 2020        \"\"\".      ",
            "-00004f30: 2020 5573 6520 7468 6520 3a70 793a 6675    Use the :py:fu",
            "-00004f40: 6e63 3a60 6361 6c63 7061 7261 6d73 5f70  nc:`calcparams_p",
            "-00004f50: 7673 7973 7460 2066 756e 6374 696f 6e2c  vsyst` function,",
            "-00004f60: 2074 6865 2069 6e70 7574 0a20 2020 2020   the input.     ",
            "-00004f70: 2020 2070 6172 616d 6574 6572 7320 616e     parameters an",
            "-00004f80: 6420 6060 7365 6c66 2e6d 6f64 756c 655f  d ``self.module_",
            "-00004f90: 7061 7261 6d65 7465 7273 6060 2074 6f20  parameters`` to ",
            "-00004fa0: 6361 6c63 756c 6174 6520 7468 650a 2020  calculate the.  ",
            "-00004fb0: 2020 2020 2020 6d6f 6475 6c65 2063 7572        module cur",
            "-00004fc0: 7265 6e74 7320 616e 6420 7265 7369 7374  rents and resist",
            "-00004fd0: 616e 6365 732e 0a0a 2020 2020 2020 2020  ances...        ",
            "-00004fe0: 5061 7261 6d65 7465 7273 0a20 2020 2020  Parameters.     ",
            "-00004ff0: 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020     ----------.  ",
            "-00005000: 2020 2020 2020 6566 6665 6374 6976 655f        effective_",
            "-00005010: 6972 7261 6469 616e 6365 203a 206e 756d  irradiance : num",
            "-00005020: 6572 6963 206f 7220 7475 706c 6520 6f66  eric or tuple of",
            "-00005030: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "-00005040: 2020 2020 2054 6865 2069 7272 6164 6961       The irradia",
            "-00005050: 6e63 6520 2857 2f6d 3229 2074 6861 7420  nce (W/m2) that ",
            "-00005060: 6973 2063 6f6e 7665 7274 6564 2074 6f20  is converted to ",
            "-00005070: 7068 6f74 6f63 7572 7265 6e74 2e0a 0a20  photocurrent... ",
            "-00005080: 2020 2020 2020 2074 656d 705f 6365 6c6c         temp_cell",
            "-00005090: 203a 2066 6c6f 6174 206f 7220 5365 7269   : float or Seri",
            "-000050a0: 6573 206f 7220 7475 706c 6520 6f66 2066  es or tuple of f",
            "-000050b0: 6c6f 6174 206f 7220 5365 7269 6573 0a20  loat or Series. ",
            "-000050c0: 2020 2020 2020 2020 2020 2054 6865 2061             The a",
            "-000050d0: 7665 7261 6765 2063 656c 6c20 7465 6d70  verage cell temp",
            "-000050e0: 6572 6174 7572 6520 6f66 2063 656c 6c73  erature of cells",
            "-000050f0: 2077 6974 6869 6e20 6120 6d6f 6475 6c65   within a module",
            "-00005100: 2069 6e20 432e 0a0a 2020 2020 2020 2020   in C...        ",
            "-00005110: 5265 7475 726e 730a 2020 2020 2020 2020  Returns.        ",
            "-00005120: 2d2d 2d2d 2d2d 2d0a 2020 2020 2020 2020  -------.        ",
            "-00005130: 5365 6520 7076 7379 7374 656d 2e63 616c  See pvsystem.cal",
            "-00005140: 6370 6172 616d 735f 7076 7379 7374 2066  cparams_pvsyst f",
            "-00005150: 6f72 2064 6574 6169 6c73 0a20 2020 2020  or details.     ",
            "-00005160: 2020 2022 2222 0a20 2020 2020 2020 2065     \"\"\".        e",
            "-00005170: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "-00005180: 6e63 6520 3d20 7365 6c66 2e5f 7661 6c69  nce = self._vali",
            "-00005190: 6461 7465 5f70 6572 5f61 7272 6179 2865  date_per_array(e",
            "-000051a0: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "-000051b0: 6e63 6529 0a20 2020 2020 2020 2074 656d  nce).        tem",
            "-000051c0: 705f 6365 6c6c 203d 2073 656c 662e 5f76  p_cell = self._v",
            "-000051d0: 616c 6964 6174 655f 7065 725f 6172 7261  alidate_per_arra",
            "-000051e0: 7928 7465 6d70 5f63 656c 6c29 0a0a 2020  y(temp_cell)..  ",
            "-000051f0: 2020 2020 2020 6275 696c 645f 6b77 6172        build_kwar",
            "-00005200: 6773 203d 2066 756e 6374 6f6f 6c73 2e70  gs = functools.p",
            "-00005210: 6172 7469 616c 280a 2020 2020 2020 2020  artial(.        ",
            "-00005220: 2020 2020 5f62 7569 6c64 5f6b 7761 7267      _build_kwarg",
            "-00005230: 732c 0a20 2020 2020 2020 2020 2020 205b  s,.            [",
            "-00005240: 2767 616d 6d61 5f72 6566 272c 2027 6d75  'gamma_ref', 'mu",
            "-00005250: 5f67 616d 6d61 272c 2027 495f 4c5f 7265  _gamma', 'I_L_re",
            "-00005260: 6627 2c20 2749 5f6f 5f72 6566 272c 0a20  f', 'I_o_ref',. ",
            "-00005270: 2020 2020 2020 2020 2020 2020 2752 5f73              'R_s",
            "-00005280: 685f 7265 6627 2c20 2752 5f73 685f 3027  h_ref', 'R_sh_0'",
            "-00005290: 2c20 2752 5f73 685f 6578 7027 2c0a 2020  , 'R_sh_exp',.  ",
            "-000052a0: 2020 2020 2020 2020 2020 2027 525f 7327             'R_s'",
            "-000052b0: 2c20 2761 6c70 6861 5f73 6327 2c20 2745  , 'alpha_sc', 'E",
            "-000052c0: 6752 6566 272c 0a20 2020 2020 2020 2020  gRef',.         ",
            "-000052d0: 2020 2020 2769 7272 6164 5f72 6566 272c      'irrad_ref',",
            "-000052e0: 2027 7465 6d70 5f72 6566 272c 0a20 2020   'temp_ref',.   ",
            "-000052f0: 2020 2020 2020 2020 2020 2763 656c 6c73            'cells",
            "-00005300: 5f69 6e5f 7365 7269 6573 275d 0a20 2020  _in_series'].   ",
            "-00005310: 2020 2020 2029 0a0a 2020 2020 2020 2020       )..        ",
            "-00005320: 7265 7475 726e 2074 7570 6c65 280a 2020  return tuple(.  ",
            "-00005330: 2020 2020 2020 2020 2020 6361 6c63 7061            calcpa",
            "-00005340: 7261 6d73 5f70 7673 7973 7428 0a20 2020  rams_pvsyst(.   ",
            "-00005350: 2020 2020 2020 2020 2020 2020 2065 6666               eff",
            "-00005360: 6563 7469 7665 5f69 7272 6164 6961 6e63  ective_irradianc",
            "-00005370: 652c 2074 656d 705f 6365 6c6c 2c0a 2020  e, temp_cell,.  ",
            "-00005380: 2020 2020 2020 2020 2020 2020 2020 2a2a                **",
            "-00005390: 6275 696c 645f 6b77 6172 6773 2861 7272  build_kwargs(arr",
            "-000053a0: 6179 2e6d 6f64 756c 655f 7061 7261 6d65  ay.module_parame",
            "-000053b0: 7465 7273 290a 2020 2020 2020 2020 2020  ters).          ",
            "-000053c0: 2020 290a 2020 2020 2020 2020 2020 2020    ).            ",
            "-000053d0: 666f 7220 6172 7261 792c 2065 6666 6563  for array, effec",
            "-000053e0: 7469 7665 5f69 7272 6164 6961 6e63 652c  tive_irradiance,",
            "-000053f0: 2074 656d 705f 6365 6c6c 0a20 2020 2020   temp_cell.     ",
            "-00005400: 2020 2020 2020 2069 6e20 7a69 7028 7365         in zip(se",
            "-00005410: 6c66 2e61 7272 6179 732c 2065 6666 6563  lf.arrays, effec",
            "-00005420: 7469 7665 5f69 7272 6164 6961 6e63 652c  tive_irradiance,",
            "-00005430: 2074 656d 705f 6365 6c6c 290a 2020 2020   temp_cell).    ",
            "-00005440: 2020 2020 290a 0a20 2020 2040 5f75 6e77      )..    @_unw",
            "-00005450: 7261 705f 7369 6e67 6c65 5f76 616c 7565  rap_single_value",
            "-00005460: 0a20 2020 2064 6566 2073 6170 6d28 7365  .    def sapm(se",
            "-00005470: 6c66 2c20 6566 6665 6374 6976 655f 6972  lf, effective_ir",
            "-00005480: 7261 6469 616e 6365 2c20 7465 6d70 5f63  radiance, temp_c",
            "-00005490: 656c 6c29 3a0a 2020 2020 2020 2020 2222  ell):.        \"\"",
            "-000054a0: 220a 2020 2020 2020 2020 5573 6520 7468  \".        Use th",
            "-000054b0: 6520 3a70 793a 6675 6e63 3a60 7361 706d  e :py:func:`sapm",
            "-000054c0: 6020 6675 6e63 7469 6f6e 2c20 7468 6520  ` function, the ",
            "-000054d0: 696e 7075 7420 7061 7261 6d65 7465 7273  input parameters",
            "-000054e0: 2c0a 2020 2020 2020 2020 616e 6420 6060  ,.        and ``",
            "-000054f0: 7365 6c66 2e6d 6f64 756c 655f 7061 7261  self.module_para",
            "-00005500: 6d65 7465 7273 6060 2074 6f20 6361 6c63  meters`` to calc",
            "-00005510: 756c 6174 650a 2020 2020 2020 2020 566f  ulate.        Vo",
            "-00005520: 632c 2049 7363 2c20 4978 2c20 4978 782c  c, Isc, Ix, Ixx,",
            "-00005530: 2056 6d70 2c20 616e 6420 496d 702e 0a0a   Vmp, and Imp...",
            "-00005540: 2020 2020 2020 2020 5061 7261 6d65 7465          Paramete",
            "-00005550: 7273 0a20 2020 2020 2020 202d 2d2d 2d2d  rs.        -----",
            "-00005560: 2d2d 2d2d 2d0a 2020 2020 2020 2020 6566  -----.        ef",
            "-00005570: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "-00005580: 6365 203a 206e 756d 6572 6963 206f 7220  ce : numeric or ",
            "-00005590: 7475 706c 6520 6f66 206e 756d 6572 6963  tuple of numeric",
            "-000055a0: 0a20 2020 2020 2020 2020 2020 2054 6865  .            The",
            "-000055b0: 2069 7272 6164 6961 6e63 6520 2857 2f6d   irradiance (W/m",
            "-000055c0: 3229 2074 6861 7420 6973 2063 6f6e 7665  2) that is conve",
            "-000055d0: 7274 6564 2074 6f20 7068 6f74 6f63 7572  rted to photocur",
            "-000055e0: 7265 6e74 2e0a 0a20 2020 2020 2020 2074  rent...        t",
            "-000055f0: 656d 705f 6365 6c6c 203a 2066 6c6f 6174  emp_cell : float",
            "-00005600: 206f 7220 5365 7269 6573 206f 7220 7475   or Series or tu",
            "-00005610: 706c 6520 6f66 2066 6c6f 6174 206f 7220  ple of float or ",
            "-00005620: 5365 7269 6573 0a20 2020 2020 2020 2020  Series.         ",
            "-00005630: 2020 2054 6865 2061 7665 7261 6765 2063     The average c",
            "-00005640: 656c 6c20 7465 6d70 6572 6174 7572 6520  ell temperature ",
            "-00005650: 6f66 2063 656c 6c73 2077 6974 6869 6e20  of cells within ",
            "-00005660: 6120 6d6f 6475 6c65 2069 6e20 432e 0a0a  a module in C...",
            "-00005670: 2020 2020 2020 2020 5265 7475 726e 730a          Returns.",
            "-00005680: 2020 2020 2020 2020 2d2d 2d2d 2d2d 2d0a          -------.",
            "-00005690: 2020 2020 2020 2020 5365 6520 7076 7379          See pvsy",
            "-000056a0: 7374 656d 2e73 6170 6d20 666f 7220 6465  stem.sapm for de",
            "-000056b0: 7461 696c 730a 2020 2020 2020 2020 2222  tails.        \"\"",
            "-000056c0: 220a 2020 2020 2020 2020 6566 6665 6374  \".        effect",
            "-000056d0: 6976 655f 6972 7261 6469 616e 6365 203d  ive_irradiance =",
            "-000056e0: 2073 656c 662e 5f76 616c 6964 6174 655f   self._validate_",
            "-000056f0: 7065 725f 6172 7261 7928 6566 6665 6374  per_array(effect",
            "-00005700: 6976 655f 6972 7261 6469 616e 6365 290a  ive_irradiance).",
            "-00005710: 2020 2020 2020 2020 7465 6d70 5f63 656c          temp_cel",
            "-00005720: 6c20 3d20 7365 6c66 2e5f 7661 6c69 6461  l = self._valida",
            "-00005730: 7465 5f70 6572 5f61 7272 6179 2874 656d  te_per_array(tem",
            "-00005740: 705f 6365 6c6c 290a 0a20 2020 2020 2020  p_cell)..       ",
            "-00005750: 2072 6574 7572 6e20 7475 706c 6528 0a20   return tuple(. ",
            "-00005760: 2020 2020 2020 2020 2020 2073 6170 6d28             sapm(",
            "-00005770: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "-00005780: 616e 6365 2c20 7465 6d70 5f63 656c 6c2c  ance, temp_cell,",
            "-00005790: 2061 7272 6179 2e6d 6f64 756c 655f 7061   array.module_pa",
            "-000057a0: 7261 6d65 7465 7273 290a 2020 2020 2020  rameters).      ",
            "-000057b0: 2020 2020 2020 666f 7220 6172 7261 792c        for array,",
            "-000057c0: 2065 6666 6563 7469 7665 5f69 7272 6164   effective_irrad",
            "-000057d0: 6961 6e63 652c 2074 656d 705f 6365 6c6c  iance, temp_cell",
            "-000057e0: 0a20 2020 2020 2020 2020 2020 2069 6e20  .            in ",
            "-000057f0: 7a69 7028 7365 6c66 2e61 7272 6179 732c  zip(self.arrays,",
            "-00005800: 2065 6666 6563 7469 7665 5f69 7272 6164   effective_irrad",
            "-00005810: 6961 6e63 652c 2074 656d 705f 6365 6c6c  iance, temp_cell",
            "-00005820: 290a 2020 2020 2020 2020 290a 0a20 2020  ).        )..   ",
            "-00005830: 2040 5f75 6e77 7261 705f 7369 6e67 6c65   @_unwrap_single",
            "-00005840: 5f76 616c 7565 0a20 2020 2064 6566 2073  _value.    def s",
            "-00005850: 6170 6d5f 7370 6563 7472 616c 5f6c 6f73  apm_spectral_los",
            "-00005860: 7328 7365 6c66 2c20 6169 726d 6173 735f  s(self, airmass_",
            "-00005870: 6162 736f 6c75 7465 293a 0a20 2020 2020  absolute):.     ",
            "-00005880: 2020 2022 2222 0a20 2020 2020 2020 2055     \"\"\".        U",
            "-00005890: 7365 2074 6865 203a 7079 3a66 756e 633a  se the :py:func:",
            "-000058a0: 6070 766c 6962 2e73 7065 6374 7275 6d2e  `pvlib.spectrum.",
            "-000058b0: 7370 6563 7472 616c 5f66 6163 746f 725f  spectral_factor_",
            "-000058c0: 7361 706d 6020 6675 6e63 7469 6f6e 2c0a  sapm` function,.",
            "-000058d0: 2020 2020 2020 2020 7468 6520 696e 7075          the inpu",
            "-000058e0: 7420 7061 7261 6d65 7465 7273 2c20 616e  t parameters, an",
            "-000058f0: 6420 6060 7365 6c66 2e6d 6f64 756c 655f  d ``self.module_",
            "-00005900: 7061 7261 6d65 7465 7273 6060 2074 6f20  parameters`` to ",
            "-00005910: 6361 6c63 756c 6174 6520 4631 2e0a 0a20  calculate F1... ",
            "-00005920: 2020 2020 2020 2050 6172 616d 6574 6572         Parameter",
            "-00005930: 730a 2020 2020 2020 2020 2d2d 2d2d 2d2d  s.        ------",
            "-00005940: 2d2d 2d2d 0a20 2020 2020 2020 2061 6972  ----.        air",
            "-00005950: 6d61 7373 5f61 6273 6f6c 7574 6520 3a20  mass_absolute : ",
            "-00005960: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "-00005970: 2020 2020 4162 736f 6c75 7465 2061 6972      Absolute air",
            "-00005980: 6d61 7373 2e0a 0a20 2020 2020 2020 2052  mass...        R",
            "-00005990: 6574 7572 6e73 0a20 2020 2020 2020 202d  eturns.        -",
            "-000059a0: 2d2d 2d2d 2d2d 0a20 2020 2020 2020 2046  ------.        F",
            "-000059b0: 3120 3a20 6e75 6d65 7269 6320 6f72 2074  1 : numeric or t",
            "-000059c0: 7570 6c65 206f 6620 6e75 6d65 7269 630a  uple of numeric.",
            "-000059d0: 2020 2020 2020 2020 2020 2020 5468 6520              The ",
            "-000059e0: 5341 504d 2073 7065 6374 7261 6c20 6c6f  SAPM spectral lo",
            "-000059f0: 7373 2063 6f65 6666 6963 6965 6e74 2e0a  ss coefficient..",
            "-00005a00: 2020 2020 2020 2020 2222 220a 2020 2020          \"\"\".    ",
            "-00005a10: 2020 2020 7265 7475 726e 2074 7570 6c65      return tuple",
            "-00005a20: 280a 2020 2020 2020 2020 2020 2020 7370  (.            sp",
            "-00005a30: 6563 7472 756d 2e73 7065 6374 7261 6c5f  ectrum.spectral_",
            "-00005a40: 6661 6374 6f72 5f73 6170 6d28 6169 726d  factor_sapm(airm",
            "-00005a50: 6173 735f 6162 736f 6c75 7465 2c0a 2020  ass_absolute,.  ",
            "-00005a60: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00005a70: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00005a80: 2020 2020 2020 2020 6172 7261 792e 6d6f          array.mo",
            "-00005a90: 6475 6c65 5f70 6172 616d 6574 6572 7329  dule_parameters)",
            "-00005aa0: 0a20 2020 2020 2020 2020 2020 2066 6f72  .            for",
            "-00005ab0: 2061 7272 6179 2069 6e20 7365 6c66 2e61   array in self.a",
            "-00005ac0: 7272 6179 730a 2020 2020 2020 2020 290a  rrays.        ).",
            "-00005ad0: 0a20 2020 2040 5f75 6e77 7261 705f 7369  .    @_unwrap_si",
            "-00005ae0: 6e67 6c65 5f76 616c 7565 0a20 2020 2064  ngle_value.    d",
            "-00005af0: 6566 2073 6170 6d5f 6566 6665 6374 6976  ef sapm_effectiv",
            "-00005b00: 655f 6972 7261 6469 616e 6365 2873 656c  e_irradiance(sel",
            "-00005b10: 662c 2070 6f61 5f64 6972 6563 742c 2070  f, poa_direct, p",
            "-00005b20: 6f61 5f64 6966 6675 7365 2c0a 2020 2020  oa_diffuse,.    ",
            "-00005b30: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00005b40: 2020 2020 2020 2020 2020 2020 2020 6169                ai",
            "-00005b50: 726d 6173 735f 6162 736f 6c75 7465 2c20  rmass_absolute, ",
            "-00005b60: 616f 692c 0a20 2020 2020 2020 2020 2020  aoi,.           ",
            "-00005b70: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00005b80: 2020 2020 2020 2072 6566 6572 656e 6365         reference",
            "-00005b90: 5f69 7272 6164 6961 6e63 653d 3130 3030  _irradiance=1000",
            "-00005ba0: 293a 0a20 2020 2020 2020 2022 2222 0a20  ):.        \"\"\". ",
            "-00005bb0: 2020 2020 2020 2055 7365 2074 6865 203a         Use the :",
            "-00005bc0: 7079 3a66 756e 633a 6073 6170 6d5f 6566  py:func:`sapm_ef",
            "-00005bd0: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "-00005be0: 6365 6020 6675 6e63 7469 6f6e 2c20 7468  ce` function, th",
            "-00005bf0: 6520 696e 7075 740a 2020 2020 2020 2020  e input.        ",
            "-00005c00: 7061 7261 6d65 7465 7273 2c20 616e 6420  parameters, and ",
            "-00005c10: 6060 7365 6c66 2e6d 6f64 756c 655f 7061  ``self.module_pa",
            "-00005c20: 7261 6d65 7465 7273 6060 2074 6f20 6361  rameters`` to ca",
            "-00005c30: 6c63 756c 6174 650a 2020 2020 2020 2020  lculate.        ",
            "-00005c40: 6566 6665 6374 6976 6520 6972 7261 6469  effective irradi",
            "-00005c50: 616e 6365 2e0a 0a20 2020 2020 2020 2050  ance...        P",
            "-00005c60: 6172 616d 6574 6572 730a 2020 2020 2020  arameters.      ",
            "-00005c70: 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020    ----------.   ",
            "-00005c80: 2020 2020 2070 6f61 5f64 6972 6563 7420       poa_direct ",
            "-00005c90: 3a20 6e75 6d65 7269 6320 6f72 2074 7570  : numeric or tup",
            "-00005ca0: 6c65 206f 6620 6e75 6d65 7269 630a 2020  le of numeric.  ",
            "-00005cb0: 2020 2020 2020 2020 2020 5468 6520 6469            The di",
            "-00005cc0: 7265 6374 2069 7272 6164 6961 6e63 6520  rect irradiance ",
            "-00005cd0: 696e 6369 6465 6e74 2075 706f 6e20 7468  incident upon th",
            "-00005ce0: 6520 6d6f 6475 6c65 2e20 205b 572f 6d32  e module.  [W/m2",
            "-00005cf0: 5d0a 0a20 2020 2020 2020 2070 6f61 5f64  ]..        poa_d",
            "-00005d00: 6966 6675 7365 203a 206e 756d 6572 6963  iffuse : numeric",
            "-00005d10: 206f 7220 7475 706c 6520 6f66 206e 756d   or tuple of num",
            "-00005d20: 6572 6963 0a20 2020 2020 2020 2020 2020  eric.           ",
            "-00005d30: 2054 6865 2064 6966 6675 7365 2069 7272   The diffuse irr",
            "-00005d40: 6164 6961 6e63 6520 696e 6369 6465 6e74  adiance incident",
            "-00005d50: 206f 6e20 6d6f 6475 6c65 2e20 205b 572f   on module.  [W/",
            "-00005d60: 6d32 5d0a 0a20 2020 2020 2020 2061 6972  m2]..        air",
            "-00005d70: 6d61 7373 5f61 6273 6f6c 7574 6520 3a20  mass_absolute : ",
            "-00005d80: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "-00005d90: 2020 2020 4162 736f 6c75 7465 2061 6972      Absolute air",
            "-00005da0: 6d61 7373 2e20 5b75 6e69 746c 6573 735d  mass. [unitless]",
            "-00005db0: 0a0a 2020 2020 2020 2020 616f 6920 3a20  ..        aoi : ",
            "-00005dc0: 6e75 6d65 7269 6320 6f72 2074 7570 6c65  numeric or tuple",
            "-00005dd0: 206f 6620 6e75 6d65 7269 630a 2020 2020   of numeric.    ",
            "-00005de0: 2020 2020 2020 2020 416e 676c 6520 6f66          Angle of",
            "-00005df0: 2069 6e63 6964 656e 6365 2e20 5b64 6567   incidence. [deg",
            "-00005e00: 7265 6573 5d0a 0a20 2020 2020 2020 2052  rees]..        R",
            "-00005e10: 6574 7572 6e73 0a20 2020 2020 2020 202d  eturns.        -",
            "-00005e20: 2d2d 2d2d 2d2d 0a20 2020 2020 2020 2065  ------.        e",
            "-00005e30: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "-00005e40: 6e63 6520 3a20 6e75 6d65 7269 6320 6f72  nce : numeric or",
            "-00005e50: 2074 7570 6c65 206f 6620 6e75 6d65 7269   tuple of numeri",
            "-00005e60: 630a 2020 2020 2020 2020 2020 2020 5468  c.            Th",
            "-00005e70: 6520 5341 504d 2065 6666 6563 7469 7665  e SAPM effective",
            "-00005e80: 2069 7272 6164 6961 6e63 652e 205b 572f   irradiance. [W/",
            "-00005e90: 6d32 5d0a 2020 2020 2020 2020 2222 220a  m2].        \"\"\".",
            "-00005ea0: 2020 2020 2020 2020 706f 615f 6469 7265          poa_dire",
            "-00005eb0: 6374 203d 2073 656c 662e 5f76 616c 6964  ct = self._valid",
            "-00005ec0: 6174 655f 7065 725f 6172 7261 7928 706f  ate_per_array(po",
            "-00005ed0: 615f 6469 7265 6374 290a 2020 2020 2020  a_direct).      ",
            "-00005ee0: 2020 706f 615f 6469 6666 7573 6520 3d20    poa_diffuse = ",
            "-00005ef0: 7365 6c66 2e5f 7661 6c69 6461 7465 5f70  self._validate_p",
            "-00005f00: 6572 5f61 7272 6179 2870 6f61 5f64 6966  er_array(poa_dif",
            "-00005f10: 6675 7365 290a 2020 2020 2020 2020 616f  fuse).        ao",
            "-00005f20: 6920 3d20 7365 6c66 2e5f 7661 6c69 6461  i = self._valida",
            "-00005f30: 7465 5f70 6572 5f61 7272 6179 2861 6f69  te_per_array(aoi",
            "-00005f40: 290a 2020 2020 2020 2020 7265 7475 726e  ).        return",
            "-00005f50: 2074 7570 6c65 280a 2020 2020 2020 2020   tuple(.        ",
            "-00005f60: 2020 2020 7361 706d 5f65 6666 6563 7469      sapm_effecti",
            "-00005f70: 7665 5f69 7272 6164 6961 6e63 6528 0a20  ve_irradiance(. ",
            "-00005f80: 2020 2020 2020 2020 2020 2020 2020 2070                 p",
            "-00005f90: 6f61 5f64 6972 6563 742c 2070 6f61 5f64  oa_direct, poa_d",
            "-00005fa0: 6966 6675 7365 2c20 6169 726d 6173 735f  iffuse, airmass_",
            "-00005fb0: 6162 736f 6c75 7465 2c20 616f 692c 0a20  absolute, aoi,. ",
            "-00005fc0: 2020 2020 2020 2020 2020 2020 2020 2061                 a",
            "-00005fd0: 7272 6179 2e6d 6f64 756c 655f 7061 7261  rray.module_para",
            "-00005fe0: 6d65 7465 7273 290a 2020 2020 2020 2020  meters).        ",
            "-00005ff0: 2020 2020 666f 7220 6172 7261 792c 2070      for array, p",
            "-00006000: 6f61 5f64 6972 6563 742c 2070 6f61 5f64  oa_direct, poa_d",
            "-00006010: 6966 6675 7365 2c20 616f 690a 2020 2020  iffuse, aoi.    ",
            "-00006020: 2020 2020 2020 2020 696e 207a 6970 2873          in zip(s",
            "-00006030: 656c 662e 6172 7261 7973 2c20 706f 615f  elf.arrays, poa_",
            "-00006040: 6469 7265 6374 2c20 706f 615f 6469 6666  direct, poa_diff",
            "-00006050: 7573 652c 2061 6f69 290a 2020 2020 2020  use, aoi).      ",
            "-00006060: 2020 290a 0a20 2020 2040 5f75 6e77 7261    )..    @_unwra",
            "-00006070: 705f 7369 6e67 6c65 5f76 616c 7565 0a20  p_single_value. ",
            "-00006080: 2020 2064 6566 2066 6972 7374 5f73 6f6c     def first_sol",
            "-00006090: 6172 5f73 7065 6374 7261 6c5f 6c6f 7373  ar_spectral_loss",
            "-000060a0: 2873 656c 662c 2070 772c 2061 6972 6d61  (self, pw, airma",
            "-000060b0: 7373 5f61 6273 6f6c 7574 6529 3a0a 2020  ss_absolute):.  ",
            "-000060c0: 2020 2020 2020 2222 220a 2020 2020 2020        \"\"\".      ",
            "-000060d0: 2020 5573 6520 3a70 793a 6675 6e63 3a60    Use :py:func:`",
            "-000060e0: 7076 6c69 622e 7370 6563 7472 756d 2e73  pvlib.spectrum.s",
            "-000060f0: 7065 6374 7261 6c5f 6661 6374 6f72 5f66  pectral_factor_f",
            "-00006100: 6972 7374 736f 6c61 7260 2074 6f0a 2020  irstsolar` to.  ",
            "-00006110: 2020 2020 2020 6361 6c63 756c 6174 6520        calculate ",
            "-00006120: 7468 6520 7370 6563 7472 616c 206c 6f73  the spectral los",
            "-00006130: 7320 6d6f 6469 6669 6572 2e20 5468 6520  s modifier. The ",
            "-00006140: 6d6f 6465 6c20 636f 6566 6669 6369 656e  model coefficien",
            "-00006150: 7473 2061 7265 0a20 2020 2020 2020 2073  ts are.        s",
            "-00006160: 7065 6369 6669 6320 746f 2074 6865 206d  pecific to the m",
            "-00006170: 6f64 756c 6527 7320 6365 6c6c 2074 7970  odule's cell typ",
            "-00006180: 652c 2061 6e64 2061 7265 2064 6574 6572  e, and are deter",
            "-00006190: 6d69 6e65 6420 6279 2073 6561 7263 6869  mined by searchi",
            "-000061a0: 6e67 0a20 2020 2020 2020 2066 6f72 206f  ng.        for o",
            "-000061b0: 6e65 206f 6620 7468 6520 666f 6c6c 6f77  ne of the follow",
            "-000061c0: 696e 6720 6b65 7973 2069 6e20 7365 6c66  ing keys in self",
            "-000061d0: 2e6d 6f64 756c 655f 7061 7261 6d65 7465  .module_paramete",
            "-000061e0: 7273 2028 696e 206f 7264 6572 293a 0a0a  rs (in order):..",
            "-000061f0: 2020 2020 2020 2020 2d20 2766 6972 7374          - 'first",
            "-00006200: 5f73 6f6c 6172 5f73 7065 6374 7261 6c5f  _solar_spectral_",
            "-00006210: 636f 6566 6669 6369 656e 7473 2720 2875  coefficients' (u",
            "-00006220: 7365 722d 7375 7070 6c69 6564 2063 6f65  ser-supplied coe",
            "-00006230: 6666 6963 6965 6e74 7329 0a20 2020 2020  fficients).     ",
            "-00006240: 2020 202d 2027 5465 6368 6e6f 6c6f 6779     - 'Technology",
            "-00006250: 2720 2d20 6120 7374 7269 6e67 2064 6573  ' - a string des",
            "-00006260: 6372 6962 696e 6720 7468 6520 6365 6c6c  cribing the cell",
            "-00006270: 2074 7970 652c 2063 616e 2062 6520 7265   type, can be re",
            "-00006280: 6164 2066 726f 6d0a 2020 2020 2020 2020  ad from.        ",
            "-00006290: 2020 7468 6520 4345 4320 6d6f 6475 6c65    the CEC module",
            "-000062a0: 2070 6172 616d 6574 6572 2064 6174 6162   parameter datab",
            "-000062b0: 6173 650a 2020 2020 2020 2020 2d20 274d  ase.        - 'M",
            "-000062c0: 6174 6572 6961 6c27 202d 2061 2073 7472  aterial' - a str",
            "-000062d0: 696e 6720 6465 7363 7269 6269 6e67 2074  ing describing t",
            "-000062e0: 6865 2063 656c 6c20 7479 7065 2c20 6361  he cell type, ca",
            "-000062f0: 6e20 6265 2072 6561 6420 6672 6f6d 0a20  n be read from. ",
            "-00006300: 2020 2020 2020 2020 2074 6865 2053 616e           the San",
            "-00006310: 6469 6120 6d6f 6475 6c65 2064 6174 6162  dia module datab",
            "-00006320: 6173 652e 0a0a 2020 2020 2020 2020 5061  ase...        Pa",
            "-00006330: 7261 6d65 7465 7273 0a20 2020 2020 2020  rameters.       ",
            "-00006340: 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020   ----------.    ",
            "-00006350: 2020 2020 7077 203a 2061 7272 6179 2d6c      pw : array-l",
            "-00006360: 696b 650a 2020 2020 2020 2020 2020 2020  ike.            ",
            "-00006370: 6174 6d6f 7370 6865 7269 6320 7072 6563  atmospheric prec",
            "-00006380: 6970 6974 6162 6c65 2077 6174 6572 2028  ipitable water (",
            "-00006390: 636d 292e 0a0a 2020 2020 2020 2020 6169  cm)...        ai",
            "-000063a0: 726d 6173 735f 6162 736f 6c75 7465 203a  rmass_absolute :",
            "-000063b0: 2061 7272 6179 2d6c 696b 650a 2020 2020   array-like.    ",
            "-000063c0: 2020 2020 2020 2020 6162 736f 6c75 7465          absolute",
            "-000063d0: 2028 7072 6573 7375 7265 2063 6f72 7265   (pressure corre",
            "-000063e0: 6374 6564 2920 6169 726d 6173 732e 0a0a  cted) airmass...",
            "-000063f0: 2020 2020 2020 2020 5265 7475 726e 730a          Returns.",
            "-00006400: 2020 2020 2020 2020 2d2d 2d2d 2d2d 2d0a          -------.",
            "-00006410: 2020 2020 2020 2020 6d6f 6469 6669 6572          modifier",
            "-00006420: 3a20 6172 7261 792d 6c69 6b65 206f 7220  : array-like or ",
            "-00006430: 7475 706c 6520 6f66 2061 7272 6179 2d6c  tuple of array-l",
            "-00006440: 696b 650a 2020 2020 2020 2020 2020 2020  ike.            ",
            "-00006450: 7370 6563 7472 616c 206d 6973 6d61 7463  spectral mismatc",
            "-00006460: 6820 6661 6374 6f72 2028 756e 6974 6c65  h factor (unitle",
            "-00006470: 7373 2920 7768 6963 6820 6361 6e20 6265  ss) which can be",
            "-00006480: 206d 756c 7469 706c 6965 640a 2020 2020   multiplied.    ",
            "-00006490: 2020 2020 2020 2020 7769 7468 2062 726f          with bro",
            "-000064a0: 6164 6261 6e64 2069 7272 6164 6961 6e63  adband irradianc",
            "-000064b0: 6520 7265 6163 6869 6e67 2061 206d 6f64  e reaching a mod",
            "-000064c0: 756c 6527 7320 6365 6c6c 7320 746f 2065  ule's cells to e",
            "-000064d0: 7374 696d 6174 650a 2020 2020 2020 2020  stimate.        ",
            "-000064e0: 2020 2020 6566 6665 6374 6976 6520 6972      effective ir",
            "-000064f0: 7261 6469 616e 6365 2c20 692e 652e 2c20  radiance, i.e., ",
            "-00006500: 7468 6520 6972 7261 6469 616e 6365 2074  the irradiance t",
            "-00006510: 6861 7420 6973 2063 6f6e 7665 7274 6564  hat is converted",
            "-00006520: 2074 6f0a 2020 2020 2020 2020 2020 2020   to.            ",
            "-00006530: 656c 6563 7472 6963 616c 2063 7572 7265  electrical curre",
            "-00006540: 6e74 2e0a 2020 2020 2020 2020 2222 220a  nt..        \"\"\".",
            "-00006550: 2020 2020 2020 2020 7077 203d 2073 656c          pw = sel",
            "-00006560: 662e 5f76 616c 6964 6174 655f 7065 725f  f._validate_per_",
            "-00006570: 6172 7261 7928 7077 2c20 7379 7374 656d  array(pw, system",
            "-00006580: 5f77 6964 653d 5472 7565 290a 0a20 2020  _wide=True)..   ",
            "-00006590: 2020 2020 2064 6566 205f 7370 6563 7472       def _spectr",
            "-000065a0: 616c 5f63 6f72 7265 6374 696f 6e28 6172  al_correction(ar",
            "-000065b0: 7261 792c 2070 7729 3a0a 2020 2020 2020  ray, pw):.      ",
            "-000065c0: 2020 2020 2020 6966 2027 6669 7273 745f        if 'first_",
            "-000065d0: 736f 6c61 725f 7370 6563 7472 616c 5f63  solar_spectral_c",
            "-000065e0: 6f65 6666 6963 6965 6e74 7327 2069 6e20  oefficients' in ",
            "-000065f0: 5c0a 2020 2020 2020 2020 2020 2020 2020  \\.              ",
            "-00006600: 2020 2020 2020 6172 7261 792e 6d6f 6475        array.modu",
            "-00006610: 6c65 5f70 6172 616d 6574 6572 732e 6b65  le_parameters.ke",
            "-00006620: 7973 2829 3a0a 2020 2020 2020 2020 2020  ys():.          ",
            "-00006630: 2020 2020 2020 636f 6566 6669 6369 656e        coefficien",
            "-00006640: 7473 203d 205c 0a20 2020 2020 2020 2020  ts = \\.         ",
            "-00006650: 2020 2020 2020 2020 2020 2061 7272 6179             array",
            "-00006660: 2e6d 6f64 756c 655f 7061 7261 6d65 7465  .module_paramete",
            "-00006670: 7273 5b0a 2020 2020 2020 2020 2020 2020  rs[.            ",
            "-00006680: 2020 2020 2020 2020 2020 2020 2766 6972              'fir",
            "-00006690: 7374 5f73 6f6c 6172 5f73 7065 6374 7261  st_solar_spectra",
            "-000066a0: 6c5f 636f 6566 6669 6369 656e 7473 270a  l_coefficients'.",
            "-000066b0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000066c0: 2020 2020 5d0a 2020 2020 2020 2020 2020      ].          ",
            "-000066d0: 2020 2020 2020 6d6f 6475 6c65 5f74 7970        module_typ",
            "-000066e0: 6520 3d20 4e6f 6e65 0a20 2020 2020 2020  e = None.       ",
            "-000066f0: 2020 2020 2065 6c73 653a 0a20 2020 2020       else:.     ",
            "-00006700: 2020 2020 2020 2020 2020 206d 6f64 756c             modul",
            "-00006710: 655f 7479 7065 203d 2061 7272 6179 2e5f  e_type = array._",
            "-00006720: 696e 6665 725f 6365 6c6c 5f74 7970 6528  infer_cell_type(",
            "-00006730: 290a 2020 2020 2020 2020 2020 2020 2020  ).              ",
            "-00006740: 2020 636f 6566 6669 6369 656e 7473 203d    coefficients =",
            "-00006750: 204e 6f6e 650a 0a20 2020 2020 2020 2020   None..         ",
            "-00006760: 2020 2072 6574 7572 6e20 7370 6563 7472     return spectr",
            "-00006770: 756d 2e73 7065 6374 7261 6c5f 6661 6374  um.spectral_fact",
            "-00006780: 6f72 5f66 6972 7374 736f 6c61 7228 0a20  or_firstsolar(. ",
            "-00006790: 2020 2020 2020 2020 2020 2020 2020 2070                 p",
            "-000067a0: 772c 2061 6972 6d61 7373 5f61 6273 6f6c  w, airmass_absol",
            "-000067b0: 7574 652c 206d 6f64 756c 655f 7479 7065  ute, module_type",
            "-000067c0: 2c20 636f 6566 6669 6369 656e 7473 0a20  , coefficients. ",
            "-000067d0: 2020 2020 2020 2020 2020 2029 0a20 2020             ).   ",
            "-000067e0: 2020 2020 2072 6574 7572 6e20 7475 706c       return tupl",
            "-000067f0: 6528 0a20 2020 2020 2020 2020 2020 2069  e(.            i",
            "-00006800: 7465 7274 6f6f 6c73 2e73 7461 726d 6170  tertools.starmap",
            "-00006810: 285f 7370 6563 7472 616c 5f63 6f72 7265  (_spectral_corre",
            "-00006820: 6374 696f 6e2c 207a 6970 2873 656c 662e  ction, zip(self.",
            "-00006830: 6172 7261 7973 2c20 7077 2929 0a20 2020  arrays, pw)).   ",
            "-00006840: 2020 2020 2029 0a0a 2020 2020 6465 6620       )..    def ",
            "-00006850: 7369 6e67 6c65 6469 6f64 6528 7365 6c66  singlediode(self",
            "-00006860: 2c20 7068 6f74 6f63 7572 7265 6e74 2c20  , photocurrent, ",
            "-00006870: 7361 7475 7261 7469 6f6e 5f63 7572 7265  saturation_curre",
            "-00006880: 6e74 2c0a 2020 2020 2020 2020 2020 2020  nt,.            ",
            "-00006890: 2020 2020 2020 2020 7265 7369 7374 616e          resistan",
            "-000068a0: 6365 5f73 6572 6965 732c 2072 6573 6973  ce_series, resis",
            "-000068b0: 7461 6e63 655f 7368 756e 742c 206e 4e73  tance_shunt, nNs",
            "-000068c0: 5674 6829 3a0a 2020 2020 2020 2020 2222  Vth):.        \"\"",
            "-000068d0: 2257 7261 7070 6572 2061 726f 756e 6420  \"Wrapper around ",
            "-000068e0: 7468 6520 3a70 793a 6675 6e63 3a60 7076  the :py:func:`pv",
            "-000068f0: 6c69 622e 7076 7379 7374 656d 2e73 696e  lib.pvsystem.sin",
            "-00006900: 676c 6564 696f 6465 6020 6675 6e63 7469  glediode` functi",
            "-00006910: 6f6e 2e0a 0a20 2020 2020 2020 2053 6565  on...        See",
            "-00006920: 203a 7079 3a66 756e 633a 6070 7673 7973   :py:func:`pvsys",
            "-00006930: 7465 6d2e 7369 6e67 6c65 6469 6f64 6560  tem.singlediode`",
            "-00006940: 2066 6f72 2064 6574 6169 6c73 0a20 2020   for details.   ",
            "-00006950: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "-00006960: 2072 6574 7572 6e20 7369 6e67 6c65 6469   return singledi",
            "-00006970: 6f64 6528 7068 6f74 6f63 7572 7265 6e74  ode(photocurrent",
            "-00006980: 2c20 7361 7475 7261 7469 6f6e 5f63 7572  , saturation_cur",
            "-00006990: 7265 6e74 2c0a 2020 2020 2020 2020 2020  rent,.          ",
            "-000069a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000069b0: 2072 6573 6973 7461 6e63 655f 7365 7269   resistance_seri",
            "-000069c0: 6573 2c20 7265 7369 7374 616e 6365 5f73  es, resistance_s",
            "-000069d0: 6875 6e74 2c20 6e4e 7356 7468 290a 0a20  hunt, nNsVth).. ",
            "-000069e0: 2020 2064 6566 2069 5f66 726f 6d5f 7628     def i_from_v(",
            "-000069f0: 7365 6c66 2c20 766f 6c74 6167 652c 2070  self, voltage, p",
            "-00006a00: 686f 746f 6375 7272 656e 742c 2073 6174  hotocurrent, sat",
            "-00006a10: 7572 6174 696f 6e5f 6375 7272 656e 742c  uration_current,",
            "-00006a20: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00006a30: 2020 7265 7369 7374 616e 6365 5f73 6572    resistance_ser",
            "-00006a40: 6965 732c 2072 6573 6973 7461 6e63 655f  ies, resistance_",
            "-00006a50: 7368 756e 742c 206e 4e73 5674 6829 3a0a  shunt, nNsVth):.",
            "-00006a60: 2020 2020 2020 2020 2222 2257 7261 7070          \"\"\"Wrapp",
            "-00006a70: 6572 2061 726f 756e 6420 7468 6520 3a70  er around the :p",
            "-00006a80: 793a 6675 6e63 3a60 7076 6c69 622e 7076  y:func:`pvlib.pv",
            "-00006a90: 7379 7374 656d 2e69 5f66 726f 6d5f 7660  system.i_from_v`",
            "-00006aa0: 2066 756e 6374 696f 6e2e 0a0a 2020 2020   function...    ",
            "-00006ab0: 2020 2020 5365 6520 3a70 793a 6675 6e63      See :py:func",
            "-00006ac0: 3a60 7076 6c69 622e 7076 7379 7374 656d  :`pvlib.pvsystem",
            "-00006ad0: 2e69 5f66 726f 6d5f 7660 2066 6f72 2064  .i_from_v` for d",
            "-00006ae0: 6574 6169 6c73 2e0a 0a20 2020 2020 2020  etails...       ",
            "-00006af0: 202e 2e20 7665 7273 696f 6e63 6861 6e67   .. versionchang",
            "-00006b00: 6564 3a3a 2030 2e31 302e 300a 2020 2020  ed:: 0.10.0.    ",
            "-00006b10: 2020 2020 2020 2054 6865 2066 756e 6374         The funct",
            "-00006b20: 696f 6e27 7320 6172 6775 6d65 6e74 7320  ion's arguments ",
            "-00006b30: 6861 7665 2062 6565 6e20 7265 6f72 6465  have been reorde",
            "-00006b40: 7265 642e 0a20 2020 2020 2020 2022 2222  red..        \"\"\"",
            "-00006b50: 0a20 2020 2020 2020 2072 6574 7572 6e20  .        return ",
            "-00006b60: 695f 6672 6f6d 5f76 2876 6f6c 7461 6765  i_from_v(voltage",
            "-00006b70: 2c20 7068 6f74 6f63 7572 7265 6e74 2c20  , photocurrent, ",
            "-00006b80: 7361 7475 7261 7469 6f6e 5f63 7572 7265  saturation_curre",
            "-00006b90: 6e74 2c0a 2020 2020 2020 2020 2020 2020  nt,.            ",
            "-00006ba0: 2020 2020 2020 2020 2020 2020 7265 7369              resi",
            "-00006bb0: 7374 616e 6365 5f73 6572 6965 732c 2072  stance_series, r",
            "-00006bc0: 6573 6973 7461 6e63 655f 7368 756e 742c  esistance_shunt,",
            "-00006bd0: 206e 4e73 5674 6829 0a0a 2020 2020 6465   nNsVth)..    de",
            "-00006be0: 6620 6765 745f 6163 2873 656c 662c 206d  f get_ac(self, m",
            "-00006bf0: 6f64 656c 2c20 705f 6463 2c20 765f 6463  odel, p_dc, v_dc",
            "-00006c00: 3d4e 6f6e 6529 3a0a 2020 2020 2020 2020  =None):.        ",
            "-00006c10: 7222 2222 4361 6c63 756c 6174 6573 2041  r\"\"\"Calculates A",
            "-00006c20: 4320 706f 7765 7220 6672 6f6d 2070 5f64  C power from p_d",
            "-00006c30: 6320 7573 696e 6720 7468 6520 696e 7665  c using the inve",
            "-00006c40: 7274 6572 206d 6f64 656c 2069 6e64 6963  rter model indic",
            "-00006c50: 6174 6564 0a20 2020 2020 2020 2062 7920  ated.        by ",
            "-00006c60: 6d6f 6465 6c20 616e 6420 7365 6c66 2e69  model and self.i",
            "-00006c70: 6e76 6572 7465 725f 7061 7261 6d65 7465  nverter_paramete",
            "-00006c80: 7273 2e0a 0a20 2020 2020 2020 2050 6172  rs...        Par",
            "-00006c90: 616d 6574 6572 730a 2020 2020 2020 2020  ameters.        ",
            "-00006ca0: 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020 2020  ----------.     ",
            "-00006cb0: 2020 206d 6f64 656c 203a 2073 7472 0a20     model : str. ",
            "-00006cc0: 2020 2020 2020 2020 2020 204d 7573 7420             Must ",
            "-00006cd0: 6265 206f 6e65 206f 6620 2773 616e 6469  be one of 'sandi",
            "-00006ce0: 6127 2c20 2761 6472 272c 206f 7220 2770  a', 'adr', or 'p",
            "-00006cf0: 7677 6174 7473 272e 0a20 2020 2020 2020  vwatts'..       ",
            "-00006d00: 2070 5f64 6320 3a20 6e75 6d65 7269 632c   p_dc : numeric,",
            "-00006d10: 206f 7220 7475 706c 652c 206c 6973 7420   or tuple, list ",
            "-00006d20: 6f72 2061 7272 6179 206f 6620 6e75 6d65  or array of nume",
            "-00006d30: 7269 630a 2020 2020 2020 2020 2020 2020  ric.            ",
            "-00006d40: 4443 2070 6f77 6572 206f 6e20 6561 6368  DC power on each",
            "-00006d50: 204d 5050 5420 696e 7075 7420 6f66 2074   MPPT input of t",
            "-00006d60: 6865 2069 6e76 6572 7465 722e 2055 7365  he inverter. Use",
            "-00006d70: 2074 7570 6c65 2c20 6c69 7374 206f 720a   tuple, list or.",
            "-00006d80: 2020 2020 2020 2020 2020 2020 6172 7261              arra",
            "-00006d90: 7920 666f 7220 696e 7665 7274 6572 7320  y for inverters ",
            "-00006da0: 7769 7468 206d 756c 7469 706c 6520 4d50  with multiple MP",
            "-00006db0: 5054 2069 6e70 7574 732e 2049 6620 7479  PT inputs. If ty",
            "-00006dc0: 7065 2069 7320 6172 7261 792c 0a20 2020  pe is array,.   ",
            "-00006dd0: 2020 2020 2020 2020 2070 5f64 6320 6d75           p_dc mu",
            "-00006de0: 7374 2062 6520 3264 2077 6974 6820 6178  st be 2d with ax",
            "-00006df0: 6973 2030 2062 6569 6e67 2074 6865 204d  is 0 being the M",
            "-00006e00: 5050 5420 696e 7075 7473 2e20 5b57 5d0a  PPT inputs. [W].",
            "-00006e10: 2020 2020 2020 2020 765f 6463 203a 206e          v_dc : n",
            "-00006e20: 756d 6572 6963 2c20 6f72 2074 7570 6c65  umeric, or tuple",
            "-00006e30: 2c20 6c69 7374 206f 7220 6172 7261 7920  , list or array ",
            "-00006e40: 6f66 206e 756d 6572 6963 0a20 2020 2020  of numeric.     ",
            "-00006e50: 2020 2020 2020 2044 4320 766f 6c74 6167         DC voltag",
            "-00006e60: 6520 6f6e 2065 6163 6820 4d50 5054 2069  e on each MPPT i",
            "-00006e70: 6e70 7574 206f 6620 7468 6520 696e 7665  nput of the inve",
            "-00006e80: 7274 6572 2e20 5265 7175 6972 6564 2077  rter. Required w",
            "-00006e90: 6865 6e0a 2020 2020 2020 2020 2020 2020  hen.            ",
            "-00006ea0: 6d6f 6465 6c3d 2773 616e 6469 6127 206f  model='sandia' o",
            "-00006eb0: 7220 6d6f 6465 6c3d 2761 6472 272e 2055  r model='adr'. U",
            "-00006ec0: 7365 2074 7570 6c65 2c20 6c69 7374 206f  se tuple, list o",
            "-00006ed0: 720a 2020 2020 2020 2020 2020 2020 6172  r.            ar",
            "-00006ee0: 7261 7920 666f 7220 696e 7665 7274 6572  ray for inverter",
            "-00006ef0: 7320 7769 7468 206d 756c 7469 706c 6520  s with multiple ",
            "-00006f00: 4d50 5054 2069 6e70 7574 732e 2049 6620  MPPT inputs. If ",
            "-00006f10: 7479 7065 2069 7320 6172 7261 792c 0a20  type is array,. ",
            "-00006f20: 2020 2020 2020 2020 2020 2076 5f64 6320             v_dc ",
            "-00006f30: 6d75 7374 2062 6520 3264 2077 6974 6820  must be 2d with ",
            "-00006f40: 6178 6973 2030 2062 6569 6e67 2074 6865  axis 0 being the",
            "-00006f50: 204d 5050 5420 696e 7075 7473 2e20 5b56   MPPT inputs. [V",
            "-00006f60: 5d0a 0a20 2020 2020 2020 2052 6574 7572  ]..        Retur",
            "-00006f70: 6e73 0a20 2020 2020 2020 202d 2d2d 2d2d  ns.        -----",
            "-00006f80: 2d2d 0a20 2020 2020 2020 2070 6f77 6572  --.        power",
            "-00006f90: 5f61 6320 3a20 6e75 6d65 7269 630a 2020  _ac : numeric.  ",
            "-00006fa0: 2020 2020 2020 2020 2020 4143 2070 6f77            AC pow",
            "-00006fb0: 6572 206f 7574 7075 7420 666f 7220 7468  er output for th",
            "-00006fc0: 6520 696e 7665 7274 6572 2e20 5b57 5d0a  e inverter. [W].",
            "-00006fd0: 0a20 2020 2020 2020 2052 6169 7365 730a  .        Raises.",
            "-00006fe0: 2020 2020 2020 2020 2d2d 2d2d 2d2d 0a20          ------. ",
            "-00006ff0: 2020 2020 2020 2056 616c 7565 4572 726f         ValueErro",
            "-00007000: 720a 2020 2020 2020 2020 2020 2020 4966  r.            If",
            "-00007010: 206d 6f64 656c 2069 7320 6e6f 7420 6f6e   model is not on",
            "-00007020: 6520 6f66 2027 7361 6e64 6961 272c 2027  e of 'sandia', '",
            "-00007030: 6164 7227 206f 7220 2770 7677 6174 7473  adr' or 'pvwatts",
            "-00007040: 272e 0a20 2020 2020 2020 2056 616c 7565  '..        Value",
            "-00007050: 4572 726f 720a 2020 2020 2020 2020 2020  Error.          ",
            "-00007060: 2020 4966 206d 6f64 656c 3d27 6164 7227    If model='adr'",
            "-00007070: 2061 6e64 2074 6865 2050 5653 7973 7465   and the PVSyste",
            "-00007080: 6d20 6861 7320 6d6f 7265 2074 6861 6e20  m has more than ",
            "-00007090: 6f6e 6520 6172 7261 792e 0a0a 2020 2020  one array...    ",
            "-000070a0: 2020 2020 5365 6520 616c 736f 0a20 2020      See also.   ",
            "-000070b0: 2020 2020 202d 2d2d 2d2d 2d2d 2d0a 2020       --------.  ",
            "-000070c0: 2020 2020 2020 7076 6c69 622e 696e 7665        pvlib.inve",
            "-000070d0: 7274 6572 2e73 616e 6469 610a 2020 2020  rter.sandia.    ",
            "-000070e0: 2020 2020 7076 6c69 622e 696e 7665 7274      pvlib.invert",
            "-000070f0: 6572 2e73 616e 6469 615f 6d75 6c74 690a  er.sandia_multi.",
            "-00007100: 2020 2020 2020 2020 7076 6c69 622e 696e          pvlib.in",
            "-00007110: 7665 7274 6572 2e61 6472 0a20 2020 2020  verter.adr.     ",
            "-00007120: 2020 2070 766c 6962 2e69 6e76 6572 7465     pvlib.inverte",
            "-00007130: 722e 7076 7761 7474 730a 2020 2020 2020  r.pvwatts.      ",
            "-00007140: 2020 7076 6c69 622e 696e 7665 7274 6572    pvlib.inverter",
            "-00007150: 2e70 7677 6174 7473 5f6d 756c 7469 0a20  .pvwatts_multi. ",
            "-00007160: 2020 2020 2020 2022 2222 0a20 2020 2020         \"\"\".     ",
            "-00007170: 2020 206d 6f64 656c 203d 206d 6f64 656c     model = model",
            "-00007180: 2e6c 6f77 6572 2829 0a20 2020 2020 2020  .lower().       ",
            "-00007190: 206d 756c 7469 706c 655f 6172 7261 7973   multiple_arrays",
            "-000071a0: 203d 2073 656c 662e 6e75 6d5f 6172 7261   = self.num_arra",
            "-000071b0: 7973 203e 2031 0a20 2020 2020 2020 2069  ys > 1.        i",
            "-000071c0: 6620 6d6f 6465 6c20 3d3d 2027 7361 6e64  f model == 'sand",
            "-000071d0: 6961 273a 0a20 2020 2020 2020 2020 2020  ia':.           ",
            "-000071e0: 2070 5f64 6320 3d20 7365 6c66 2e5f 7661   p_dc = self._va",
            "-000071f0: 6c69 6461 7465 5f70 6572 5f61 7272 6179  lidate_per_array",
            "-00007200: 2870 5f64 6329 0a20 2020 2020 2020 2020  (p_dc).         ",
            "-00007210: 2020 2076 5f64 6320 3d20 7365 6c66 2e5f     v_dc = self._",
            "-00007220: 7661 6c69 6461 7465 5f70 6572 5f61 7272  validate_per_arr",
            "-00007230: 6179 2876 5f64 6329 0a20 2020 2020 2020  ay(v_dc).       ",
            "-00007240: 2020 2020 2069 6620 6d75 6c74 6970 6c65       if multiple",
            "-00007250: 5f61 7272 6179 733a 0a20 2020 2020 2020  _arrays:.       ",
            "-00007260: 2020 2020 2020 2020 2072 6574 7572 6e20           return ",
            "-00007270: 696e 7665 7274 6572 2e73 616e 6469 615f  inverter.sandia_",
            "-00007280: 6d75 6c74 6928 0a20 2020 2020 2020 2020  multi(.         ",
            "-00007290: 2020 2020 2020 2020 2020 2076 5f64 632c             v_dc,",
            "-000072a0: 2070 5f64 632c 2073 656c 662e 696e 7665   p_dc, self.inve",
            "-000072b0: 7274 6572 5f70 6172 616d 6574 6572 7329  rter_parameters)",
            "-000072c0: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret",
            "-000072d0: 7572 6e20 696e 7665 7274 6572 2e73 616e  urn inverter.san",
            "-000072e0: 6469 6128 765f 6463 5b30 5d2c 2070 5f64  dia(v_dc[0], p_d",
            "-000072f0: 635b 305d 2c20 7365 6c66 2e69 6e76 6572  c[0], self.inver",
            "-00007300: 7465 725f 7061 7261 6d65 7465 7273 290a  ter_parameters).",
            "-00007310: 2020 2020 2020 2020 656c 6966 206d 6f64          elif mod",
            "-00007320: 656c 203d 3d20 2770 7677 6174 7473 273a  el == 'pvwatts':",
            "-00007330: 0a20 2020 2020 2020 2020 2020 206b 7761  .            kwa",
            "-00007340: 7267 7320 3d20 5f62 7569 6c64 5f6b 7761  rgs = _build_kwa",
            "-00007350: 7267 7328 5b27 6574 615f 696e 765f 6e6f  rgs(['eta_inv_no",
            "-00007360: 6d27 2c20 2765 7461 5f69 6e76 5f72 6566  m', 'eta_inv_ref",
            "-00007370: 275d 2c0a 2020 2020 2020 2020 2020 2020  '],.            ",
            "-00007380: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00007390: 2020 2020 2020 2073 656c 662e 696e 7665         self.inve",
            "-000073a0: 7274 6572 5f70 6172 616d 6574 6572 7329  rter_parameters)",
            "-000073b0: 0a20 2020 2020 2020 2020 2020 2070 5f64  .            p_d",
            "-000073c0: 6320 3d20 7365 6c66 2e5f 7661 6c69 6461  c = self._valida",
            "-000073d0: 7465 5f70 6572 5f61 7272 6179 2870 5f64  te_per_array(p_d",
            "-000073e0: 6329 0a20 2020 2020 2020 2020 2020 2069  c).            i",
            "-000073f0: 6620 6d75 6c74 6970 6c65 5f61 7272 6179  f multiple_array",
            "-00007400: 733a 0a20 2020 2020 2020 2020 2020 2020  s:.             ",
            "-00007410: 2020 2072 6574 7572 6e20 696e 7665 7274     return invert",
            "-00007420: 6572 2e70 7677 6174 7473 5f6d 756c 7469  er.pvwatts_multi",
            "-00007430: 280a 2020 2020 2020 2020 2020 2020 2020  (.              ",
            "-00007440: 2020 2020 2020 705f 6463 2c20 7365 6c66        p_dc, self",
            "-00007450: 2e69 6e76 6572 7465 725f 7061 7261 6d65  .inverter_parame",
            "-00007460: 7465 7273 5b27 7064 6330 275d 2c20 2a2a  ters['pdc0'], **",
            "-00007470: 6b77 6172 6773 290a 2020 2020 2020 2020  kwargs).        ",
            "-00007480: 2020 2020 7265 7475 726e 2069 6e76 6572      return inver",
            "-00007490: 7465 722e 7076 7761 7474 7328 0a20 2020  ter.pvwatts(.   ",
            "-000074a0: 2020 2020 2020 2020 2020 2020 2070 5f64               p_d",
            "-000074b0: 635b 305d 2c20 7365 6c66 2e69 6e76 6572  c[0], self.inver",
            "-000074c0: 7465 725f 7061 7261 6d65 7465 7273 5b27  ter_parameters['",
            "-000074d0: 7064 6330 275d 2c20 2a2a 6b77 6172 6773  pdc0'], **kwargs",
            "-000074e0: 290a 2020 2020 2020 2020 656c 6966 206d  ).        elif m",
            "-000074f0: 6f64 656c 203d 3d20 2761 6472 273a 0a20  odel == 'adr':. ",
            "-00007500: 2020 2020 2020 2020 2020 2069 6620 6d75             if mu",
            "-00007510: 6c74 6970 6c65 5f61 7272 6179 733a 0a20  ltiple_arrays:. ",
            "-00007520: 2020 2020 2020 2020 2020 2020 2020 2072                 r",
            "-00007530: 6169 7365 2056 616c 7565 4572 726f 7228  aise ValueError(",
            "-00007540: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00007550: 2020 2020 2027 5468 6520 6164 7220 696e       'The adr in",
            "-00007560: 7665 7274 6572 2066 756e 6374 696f 6e20  verter function ",
            "-00007570: 6361 6e6e 6f74 2062 6520 7573 6564 2066  cannot be used f",
            "-00007580: 6f72 2061 6e20 696e 7665 7274 6572 272c  or an inverter',",
            "-00007590: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-000075a0: 2020 2020 2027 2077 6974 6820 6d75 6c74       ' with mult",
            "-000075b0: 6970 6c65 204d 5050 5420 696e 7075 7473  iple MPPT inputs",
            "-000075c0: 2729 0a20 2020 2020 2020 2020 2020 2023  ').            #",
            "-000075d0: 2057 6869 6c65 2074 6869 7320 6973 206f   While this is o",
            "-000075e0: 6e6c 7920 7573 6564 2066 6f72 2073 696e  nly used for sin",
            "-000075f0: 676c 652d 6172 7261 7920 7379 7374 656d  gle-array system",
            "-00007600: 732c 2063 616c 6c69 6e67 0a20 2020 2020  s, calling.     ",
            "-00007610: 2020 2020 2020 2023 205f 7661 6c69 6461         # _valida",
            "-00007620: 7465 5f70 6572 5f61 7272 7920 6c65 7473  te_per_arry lets",
            "-00007630: 2075 7320 7061 7373 2069 6e20 7369 6e67   us pass in sing",
            "-00007640: 6c65 746f 6e20 7475 706c 6573 2e0a 2020  leton tuples..  ",
            "-00007650: 2020 2020 2020 2020 2020 705f 6463 203d            p_dc =",
            "-00007660: 2073 656c 662e 5f76 616c 6964 6174 655f   self._validate_",
            "-00007670: 7065 725f 6172 7261 7928 705f 6463 290a  per_array(p_dc).",
            "-00007680: 2020 2020 2020 2020 2020 2020 765f 6463              v_dc",
            "-00007690: 203d 2073 656c 662e 5f76 616c 6964 6174   = self._validat",
            "-000076a0: 655f 7065 725f 6172 7261 7928 765f 6463  e_per_array(v_dc",
            "-000076b0: 290a 2020 2020 2020 2020 2020 2020 7265  ).            re",
            "-000076c0: 7475 726e 2069 6e76 6572 7465 722e 6164  turn inverter.ad",
            "-000076d0: 7228 765f 6463 5b30 5d2c 2070 5f64 635b  r(v_dc[0], p_dc[",
            "-000076e0: 305d 2c20 7365 6c66 2e69 6e76 6572 7465  0], self.inverte",
            "-000076f0: 725f 7061 7261 6d65 7465 7273 290a 2020  r_parameters).  ",
            "-00007700: 2020 2020 2020 656c 7365 3a0a 2020 2020        else:.    ",
            "-00007710: 2020 2020 2020 2020 7261 6973 6520 5661          raise Va",
            "-00007720: 6c75 6545 7272 6f72 280a 2020 2020 2020  lueError(.      ",
            "-00007730: 2020 2020 2020 2020 2020 6d6f 6465 6c20            model ",
            "-00007740: 2b20 2720 6973 206e 6f74 2061 2076 616c  + ' is not a val",
            "-00007750: 6964 2041 4320 706f 7765 7220 6d6f 6465  id AC power mode",
            "-00007760: 6c2e 272c 0a20 2020 2020 2020 2020 2020  l.',.           ",
            "-00007770: 2020 2020 2027 206d 6f64 656c 206d 7573       ' model mus",
            "-00007780: 7420 6265 206f 6e65 206f 6620 2273 616e  t be one of \"san",
            "-00007790: 6469 6122 2c20 2261 6472 2220 6f72 2022  dia\", \"adr\" or \"",
            "-000077a0: 7076 7761 7474 7322 2729 0a0a 2020 2020  pvwatts\"')..    ",
            "-000077b0: 405f 756e 7772 6170 5f73 696e 676c 655f  @_unwrap_single_",
            "-000077c0: 7661 6c75 650a 2020 2020 6465 6620 7363  value.    def sc",
            "-000077d0: 616c 655f 766f 6c74 6167 655f 6375 7272  ale_voltage_curr",
            "-000077e0: 656e 745f 706f 7765 7228 7365 6c66 2c20  ent_power(self, ",
            "-000077f0: 6461 7461 293a 0a20 2020 2020 2020 2022  data):.        \"",
            "-00007800: 2222 0a20 2020 2020 2020 2053 6361 6c65  \"\".        Scale",
            "-00007810: 7320 7468 6520 766f 6c74 6167 652c 2063  s the voltage, c",
            "-00007820: 7572 7265 6e74 2c20 616e 6420 706f 7765  urrent, and powe",
            "-00007830: 7220 6f66 2074 6865 2060 6461 7461 6020  r of the `data` ",
            "-00007840: 4461 7461 4672 616d 650a 2020 2020 2020  DataFrame.      ",
            "-00007850: 2020 6279 2060 7365 6c66 2e6d 6f64 756c    by `self.modul",
            "-00007860: 6573 5f70 6572 5f73 7472 696e 6760 2061  es_per_string` a",
            "-00007870: 6e64 2060 7365 6c66 2e73 7472 696e 6773  nd `self.strings",
            "-00007880: 5f70 6572 5f69 6e76 6572 7465 7260 2e0a  _per_inverter`..",
            "-00007890: 0a20 2020 2020 2020 2050 6172 616d 6574  .        Paramet",
            "-000078a0: 6572 730a 2020 2020 2020 2020 2d2d 2d2d  ers.        ----",
            "-000078b0: 2d2d 2d2d 2d2d 0a20 2020 2020 2020 2064  ------.        d",
            "-000078c0: 6174 613a 2044 6174 6146 7261 6d65 206f  ata: DataFrame o",
            "-000078d0: 7220 7475 706c 6520 6f66 2044 6174 6146  r tuple of DataF",
            "-000078e0: 7261 6d65 0a20 2020 2020 2020 2020 2020  rame.           ",
            "-000078f0: 204d 6179 2063 6f6e 7461 696e 2063 6f6c   May contain col",
            "-00007900: 756d 6e73 2060 2776 5f6d 7027 2c20 2776  umns `'v_mp', 'v",
            "-00007910: 5f6f 6327 2c20 2769 5f6d 7027 202c 2769  _oc', 'i_mp' ,'i",
            "-00007920: 5f78 272c 2027 695f 7878 272c 0a20 2020  _x', 'i_xx',.   ",
            "-00007930: 2020 2020 2020 2020 2027 695f 7363 272c           'i_sc',",
            "-00007940: 2027 705f 6d70 2760 2e0a 0a20 2020 2020   'p_mp'`...     ",
            "-00007950: 2020 2052 6574 7572 6e73 0a20 2020 2020     Returns.     ",
            "-00007960: 2020 202d 2d2d 2d2d 2d2d 0a20 2020 2020     -------.     ",
            "-00007970: 2020 2073 6361 6c65 645f 6461 7461 3a20     scaled_data: ",
            "-00007980: 4461 7461 4672 616d 6520 6f72 2074 7570  DataFrame or tup",
            "-00007990: 6c65 206f 6620 4461 7461 4672 616d 650a  le of DataFrame.",
            "-000079a0: 2020 2020 2020 2020 2020 2020 4120 7363              A sc",
            "-000079b0: 616c 6564 2063 6f70 7920 6f66 2074 6865  aled copy of the",
            "-000079c0: 2069 6e70 7574 2064 6174 612e 0a20 2020   input data..   ",
            "-000079d0: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "-000079e0: 2064 6174 6120 3d20 7365 6c66 2e5f 7661   data = self._va",
            "-000079f0: 6c69 6461 7465 5f70 6572 5f61 7272 6179  lidate_per_array",
            "-00007a00: 2864 6174 6129 0a20 2020 2020 2020 2072  (data).        r",
            "-00007a10: 6574 7572 6e20 7475 706c 6528 0a20 2020  eturn tuple(.   ",
            "-00007a20: 2020 2020 2020 2020 2073 6361 6c65 5f76           scale_v",
            "-00007a30: 6f6c 7461 6765 5f63 7572 7265 6e74 5f70  oltage_current_p",
            "-00007a40: 6f77 6572 2864 6174 612c 0a20 2020 2020  ower(data,.     ",
            "-00007a50: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00007a60: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00007a70: 2020 2076 6f6c 7461 6765 3d61 7272 6179     voltage=array",
            "-00007a80: 2e6d 6f64 756c 6573 5f70 6572 5f73 7472  .modules_per_str",
            "-00007a90: 696e 672c 0a20 2020 2020 2020 2020 2020  ing,.           ",
            "-00007aa0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00007ab0: 2020 2020 2020 2020 2020 2020 2063 7572               cur",
            "-00007ac0: 7265 6e74 3d61 7272 6179 2e73 7472 696e  rent=array.strin",
            "-00007ad0: 6773 290a 2020 2020 2020 2020 2020 2020  gs).            ",
            "-00007ae0: 666f 7220 6172 7261 792c 2064 6174 6120  for array, data ",
            "-00007af0: 696e 207a 6970 2873 656c 662e 6172 7261  in zip(self.arra",
            "-00007b00: 7973 2c20 6461 7461 290a 2020 2020 2020  ys, data).      ",
            "-00007b10: 2020 290a 0a20 2020 2040 5f75 6e77 7261    )..    @_unwra",
            "-00007b20: 705f 7369 6e67 6c65 5f76 616c 7565 0a20  p_single_value. ",
            "-00007b30: 2020 2064 6566 2070 7677 6174 7473 5f64     def pvwatts_d",
            "-00007b40: 6328 7365 6c66 2c20 675f 706f 615f 6566  c(self, g_poa_ef",
            "-00007b50: 6665 6374 6976 652c 2074 656d 705f 6365  fective, temp_ce",
            "-00007b60: 6c6c 293a 0a20 2020 2020 2020 2022 2222  ll):.        \"\"\"",
            "-00007b70: 0a20 2020 2020 2020 2043 616c 6375 6c61  .        Calcula",
            "-00007b80: 7465 7320 4443 2070 6f77 6572 2061 6363  tes DC power acc",
            "-00007b90: 6f72 6469 6e67 2074 6f20 7468 6520 5056  ording to the PV",
            "-00007ba0: 5761 7474 7320 6d6f 6465 6c20 7573 696e  Watts model usin",
            "-00007bb0: 670a 2020 2020 2020 2020 3a70 793a 6675  g.        :py:fu",
            "-00007bc0: 6e63 3a60 7076 6c69 622e 7076 7379 7374  nc:`pvlib.pvsyst",
            "-00007bd0: 656d 2e70 7677 6174 7473 5f64 6360 2c20  em.pvwatts_dc`, ",
            "-00007be0: 6073 656c 662e 6d6f 6475 6c65 5f70 6172  `self.module_par",
            "-00007bf0: 616d 6574 6572 735b 2770 6463 3027 5d60  ameters['pdc0']`",
            "-00007c00: 2c0a 2020 2020 2020 2020 616e 6420 6073  ,.        and `s",
            "-00007c10: 656c 662e 6d6f 6475 6c65 5f70 6172 616d  elf.module_param",
            "-00007c20: 6574 6572 735b 2767 616d 6d61 5f70 6463  eters['gamma_pdc",
            "-00007c30: 275d 602e 0a0a 2020 2020 2020 2020 5365  ']`...        Se",
            "-00007c40: 6520 3a70 793a 6675 6e63 3a60 7076 6c69  e :py:func:`pvli",
            "-00007c50: 622e 7076 7379 7374 656d 2e70 7677 6174  b.pvsystem.pvwat",
            "-00007c60: 7473 5f64 6360 2066 6f72 2064 6574 6169  ts_dc` for detai",
            "-00007c70: 6c73 2e0a 2020 2020 2020 2020 2222 220a  ls..        \"\"\".",
            "-00007c80: 2020 2020 2020 2020 675f 706f 615f 6566          g_poa_ef",
            "-00007c90: 6665 6374 6976 6520 3d20 7365 6c66 2e5f  fective = self._",
            "-00007ca0: 7661 6c69 6461 7465 5f70 6572 5f61 7272  validate_per_arr",
            "-00007cb0: 6179 2867 5f70 6f61 5f65 6666 6563 7469  ay(g_poa_effecti",
            "-00007cc0: 7665 290a 2020 2020 2020 2020 7465 6d70  ve).        temp",
            "-00007cd0: 5f63 656c 6c20 3d20 7365 6c66 2e5f 7661  _cell = self._va",
            "-00007ce0: 6c69 6461 7465 5f70 6572 5f61 7272 6179  lidate_per_array",
            "-00007cf0: 2874 656d 705f 6365 6c6c 290a 2020 2020  (temp_cell).    ",
            "-00007d00: 2020 2020 7265 7475 726e 2074 7570 6c65      return tuple",
            "-00007d10: 280a 2020 2020 2020 2020 2020 2020 7076  (.            pv",
            "-00007d20: 7761 7474 735f 6463 2867 5f70 6f61 5f65  watts_dc(g_poa_e",
            "-00007d30: 6666 6563 7469 7665 2c20 7465 6d70 5f63  ffective, temp_c",
            "-00007d40: 656c 6c2c 0a20 2020 2020 2020 2020 2020  ell,.           ",
            "-00007d50: 2020 2020 2020 2020 2020 2020 6172 7261              arra",
            "-00007d60: 792e 6d6f 6475 6c65 5f70 6172 616d 6574  y.module_paramet",
            "-00007d70: 6572 735b 2770 6463 3027 5d2c 0a20 2020  ers['pdc0'],.   ",
            "-00007d80: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00007d90: 2020 2020 6172 7261 792e 6d6f 6475 6c65      array.module",
            "-00007da0: 5f70 6172 616d 6574 6572 735b 2767 616d  _parameters['gam",
            "-00007db0: 6d61 5f70 6463 275d 2c0a 2020 2020 2020  ma_pdc'],.      ",
            "-00007dc0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00007dd0: 202a 2a5f 6275 696c 645f 6b77 6172 6773   **_build_kwargs",
            "-00007de0: 285b 2774 656d 705f 7265 6627 5d2c 2061  (['temp_ref'], a",
            "-00007df0: 7272 6179 2e6d 6f64 756c 655f 7061 7261  rray.module_para",
            "-00007e00: 6d65 7465 7273 2929 0a20 2020 2020 2020  meters)).       ",
            "-00007e10: 2020 2020 2066 6f72 2061 7272 6179 2c20       for array, ",
            "-00007e20: 675f 706f 615f 6566 6665 6374 6976 652c  g_poa_effective,",
            "-00007e30: 2074 656d 705f 6365 6c6c 0a20 2020 2020   temp_cell.     ",
            "-00007e40: 2020 2020 2020 2069 6e20 7a69 7028 7365         in zip(se",
            "-00007e50: 6c66 2e61 7272 6179 732c 2067 5f70 6f61  lf.arrays, g_poa",
            "-00007e60: 5f65 6666 6563 7469 7665 2c20 7465 6d70  _effective, temp",
            "-00007e70: 5f63 656c 6c29 0a20 2020 2020 2020 2029  _cell).        )",
            "-00007e80: 0a0a 2020 2020 6465 6620 7076 7761 7474  ..    def pvwatt",
            "-00007e90: 735f 6c6f 7373 6573 2873 656c 6629 3a0a  s_losses(self):.",
            "-00007ea0: 2020 2020 2020 2020 2222 220a 2020 2020          \"\"\".    ",
            "-00007eb0: 2020 2020 4361 6c63 756c 6174 6573 2044      Calculates D",
            "-00007ec0: 4320 706f 7765 7220 6c6f 7373 6573 2061  C power losses a",
            "-00007ed0: 6363 6f72 6469 6e67 2074 6865 2050 5677  ccording the PVw",
            "-00007ee0: 6174 7473 206d 6f64 656c 2075 7369 6e67  atts model using",
            "-00007ef0: 0a20 2020 2020 2020 203a 7079 3a66 756e  .        :py:fun",
            "-00007f00: 633a 6070 766c 6962 2e70 7673 7973 7465  c:`pvlib.pvsyste",
            "-00007f10: 6d2e 7076 7761 7474 735f 6c6f 7373 6573  m.pvwatts_losses",
            "-00007f20: 6020 616e 640a 2020 2020 2020 2020 6060  ` and.        ``",
            "-00007f30: 7365 6c66 2e6c 6f73 7365 735f 7061 7261  self.losses_para",
            "-00007f40: 6d65 7465 7273 6060 2e0a 0a20 2020 2020  meters``...     ",
            "-00007f50: 2020 2053 6565 203a 7079 3a66 756e 633a     See :py:func:",
            "-00007f60: 6070 766c 6962 2e70 7673 7973 7465 6d2e  `pvlib.pvsystem.",
            "-00007f70: 7076 7761 7474 735f 6c6f 7373 6573 6020  pvwatts_losses` ",
            "-00007f80: 666f 7220 6465 7461 696c 732e 0a20 2020  for details..   ",
            "-00007f90: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "-00007fa0: 206b 7761 7267 7320 3d20 5f62 7569 6c64   kwargs = _build",
            "-00007fb0: 5f6b 7761 7267 7328 5b27 736f 696c 696e  _kwargs(['soilin",
            "-00007fc0: 6727 2c20 2773 6861 6469 6e67 272c 2027  g', 'shading', '",
            "-00007fd0: 736e 6f77 272c 2027 6d69 736d 6174 6368  snow', 'mismatch",
            "-00007fe0: 272c 0a20 2020 2020 2020 2020 2020 2020  ',.             ",
            "-00007ff0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00008000: 2020 2027 7769 7269 6e67 272c 2027 636f     'wiring', 'co",
            "-00008010: 6e6e 6563 7469 6f6e 7327 2c20 276c 6964  nnections', 'lid",
            "-00008020: 272c 0a20 2020 2020 2020 2020 2020 2020  ',.             ",
            "-00008030: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00008040: 2020 2027 6e61 6d65 706c 6174 655f 7261     'nameplate_ra",
            "-00008050: 7469 6e67 272c 2027 6167 6527 2c20 2761  ting', 'age', 'a",
            "-00008060: 7661 696c 6162 696c 6974 7927 5d2c 0a20  vailability'],. ",
            "-00008070: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00008080: 2020 2020 2020 2020 2020 2020 2020 7365                se",
            "-00008090: 6c66 2e6c 6f73 7365 735f 7061 7261 6d65  lf.losses_parame",
            "-000080a0: 7465 7273 290a 2020 2020 2020 2020 7265  ters).        re",
            "-000080b0: 7475 726e 2070 7677 6174 7473 5f6c 6f73  turn pvwatts_los",
            "-000080c0: 7365 7328 2a2a 6b77 6172 6773 290a 0a20  ses(**kwargs).. ",
            "-000080d0: 2020 2040 5f75 6e77 7261 705f 7369 6e67     @_unwrap_sing",
            "-000080e0: 6c65 5f76 616c 7565 0a20 2020 2064 6566  le_value.    def",
            "-000080f0: 2064 635f 6f68 6d73 5f66 726f 6d5f 7065   dc_ohms_from_pe",
            "-00008100: 7263 656e 7428 7365 6c66 293a 0a20 2020  rcent(self):.   ",
            "-00008110: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "-00008120: 2043 616c 6375 6c61 7465 7320 7468 6520   Calculates the ",
            "-00008130: 6571 7569 7661 6c65 6e74 2072 6573 6973  equivalent resis",
            "-00008140: 7461 6e63 6520 6f66 2074 6865 2077 6972  tance of the wir",
            "-00008150: 6573 2066 6f72 2065 6163 6820 6172 7261  es for each arra",
            "-00008160: 7920 7573 696e 670a 2020 2020 2020 2020  y using.        ",
            "-00008170: 3a70 793a 6675 6e63 3a60 7076 6c69 622e  :py:func:`pvlib.",
            "-00008180: 7076 7379 7374 656d 2e64 635f 6f68 6d73  pvsystem.dc_ohms",
            "-00008190: 5f66 726f 6d5f 7065 7263 656e 7460 0a0a  _from_percent`..",
            "-000081a0: 2020 2020 2020 2020 5365 6520 3a70 793a          See :py:",
            "-000081b0: 6675 6e63 3a60 7076 6c69 622e 7076 7379  func:`pvlib.pvsy",
            "-000081c0: 7374 656d 2e64 635f 6f68 6d73 5f66 726f  stem.dc_ohms_fro",
            "-000081d0: 6d5f 7065 7263 656e 7460 2066 6f72 2064  m_percent` for d",
            "-000081e0: 6574 6169 6c73 2e0a 2020 2020 2020 2020  etails..        ",
            "-000081f0: 2222 220a 0a20 2020 2020 2020 2072 6574  \"\"\"..        ret",
            "-00008200: 7572 6e20 7475 706c 6528 6172 7261 792e  urn tuple(array.",
            "-00008210: 6463 5f6f 686d 735f 6672 6f6d 5f70 6572  dc_ohms_from_per",
            "-00008220: 6365 6e74 2829 2066 6f72 2061 7272 6179  cent() for array",
            "-00008230: 2069 6e20 7365 6c66 2e61 7272 6179 7329   in self.arrays)",
            "-00008240: 0a0a 2020 2020 4070 726f 7065 7274 790a  ..    @property.",
            "-00008250: 2020 2020 6465 6620 6e75 6d5f 6172 7261      def num_arra",
            "-00008260: 7973 2873 656c 6629 3a0a 2020 2020 2020  ys(self):.      ",
            "-00008270: 2020 2222 2254 6865 206e 756d 6265 7220    \"\"\"The number ",
            "-00008280: 6f66 2041 7272 6179 7320 696e 2074 6865  of Arrays in the",
            "-00008290: 2073 7973 7465 6d2e 2222 220a 2020 2020   system.\"\"\".    ",
            "-000082a0: 2020 2020 7265 7475 726e 206c 656e 2873      return len(s",
            "-000082b0: 656c 662e 6172 7261 7973 290a 0a0a 636c  elf.arrays)...cl",
            "-000082c0: 6173 7320 4172 7261 793a 0a20 2020 2022  ass Array:.    \"",
            "-000082d0: 2222 0a20 2020 2041 6e20 4172 7261 7920  \"\".    An Array ",
            "-000082e0: 6973 2061 2073 6574 206f 6620 6d6f 6475  is a set of modu",
            "-000082f0: 6c65 7320 6174 2074 6865 2073 616d 6520  les at the same ",
            "-00008300: 6f72 6965 6e74 6174 696f 6e2e 0a0a 2020  orientation...  ",
            "-00008310: 2020 5370 6563 6966 6963 616c 6c79 2c20    Specifically, ",
            "-00008320: 616e 2061 7272 6179 2069 7320 6465 6669  an array is defi",
            "-00008330: 6e65 6420 6279 2069 7473 206d 6f75 6e74  ned by its mount",
            "-00008340: 2c20 7468 650a 2020 2020 6d6f 6475 6c65  , the.    module",
            "-00008350: 2070 6172 616d 6574 6572 732c 2074 6865   parameters, the",
            "-00008360: 206e 756d 6265 7220 6f66 2070 6172 616c   number of paral",
            "-00008370: 6c65 6c20 7374 7269 6e67 7320 6f66 206d  lel strings of m",
            "-00008380: 6f64 756c 6573 0a20 2020 2061 6e64 2074  odules.    and t",
            "-00008390: 6865 206e 756d 6265 7220 6f66 206d 6f64  he number of mod",
            "-000083a0: 756c 6573 206f 6e20 6561 6368 2073 7472  ules on each str",
            "-000083b0: 696e 672e 0a0a 2020 2020 5061 7261 6d65  ing...    Parame",
            "-000083c0: 7465 7273 0a20 2020 202d 2d2d 2d2d 2d2d  ters.    -------",
            "-000083d0: 2d2d 2d0a 2020 2020 6d6f 756e 743a 2046  ---.    mount: F",
            "-000083e0: 6978 6564 4d6f 756e 742c 2053 696e 676c  ixedMount, Singl",
            "-000083f0: 6541 7869 7354 7261 636b 6572 4d6f 756e  eAxisTrackerMoun",
            "-00008400: 742c 206f 7220 6f74 6865 720a 2020 2020  t, or other.    ",
            "-00008410: 2020 2020 4d6f 756e 7469 6e67 2066 6f72      Mounting for",
            "-00008420: 2074 6865 2061 7272 6179 2c20 6569 7468   the array, eith",
            "-00008430: 6572 206f 6e20 6669 7865 642d 7469 6c74  er on fixed-tilt",
            "-00008440: 2072 6163 6b69 6e67 206f 7220 686f 7269   racking or hori",
            "-00008450: 7a6f 6e74 616c 0a20 2020 2020 2020 2073  zontal.        s",
            "-00008460: 696e 676c 6520 6178 6973 2074 7261 636b  ingle axis track",
            "-00008470: 6572 2e20 4d6f 756e 7469 6e67 2069 7320  er. Mounting is ",
            "-00008480: 7573 6564 2074 6f20 6465 7465 726d 696e  used to determin",
            "-00008490: 6520 6d6f 6475 6c65 206f 7269 656e 7461  e module orienta",
            "-000084a0: 7469 6f6e 2e0a 2020 2020 2020 2020 4966  tion..        If",
            "-000084b0: 206e 6f74 2070 726f 7669 6465 642c 2061   not provided, a",
            "-000084c0: 2046 6978 6564 4d6f 756e 7420 7769 7468   FixedMount with",
            "-000084d0: 207a 6572 6f20 7469 6c74 2069 7320 7573   zero tilt is us",
            "-000084e0: 6564 2e0a 0a20 2020 2061 6c62 6564 6f20  ed...    albedo ",
            "-000084f0: 3a20 666c 6f61 742c 206f 7074 696f 6e61  : float, optiona",
            "-00008500: 6c0a 2020 2020 2020 2020 4772 6f75 6e64  l.        Ground",
            "-00008510: 2073 7572 6661 6365 2061 6c62 6564 6f2e   surface albedo.",
            "-00008520: 2049 6620 6e6f 7420 7375 7070 6c69 6564   If not supplied",
            "-00008530: 2c20 7468 656e 2060 6073 7572 6661 6365  , then ``surface",
            "-00008540: 5f74 7970 6560 6020 6973 2075 7365 640a  _type`` is used.",
            "-00008550: 2020 2020 2020 2020 746f 206c 6f6f 6b20          to look ",
            "-00008560: 7570 2061 2076 616c 7565 2069 6e20 203a  up a value in  :",
            "-00008570: 7079 3a63 6f6e 7374 3a60 7076 6c69 622e  py:const:`pvlib.",
            "-00008580: 616c 6265 646f 2e53 5552 4641 4345 5f41  albedo.SURFACE_A",
            "-00008590: 4c42 4544 4f53 602e 0a20 2020 2020 2020  LBEDOS`..       ",
            "-000085a0: 2049 6620 6060 7375 7266 6163 655f 7479   If ``surface_ty",
            "-000085b0: 7065 6060 2069 7320 616c 736f 206e 6f74  pe`` is also not",
            "-000085c0: 2073 7570 706c 6965 6420 7468 656e 2061   supplied then a",
            "-000085d0: 2067 726f 756e 6420 7375 7266 6163 6520   ground surface ",
            "-000085e0: 616c 6265 646f 0a20 2020 2020 2020 206f  albedo.        o",
            "-000085f0: 6620 302e 3235 2069 7320 7573 6564 2e0a  f 0.25 is used..",
            "-00008600: 0a20 2020 2073 7572 6661 6365 5f74 7970  .    surface_typ",
            "-00008610: 6520 3a20 7374 7269 6e67 2c20 6f70 7469  e : string, opti",
            "-00008620: 6f6e 616c 0a20 2020 2020 2020 2054 6865  onal.        The",
            "-00008630: 2067 726f 756e 6420 7375 7266 6163 6520   ground surface ",
            "-00008640: 7479 7065 2e20 5365 6520 203a 7079 3a63  type. See  :py:c",
            "-00008650: 6f6e 7374 3a60 7076 6c69 622e 616c 6265  onst:`pvlib.albe",
            "-00008660: 646f 2e53 5552 4641 4345 5f41 4c42 4544  do.SURFACE_ALBED",
            "-00008670: 4f53 600a 2020 2020 2020 2020 666f 7220  OS`.        for ",
            "-00008680: 7661 6c69 6420 7661 6c75 6573 2e0a 0a20  valid values... ",
            "-00008690: 2020 206d 6f64 756c 6520 3a20 7374 7269     module : stri",
            "-000086a0: 6e67 2c20 6f70 7469 6f6e 616c 0a20 2020  ng, optional.   ",
            "-000086b0: 2020 2020 2054 6865 206d 6f64 656c 206e       The model n",
            "-000086c0: 616d 6520 6f66 2074 6865 206d 6f64 756c  ame of the modul",
            "-000086d0: 6573 2e0a 2020 2020 2020 2020 4d61 7920  es..        May ",
            "-000086e0: 6265 2075 7365 6420 746f 206c 6f6f 6b20  be used to look ",
            "-000086f0: 7570 2074 6865 206d 6f64 756c 655f 7061  up the module_pa",
            "-00008700: 7261 6d65 7465 7273 2064 6963 7469 6f6e  rameters diction",
            "-00008710: 6172 790a 2020 2020 2020 2020 7669 6120  ary.        via ",
            "-00008720: 736f 6d65 206f 7468 6572 206d 6574 686f  some other metho",
            "-00008730: 642e 0a0a 2020 2020 6d6f 6475 6c65 5f74  d...    module_t",
            "-00008740: 7970 6520 3a20 7374 7269 6e67 2c20 6f70  ype : string, op",
            "-00008750: 7469 6f6e 616c 0a20 2020 2020 2020 2020  tional.         ",
            "-00008760: 4465 7363 7269 6265 7320 7468 6520 6d6f  Describes the mo",
            "-00008770: 6475 6c65 2773 2063 6f6e 7374 7275 6374  dule's construct",
            "-00008780: 696f 6e2e 2056 616c 6964 2073 7472 696e  ion. Valid strin",
            "-00008790: 6773 2061 7265 2027 676c 6173 735f 706f  gs are 'glass_po",
            "-000087a0: 6c79 6d65 7227 0a20 2020 2020 2020 2020  lymer'.         ",
            "-000087b0: 616e 6420 2767 6c61 7373 5f67 6c61 7373  and 'glass_glass",
            "-000087c0: 272e 2055 7365 6420 666f 7220 6365 6c6c  '. Used for cell",
            "-000087d0: 2061 6e64 206d 6f64 756c 6520 7465 6d70   and module temp",
            "-000087e0: 6572 6174 7572 6520 6361 6c63 756c 6174  erature calculat",
            "-000087f0: 696f 6e73 2e0a 0a20 2020 206d 6f64 756c  ions...    modul",
            "-00008800: 655f 7061 7261 6d65 7465 7273 203a 2064  e_parameters : d",
            "-00008810: 6963 7420 6f72 2053 6572 6965 732c 206f  ict or Series, o",
            "-00008820: 7074 696f 6e61 6c0a 2020 2020 2020 2020  ptional.        ",
            "-00008830: 5061 7261 6d65 7465 7273 2066 6f72 2074  Parameters for t",
            "-00008840: 6865 206d 6f64 756c 6520 6d6f 6465 6c2c  he module model,",
            "-00008850: 2065 2e67 2e2c 2053 4150 4d2c 2043 4543   e.g., SAPM, CEC",
            "-00008860: 2c20 6f72 206f 7468 6572 2e0a 0a20 2020  , or other...   ",
            "-00008870: 2074 656d 7065 7261 7475 7265 5f6d 6f64   temperature_mod",
            "-00008880: 656c 5f70 6172 616d 6574 6572 7320 3a20  el_parameters : ",
            "-00008890: 6469 6374 206f 7220 5365 7269 6573 2c20  dict or Series, ",
            "-000088a0: 6f70 7469 6f6e 616c 0a20 2020 2020 2020  optional.       ",
            "-000088b0: 2050 6172 616d 6574 6572 7320 666f 7220   Parameters for ",
            "-000088c0: 7468 6520 6d6f 6475 6c65 2074 656d 7065  the module tempe",
            "-000088d0: 7261 7475 7265 206d 6f64 656c 2c20 652e  rature model, e.",
            "-000088e0: 672e 2c20 5341 504d 2c20 5076 7379 7374  g., SAPM, Pvsyst",
            "-000088f0: 2c20 6f72 0a20 2020 2020 2020 206f 7468  , or.        oth",
            "-00008900: 6572 2e0a 0a20 2020 206d 6f64 756c 6573  er...    modules",
            "-00008910: 5f70 6572 5f73 7472 696e 673a 2069 6e74  _per_string: int",
            "-00008920: 2c20 6465 6661 756c 7420 310a 2020 2020  , default 1.    ",
            "-00008930: 2020 2020 4e75 6d62 6572 206f 6620 6d6f      Number of mo",
            "-00008940: 6475 6c65 7320 7065 7220 7374 7269 6e67  dules per string",
            "-00008950: 2069 6e20 7468 6520 6172 7261 792e 0a0a   in the array...",
            "-00008960: 2020 2020 7374 7269 6e67 733a 2069 6e74      strings: int",
            "-00008970: 2c20 6465 6661 756c 7420 310a 2020 2020  , default 1.    ",
            "-00008980: 2020 2020 4e75 6d62 6572 206f 6620 7061      Number of pa",
            "-00008990: 7261 6c6c 656c 2073 7472 696e 6773 2069  rallel strings i",
            "-000089a0: 6e20 7468 6520 6172 7261 792e 0a0a 2020  n the array...  ",
            "-000089b0: 2020 6172 7261 795f 6c6f 7373 6573 5f70    array_losses_p",
            "-000089c0: 6172 616d 6574 6572 7320 3a20 6469 6374  arameters : dict",
            "-000089d0: 206f 7220 5365 7269 6573 2c20 6f70 7469   or Series, opti",
            "-000089e0: 6f6e 616c 0a20 2020 2020 2020 2053 7570  onal.        Sup",
            "-000089f0: 706f 7274 6564 206b 6579 7320 6172 6520  ported keys are ",
            "-00008a00: 2764 635f 6f68 6d69 635f 7065 7263 656e  'dc_ohmic_percen",
            "-00008a10: 7427 2e0a 0a20 2020 206e 616d 6520 3a20  t'...    name : ",
            "-00008a20: 7374 722c 206f 7074 696f 6e61 6c0a 2020  str, optional.  ",
            "-00008a30: 2020 2020 2020 4e61 6d65 206f 6620 4172        Name of Ar",
            "-00008a40: 7261 7920 696e 7374 616e 6365 2e0a 2020  ray instance..  ",
            "-00008a50: 2020 2222 220a 0a20 2020 2064 6566 205f    \"\"\"..    def _",
            "-00008a60: 5f69 6e69 745f 5f28 7365 6c66 2c20 6d6f  _init__(self, mo",
            "-00008a70: 756e 742c 0a20 2020 2020 2020 2020 2020  unt,.           ",
            "-00008a80: 2020 2020 2020 616c 6265 646f 3d4e 6f6e        albedo=Non",
            "-00008a90: 652c 2073 7572 6661 6365 5f74 7970 653d  e, surface_type=",
            "-00008aa0: 4e6f 6e65 2c0a 2020 2020 2020 2020 2020  None,.          ",
            "-00008ab0: 2020 2020 2020 206d 6f64 756c 653d 4e6f         module=No",
            "-00008ac0: 6e65 2c20 6d6f 6475 6c65 5f74 7970 653d  ne, module_type=",
            "-00008ad0: 4e6f 6e65 2c0a 2020 2020 2020 2020 2020  None,.          ",
            "-00008ae0: 2020 2020 2020 206d 6f64 756c 655f 7061         module_pa",
            "-00008af0: 7261 6d65 7465 7273 3d4e 6f6e 652c 0a20  rameters=None,. ",
            "-00008b00: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00008b10: 7465 6d70 6572 6174 7572 655f 6d6f 6465  temperature_mode",
            "-00008b20: 6c5f 7061 7261 6d65 7465 7273 3d4e 6f6e  l_parameters=Non",
            "-00008b30: 652c 0a20 2020 2020 2020 2020 2020 2020  e,.             ",
            "-00008b40: 2020 2020 6d6f 6475 6c65 735f 7065 725f      modules_per_",
            "-00008b50: 7374 7269 6e67 3d31 2c20 7374 7269 6e67  string=1, string",
            "-00008b60: 733d 312c 0a20 2020 2020 2020 2020 2020  s=1,.           ",
            "-00008b70: 2020 2020 2020 6172 7261 795f 6c6f 7373        array_loss",
            "-00008b80: 6573 5f70 6172 616d 6574 6572 733d 4e6f  es_parameters=No",
            "-00008b90: 6e65 2c0a 2020 2020 2020 2020 2020 2020  ne,.            ",
            "-00008ba0: 2020 2020 206e 616d 653d 4e6f 6e65 293a       name=None):",
            "-00008bb0: 0a20 2020 2020 2020 2073 656c 662e 6d6f  .        self.mo",
            "-00008bc0: 756e 7420 3d20 6d6f 756e 740a 0a20 2020  unt = mount..   ",
            "-00008bd0: 2020 2020 2073 656c 662e 7375 7266 6163       self.surfac",
            "-00008be0: 655f 7479 7065 203d 2073 7572 6661 6365  e_type = surface",
            "-00008bf0: 5f74 7970 650a 2020 2020 2020 2020 6966  _type.        if",
            "-00008c00: 2061 6c62 6564 6f20 6973 204e 6f6e 653a   albedo is None:",
            "-00008c10: 0a20 2020 2020 2020 2020 2020 2073 656c  .            sel",
            "-00008c20: 662e 616c 6265 646f 203d 2070 766c 6962  f.albedo = pvlib",
            "-00008c30: 2e61 6c62 6564 6f2e 5355 5246 4143 455f  .albedo.SURFACE_",
            "-00008c40: 414c 4245 444f 532e 6765 7428 7375 7266  ALBEDOS.get(surf",
            "-00008c50: 6163 655f 7479 7065 2c20 302e 3235 290a  ace_type, 0.25).",
            "-00008c60: 2020 2020 2020 2020 656c 7365 3a0a 2020          else:.  ",
            "-00008c70: 2020 2020 2020 2020 2020 7365 6c66 2e61            self.a",
            "-00008c80: 6c62 6564 6f20 3d20 616c 6265 646f 0a0a  lbedo = albedo..",
            "-00008c90: 2020 2020 2020 2020 7365 6c66 2e6d 6f64          self.mod",
            "-00008ca0: 756c 6520 3d20 6d6f 6475 6c65 0a20 2020  ule = module.   ",
            "-00008cb0: 2020 2020 2069 6620 6d6f 6475 6c65 5f70       if module_p",
            "-00008cc0: 6172 616d 6574 6572 7320 6973 204e 6f6e  arameters is Non",
            "-00008cd0: 653a 0a20 2020 2020 2020 2020 2020 2073  e:.            s",
            "-00008ce0: 656c 662e 6d6f 6475 6c65 5f70 6172 616d  elf.module_param",
            "-00008cf0: 6574 6572 7320 3d20 7b7d 0a20 2020 2020  eters = {}.     ",
            "-00008d00: 2020 2065 6c73 653a 0a20 2020 2020 2020     else:.       ",
            "-00008d10: 2020 2020 2073 656c 662e 6d6f 6475 6c65       self.module",
            "-00008d20: 5f70 6172 616d 6574 6572 7320 3d20 6d6f  _parameters = mo",
            "-00008d30: 6475 6c65 5f70 6172 616d 6574 6572 730a  dule_parameters.",
            "-00008d40: 0a20 2020 2020 2020 2073 656c 662e 6d6f  .        self.mo",
            "-00008d50: 6475 6c65 5f74 7970 6520 3d20 6d6f 6475  dule_type = modu",
            "-00008d60: 6c65 5f74 7970 650a 0a20 2020 2020 2020  le_type..       ",
            "-00008d70: 2073 656c 662e 7374 7269 6e67 7320 3d20   self.strings = ",
            "-00008d80: 7374 7269 6e67 730a 2020 2020 2020 2020  strings.        ",
            "-00008d90: 7365 6c66 2e6d 6f64 756c 6573 5f70 6572  self.modules_per",
            "-00008da0: 5f73 7472 696e 6720 3d20 6d6f 6475 6c65  _string = module",
            "-00008db0: 735f 7065 725f 7374 7269 6e67 0a0a 2020  s_per_string..  ",
            "-00008dc0: 2020 2020 2020 6966 2074 656d 7065 7261        if tempera",
            "-00008dd0: 7475 7265 5f6d 6f64 656c 5f70 6172 616d  ture_model_param",
            "-00008de0: 6574 6572 7320 6973 204e 6f6e 653a 0a20  eters is None:. ",
            "-00008df0: 2020 2020 2020 2020 2020 2073 656c 662e             self.",
            "-00008e00: 7465 6d70 6572 6174 7572 655f 6d6f 6465  temperature_mode",
            "-00008e10: 6c5f 7061 7261 6d65 7465 7273 203d 205c  l_parameters = \\",
            "-00008e20: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00008e30: 2073 656c 662e 5f69 6e66 6572 5f74 656d   self._infer_tem",
            "-00008e40: 7065 7261 7475 7265 5f6d 6f64 656c 5f70  perature_model_p",
            "-00008e50: 6172 616d 7328 290a 2020 2020 2020 2020  arams().        ",
            "-00008e60: 656c 7365 3a0a 2020 2020 2020 2020 2020  else:.          ",
            "-00008e70: 2020 7365 6c66 2e74 656d 7065 7261 7475    self.temperatu",
            "-00008e80: 7265 5f6d 6f64 656c 5f70 6172 616d 6574  re_model_paramet",
            "-00008e90: 6572 7320 3d20 7465 6d70 6572 6174 7572  ers = temperatur",
            "-00008ea0: 655f 6d6f 6465 6c5f 7061 7261 6d65 7465  e_model_paramete",
            "-00008eb0: 7273 0a0a 2020 2020 2020 2020 6966 2061  rs..        if a",
            "-00008ec0: 7272 6179 5f6c 6f73 7365 735f 7061 7261  rray_losses_para",
            "-00008ed0: 6d65 7465 7273 2069 7320 4e6f 6e65 3a0a  meters is None:.",
            "-00008ee0: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "-00008ef0: 2e61 7272 6179 5f6c 6f73 7365 735f 7061  .array_losses_pa",
            "-00008f00: 7261 6d65 7465 7273 203d 207b 7d0a 2020  rameters = {}.  ",
            "-00008f10: 2020 2020 2020 656c 7365 3a0a 2020 2020        else:.    ",
            "-00008f20: 2020 2020 2020 2020 7365 6c66 2e61 7272          self.arr",
            "-00008f30: 6179 5f6c 6f73 7365 735f 7061 7261 6d65  ay_losses_parame",
            "-00008f40: 7465 7273 203d 2061 7272 6179 5f6c 6f73  ters = array_los",
            "-00008f50: 7365 735f 7061 7261 6d65 7465 7273 0a0a  ses_parameters..",
            "-00008f60: 2020 2020 2020 2020 7365 6c66 2e6e 616d          self.nam",
            "-00008f70: 6520 3d20 6e61 6d65 0a0a 2020 2020 6465  e = name..    de",
            "-00008f80: 6620 5f5f 7265 7072 5f5f 2873 656c 6629  f __repr__(self)",
            "-00008f90: 3a0a 2020 2020 2020 2020 6174 7472 7320  :.        attrs ",
            "-00008fa0: 3d20 5b27 6e61 6d65 272c 2027 6d6f 756e  = ['name', 'moun",
            "-00008fb0: 7427 2c20 276d 6f64 756c 6527 2c0a 2020  t', 'module',.  ",
            "-00008fc0: 2020 2020 2020 2020 2020 2020 2020 2027                 '",
            "-00008fd0: 616c 6265 646f 272c 2027 6d6f 6475 6c65  albedo', 'module",
            "-00008fe0: 5f74 7970 6527 2c0a 2020 2020 2020 2020  _type',.        ",
            "-00008ff0: 2020 2020 2020 2020 2027 7465 6d70 6572           'temper",
            "-00009000: 6174 7572 655f 6d6f 6465 6c5f 7061 7261  ature_model_para",
            "-00009010: 6d65 7465 7273 272c 0a20 2020 2020 2020  meters',.       ",
            "-00009020: 2020 2020 2020 2020 2020 2773 7472 696e            'strin",
            "-00009030: 6773 272c 2027 6d6f 6475 6c65 735f 7065  gs', 'modules_pe",
            "-00009040: 725f 7374 7269 6e67 275d 0a0a 2020 2020  r_string']..    ",
            "-00009050: 2020 2020 7265 7475 726e 2027 4172 7261      return 'Arra",
            "-00009060: 793a 5c6e 2020 2720 2b20 275c 6e20 2027  y:\\n  ' + '\\n  '",
            "-00009070: 2e6a 6f69 6e28 0a20 2020 2020 2020 2020  .join(.         ",
            "-00009080: 2020 2066 277b 6174 7472 7d3a 207b 6765     f'{attr}: {ge",
            "-00009090: 7461 7474 7228 7365 6c66 2c20 6174 7472  tattr(self, attr",
            "-000090a0: 297d 2720 666f 7220 6174 7472 2069 6e20  )}' for attr in ",
            "-000090b0: 6174 7472 730a 2020 2020 2020 2020 290a  attrs.        ).",
            "-000090c0: 0a20 2020 2064 6566 205f 696e 6665 725f  .    def _infer_",
            "-000090d0: 7465 6d70 6572 6174 7572 655f 6d6f 6465  temperature_mode",
            "-000090e0: 6c5f 7061 7261 6d73 2873 656c 6629 3a0a  l_params(self):.",
            "-000090f0: 2020 2020 2020 2020 2320 7472 7920 746f          # try to",
            "-00009100: 2069 6e66 6572 2074 656d 7065 7261 7475   infer temperatu",
            "-00009110: 7265 206d 6f64 656c 2070 6172 616d 6574  re model paramet",
            "-00009120: 6572 7320 6672 6f6d 2072 6163 6b69 6e67  ers from racking",
            "-00009130: 5f6d 6f64 656c 0a20 2020 2020 2020 2023  _model.        #",
            "-00009140: 2061 6e64 206d 6f64 756c 655f 7479 7065   and module_type",
            "-00009150: 0a20 2020 2020 2020 2070 6172 616d 5f73  .        param_s",
            "-00009160: 6574 203d 2066 277b 7365 6c66 2e6d 6f75  et = f'{self.mou",
            "-00009170: 6e74 2e72 6163 6b69 6e67 5f6d 6f64 656c  nt.racking_model",
            "-00009180: 7d5f 7b73 656c 662e 6d6f 6475 6c65 5f74  }_{self.module_t",
            "-00009190: 7970 657d 270a 2020 2020 2020 2020 6966  ype}'.        if",
            "-000091a0: 2070 6172 616d 5f73 6574 2069 6e20 7465   param_set in te",
            "-000091b0: 6d70 6572 6174 7572 652e 5445 4d50 4552  mperature.TEMPER",
            "-000091c0: 4154 5552 455f 4d4f 4445 4c5f 5041 5241  ATURE_MODEL_PARA",
            "-000091d0: 4d45 5445 5253 5b27 7361 706d 275d 3a0a  METERS['sapm']:.",
            "-000091e0: 2020 2020 2020 2020 2020 2020 7265 7475              retu",
            "-000091f0: 726e 2074 656d 7065 7261 7475 7265 2e5f  rn temperature._",
            "-00009200: 7465 6d70 6572 6174 7572 655f 6d6f 6465  temperature_mode",
            "-00009210: 6c5f 7061 7261 6d73 2827 7361 706d 272c  l_params('sapm',",
            "-00009220: 2070 6172 616d 5f73 6574 290a 2020 2020   param_set).    ",
            "-00009230: 2020 2020 656c 6966 2027 6672 6565 7374      elif 'freest",
            "-00009240: 616e 6469 6e67 2720 696e 2070 6172 616d  anding' in param",
            "-00009250: 5f73 6574 3a0a 2020 2020 2020 2020 2020  _set:.          ",
            "-00009260: 2020 7265 7475 726e 2074 656d 7065 7261    return tempera",
            "-00009270: 7475 7265 2e5f 7465 6d70 6572 6174 7572  ture._temperatur",
            "-00009280: 655f 6d6f 6465 6c5f 7061 7261 6d73 2827  e_model_params('",
            "-00009290: 7076 7379 7374 272c 0a20 2020 2020 2020  pvsyst',.       ",
            "-000092a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000092b0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000092c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000092d0: 2020 2766 7265 6573 7461 6e64 696e 6727    'freestanding'",
            "-000092e0: 290a 2020 2020 2020 2020 656c 6966 2027  ).        elif '",
            "-000092f0: 696e 7375 6c61 7465 6427 2069 6e20 7061  insulated' in pa",
            "-00009300: 7261 6d5f 7365 743a 2020 2320 6166 7465  ram_set:  # afte",
            "-00009310: 7220 5341 504d 2074 6f20 6176 6f69 6420  r SAPM to avoid ",
            "-00009320: 636f 6e66 7573 696e 6720 6b65 7973 0a20  confusing keys. ",
            "-00009330: 2020 2020 2020 2020 2020 2072 6574 7572             retur",
            "-00009340: 6e20 7465 6d70 6572 6174 7572 652e 5f74  n temperature._t",
            "-00009350: 656d 7065 7261 7475 7265 5f6d 6f64 656c  emperature_model",
            "-00009360: 5f70 6172 616d 7328 2770 7673 7973 7427  _params('pvsyst'",
            "-00009370: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "-00009380: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009390: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000093a0: 2020 2020 2020 2020 2020 2027 696e 7375             'insu",
            "-000093b0: 6c61 7465 6427 290a 2020 2020 2020 2020  lated').        ",
            "-000093c0: 656c 7365 3a0a 2020 2020 2020 2020 2020  else:.          ",
            "-000093d0: 2020 7265 7475 726e 207b 7d0a 0a20 2020    return {}..   ",
            "-000093e0: 2064 6566 205f 696e 6665 725f 6365 6c6c   def _infer_cell",
            "-000093f0: 5f74 7970 6528 7365 6c66 293a 0a20 2020  _type(self):.   ",
            "-00009400: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "-00009410: 2045 7861 6d69 6e65 7320 6d6f 6475 6c65   Examines module",
            "-00009420: 5f70 6172 616d 6574 6572 7320 616e 6420  _parameters and ",
            "-00009430: 6d61 7073 2074 6865 2054 6563 686e 6f6c  maps the Technol",
            "-00009440: 6f67 7920 6b65 7920 666f 7220 7468 6520  ogy key for the ",
            "-00009450: 4345 430a 2020 2020 2020 2020 6461 7461  CEC.        data",
            "-00009460: 6261 7365 2061 6e64 2074 6865 204d 6174  base and the Mat",
            "-00009470: 6572 6961 6c20 6b65 7920 666f 7220 7468  erial key for th",
            "-00009480: 6520 5361 6e64 6961 2064 6174 6162 6173  e Sandia databas",
            "-00009490: 6520 746f 2061 2063 6f6d 6d6f 6e0a 2020  e to a common.  ",
            "-000094a0: 2020 2020 2020 6c69 7374 206f 6620 7374        list of st",
            "-000094b0: 7269 6e67 7320 666f 7220 6365 6c6c 2074  rings for cell t",
            "-000094c0: 7970 652e 0a0a 2020 2020 2020 2020 5265  ype...        Re",
            "-000094d0: 7475 726e 730a 2020 2020 2020 2020 2d2d  turns.        --",
            "-000094e0: 2d2d 2d2d 2d0a 2020 2020 2020 2020 6365  -----.        ce",
            "-000094f0: 6c6c 5f74 7970 653a 2073 7472 0a0a 2020  ll_type: str..  ",
            "-00009500: 2020 2020 2020 2222 220a 0a20 2020 2020        \"\"\"..     ",
            "-00009510: 2020 205f 6365 6c6c 5f74 7970 655f 6469     _cell_type_di",
            "-00009520: 6374 203d 207b 274d 756c 7469 2d63 2d53  ct = {'Multi-c-S",
            "-00009530: 6927 3a20 276d 756c 7469 7369 272c 0a20  i': 'multisi',. ",
            "-00009540: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009550: 2020 2020 2020 2020 2020 274d 6f6e 6f2d            'Mono-",
            "-00009560: 632d 5369 273a 2027 6d6f 6e6f 7369 272c  c-Si': 'monosi',",
            "-00009570: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00009580: 2020 2020 2020 2020 2020 2020 2754 6869              'Thi",
            "-00009590: 6e20 4669 6c6d 273a 2027 6369 6773 272c  n Film': 'cigs',",
            "-000095a0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-000095b0: 2020 2020 2020 2020 2020 2020 2761 2d53              'a-S",
            "-000095c0: 692f 6e63 273a 2027 6173 6927 2c0a 2020  i/nc': 'asi',.  ",
            "-000095d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000095e0: 2020 2020 2020 2020 2027 4349 5327 3a20           'CIS': ",
            "-000095f0: 2763 6967 7327 2c0a 2020 2020 2020 2020  'cigs',.        ",
            "-00009600: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009610: 2020 2027 4349 4753 273a 2027 6369 6773     'CIGS': 'cigs",
            "-00009620: 272c 0a20 2020 2020 2020 2020 2020 2020  ',.             ",
            "-00009630: 2020 2020 2020 2020 2020 2020 2020 2731                '1",
            "-00009640: 2d61 2d53 6927 3a20 2761 7369 272c 0a20  -a-Si': 'asi',. ",
            "-00009650: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009660: 2020 2020 2020 2020 2020 2743 6454 6527            'CdTe'",
            "-00009670: 3a20 2763 6474 6527 2c0a 2020 2020 2020  : 'cdte',.      ",
            "-00009680: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009690: 2020 2020 2027 612d 5369 273a 2027 6173       'a-Si': 'as",
            "-000096a0: 6927 2c0a 2020 2020 2020 2020 2020 2020  i',.            ",
            "-000096b0: 2020 2020 2020 2020 2020 2020 2020 2027                 '",
            "-000096c0: 322d 612d 5369 273a 204e 6f6e 652c 0a20  2-a-Si': None,. ",
            "-000096d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000096e0: 2020 2020 2020 2020 2020 2733 2d61 2d53            '3-a-S",
            "-000096f0: 6927 3a20 4e6f 6e65 2c0a 2020 2020 2020  i': None,.      ",
            "-00009700: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009710: 2020 2020 2027 4849 542d 5369 273a 2027       'HIT-Si': '",
            "-00009720: 6d6f 6e6f 7369 272c 0a20 2020 2020 2020  monosi',.       ",
            "-00009730: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009740: 2020 2020 276d 632d 5369 273a 2027 6d75      'mc-Si': 'mu",
            "-00009750: 6c74 6973 6927 2c0a 2020 2020 2020 2020  ltisi',.        ",
            "-00009760: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009770: 2020 2027 632d 5369 273a 2027 6d75 6c74     'c-Si': 'mult",
            "-00009780: 6973 6927 2c0a 2020 2020 2020 2020 2020  isi',.          ",
            "-00009790: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000097a0: 2027 5369 2d46 696c 6d27 3a20 2761 7369   'Si-Film': 'asi",
            "-000097b0: 272c 0a20 2020 2020 2020 2020 2020 2020  ',.             ",
            "-000097c0: 2020 2020 2020 2020 2020 2020 2020 2745                'E",
            "-000097d0: 4647 206d 632d 5369 273a 2027 6d75 6c74  FG mc-Si': 'mult",
            "-000097e0: 6973 6927 2c0a 2020 2020 2020 2020 2020  isi',.          ",
            "+000042b0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000042c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000042d0: 2073 7973 7465 6d5f 7769 6465 3d54 7275   system_wide=Tru",
            "+000042e0: 6529 0a0a 2020 2020 2020 2020 7265 7475  e)..        retu",
            "+000042f0: 726e 2074 7570 6c65 280a 2020 2020 2020  rn tuple(.      ",
            "+00004300: 2020 2020 2020 6172 7261 792e 6765 745f        array.get_",
            "+00004310: 6365 6c6c 5f74 656d 7065 7261 7475 7265  cell_temperature",
            "+00004320: 2870 6f61 5f67 6c6f 6261 6c2c 2074 656d  (poa_global, tem",
            "+00004330: 705f 6169 722c 2077 696e 645f 7370 6565  p_air, wind_spee",
            "+00004340: 642c 0a20 2020 2020 2020 2020 2020 2020  d,.             ",
            "+00004350: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00004360: 2020 2020 2020 2020 2020 6d6f 6465 6c2c            model,",
            "+00004370: 2065 6666 6563 7469 7665 5f69 7272 6164   effective_irrad",
            "+00004380: 6961 6e63 6529 0a20 2020 2020 2020 2020  iance).         ",
            "+00004390: 2020 2066 6f72 2061 7272 6179 2c20 706f     for array, po",
            "+000043a0: 615f 676c 6f62 616c 2c20 7465 6d70 5f61  a_global, temp_a",
            "+000043b0: 6972 2c20 7769 6e64 5f73 7065 6564 2c20  ir, wind_speed, ",
            "+000043c0: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "+000043d0: 616e 6365 0a20 2020 2020 2020 2020 2020  ance.           ",
            "+000043e0: 2069 6e20 7a69 7028 0a20 2020 2020 2020   in zip(.       ",
            "+000043f0: 2020 2020 2020 2020 2073 656c 662e 6172           self.ar",
            "+00004400: 7261 7973 2c20 706f 615f 676c 6f62 616c  rays, poa_global",
            "+00004410: 2c20 7465 6d70 5f61 6972 2c20 7769 6e64  , temp_air, wind",
            "+00004420: 5f73 7065 6564 2c0a 2020 2020 2020 2020  _speed,.        ",
            "+00004430: 2020 2020 2020 2020 6566 6665 6374 6976          effectiv",
            "+00004440: 655f 6972 7261 6469 616e 6365 0a20 2020  e_irradiance.   ",
            "+00004450: 2020 2020 2020 2020 2029 0a20 2020 2020           ).     ",
            "+00004460: 2020 2029 0a0a 2020 2020 405f 756e 7772     )..    @_unwr",
            "+00004470: 6170 5f73 696e 676c 655f 7661 6c75 650a  ap_single_value.",
            "+00004480: 2020 2020 6465 6620 6361 6c63 7061 7261      def calcpara",
            "+00004490: 6d73 5f64 6573 6f74 6f28 7365 6c66 2c20  ms_desoto(self, ",
            "+000044a0: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "+000044b0: 616e 6365 2c20 7465 6d70 5f63 656c 6c29  ance, temp_cell)",
            "+000044c0: 3a0a 2020 2020 2020 2020 2222 220a 2020  :.        \"\"\".  ",
            "+000044d0: 2020 2020 2020 5573 6520 7468 6520 3a70        Use the :p",
            "+000044e0: 793a 6675 6e63 3a60 6361 6c63 7061 7261  y:func:`calcpara",
            "+000044f0: 6d73 5f64 6573 6f74 6f60 2066 756e 6374  ms_desoto` funct",
            "+00004500: 696f 6e2c 2074 6865 2069 6e70 7574 0a20  ion, the input. ",
            "+00004510: 2020 2020 2020 2070 6172 616d 6574 6572         parameter",
            "+00004520: 7320 616e 6420 6060 7365 6c66 2e6d 6f64  s and ``self.mod",
            "+00004530: 756c 655f 7061 7261 6d65 7465 7273 6060  ule_parameters``",
            "+00004540: 2074 6f20 6361 6c63 756c 6174 6520 7468   to calculate th",
            "+00004550: 650a 2020 2020 2020 2020 6d6f 6475 6c65  e.        module",
            "+00004560: 2063 7572 7265 6e74 7320 616e 6420 7265   currents and re",
            "+00004570: 7369 7374 616e 6365 732e 0a0a 2020 2020  sistances...    ",
            "+00004580: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "+00004590: 2020 2020 2020 202d 2d2d 2d2d 2d2d 2d2d         ---------",
            "+000045a0: 2d0a 2020 2020 2020 2020 6566 6665 6374  -.        effect",
            "+000045b0: 6976 655f 6972 7261 6469 616e 6365 203a  ive_irradiance :",
            "+000045c0: 206e 756d 6572 6963 206f 7220 7475 706c   numeric or tupl",
            "+000045d0: 6520 6f66 206e 756d 6572 6963 0a20 2020  e of numeric.   ",
            "+000045e0: 2020 2020 2020 2020 2054 6865 2069 7272           The irr",
            "+000045f0: 6164 6961 6e63 6520 2857 2f6d 3229 2074  adiance (W/m2) t",
            "+00004600: 6861 7420 6973 2063 6f6e 7665 7274 6564  hat is converted",
            "+00004610: 2074 6f20 7068 6f74 6f63 7572 7265 6e74   to photocurrent",
            "+00004620: 2e0a 0a20 2020 2020 2020 2074 656d 705f  ...        temp_",
            "+00004630: 6365 6c6c 203a 2066 6c6f 6174 206f 7220  cell : float or ",
            "+00004640: 5365 7269 6573 206f 7220 7475 706c 6520  Series or tuple ",
            "+00004650: 6f66 2066 6c6f 6174 206f 7220 5365 7269  of float or Seri",
            "+00004660: 6573 0a20 2020 2020 2020 2020 2020 2054  es.            T",
            "+00004670: 6865 2061 7665 7261 6765 2063 656c 6c20  he average cell ",
            "+00004680: 7465 6d70 6572 6174 7572 6520 6f66 2063  temperature of c",
            "+00004690: 656c 6c73 2077 6974 6869 6e20 6120 6d6f  ells within a mo",
            "+000046a0: 6475 6c65 2069 6e20 432e 0a0a 2020 2020  dule in C...    ",
            "+000046b0: 2020 2020 5265 7475 726e 730a 2020 2020      Returns.    ",
            "+000046c0: 2020 2020 2d2d 2d2d 2d2d 2d0a 2020 2020      -------.    ",
            "+000046d0: 2020 2020 5365 6520 7076 7379 7374 656d      See pvsystem",
            "+000046e0: 2e63 616c 6370 6172 616d 735f 6465 736f  .calcparams_deso",
            "+000046f0: 746f 2066 6f72 2064 6574 6169 6c73 0a20  to for details. ",
            "+00004700: 2020 2020 2020 2022 2222 0a20 2020 2020         \"\"\".     ",
            "+00004710: 2020 2065 6666 6563 7469 7665 5f69 7272     effective_irr",
            "+00004720: 6164 6961 6e63 6520 3d20 7365 6c66 2e5f  adiance = self._",
            "+00004730: 7661 6c69 6461 7465 5f70 6572 5f61 7272  validate_per_arr",
            "+00004740: 6179 2865 6666 6563 7469 7665 5f69 7272  ay(effective_irr",
            "+00004750: 6164 6961 6e63 6529 0a20 2020 2020 2020  adiance).       ",
            "+00004760: 2074 656d 705f 6365 6c6c 203d 2073 656c   temp_cell = sel",
            "+00004770: 662e 5f76 616c 6964 6174 655f 7065 725f  f._validate_per_",
            "+00004780: 6172 7261 7928 7465 6d70 5f63 656c 6c29  array(temp_cell)",
            "+00004790: 0a0a 2020 2020 2020 2020 6275 696c 645f  ..        build_",
            "+000047a0: 6b77 6172 6773 203d 2066 756e 6374 6f6f  kwargs = functoo",
            "+000047b0: 6c73 2e70 6172 7469 616c 280a 2020 2020  ls.partial(.    ",
            "+000047c0: 2020 2020 2020 2020 5f62 7569 6c64 5f6b          _build_k",
            "+000047d0: 7761 7267 732c 0a20 2020 2020 2020 2020  wargs,.         ",
            "+000047e0: 2020 205b 2761 5f72 6566 272c 2027 495f     ['a_ref', 'I_",
            "+000047f0: 4c5f 7265 6627 2c20 2749 5f6f 5f72 6566  L_ref', 'I_o_ref",
            "+00004800: 272c 2027 525f 7368 5f72 6566 272c 0a20  ', 'R_sh_ref',. ",
            "+00004810: 2020 2020 2020 2020 2020 2020 2752 5f73              'R_s",
            "+00004820: 272c 2027 616c 7068 615f 7363 272c 2027  ', 'alpha_sc', '",
            "+00004830: 4567 5265 6627 2c20 2764 4567 6454 272c  EgRef', 'dEgdT',",
            "+00004840: 0a20 2020 2020 2020 2020 2020 2020 2769  .             'i",
            "+00004850: 7272 6164 5f72 6566 272c 2027 7465 6d70  rrad_ref', 'temp",
            "+00004860: 5f72 6566 275d 0a20 2020 2020 2020 2029  _ref'].        )",
            "+00004870: 0a0a 2020 2020 2020 2020 7265 7475 726e  ..        return",
            "+00004880: 2074 7570 6c65 280a 2020 2020 2020 2020   tuple(.        ",
            "+00004890: 2020 2020 6361 6c63 7061 7261 6d73 5f64      calcparams_d",
            "+000048a0: 6573 6f74 6f28 0a20 2020 2020 2020 2020  esoto(.         ",
            "+000048b0: 2020 2020 2020 2065 6666 6563 7469 7665         effective",
            "+000048c0: 5f69 7272 6164 6961 6e63 652c 2074 656d  _irradiance, tem",
            "+000048d0: 705f 6365 6c6c 2c0a 2020 2020 2020 2020  p_cell,.        ",
            "+000048e0: 2020 2020 2020 2020 2a2a 6275 696c 645f          **build_",
            "+000048f0: 6b77 6172 6773 2861 7272 6179 2e6d 6f64  kwargs(array.mod",
            "+00004900: 756c 655f 7061 7261 6d65 7465 7273 290a  ule_parameters).",
            "+00004910: 2020 2020 2020 2020 2020 2020 290a 2020              ).  ",
            "+00004920: 2020 2020 2020 2020 2020 666f 7220 6172            for ar",
            "+00004930: 7261 792c 2065 6666 6563 7469 7665 5f69  ray, effective_i",
            "+00004940: 7272 6164 6961 6e63 652c 2074 656d 705f  rradiance, temp_",
            "+00004950: 6365 6c6c 0a20 2020 2020 2020 2020 2020  cell.           ",
            "+00004960: 2069 6e20 7a69 7028 7365 6c66 2e61 7272   in zip(self.arr",
            "+00004970: 6179 732c 2065 6666 6563 7469 7665 5f69  ays, effective_i",
            "+00004980: 7272 6164 6961 6e63 652c 2074 656d 705f  rradiance, temp_",
            "+00004990: 6365 6c6c 290a 2020 2020 2020 2020 290a  cell).        ).",
            "+000049a0: 0a20 2020 2040 5f75 6e77 7261 705f 7369  .    @_unwrap_si",
            "+000049b0: 6e67 6c65 5f76 616c 7565 0a20 2020 2064  ngle_value.    d",
            "+000049c0: 6566 2063 616c 6370 6172 616d 735f 6365  ef calcparams_ce",
            "+000049d0: 6328 7365 6c66 2c20 6566 6665 6374 6976  c(self, effectiv",
            "+000049e0: 655f 6972 7261 6469 616e 6365 2c20 7465  e_irradiance, te",
            "+000049f0: 6d70 5f63 656c 6c29 3a0a 2020 2020 2020  mp_cell):.      ",
            "+00004a00: 2020 2222 220a 2020 2020 2020 2020 5573    \"\"\".        Us",
            "+00004a10: 6520 7468 6520 3a70 793a 6675 6e63 3a60  e the :py:func:`",
            "+00004a20: 6361 6c63 7061 7261 6d73 5f63 6563 6020  calcparams_cec` ",
            "+00004a30: 6675 6e63 7469 6f6e 2c20 7468 6520 696e  function, the in",
            "+00004a40: 7075 740a 2020 2020 2020 2020 7061 7261  put.        para",
            "+00004a50: 6d65 7465 7273 2061 6e64 2060 6073 656c  meters and ``sel",
            "+00004a60: 662e 6d6f 6475 6c65 5f70 6172 616d 6574  f.module_paramet",
            "+00004a70: 6572 7360 6020 746f 2063 616c 6375 6c61  ers`` to calcula",
            "+00004a80: 7465 2074 6865 0a20 2020 2020 2020 206d  te the.        m",
            "+00004a90: 6f64 756c 6520 6375 7272 656e 7473 2061  odule currents a",
            "+00004aa0: 6e64 2072 6573 6973 7461 6e63 6573 2e0a  nd resistances..",
            "+00004ab0: 0a20 2020 2020 2020 2050 6172 616d 6574  .        Paramet",
            "+00004ac0: 6572 730a 2020 2020 2020 2020 2d2d 2d2d  ers.        ----",
            "+00004ad0: 2d2d 2d2d 2d2d 0a20 2020 2020 2020 2065  ------.        e",
            "+00004ae0: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "+00004af0: 6e63 6520 3a20 6e75 6d65 7269 6320 6f72  nce : numeric or",
            "+00004b00: 2074 7570 6c65 206f 6620 6e75 6d65 7269   tuple of numeri",
            "+00004b10: 630a 2020 2020 2020 2020 2020 2020 5468  c.            Th",
            "+00004b20: 6520 6972 7261 6469 616e 6365 2028 572f  e irradiance (W/",
            "+00004b30: 6d32 2920 7468 6174 2069 7320 636f 6e76  m2) that is conv",
            "+00004b40: 6572 7465 6420 746f 2070 686f 746f 6375  erted to photocu",
            "+00004b50: 7272 656e 742e 0a0a 2020 2020 2020 2020  rrent...        ",
            "+00004b60: 7465 6d70 5f63 656c 6c20 3a20 666c 6f61  temp_cell : floa",
            "+00004b70: 7420 6f72 2053 6572 6965 7320 6f72 2074  t or Series or t",
            "+00004b80: 7570 6c65 206f 6620 666c 6f61 7420 6f72  uple of float or",
            "+00004b90: 2053 6572 6965 730a 2020 2020 2020 2020   Series.        ",
            "+00004ba0: 2020 2020 5468 6520 6176 6572 6167 6520      The average ",
            "+00004bb0: 6365 6c6c 2074 656d 7065 7261 7475 7265  cell temperature",
            "+00004bc0: 206f 6620 6365 6c6c 7320 7769 7468 696e   of cells within",
            "+00004bd0: 2061 206d 6f64 756c 6520 696e 2043 2e0a   a module in C..",
            "+00004be0: 0a20 2020 2020 2020 2052 6574 7572 6e73  .        Returns",
            "+00004bf0: 0a20 2020 2020 2020 202d 2d2d 2d2d 2d2d  .        -------",
            "+00004c00: 0a20 2020 2020 2020 2053 6565 2070 7673  .        See pvs",
            "+00004c10: 7973 7465 6d2e 6361 6c63 7061 7261 6d73  ystem.calcparams",
            "+00004c20: 5f63 6563 2066 6f72 2064 6574 6169 6c73  _cec for details",
            "+00004c30: 0a20 2020 2020 2020 2022 2222 0a20 2020  .        \"\"\".   ",
            "+00004c40: 2020 2020 2065 6666 6563 7469 7665 5f69       effective_i",
            "+00004c50: 7272 6164 6961 6e63 6520 3d20 7365 6c66  rradiance = self",
            "+00004c60: 2e5f 7661 6c69 6461 7465 5f70 6572 5f61  ._validate_per_a",
            "+00004c70: 7272 6179 2865 6666 6563 7469 7665 5f69  rray(effective_i",
            "+00004c80: 7272 6164 6961 6e63 6529 0a20 2020 2020  rradiance).     ",
            "+00004c90: 2020 2074 656d 705f 6365 6c6c 203d 2073     temp_cell = s",
            "+00004ca0: 656c 662e 5f76 616c 6964 6174 655f 7065  elf._validate_pe",
            "+00004cb0: 725f 6172 7261 7928 7465 6d70 5f63 656c  r_array(temp_cel",
            "+00004cc0: 6c29 0a0a 2020 2020 2020 2020 6275 696c  l)..        buil",
            "+00004cd0: 645f 6b77 6172 6773 203d 2066 756e 6374  d_kwargs = funct",
            "+00004ce0: 6f6f 6c73 2e70 6172 7469 616c 280a 2020  ools.partial(.  ",
            "+00004cf0: 2020 2020 2020 2020 2020 5f62 7569 6c64            _build",
            "+00004d00: 5f6b 7761 7267 732c 0a20 2020 2020 2020  _kwargs,.       ",
            "+00004d10: 2020 2020 205b 2761 5f72 6566 272c 2027       ['a_ref', '",
            "+00004d20: 495f 4c5f 7265 6627 2c20 2749 5f6f 5f72  I_L_ref', 'I_o_r",
            "+00004d30: 6566 272c 2027 525f 7368 5f72 6566 272c  ef', 'R_sh_ref',",
            "+00004d40: 0a20 2020 2020 2020 2020 2020 2020 2752  .             'R",
            "+00004d50: 5f73 272c 2027 616c 7068 615f 7363 272c  _s', 'alpha_sc',",
            "+00004d60: 2027 4164 6a75 7374 272c 2027 4567 5265   'Adjust', 'EgRe",
            "+00004d70: 6627 2c20 2764 4567 6454 272c 0a20 2020  f', 'dEgdT',.   ",
            "+00004d80: 2020 2020 2020 2020 2020 2769 7272 6164            'irrad",
            "+00004d90: 5f72 6566 272c 2027 7465 6d70 5f72 6566  _ref', 'temp_ref",
            "+00004da0: 275d 0a20 2020 2020 2020 2029 0a0a 2020  '].        )..  ",
            "+00004db0: 2020 2020 2020 7265 7475 726e 2074 7570        return tup",
            "+00004dc0: 6c65 280a 2020 2020 2020 2020 2020 2020  le(.            ",
            "+00004dd0: 6361 6c63 7061 7261 6d73 5f63 6563 280a  calcparams_cec(.",
            "+00004de0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00004df0: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "+00004e00: 616e 6365 2c20 7465 6d70 5f63 656c 6c2c  ance, temp_cell,",
            "+00004e10: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+00004e20: 202a 2a62 7569 6c64 5f6b 7761 7267 7328   **build_kwargs(",
            "+00004e30: 6172 7261 792e 6d6f 6475 6c65 5f70 6172  array.module_par",
            "+00004e40: 616d 6574 6572 7329 0a20 2020 2020 2020  ameters).       ",
            "+00004e50: 2020 2020 2029 0a20 2020 2020 2020 2020       ).         ",
            "+00004e60: 2020 2066 6f72 2061 7272 6179 2c20 6566     for array, ef",
            "+00004e70: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "+00004e80: 6365 2c20 7465 6d70 5f63 656c 6c0a 2020  ce, temp_cell.  ",
            "+00004e90: 2020 2020 2020 2020 2020 696e 207a 6970            in zip",
            "+00004ea0: 2873 656c 662e 6172 7261 7973 2c20 6566  (self.arrays, ef",
            "+00004eb0: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "+00004ec0: 6365 2c20 7465 6d70 5f63 656c 6c29 0a20  ce, temp_cell). ",
            "+00004ed0: 2020 2020 2020 2029 0a0a 2020 2020 405f         )..    @_",
            "+00004ee0: 756e 7772 6170 5f73 696e 676c 655f 7661  unwrap_single_va",
            "+00004ef0: 6c75 650a 2020 2020 6465 6620 6361 6c63  lue.    def calc",
            "+00004f00: 7061 7261 6d73 5f70 7673 7973 7428 7365  params_pvsyst(se",
            "+00004f10: 6c66 2c20 6566 6665 6374 6976 655f 6972  lf, effective_ir",
            "+00004f20: 7261 6469 616e 6365 2c20 7465 6d70 5f63  radiance, temp_c",
            "+00004f30: 656c 6c29 3a0a 2020 2020 2020 2020 2222  ell):.        \"\"",
            "+00004f40: 220a 2020 2020 2020 2020 5573 6520 7468  \".        Use th",
            "+00004f50: 6520 3a70 793a 6675 6e63 3a60 6361 6c63  e :py:func:`calc",
            "+00004f60: 7061 7261 6d73 5f70 7673 7973 7460 2066  params_pvsyst` f",
            "+00004f70: 756e 6374 696f 6e2c 2074 6865 2069 6e70  unction, the inp",
            "+00004f80: 7574 0a20 2020 2020 2020 2070 6172 616d  ut.        param",
            "+00004f90: 6574 6572 7320 616e 6420 6060 7365 6c66  eters and ``self",
            "+00004fa0: 2e6d 6f64 756c 655f 7061 7261 6d65 7465  .module_paramete",
            "+00004fb0: 7273 6060 2074 6f20 6361 6c63 756c 6174  rs`` to calculat",
            "+00004fc0: 6520 7468 650a 2020 2020 2020 2020 6d6f  e the.        mo",
            "+00004fd0: 6475 6c65 2063 7572 7265 6e74 7320 616e  dule currents an",
            "+00004fe0: 6420 7265 7369 7374 616e 6365 732e 0a0a  d resistances...",
            "+00004ff0: 2020 2020 2020 2020 5061 7261 6d65 7465          Paramete",
            "+00005000: 7273 0a20 2020 2020 2020 202d 2d2d 2d2d  rs.        -----",
            "+00005010: 2d2d 2d2d 2d0a 2020 2020 2020 2020 6566  -----.        ef",
            "+00005020: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "+00005030: 6365 203a 206e 756d 6572 6963 206f 7220  ce : numeric or ",
            "+00005040: 7475 706c 6520 6f66 206e 756d 6572 6963  tuple of numeric",
            "+00005050: 0a20 2020 2020 2020 2020 2020 2054 6865  .            The",
            "+00005060: 2069 7272 6164 6961 6e63 6520 2857 2f6d   irradiance (W/m",
            "+00005070: 3229 2074 6861 7420 6973 2063 6f6e 7665  2) that is conve",
            "+00005080: 7274 6564 2074 6f20 7068 6f74 6f63 7572  rted to photocur",
            "+00005090: 7265 6e74 2e0a 0a20 2020 2020 2020 2074  rent...        t",
            "+000050a0: 656d 705f 6365 6c6c 203a 2066 6c6f 6174  emp_cell : float",
            "+000050b0: 206f 7220 5365 7269 6573 206f 7220 7475   or Series or tu",
            "+000050c0: 706c 6520 6f66 2066 6c6f 6174 206f 7220  ple of float or ",
            "+000050d0: 5365 7269 6573 0a20 2020 2020 2020 2020  Series.         ",
            "+000050e0: 2020 2054 6865 2061 7665 7261 6765 2063     The average c",
            "+000050f0: 656c 6c20 7465 6d70 6572 6174 7572 6520  ell temperature ",
            "+00005100: 6f66 2063 656c 6c73 2077 6974 6869 6e20  of cells within ",
            "+00005110: 6120 6d6f 6475 6c65 2069 6e20 432e 0a0a  a module in C...",
            "+00005120: 2020 2020 2020 2020 5265 7475 726e 730a          Returns.",
            "+00005130: 2020 2020 2020 2020 2d2d 2d2d 2d2d 2d0a          -------.",
            "+00005140: 2020 2020 2020 2020 5365 6520 7076 7379          See pvsy",
            "+00005150: 7374 656d 2e63 616c 6370 6172 616d 735f  stem.calcparams_",
            "+00005160: 7076 7379 7374 2066 6f72 2064 6574 6169  pvsyst for detai",
            "+00005170: 6c73 0a20 2020 2020 2020 2022 2222 0a20  ls.        \"\"\". ",
            "+00005180: 2020 2020 2020 2065 6666 6563 7469 7665         effective",
            "+00005190: 5f69 7272 6164 6961 6e63 6520 3d20 7365  _irradiance = se",
            "+000051a0: 6c66 2e5f 7661 6c69 6461 7465 5f70 6572  lf._validate_per",
            "+000051b0: 5f61 7272 6179 2865 6666 6563 7469 7665  _array(effective",
            "+000051c0: 5f69 7272 6164 6961 6e63 6529 0a20 2020  _irradiance).   ",
            "+000051d0: 2020 2020 2074 656d 705f 6365 6c6c 203d       temp_cell =",
            "+000051e0: 2073 656c 662e 5f76 616c 6964 6174 655f   self._validate_",
            "+000051f0: 7065 725f 6172 7261 7928 7465 6d70 5f63  per_array(temp_c",
            "+00005200: 656c 6c29 0a0a 2020 2020 2020 2020 6275  ell)..        bu",
            "+00005210: 696c 645f 6b77 6172 6773 203d 2066 756e  ild_kwargs = fun",
            "+00005220: 6374 6f6f 6c73 2e70 6172 7469 616c 280a  ctools.partial(.",
            "+00005230: 2020 2020 2020 2020 2020 2020 5f62 7569              _bui",
            "+00005240: 6c64 5f6b 7761 7267 732c 0a20 2020 2020  ld_kwargs,.     ",
            "+00005250: 2020 2020 2020 205b 2767 616d 6d61 5f72         ['gamma_r",
            "+00005260: 6566 272c 2027 6d75 5f67 616d 6d61 272c  ef', 'mu_gamma',",
            "+00005270: 2027 495f 4c5f 7265 6627 2c20 2749 5f6f   'I_L_ref', 'I_o",
            "+00005280: 5f72 6566 272c 0a20 2020 2020 2020 2020  _ref',.         ",
            "+00005290: 2020 2020 2752 5f73 685f 7265 6627 2c20      'R_sh_ref', ",
            "+000052a0: 2752 5f73 685f 3027 2c20 2752 5f73 685f  'R_sh_0', 'R_sh_",
            "+000052b0: 6578 7027 2c0a 2020 2020 2020 2020 2020  exp',.          ",
            "+000052c0: 2020 2027 525f 7327 2c20 2761 6c70 6861     'R_s', 'alpha",
            "+000052d0: 5f73 6327 2c20 2745 6752 6566 272c 0a20  _sc', 'EgRef',. ",
            "+000052e0: 2020 2020 2020 2020 2020 2020 2769 7272              'irr",
            "+000052f0: 6164 5f72 6566 272c 2027 7465 6d70 5f72  ad_ref', 'temp_r",
            "+00005300: 6566 272c 0a20 2020 2020 2020 2020 2020  ef',.           ",
            "+00005310: 2020 2763 656c 6c73 5f69 6e5f 7365 7269    'cells_in_seri",
            "+00005320: 6573 275d 0a20 2020 2020 2020 2029 0a0a  es'].        )..",
            "+00005330: 2020 2020 2020 2020 7265 7475 726e 2074          return t",
            "+00005340: 7570 6c65 280a 2020 2020 2020 2020 2020  uple(.          ",
            "+00005350: 2020 6361 6c63 7061 7261 6d73 5f70 7673    calcparams_pvs",
            "+00005360: 7973 7428 0a20 2020 2020 2020 2020 2020  yst(.           ",
            "+00005370: 2020 2020 2065 6666 6563 7469 7665 5f69       effective_i",
            "+00005380: 7272 6164 6961 6e63 652c 2074 656d 705f  rradiance, temp_",
            "+00005390: 6365 6c6c 2c0a 2020 2020 2020 2020 2020  cell,.          ",
            "+000053a0: 2020 2020 2020 2a2a 6275 696c 645f 6b77        **build_kw",
            "+000053b0: 6172 6773 2861 7272 6179 2e6d 6f64 756c  args(array.modul",
            "+000053c0: 655f 7061 7261 6d65 7465 7273 290a 2020  e_parameters).  ",
            "+000053d0: 2020 2020 2020 2020 2020 290a 2020 2020            ).    ",
            "+000053e0: 2020 2020 2020 2020 666f 7220 6172 7261          for arra",
            "+000053f0: 792c 2065 6666 6563 7469 7665 5f69 7272  y, effective_irr",
            "+00005400: 6164 6961 6e63 652c 2074 656d 705f 6365  adiance, temp_ce",
            "+00005410: 6c6c 0a20 2020 2020 2020 2020 2020 2069  ll.            i",
            "+00005420: 6e20 7a69 7028 7365 6c66 2e61 7272 6179  n zip(self.array",
            "+00005430: 732c 2065 6666 6563 7469 7665 5f69 7272  s, effective_irr",
            "+00005440: 6164 6961 6e63 652c 2074 656d 705f 6365  adiance, temp_ce",
            "+00005450: 6c6c 290a 2020 2020 2020 2020 290a 0a20  ll).        ).. ",
            "+00005460: 2020 2040 5f75 6e77 7261 705f 7369 6e67     @_unwrap_sing",
            "+00005470: 6c65 5f76 616c 7565 0a20 2020 2064 6566  le_value.    def",
            "+00005480: 2073 6170 6d28 7365 6c66 2c20 6566 6665   sapm(self, effe",
            "+00005490: 6374 6976 655f 6972 7261 6469 616e 6365  ctive_irradiance",
            "+000054a0: 2c20 7465 6d70 5f63 656c 6c29 3a0a 2020  , temp_cell):.  ",
            "+000054b0: 2020 2020 2020 2222 220a 2020 2020 2020        \"\"\".      ",
            "+000054c0: 2020 5573 6520 7468 6520 3a70 793a 6675    Use the :py:fu",
            "+000054d0: 6e63 3a60 7361 706d 6020 6675 6e63 7469  nc:`sapm` functi",
            "+000054e0: 6f6e 2c20 7468 6520 696e 7075 7420 7061  on, the input pa",
            "+000054f0: 7261 6d65 7465 7273 2c0a 2020 2020 2020  rameters,.      ",
            "+00005500: 2020 616e 6420 6060 7365 6c66 2e6d 6f64    and ``self.mod",
            "+00005510: 756c 655f 7061 7261 6d65 7465 7273 6060  ule_parameters``",
            "+00005520: 2074 6f20 6361 6c63 756c 6174 650a 2020   to calculate.  ",
            "+00005530: 2020 2020 2020 566f 632c 2049 7363 2c20        Voc, Isc, ",
            "+00005540: 4978 2c20 4978 782c 2056 6d70 2c20 616e  Ix, Ixx, Vmp, an",
            "+00005550: 6420 496d 702e 0a0a 2020 2020 2020 2020  d Imp...        ",
            "+00005560: 5061 7261 6d65 7465 7273 0a20 2020 2020  Parameters.     ",
            "+00005570: 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020     ----------.  ",
            "+00005580: 2020 2020 2020 6566 6665 6374 6976 655f        effective_",
            "+00005590: 6972 7261 6469 616e 6365 203a 206e 756d  irradiance : num",
            "+000055a0: 6572 6963 206f 7220 7475 706c 6520 6f66  eric or tuple of",
            "+000055b0: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "+000055c0: 2020 2020 2054 6865 2069 7272 6164 6961       The irradia",
            "+000055d0: 6e63 6520 2857 2f6d 3229 2074 6861 7420  nce (W/m2) that ",
            "+000055e0: 6973 2063 6f6e 7665 7274 6564 2074 6f20  is converted to ",
            "+000055f0: 7068 6f74 6f63 7572 7265 6e74 2e0a 0a20  photocurrent... ",
            "+00005600: 2020 2020 2020 2074 656d 705f 6365 6c6c         temp_cell",
            "+00005610: 203a 2066 6c6f 6174 206f 7220 5365 7269   : float or Seri",
            "+00005620: 6573 206f 7220 7475 706c 6520 6f66 2066  es or tuple of f",
            "+00005630: 6c6f 6174 206f 7220 5365 7269 6573 0a20  loat or Series. ",
            "+00005640: 2020 2020 2020 2020 2020 2054 6865 2061             The a",
            "+00005650: 7665 7261 6765 2063 656c 6c20 7465 6d70  verage cell temp",
            "+00005660: 6572 6174 7572 6520 6f66 2063 656c 6c73  erature of cells",
            "+00005670: 2077 6974 6869 6e20 6120 6d6f 6475 6c65   within a module",
            "+00005680: 2069 6e20 432e 0a0a 2020 2020 2020 2020   in C...        ",
            "+00005690: 5265 7475 726e 730a 2020 2020 2020 2020  Returns.        ",
            "+000056a0: 2d2d 2d2d 2d2d 2d0a 2020 2020 2020 2020  -------.        ",
            "+000056b0: 5365 6520 7076 7379 7374 656d 2e73 6170  See pvsystem.sap",
            "+000056c0: 6d20 666f 7220 6465 7461 696c 730a 2020  m for details.  ",
            "+000056d0: 2020 2020 2020 2222 220a 2020 2020 2020        \"\"\".      ",
            "+000056e0: 2020 6566 6665 6374 6976 655f 6972 7261    effective_irra",
            "+000056f0: 6469 616e 6365 203d 2073 656c 662e 5f76  diance = self._v",
            "+00005700: 616c 6964 6174 655f 7065 725f 6172 7261  alidate_per_arra",
            "+00005710: 7928 6566 6665 6374 6976 655f 6972 7261  y(effective_irra",
            "+00005720: 6469 616e 6365 290a 2020 2020 2020 2020  diance).        ",
            "+00005730: 7465 6d70 5f63 656c 6c20 3d20 7365 6c66  temp_cell = self",
            "+00005740: 2e5f 7661 6c69 6461 7465 5f70 6572 5f61  ._validate_per_a",
            "+00005750: 7272 6179 2874 656d 705f 6365 6c6c 290a  rray(temp_cell).",
            "+00005760: 0a20 2020 2020 2020 2072 6574 7572 6e20  .        return ",
            "+00005770: 7475 706c 6528 0a20 2020 2020 2020 2020  tuple(.         ",
            "+00005780: 2020 2073 6170 6d28 6566 6665 6374 6976     sapm(effectiv",
            "+00005790: 655f 6972 7261 6469 616e 6365 2c20 7465  e_irradiance, te",
            "+000057a0: 6d70 5f63 656c 6c2c 2061 7272 6179 2e6d  mp_cell, array.m",
            "+000057b0: 6f64 756c 655f 7061 7261 6d65 7465 7273  odule_parameters",
            "+000057c0: 290a 2020 2020 2020 2020 2020 2020 666f  ).            fo",
            "+000057d0: 7220 6172 7261 792c 2065 6666 6563 7469  r array, effecti",
            "+000057e0: 7665 5f69 7272 6164 6961 6e63 652c 2074  ve_irradiance, t",
            "+000057f0: 656d 705f 6365 6c6c 0a20 2020 2020 2020  emp_cell.       ",
            "+00005800: 2020 2020 2069 6e20 7a69 7028 7365 6c66       in zip(self",
            "+00005810: 2e61 7272 6179 732c 2065 6666 6563 7469  .arrays, effecti",
            "+00005820: 7665 5f69 7272 6164 6961 6e63 652c 2074  ve_irradiance, t",
            "+00005830: 656d 705f 6365 6c6c 290a 2020 2020 2020  emp_cell).      ",
            "+00005840: 2020 290a 0a20 2020 2040 5f75 6e77 7261    )..    @_unwra",
            "+00005850: 705f 7369 6e67 6c65 5f76 616c 7565 0a20  p_single_value. ",
            "+00005860: 2020 2064 6566 2073 6170 6d5f 7370 6563     def sapm_spec",
            "+00005870: 7472 616c 5f6c 6f73 7328 7365 6c66 2c20  tral_loss(self, ",
            "+00005880: 6169 726d 6173 735f 6162 736f 6c75 7465  airmass_absolute",
            "+00005890: 293a 0a20 2020 2020 2020 2022 2222 0a20  ):.        \"\"\". ",
            "+000058a0: 2020 2020 2020 2055 7365 2074 6865 203a         Use the :",
            "+000058b0: 7079 3a66 756e 633a 6070 766c 6962 2e73  py:func:`pvlib.s",
            "+000058c0: 7065 6374 7275 6d2e 7370 6563 7472 616c  pectrum.spectral",
            "+000058d0: 5f66 6163 746f 725f 7361 706d 6020 6675  _factor_sapm` fu",
            "+000058e0: 6e63 7469 6f6e 2c0a 2020 2020 2020 2020  nction,.        ",
            "+000058f0: 7468 6520 696e 7075 7420 7061 7261 6d65  the input parame",
            "+00005900: 7465 7273 2c20 616e 6420 6060 7365 6c66  ters, and ``self",
            "+00005910: 2e6d 6f64 756c 655f 7061 7261 6d65 7465  .module_paramete",
            "+00005920: 7273 6060 2074 6f20 6361 6c63 756c 6174  rs`` to calculat",
            "+00005930: 6520 4631 2e0a 0a20 2020 2020 2020 2050  e F1...        P",
            "+00005940: 6172 616d 6574 6572 730a 2020 2020 2020  arameters.      ",
            "+00005950: 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020    ----------.   ",
            "+00005960: 2020 2020 2061 6972 6d61 7373 5f61 6273       airmass_abs",
            "+00005970: 6f6c 7574 6520 3a20 6e75 6d65 7269 630a  olute : numeric.",
            "+00005980: 2020 2020 2020 2020 2020 2020 4162 736f              Abso",
            "+00005990: 6c75 7465 2061 6972 6d61 7373 2e0a 0a20  lute airmass... ",
            "+000059a0: 2020 2020 2020 2052 6574 7572 6e73 0a20         Returns. ",
            "+000059b0: 2020 2020 2020 202d 2d2d 2d2d 2d2d 0a20         -------. ",
            "+000059c0: 2020 2020 2020 2046 3120 3a20 6e75 6d65         F1 : nume",
            "+000059d0: 7269 6320 6f72 2074 7570 6c65 206f 6620  ric or tuple of ",
            "+000059e0: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "+000059f0: 2020 2020 5468 6520 5341 504d 2073 7065      The SAPM spe",
            "+00005a00: 6374 7261 6c20 6c6f 7373 2063 6f65 6666  ctral loss coeff",
            "+00005a10: 6963 6965 6e74 2e0a 2020 2020 2020 2020  icient..        ",
            "+00005a20: 2222 220a 2020 2020 2020 2020 7265 7475  \"\"\".        retu",
            "+00005a30: 726e 2074 7570 6c65 280a 2020 2020 2020  rn tuple(.      ",
            "+00005a40: 2020 2020 2020 7370 6563 7472 756d 2e73        spectrum.s",
            "+00005a50: 7065 6374 7261 6c5f 6661 6374 6f72 5f73  pectral_factor_s",
            "+00005a60: 6170 6d28 6169 726d 6173 735f 6162 736f  apm(airmass_abso",
            "+00005a70: 6c75 7465 2c0a 2020 2020 2020 2020 2020  lute,.          ",
            "+00005a80: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00005a90: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00005aa0: 6172 7261 792e 6d6f 6475 6c65 5f70 6172  array.module_par",
            "+00005ab0: 616d 6574 6572 7329 0a20 2020 2020 2020  ameters).       ",
            "+00005ac0: 2020 2020 2066 6f72 2061 7272 6179 2069       for array i",
            "+00005ad0: 6e20 7365 6c66 2e61 7272 6179 730a 2020  n self.arrays.  ",
            "+00005ae0: 2020 2020 2020 290a 0a20 2020 2040 5f75        )..    @_u",
            "+00005af0: 6e77 7261 705f 7369 6e67 6c65 5f76 616c  nwrap_single_val",
            "+00005b00: 7565 0a20 2020 2064 6566 2073 6170 6d5f  ue.    def sapm_",
            "+00005b10: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "+00005b20: 616e 6365 2873 656c 662c 2070 6f61 5f64  ance(self, poa_d",
            "+00005b30: 6972 6563 742c 2070 6f61 5f64 6966 6675  irect, poa_diffu",
            "+00005b40: 7365 2c0a 2020 2020 2020 2020 2020 2020  se,.            ",
            "+00005b50: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00005b60: 2020 2020 2020 6169 726d 6173 735f 6162        airmass_ab",
            "+00005b70: 736f 6c75 7465 2c20 616f 692c 0a20 2020  solute, aoi,.   ",
            "+00005b80: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00005b90: 2020 2020 2020 2020 2020 2020 2020 2072                 r",
            "+00005ba0: 6566 6572 656e 6365 5f69 7272 6164 6961  eference_irradia",
            "+00005bb0: 6e63 653d 3130 3030 293a 0a20 2020 2020  nce=1000):.     ",
            "+00005bc0: 2020 2022 2222 0a20 2020 2020 2020 2055     \"\"\".        U",
            "+00005bd0: 7365 2074 6865 203a 7079 3a66 756e 633a  se the :py:func:",
            "+00005be0: 6073 6170 6d5f 6566 6665 6374 6976 655f  `sapm_effective_",
            "+00005bf0: 6972 7261 6469 616e 6365 6020 6675 6e63  irradiance` func",
            "+00005c00: 7469 6f6e 2c20 7468 6520 696e 7075 740a  tion, the input.",
            "+00005c10: 2020 2020 2020 2020 7061 7261 6d65 7465          paramete",
            "+00005c20: 7273 2c20 616e 6420 6060 7365 6c66 2e6d  rs, and ``self.m",
            "+00005c30: 6f64 756c 655f 7061 7261 6d65 7465 7273  odule_parameters",
            "+00005c40: 6060 2074 6f20 6361 6c63 756c 6174 650a  `` to calculate.",
            "+00005c50: 2020 2020 2020 2020 6566 6665 6374 6976          effectiv",
            "+00005c60: 6520 6972 7261 6469 616e 6365 2e0a 0a20  e irradiance... ",
            "+00005c70: 2020 2020 2020 2050 6172 616d 6574 6572         Parameter",
            "+00005c80: 730a 2020 2020 2020 2020 2d2d 2d2d 2d2d  s.        ------",
            "+00005c90: 2d2d 2d2d 0a20 2020 2020 2020 2070 6f61  ----.        poa",
            "+00005ca0: 5f64 6972 6563 7420 3a20 6e75 6d65 7269  _direct : numeri",
            "+00005cb0: 6320 6f72 2074 7570 6c65 206f 6620 6e75  c or tuple of nu",
            "+00005cc0: 6d65 7269 630a 2020 2020 2020 2020 2020  meric.          ",
            "+00005cd0: 2020 5468 6520 6469 7265 6374 2069 7272    The direct irr",
            "+00005ce0: 6164 6961 6e63 6520 696e 6369 6465 6e74  adiance incident",
            "+00005cf0: 2075 706f 6e20 7468 6520 6d6f 6475 6c65   upon the module",
            "+00005d00: 2e20 205b 572f 6d32 5d0a 0a20 2020 2020  .  [W/m2]..     ",
            "+00005d10: 2020 2070 6f61 5f64 6966 6675 7365 203a     poa_diffuse :",
            "+00005d20: 206e 756d 6572 6963 206f 7220 7475 706c   numeric or tupl",
            "+00005d30: 6520 6f66 206e 756d 6572 6963 0a20 2020  e of numeric.   ",
            "+00005d40: 2020 2020 2020 2020 2054 6865 2064 6966           The dif",
            "+00005d50: 6675 7365 2069 7272 6164 6961 6e63 6520  fuse irradiance ",
            "+00005d60: 696e 6369 6465 6e74 206f 6e20 6d6f 6475  incident on modu",
            "+00005d70: 6c65 2e20 205b 572f 6d32 5d0a 0a20 2020  le.  [W/m2]..   ",
            "+00005d80: 2020 2020 2061 6972 6d61 7373 5f61 6273       airmass_abs",
            "+00005d90: 6f6c 7574 6520 3a20 6e75 6d65 7269 630a  olute : numeric.",
            "+00005da0: 2020 2020 2020 2020 2020 2020 4162 736f              Abso",
            "+00005db0: 6c75 7465 2061 6972 6d61 7373 2e20 5b75  lute airmass. [u",
            "+00005dc0: 6e69 746c 6573 735d 0a0a 2020 2020 2020  nitless]..      ",
            "+00005dd0: 2020 616f 6920 3a20 6e75 6d65 7269 6320    aoi : numeric ",
            "+00005de0: 6f72 2074 7570 6c65 206f 6620 6e75 6d65  or tuple of nume",
            "+00005df0: 7269 630a 2020 2020 2020 2020 2020 2020  ric.            ",
            "+00005e00: 416e 676c 6520 6f66 2069 6e63 6964 656e  Angle of inciden",
            "+00005e10: 6365 2e20 5b64 6567 7265 6573 5d0a 0a20  ce. [degrees].. ",
            "+00005e20: 2020 2020 2020 2052 6574 7572 6e73 0a20         Returns. ",
            "+00005e30: 2020 2020 2020 202d 2d2d 2d2d 2d2d 0a20         -------. ",
            "+00005e40: 2020 2020 2020 2065 6666 6563 7469 7665         effective",
            "+00005e50: 5f69 7272 6164 6961 6e63 6520 3a20 6e75  _irradiance : nu",
            "+00005e60: 6d65 7269 6320 6f72 2074 7570 6c65 206f  meric or tuple o",
            "+00005e70: 6620 6e75 6d65 7269 630a 2020 2020 2020  f numeric.      ",
            "+00005e80: 2020 2020 2020 5468 6520 5341 504d 2065        The SAPM e",
            "+00005e90: 6666 6563 7469 7665 2069 7272 6164 6961  ffective irradia",
            "+00005ea0: 6e63 652e 205b 572f 6d32 5d0a 2020 2020  nce. [W/m2].    ",
            "+00005eb0: 2020 2020 2222 220a 2020 2020 2020 2020      \"\"\".        ",
            "+00005ec0: 706f 615f 6469 7265 6374 203d 2073 656c  poa_direct = sel",
            "+00005ed0: 662e 5f76 616c 6964 6174 655f 7065 725f  f._validate_per_",
            "+00005ee0: 6172 7261 7928 706f 615f 6469 7265 6374  array(poa_direct",
            "+00005ef0: 290a 2020 2020 2020 2020 706f 615f 6469  ).        poa_di",
            "+00005f00: 6666 7573 6520 3d20 7365 6c66 2e5f 7661  ffuse = self._va",
            "+00005f10: 6c69 6461 7465 5f70 6572 5f61 7272 6179  lidate_per_array",
            "+00005f20: 2870 6f61 5f64 6966 6675 7365 290a 2020  (poa_diffuse).  ",
            "+00005f30: 2020 2020 2020 616f 6920 3d20 7365 6c66        aoi = self",
            "+00005f40: 2e5f 7661 6c69 6461 7465 5f70 6572 5f61  ._validate_per_a",
            "+00005f50: 7272 6179 2861 6f69 290a 2020 2020 2020  rray(aoi).      ",
            "+00005f60: 2020 7265 7475 726e 2074 7570 6c65 280a    return tuple(.",
            "+00005f70: 2020 2020 2020 2020 2020 2020 7361 706d              sapm",
            "+00005f80: 5f65 6666 6563 7469 7665 5f69 7272 6164  _effective_irrad",
            "+00005f90: 6961 6e63 6528 0a20 2020 2020 2020 2020  iance(.         ",
            "+00005fa0: 2020 2020 2020 2070 6f61 5f64 6972 6563         poa_direc",
            "+00005fb0: 742c 2070 6f61 5f64 6966 6675 7365 2c20  t, poa_diffuse, ",
            "+00005fc0: 6169 726d 6173 735f 6162 736f 6c75 7465  airmass_absolute",
            "+00005fd0: 2c20 616f 692c 0a20 2020 2020 2020 2020  , aoi,.         ",
            "+00005fe0: 2020 2020 2020 2061 7272 6179 2e6d 6f64         array.mod",
            "+00005ff0: 756c 655f 7061 7261 6d65 7465 7273 290a  ule_parameters).",
            "+00006000: 2020 2020 2020 2020 2020 2020 666f 7220              for ",
            "+00006010: 6172 7261 792c 2070 6f61 5f64 6972 6563  array, poa_direc",
            "+00006020: 742c 2070 6f61 5f64 6966 6675 7365 2c20  t, poa_diffuse, ",
            "+00006030: 616f 690a 2020 2020 2020 2020 2020 2020  aoi.            ",
            "+00006040: 696e 207a 6970 2873 656c 662e 6172 7261  in zip(self.arra",
            "+00006050: 7973 2c20 706f 615f 6469 7265 6374 2c20  ys, poa_direct, ",
            "+00006060: 706f 615f 6469 6666 7573 652c 2061 6f69  poa_diffuse, aoi",
            "+00006070: 290a 2020 2020 2020 2020 290a 0a20 2020  ).        )..   ",
            "+00006080: 2040 5f75 6e77 7261 705f 7369 6e67 6c65   @_unwrap_single",
            "+00006090: 5f76 616c 7565 0a20 2020 2064 6566 2066  _value.    def f",
            "+000060a0: 6972 7374 5f73 6f6c 6172 5f73 7065 6374  irst_solar_spect",
            "+000060b0: 7261 6c5f 6c6f 7373 2873 656c 662c 2070  ral_loss(self, p",
            "+000060c0: 772c 2061 6972 6d61 7373 5f61 6273 6f6c  w, airmass_absol",
            "+000060d0: 7574 6529 3a0a 2020 2020 2020 2020 2222  ute):.        \"\"",
            "+000060e0: 220a 2020 2020 2020 2020 5573 6520 3a70  \".        Use :p",
            "+000060f0: 793a 6675 6e63 3a60 7076 6c69 622e 7370  y:func:`pvlib.sp",
            "+00006100: 6563 7472 756d 2e73 7065 6374 7261 6c5f  ectrum.spectral_",
            "+00006110: 6661 6374 6f72 5f66 6972 7374 736f 6c61  factor_firstsola",
            "+00006120: 7260 2074 6f0a 2020 2020 2020 2020 6361  r` to.        ca",
            "+00006130: 6c63 756c 6174 6520 7468 6520 7370 6563  lculate the spec",
            "+00006140: 7472 616c 206c 6f73 7320 6d6f 6469 6669  tral loss modifi",
            "+00006150: 6572 2e20 5468 6520 6d6f 6465 6c20 636f  er. The model co",
            "+00006160: 6566 6669 6369 656e 7473 2061 7265 0a20  efficients are. ",
            "+00006170: 2020 2020 2020 2073 7065 6369 6669 6320         specific ",
            "+00006180: 746f 2074 6865 206d 6f64 756c 6527 7320  to the module's ",
            "+00006190: 6365 6c6c 2074 7970 652c 2061 6e64 2061  cell type, and a",
            "+000061a0: 7265 2064 6574 6572 6d69 6e65 6420 6279  re determined by",
            "+000061b0: 2073 6561 7263 6869 6e67 0a20 2020 2020   searching.     ",
            "+000061c0: 2020 2066 6f72 206f 6e65 206f 6620 7468     for one of th",
            "+000061d0: 6520 666f 6c6c 6f77 696e 6720 6b65 7973  e following keys",
            "+000061e0: 2069 6e20 7365 6c66 2e6d 6f64 756c 655f   in self.module_",
            "+000061f0: 7061 7261 6d65 7465 7273 2028 696e 206f  parameters (in o",
            "+00006200: 7264 6572 293a 0a0a 2020 2020 2020 2020  rder):..        ",
            "+00006210: 2d20 2766 6972 7374 5f73 6f6c 6172 5f73  - 'first_solar_s",
            "+00006220: 7065 6374 7261 6c5f 636f 6566 6669 6369  pectral_coeffici",
            "+00006230: 656e 7473 2720 2875 7365 722d 7375 7070  ents' (user-supp",
            "+00006240: 6c69 6564 2063 6f65 6666 6963 6965 6e74  lied coefficient",
            "+00006250: 7329 0a20 2020 2020 2020 202d 2027 5465  s).        - 'Te",
            "+00006260: 6368 6e6f 6c6f 6779 2720 2d20 6120 7374  chnology' - a st",
            "+00006270: 7269 6e67 2064 6573 6372 6962 696e 6720  ring describing ",
            "+00006280: 7468 6520 6365 6c6c 2074 7970 652c 2063  the cell type, c",
            "+00006290: 616e 2062 6520 7265 6164 2066 726f 6d0a  an be read from.",
            "+000062a0: 2020 2020 2020 2020 2020 7468 6520 4345            the CE",
            "+000062b0: 4320 6d6f 6475 6c65 2070 6172 616d 6574  C module paramet",
            "+000062c0: 6572 2064 6174 6162 6173 650a 2020 2020  er database.    ",
            "+000062d0: 2020 2020 2d20 274d 6174 6572 6961 6c27      - 'Material'",
            "+000062e0: 202d 2061 2073 7472 696e 6720 6465 7363   - a string desc",
            "+000062f0: 7269 6269 6e67 2074 6865 2063 656c 6c20  ribing the cell ",
            "+00006300: 7479 7065 2c20 6361 6e20 6265 2072 6561  type, can be rea",
            "+00006310: 6420 6672 6f6d 0a20 2020 2020 2020 2020  d from.         ",
            "+00006320: 2074 6865 2053 616e 6469 6120 6d6f 6475   the Sandia modu",
            "+00006330: 6c65 2064 6174 6162 6173 652e 0a0a 2020  le database...  ",
            "+00006340: 2020 2020 2020 5061 7261 6d65 7465 7273        Parameters",
            "+00006350: 0a20 2020 2020 2020 202d 2d2d 2d2d 2d2d  .        -------",
            "+00006360: 2d2d 2d0a 2020 2020 2020 2020 7077 203a  ---.        pw :",
            "+00006370: 2061 7272 6179 2d6c 696b 650a 2020 2020   array-like.    ",
            "+00006380: 2020 2020 2020 2020 6174 6d6f 7370 6865          atmosphe",
            "+00006390: 7269 6320 7072 6563 6970 6974 6162 6c65  ric precipitable",
            "+000063a0: 2077 6174 6572 2028 636d 292e 0a0a 2020   water (cm)...  ",
            "+000063b0: 2020 2020 2020 6169 726d 6173 735f 6162        airmass_ab",
            "+000063c0: 736f 6c75 7465 203a 2061 7272 6179 2d6c  solute : array-l",
            "+000063d0: 696b 650a 2020 2020 2020 2020 2020 2020  ike.            ",
            "+000063e0: 6162 736f 6c75 7465 2028 7072 6573 7375  absolute (pressu",
            "+000063f0: 7265 2063 6f72 7265 6374 6564 2920 6169  re corrected) ai",
            "+00006400: 726d 6173 732e 0a0a 2020 2020 2020 2020  rmass...        ",
            "+00006410: 5265 7475 726e 730a 2020 2020 2020 2020  Returns.        ",
            "+00006420: 2d2d 2d2d 2d2d 2d0a 2020 2020 2020 2020  -------.        ",
            "+00006430: 6d6f 6469 6669 6572 3a20 6172 7261 792d  modifier: array-",
            "+00006440: 6c69 6b65 206f 7220 7475 706c 6520 6f66  like or tuple of",
            "+00006450: 2061 7272 6179 2d6c 696b 650a 2020 2020   array-like.    ",
            "+00006460: 2020 2020 2020 2020 7370 6563 7472 616c          spectral",
            "+00006470: 206d 6973 6d61 7463 6820 6661 6374 6f72   mismatch factor",
            "+00006480: 2028 756e 6974 6c65 7373 2920 7768 6963   (unitless) whic",
            "+00006490: 6820 6361 6e20 6265 206d 756c 7469 706c  h can be multipl",
            "+000064a0: 6965 640a 2020 2020 2020 2020 2020 2020  ied.            ",
            "+000064b0: 7769 7468 2062 726f 6164 6261 6e64 2069  with broadband i",
            "+000064c0: 7272 6164 6961 6e63 6520 7265 6163 6869  rradiance reachi",
            "+000064d0: 6e67 2061 206d 6f64 756c 6527 7320 6365  ng a module's ce",
            "+000064e0: 6c6c 7320 746f 2065 7374 696d 6174 650a  lls to estimate.",
            "+000064f0: 2020 2020 2020 2020 2020 2020 6566 6665              effe",
            "+00006500: 6374 6976 6520 6972 7261 6469 616e 6365  ctive irradiance",
            "+00006510: 2c20 692e 652e 2c20 7468 6520 6972 7261  , i.e., the irra",
            "+00006520: 6469 616e 6365 2074 6861 7420 6973 2063  diance that is c",
            "+00006530: 6f6e 7665 7274 6564 2074 6f0a 2020 2020  onverted to.    ",
            "+00006540: 2020 2020 2020 2020 656c 6563 7472 6963          electric",
            "+00006550: 616c 2063 7572 7265 6e74 2e0a 2020 2020  al current..    ",
            "+00006560: 2020 2020 2222 220a 2020 2020 2020 2020      \"\"\".        ",
            "+00006570: 7077 203d 2073 656c 662e 5f76 616c 6964  pw = self._valid",
            "+00006580: 6174 655f 7065 725f 6172 7261 7928 7077  ate_per_array(pw",
            "+00006590: 2c20 7379 7374 656d 5f77 6964 653d 5472  , system_wide=Tr",
            "+000065a0: 7565 290a 0a20 2020 2020 2020 2064 6566  ue)..        def",
            "+000065b0: 205f 7370 6563 7472 616c 5f63 6f72 7265   _spectral_corre",
            "+000065c0: 6374 696f 6e28 6172 7261 792c 2070 7729  ction(array, pw)",
            "+000065d0: 3a0a 2020 2020 2020 2020 2020 2020 6966  :.            if",
            "+000065e0: 2027 6669 7273 745f 736f 6c61 725f 7370   'first_solar_sp",
            "+000065f0: 6563 7472 616c 5f63 6f65 6666 6963 6965  ectral_coefficie",
            "+00006600: 6e74 7327 2069 6e20 5c0a 2020 2020 2020  nts' in \\.      ",
            "+00006610: 2020 2020 2020 2020 2020 2020 2020 6172                ar",
            "+00006620: 7261 792e 6d6f 6475 6c65 5f70 6172 616d  ray.module_param",
            "+00006630: 6574 6572 732e 6b65 7973 2829 3a0a 2020  eters.keys():.  ",
            "+00006640: 2020 2020 2020 2020 2020 2020 2020 636f                co",
            "+00006650: 6566 6669 6369 656e 7473 203d 205c 0a20  efficients = \\. ",
            "+00006660: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00006670: 2020 2061 7272 6179 2e6d 6f64 756c 655f     array.module_",
            "+00006680: 7061 7261 6d65 7465 7273 5b0a 2020 2020  parameters[.    ",
            "+00006690: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000066a0: 2020 2020 2766 6972 7374 5f73 6f6c 6172      'first_solar",
            "+000066b0: 5f73 7065 6374 7261 6c5f 636f 6566 6669  _spectral_coeffi",
            "+000066c0: 6369 656e 7473 270a 2020 2020 2020 2020  cients'.        ",
            "+000066d0: 2020 2020 2020 2020 2020 2020 5d0a 2020              ].  ",
            "+000066e0: 2020 2020 2020 2020 2020 2020 2020 6d6f                mo",
            "+000066f0: 6475 6c65 5f74 7970 6520 3d20 4e6f 6e65  dule_type = None",
            "+00006700: 0a20 2020 2020 2020 2020 2020 2065 6c73  .            els",
            "+00006710: 653a 0a20 2020 2020 2020 2020 2020 2020  e:.             ",
            "+00006720: 2020 206d 6f64 756c 655f 7479 7065 203d     module_type =",
            "+00006730: 2061 7272 6179 2e5f 696e 6665 725f 6365   array._infer_ce",
            "+00006740: 6c6c 5f74 7970 6528 290a 2020 2020 2020  ll_type().      ",
            "+00006750: 2020 2020 2020 2020 2020 636f 6566 6669            coeffi",
            "+00006760: 6369 656e 7473 203d 204e 6f6e 650a 0a20  cients = None.. ",
            "+00006770: 2020 2020 2020 2020 2020 2072 6574 7572             retur",
            "+00006780: 6e20 7370 6563 7472 756d 2e73 7065 6374  n spectrum.spect",
            "+00006790: 7261 6c5f 6661 6374 6f72 5f66 6972 7374  ral_factor_first",
            "+000067a0: 736f 6c61 7228 0a20 2020 2020 2020 2020  solar(.         ",
            "+000067b0: 2020 2020 2020 2070 772c 2061 6972 6d61         pw, airma",
            "+000067c0: 7373 5f61 6273 6f6c 7574 652c 206d 6f64  ss_absolute, mod",
            "+000067d0: 756c 655f 7479 7065 2c20 636f 6566 6669  ule_type, coeffi",
            "+000067e0: 6369 656e 7473 0a20 2020 2020 2020 2020  cients.         ",
            "+000067f0: 2020 2029 0a20 2020 2020 2020 2072 6574     ).        ret",
            "+00006800: 7572 6e20 7475 706c 6528 0a20 2020 2020  urn tuple(.     ",
            "+00006810: 2020 2020 2020 2069 7465 7274 6f6f 6c73         itertools",
            "+00006820: 2e73 7461 726d 6170 285f 7370 6563 7472  .starmap(_spectr",
            "+00006830: 616c 5f63 6f72 7265 6374 696f 6e2c 207a  al_correction, z",
            "+00006840: 6970 2873 656c 662e 6172 7261 7973 2c20  ip(self.arrays, ",
            "+00006850: 7077 2929 0a20 2020 2020 2020 2029 0a0a  pw)).        )..",
            "+00006860: 2020 2020 6465 6620 7369 6e67 6c65 6469      def singledi",
            "+00006870: 6f64 6528 7365 6c66 2c20 7068 6f74 6f63  ode(self, photoc",
            "+00006880: 7572 7265 6e74 2c20 7361 7475 7261 7469  urrent, saturati",
            "+00006890: 6f6e 5f63 7572 7265 6e74 2c0a 2020 2020  on_current,.    ",
            "+000068a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000068b0: 7265 7369 7374 616e 6365 5f73 6572 6965  resistance_serie",
            "+000068c0: 732c 2072 6573 6973 7461 6e63 655f 7368  s, resistance_sh",
            "+000068d0: 756e 742c 206e 4e73 5674 6829 3a0a 2020  unt, nNsVth):.  ",
            "+000068e0: 2020 2020 2020 2222 2257 7261 7070 6572        \"\"\"Wrapper",
            "+000068f0: 2061 726f 756e 6420 7468 6520 3a70 793a   around the :py:",
            "+00006900: 6675 6e63 3a60 7076 6c69 622e 7076 7379  func:`pvlib.pvsy",
            "+00006910: 7374 656d 2e73 696e 676c 6564 696f 6465  stem.singlediode",
            "+00006920: 6020 6675 6e63 7469 6f6e 2e0a 0a20 2020  ` function...   ",
            "+00006930: 2020 2020 2053 6565 203a 7079 3a66 756e       See :py:fun",
            "+00006940: 633a 6070 7673 7973 7465 6d2e 7369 6e67  c:`pvsystem.sing",
            "+00006950: 6c65 6469 6f64 6560 2066 6f72 2064 6574  lediode` for det",
            "+00006960: 6169 6c73 0a20 2020 2020 2020 2022 2222  ails.        \"\"\"",
            "+00006970: 0a20 2020 2020 2020 2072 6574 7572 6e20  .        return ",
            "+00006980: 7369 6e67 6c65 6469 6f64 6528 7068 6f74  singlediode(phot",
            "+00006990: 6f63 7572 7265 6e74 2c20 7361 7475 7261  ocurrent, satura",
            "+000069a0: 7469 6f6e 5f63 7572 7265 6e74 2c0a 2020  tion_current,.  ",
            "+000069b0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000069c0: 2020 2020 2020 2020 2072 6573 6973 7461           resista",
            "+000069d0: 6e63 655f 7365 7269 6573 2c20 7265 7369  nce_series, resi",
            "+000069e0: 7374 616e 6365 5f73 6875 6e74 2c20 6e4e  stance_shunt, nN",
            "+000069f0: 7356 7468 290a 0a20 2020 2064 6566 2069  sVth)..    def i",
            "+00006a00: 5f66 726f 6d5f 7628 7365 6c66 2c20 766f  _from_v(self, vo",
            "+00006a10: 6c74 6167 652c 2070 686f 746f 6375 7272  ltage, photocurr",
            "+00006a20: 656e 742c 2073 6174 7572 6174 696f 6e5f  ent, saturation_",
            "+00006a30: 6375 7272 656e 742c 0a20 2020 2020 2020  current,.       ",
            "+00006a40: 2020 2020 2020 2020 2020 7265 7369 7374            resist",
            "+00006a50: 616e 6365 5f73 6572 6965 732c 2072 6573  ance_series, res",
            "+00006a60: 6973 7461 6e63 655f 7368 756e 742c 206e  istance_shunt, n",
            "+00006a70: 4e73 5674 6829 3a0a 2020 2020 2020 2020  NsVth):.        ",
            "+00006a80: 2222 2257 7261 7070 6572 2061 726f 756e  \"\"\"Wrapper aroun",
            "+00006a90: 6420 7468 6520 3a70 793a 6675 6e63 3a60  d the :py:func:`",
            "+00006aa0: 7076 6c69 622e 7076 7379 7374 656d 2e69  pvlib.pvsystem.i",
            "+00006ab0: 5f66 726f 6d5f 7660 2066 756e 6374 696f  _from_v` functio",
            "+00006ac0: 6e2e 0a0a 2020 2020 2020 2020 5365 6520  n...        See ",
            "+00006ad0: 3a70 793a 6675 6e63 3a60 7076 6c69 622e  :py:func:`pvlib.",
            "+00006ae0: 7076 7379 7374 656d 2e69 5f66 726f 6d5f  pvsystem.i_from_",
            "+00006af0: 7660 2066 6f72 2064 6574 6169 6c73 2e0a  v` for details..",
            "+00006b00: 0a20 2020 2020 2020 202e 2e20 7665 7273  .        .. vers",
            "+00006b10: 696f 6e63 6861 6e67 6564 3a3a 2030 2e31  ionchanged:: 0.1",
            "+00006b20: 302e 300a 2020 2020 2020 2020 2020 2054  0.0.           T",
            "+00006b30: 6865 2066 756e 6374 696f 6e27 7320 6172  he function's ar",
            "+00006b40: 6775 6d65 6e74 7320 6861 7665 2062 6565  guments have bee",
            "+00006b50: 6e20 7265 6f72 6465 7265 642e 0a20 2020  n reordered..   ",
            "+00006b60: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "+00006b70: 2072 6574 7572 6e20 695f 6672 6f6d 5f76   return i_from_v",
            "+00006b80: 2876 6f6c 7461 6765 2c20 7068 6f74 6f63  (voltage, photoc",
            "+00006b90: 7572 7265 6e74 2c20 7361 7475 7261 7469  urrent, saturati",
            "+00006ba0: 6f6e 5f63 7572 7265 6e74 2c0a 2020 2020  on_current,.    ",
            "+00006bb0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00006bc0: 2020 2020 7265 7369 7374 616e 6365 5f73      resistance_s",
            "+00006bd0: 6572 6965 732c 2072 6573 6973 7461 6e63  eries, resistanc",
            "+00006be0: 655f 7368 756e 742c 206e 4e73 5674 6829  e_shunt, nNsVth)",
            "+00006bf0: 0a0a 2020 2020 6465 6620 6765 745f 6163  ..    def get_ac",
            "+00006c00: 2873 656c 662c 206d 6f64 656c 2c20 705f  (self, model, p_",
            "+00006c10: 6463 2c20 765f 6463 3d4e 6f6e 6529 3a0a  dc, v_dc=None):.",
            "+00006c20: 2020 2020 2020 2020 7222 2222 4361 6c63          r\"\"\"Calc",
            "+00006c30: 756c 6174 6573 2041 4320 706f 7765 7220  ulates AC power ",
            "+00006c40: 6672 6f6d 2070 5f64 6320 7573 696e 6720  from p_dc using ",
            "+00006c50: 7468 6520 696e 7665 7274 6572 206d 6f64  the inverter mod",
            "+00006c60: 656c 2069 6e64 6963 6174 6564 0a20 2020  el indicated.   ",
            "+00006c70: 2020 2020 2062 7920 6d6f 6465 6c20 616e       by model an",
            "+00006c80: 6420 7365 6c66 2e69 6e76 6572 7465 725f  d self.inverter_",
            "+00006c90: 7061 7261 6d65 7465 7273 2e0a 0a20 2020  parameters...   ",
            "+00006ca0: 2020 2020 2050 6172 616d 6574 6572 730a       Parameters.",
            "+00006cb0: 2020 2020 2020 2020 2d2d 2d2d 2d2d 2d2d          --------",
            "+00006cc0: 2d2d 0a20 2020 2020 2020 206d 6f64 656c  --.        model",
            "+00006cd0: 203a 2073 7472 0a20 2020 2020 2020 2020   : str.         ",
            "+00006ce0: 2020 204d 7573 7420 6265 206f 6e65 206f     Must be one o",
            "+00006cf0: 6620 2773 616e 6469 6127 2c20 2761 6472  f 'sandia', 'adr",
            "+00006d00: 272c 206f 7220 2770 7677 6174 7473 272e  ', or 'pvwatts'.",
            "+00006d10: 0a20 2020 2020 2020 2070 5f64 6320 3a20  .        p_dc : ",
            "+00006d20: 6e75 6d65 7269 632c 206f 7220 7475 706c  numeric, or tupl",
            "+00006d30: 652c 206c 6973 7420 6f72 2061 7272 6179  e, list or array",
            "+00006d40: 206f 6620 6e75 6d65 7269 630a 2020 2020   of numeric.    ",
            "+00006d50: 2020 2020 2020 2020 4443 2070 6f77 6572          DC power",
            "+00006d60: 206f 6e20 6561 6368 204d 5050 5420 696e   on each MPPT in",
            "+00006d70: 7075 7420 6f66 2074 6865 2069 6e76 6572  put of the inver",
            "+00006d80: 7465 722e 2055 7365 2074 7570 6c65 2c20  ter. Use tuple, ",
            "+00006d90: 6c69 7374 206f 720a 2020 2020 2020 2020  list or.        ",
            "+00006da0: 2020 2020 6172 7261 7920 666f 7220 696e      array for in",
            "+00006db0: 7665 7274 6572 7320 7769 7468 206d 756c  verters with mul",
            "+00006dc0: 7469 706c 6520 4d50 5054 2069 6e70 7574  tiple MPPT input",
            "+00006dd0: 732e 2049 6620 7479 7065 2069 7320 6172  s. If type is ar",
            "+00006de0: 7261 792c 0a20 2020 2020 2020 2020 2020  ray,.           ",
            "+00006df0: 2070 5f64 6320 6d75 7374 2062 6520 3264   p_dc must be 2d",
            "+00006e00: 2077 6974 6820 6178 6973 2030 2062 6569   with axis 0 bei",
            "+00006e10: 6e67 2074 6865 204d 5050 5420 696e 7075  ng the MPPT inpu",
            "+00006e20: 7473 2e20 5b57 5d0a 2020 2020 2020 2020  ts. [W].        ",
            "+00006e30: 765f 6463 203a 206e 756d 6572 6963 2c20  v_dc : numeric, ",
            "+00006e40: 6f72 2074 7570 6c65 2c20 6c69 7374 206f  or tuple, list o",
            "+00006e50: 7220 6172 7261 7920 6f66 206e 756d 6572  r array of numer",
            "+00006e60: 6963 0a20 2020 2020 2020 2020 2020 2044  ic.            D",
            "+00006e70: 4320 766f 6c74 6167 6520 6f6e 2065 6163  C voltage on eac",
            "+00006e80: 6820 4d50 5054 2069 6e70 7574 206f 6620  h MPPT input of ",
            "+00006e90: 7468 6520 696e 7665 7274 6572 2e20 5265  the inverter. Re",
            "+00006ea0: 7175 6972 6564 2077 6865 6e0a 2020 2020  quired when.    ",
            "+00006eb0: 2020 2020 2020 2020 6d6f 6465 6c3d 2773          model='s",
            "+00006ec0: 616e 6469 6127 206f 7220 6d6f 6465 6c3d  andia' or model=",
            "+00006ed0: 2761 6472 272e 2055 7365 2074 7570 6c65  'adr'. Use tuple",
            "+00006ee0: 2c20 6c69 7374 206f 720a 2020 2020 2020  , list or.      ",
            "+00006ef0: 2020 2020 2020 6172 7261 7920 666f 7220        array for ",
            "+00006f00: 696e 7665 7274 6572 7320 7769 7468 206d  inverters with m",
            "+00006f10: 756c 7469 706c 6520 4d50 5054 2069 6e70  ultiple MPPT inp",
            "+00006f20: 7574 732e 2049 6620 7479 7065 2069 7320  uts. If type is ",
            "+00006f30: 6172 7261 792c 0a20 2020 2020 2020 2020  array,.         ",
            "+00006f40: 2020 2076 5f64 6320 6d75 7374 2062 6520     v_dc must be ",
            "+00006f50: 3264 2077 6974 6820 6178 6973 2030 2062  2d with axis 0 b",
            "+00006f60: 6569 6e67 2074 6865 204d 5050 5420 696e  eing the MPPT in",
            "+00006f70: 7075 7473 2e20 5b56 5d0a 0a20 2020 2020  puts. [V]..     ",
            "+00006f80: 2020 2052 6574 7572 6e73 0a20 2020 2020     Returns.     ",
            "+00006f90: 2020 202d 2d2d 2d2d 2d2d 0a20 2020 2020     -------.     ",
            "+00006fa0: 2020 2070 6f77 6572 5f61 6320 3a20 6e75     power_ac : nu",
            "+00006fb0: 6d65 7269 630a 2020 2020 2020 2020 2020  meric.          ",
            "+00006fc0: 2020 4143 2070 6f77 6572 206f 7574 7075    AC power outpu",
            "+00006fd0: 7420 666f 7220 7468 6520 696e 7665 7274  t for the invert",
            "+00006fe0: 6572 2e20 5b57 5d0a 0a20 2020 2020 2020  er. [W]..       ",
            "+00006ff0: 2052 6169 7365 730a 2020 2020 2020 2020   Raises.        ",
            "+00007000: 2d2d 2d2d 2d2d 0a20 2020 2020 2020 2056  ------.        V",
            "+00007010: 616c 7565 4572 726f 720a 2020 2020 2020  alueError.      ",
            "+00007020: 2020 2020 2020 4966 206d 6f64 656c 2069        If model i",
            "+00007030: 7320 6e6f 7420 6f6e 6520 6f66 2027 7361  s not one of 'sa",
            "+00007040: 6e64 6961 272c 2027 6164 7227 206f 7220  ndia', 'adr' or ",
            "+00007050: 2770 7677 6174 7473 272e 0a20 2020 2020  'pvwatts'..     ",
            "+00007060: 2020 2056 616c 7565 4572 726f 720a 2020     ValueError.  ",
            "+00007070: 2020 2020 2020 2020 2020 4966 206d 6f64            If mod",
            "+00007080: 656c 3d27 6164 7227 2061 6e64 2074 6865  el='adr' and the",
            "+00007090: 2050 5653 7973 7465 6d20 6861 7320 6d6f   PVSystem has mo",
            "+000070a0: 7265 2074 6861 6e20 6f6e 6520 6172 7261  re than one arra",
            "+000070b0: 792e 0a0a 2020 2020 2020 2020 5365 6520  y...        See ",
            "+000070c0: 616c 736f 0a20 2020 2020 2020 202d 2d2d  also.        ---",
            "+000070d0: 2d2d 2d2d 2d0a 2020 2020 2020 2020 7076  -----.        pv",
            "+000070e0: 6c69 622e 696e 7665 7274 6572 2e73 616e  lib.inverter.san",
            "+000070f0: 6469 610a 2020 2020 2020 2020 7076 6c69  dia.        pvli",
            "+00007100: 622e 696e 7665 7274 6572 2e73 616e 6469  b.inverter.sandi",
            "+00007110: 615f 6d75 6c74 690a 2020 2020 2020 2020  a_multi.        ",
            "+00007120: 7076 6c69 622e 696e 7665 7274 6572 2e61  pvlib.inverter.a",
            "+00007130: 6472 0a20 2020 2020 2020 2070 766c 6962  dr.        pvlib",
            "+00007140: 2e69 6e76 6572 7465 722e 7076 7761 7474  .inverter.pvwatt",
            "+00007150: 730a 2020 2020 2020 2020 7076 6c69 622e  s.        pvlib.",
            "+00007160: 696e 7665 7274 6572 2e70 7677 6174 7473  inverter.pvwatts",
            "+00007170: 5f6d 756c 7469 0a20 2020 2020 2020 2022  _multi.        \"",
            "+00007180: 2222 0a20 2020 2020 2020 206d 6f64 656c  \"\".        model",
            "+00007190: 203d 206d 6f64 656c 2e6c 6f77 6572 2829   = model.lower()",
            "+000071a0: 0a20 2020 2020 2020 206d 756c 7469 706c  .        multipl",
            "+000071b0: 655f 6172 7261 7973 203d 2073 656c 662e  e_arrays = self.",
            "+000071c0: 6e75 6d5f 6172 7261 7973 203e 2031 0a20  num_arrays > 1. ",
            "+000071d0: 2020 2020 2020 2069 6620 6d6f 6465 6c20         if model ",
            "+000071e0: 3d3d 2027 7361 6e64 6961 273a 0a20 2020  == 'sandia':.   ",
            "+000071f0: 2020 2020 2020 2020 2070 5f64 6320 3d20           p_dc = ",
            "+00007200: 7365 6c66 2e5f 7661 6c69 6461 7465 5f70  self._validate_p",
            "+00007210: 6572 5f61 7272 6179 2870 5f64 6329 0a20  er_array(p_dc). ",
            "+00007220: 2020 2020 2020 2020 2020 2076 5f64 6320             v_dc ",
            "+00007230: 3d20 7365 6c66 2e5f 7661 6c69 6461 7465  = self._validate",
            "+00007240: 5f70 6572 5f61 7272 6179 2876 5f64 6329  _per_array(v_dc)",
            "+00007250: 0a20 2020 2020 2020 2020 2020 2069 6620  .            if ",
            "+00007260: 6d75 6c74 6970 6c65 5f61 7272 6179 733a  multiple_arrays:",
            "+00007270: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+00007280: 2072 6574 7572 6e20 696e 7665 7274 6572   return inverter",
            "+00007290: 2e73 616e 6469 615f 6d75 6c74 6928 0a20  .sandia_multi(. ",
            "+000072a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000072b0: 2020 2076 5f64 632c 2070 5f64 632c 2073     v_dc, p_dc, s",
            "+000072c0: 656c 662e 696e 7665 7274 6572 5f70 6172  elf.inverter_par",
            "+000072d0: 616d 6574 6572 7329 0a20 2020 2020 2020  ameters).       ",
            "+000072e0: 2020 2020 2072 6574 7572 6e20 696e 7665       return inve",
            "+000072f0: 7274 6572 2e73 616e 6469 6128 765f 6463  rter.sandia(v_dc",
            "+00007300: 5b30 5d2c 2070 5f64 635b 305d 2c20 7365  [0], p_dc[0], se",
            "+00007310: 6c66 2e69 6e76 6572 7465 725f 7061 7261  lf.inverter_para",
            "+00007320: 6d65 7465 7273 290a 2020 2020 2020 2020  meters).        ",
            "+00007330: 656c 6966 206d 6f64 656c 203d 3d20 2770  elif model == 'p",
            "+00007340: 7677 6174 7473 273a 0a20 2020 2020 2020  vwatts':.       ",
            "+00007350: 2020 2020 206b 7761 7267 7320 3d20 5f62       kwargs = _b",
            "+00007360: 7569 6c64 5f6b 7761 7267 7328 5b27 6574  uild_kwargs(['et",
            "+00007370: 615f 696e 765f 6e6f 6d27 2c20 2765 7461  a_inv_nom', 'eta",
            "+00007380: 5f69 6e76 5f72 6566 275d 2c0a 2020 2020  _inv_ref'],.    ",
            "+00007390: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000073a0: 2020 2020 2020 2020 2020 2020 2020 2073                 s",
            "+000073b0: 656c 662e 696e 7665 7274 6572 5f70 6172  elf.inverter_par",
            "+000073c0: 616d 6574 6572 7329 0a20 2020 2020 2020  ameters).       ",
            "+000073d0: 2020 2020 2070 5f64 6320 3d20 7365 6c66       p_dc = self",
            "+000073e0: 2e5f 7661 6c69 6461 7465 5f70 6572 5f61  ._validate_per_a",
            "+000073f0: 7272 6179 2870 5f64 6329 0a20 2020 2020  rray(p_dc).     ",
            "+00007400: 2020 2020 2020 2069 6620 6d75 6c74 6970         if multip",
            "+00007410: 6c65 5f61 7272 6179 733a 0a20 2020 2020  le_arrays:.     ",
            "+00007420: 2020 2020 2020 2020 2020 2072 6574 7572             retur",
            "+00007430: 6e20 696e 7665 7274 6572 2e70 7677 6174  n inverter.pvwat",
            "+00007440: 7473 5f6d 756c 7469 280a 2020 2020 2020  ts_multi(.      ",
            "+00007450: 2020 2020 2020 2020 2020 2020 2020 705f                p_",
            "+00007460: 6463 2c20 7365 6c66 2e69 6e76 6572 7465  dc, self.inverte",
            "+00007470: 725f 7061 7261 6d65 7465 7273 5b27 7064  r_parameters['pd",
            "+00007480: 6330 275d 2c20 2a2a 6b77 6172 6773 290a  c0'], **kwargs).",
            "+00007490: 2020 2020 2020 2020 2020 2020 7265 7475              retu",
            "+000074a0: 726e 2069 6e76 6572 7465 722e 7076 7761  rn inverter.pvwa",
            "+000074b0: 7474 7328 0a20 2020 2020 2020 2020 2020  tts(.           ",
            "+000074c0: 2020 2020 2070 5f64 635b 305d 2c20 7365       p_dc[0], se",
            "+000074d0: 6c66 2e69 6e76 6572 7465 725f 7061 7261  lf.inverter_para",
            "+000074e0: 6d65 7465 7273 5b27 7064 6330 275d 2c20  meters['pdc0'], ",
            "+000074f0: 2a2a 6b77 6172 6773 290a 2020 2020 2020  **kwargs).      ",
            "+00007500: 2020 656c 6966 206d 6f64 656c 203d 3d20    elif model == ",
            "+00007510: 2761 6472 273a 0a20 2020 2020 2020 2020  'adr':.         ",
            "+00007520: 2020 2069 6620 6d75 6c74 6970 6c65 5f61     if multiple_a",
            "+00007530: 7272 6179 733a 0a20 2020 2020 2020 2020  rrays:.         ",
            "+00007540: 2020 2020 2020 2072 6169 7365 2056 616c         raise Val",
            "+00007550: 7565 4572 726f 7228 0a20 2020 2020 2020  ueError(.       ",
            "+00007560: 2020 2020 2020 2020 2020 2020 2027 5468               'Th",
            "+00007570: 6520 6164 7220 696e 7665 7274 6572 2066  e adr inverter f",
            "+00007580: 756e 6374 696f 6e20 6361 6e6e 6f74 2062  unction cannot b",
            "+00007590: 6520 7573 6564 2066 6f72 2061 6e20 696e  e used for an in",
            "+000075a0: 7665 7274 6572 272c 0a20 2020 2020 2020  verter',.       ",
            "+000075b0: 2020 2020 2020 2020 2020 2020 2027 2077               ' w",
            "+000075c0: 6974 6820 6d75 6c74 6970 6c65 204d 5050  ith multiple MPP",
            "+000075d0: 5420 696e 7075 7473 2729 0a20 2020 2020  T inputs').     ",
            "+000075e0: 2020 2020 2020 2023 2057 6869 6c65 2074         # While t",
            "+000075f0: 6869 7320 6973 206f 6e6c 7920 7573 6564  his is only used",
            "+00007600: 2066 6f72 2073 696e 676c 652d 6172 7261   for single-arra",
            "+00007610: 7920 7379 7374 656d 732c 2063 616c 6c69  y systems, calli",
            "+00007620: 6e67 0a20 2020 2020 2020 2020 2020 2023  ng.            #",
            "+00007630: 205f 7661 6c69 6461 7465 5f70 6572 5f61   _validate_per_a",
            "+00007640: 7272 7920 6c65 7473 2075 7320 7061 7373  rry lets us pass",
            "+00007650: 2069 6e20 7369 6e67 6c65 746f 6e20 7475   in singleton tu",
            "+00007660: 706c 6573 2e0a 2020 2020 2020 2020 2020  ples..          ",
            "+00007670: 2020 705f 6463 203d 2073 656c 662e 5f76    p_dc = self._v",
            "+00007680: 616c 6964 6174 655f 7065 725f 6172 7261  alidate_per_arra",
            "+00007690: 7928 705f 6463 290a 2020 2020 2020 2020  y(p_dc).        ",
            "+000076a0: 2020 2020 765f 6463 203d 2073 656c 662e      v_dc = self.",
            "+000076b0: 5f76 616c 6964 6174 655f 7065 725f 6172  _validate_per_ar",
            "+000076c0: 7261 7928 765f 6463 290a 2020 2020 2020  ray(v_dc).      ",
            "+000076d0: 2020 2020 2020 7265 7475 726e 2069 6e76        return inv",
            "+000076e0: 6572 7465 722e 6164 7228 765f 6463 5b30  erter.adr(v_dc[0",
            "+000076f0: 5d2c 2070 5f64 635b 305d 2c20 7365 6c66  ], p_dc[0], self",
            "+00007700: 2e69 6e76 6572 7465 725f 7061 7261 6d65  .inverter_parame",
            "+00007710: 7465 7273 290a 2020 2020 2020 2020 656c  ters).        el",
            "+00007720: 7365 3a0a 2020 2020 2020 2020 2020 2020  se:.            ",
            "+00007730: 7261 6973 6520 5661 6c75 6545 7272 6f72  raise ValueError",
            "+00007740: 280a 2020 2020 2020 2020 2020 2020 2020  (.              ",
            "+00007750: 2020 6d6f 6465 6c20 2b20 2720 6973 206e    model + ' is n",
            "+00007760: 6f74 2061 2076 616c 6964 2041 4320 706f  ot a valid AC po",
            "+00007770: 7765 7220 6d6f 6465 6c2e 272c 0a20 2020  wer model.',.   ",
            "+00007780: 2020 2020 2020 2020 2020 2020 2027 206d               ' m",
            "+00007790: 6f64 656c 206d 7573 7420 6265 206f 6e65  odel must be one",
            "+000077a0: 206f 6620 2273 616e 6469 6122 2c20 2261   of \"sandia\", \"a",
            "+000077b0: 6472 2220 6f72 2022 7076 7761 7474 7322  dr\" or \"pvwatts\"",
            "+000077c0: 2729 0a0a 2020 2020 405f 756e 7772 6170  ')..    @_unwrap",
            "+000077d0: 5f73 696e 676c 655f 7661 6c75 650a 2020  _single_value.  ",
            "+000077e0: 2020 6465 6620 7363 616c 655f 766f 6c74    def scale_volt",
            "+000077f0: 6167 655f 6375 7272 656e 745f 706f 7765  age_current_powe",
            "+00007800: 7228 7365 6c66 2c20 6461 7461 293a 0a20  r(self, data):. ",
            "+00007810: 2020 2020 2020 2022 2222 0a20 2020 2020         \"\"\".     ",
            "+00007820: 2020 2053 6361 6c65 7320 7468 6520 766f     Scales the vo",
            "+00007830: 6c74 6167 652c 2063 7572 7265 6e74 2c20  ltage, current, ",
            "+00007840: 616e 6420 706f 7765 7220 6f66 2074 6865  and power of the",
            "+00007850: 2060 6461 7461 6020 4461 7461 4672 616d   `data` DataFram",
            "+00007860: 650a 2020 2020 2020 2020 6279 2060 7365  e.        by `se",
            "+00007870: 6c66 2e6d 6f64 756c 6573 5f70 6572 5f73  lf.modules_per_s",
            "+00007880: 7472 696e 6760 2061 6e64 2060 7365 6c66  tring` and `self",
            "+00007890: 2e73 7472 696e 6773 5f70 6572 5f69 6e76  .strings_per_inv",
            "+000078a0: 6572 7465 7260 2e0a 0a20 2020 2020 2020  erter`...       ",
            "+000078b0: 2050 6172 616d 6574 6572 730a 2020 2020   Parameters.    ",
            "+000078c0: 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20      ----------. ",
            "+000078d0: 2020 2020 2020 2064 6174 613a 2044 6174         data: Dat",
            "+000078e0: 6146 7261 6d65 206f 7220 7475 706c 6520  aFrame or tuple ",
            "+000078f0: 6f66 2044 6174 6146 7261 6d65 0a20 2020  of DataFrame.   ",
            "+00007900: 2020 2020 2020 2020 204d 6179 2063 6f6e           May con",
            "+00007910: 7461 696e 2063 6f6c 756d 6e73 2060 2776  tain columns `'v",
            "+00007920: 5f6d 7027 2c20 2776 5f6f 6327 2c20 2769  _mp', 'v_oc', 'i",
            "+00007930: 5f6d 7027 202c 2769 5f78 272c 2027 695f  _mp' ,'i_x', 'i_",
            "+00007940: 7878 272c 0a20 2020 2020 2020 2020 2020  xx',.           ",
            "+00007950: 2027 695f 7363 272c 2027 705f 6d70 2760   'i_sc', 'p_mp'`",
            "+00007960: 2e0a 0a20 2020 2020 2020 2052 6574 7572  ...        Retur",
            "+00007970: 6e73 0a20 2020 2020 2020 202d 2d2d 2d2d  ns.        -----",
            "+00007980: 2d2d 0a20 2020 2020 2020 2073 6361 6c65  --.        scale",
            "+00007990: 645f 6461 7461 3a20 4461 7461 4672 616d  d_data: DataFram",
            "+000079a0: 6520 6f72 2074 7570 6c65 206f 6620 4461  e or tuple of Da",
            "+000079b0: 7461 4672 616d 650a 2020 2020 2020 2020  taFrame.        ",
            "+000079c0: 2020 2020 4120 7363 616c 6564 2063 6f70      A scaled cop",
            "+000079d0: 7920 6f66 2074 6865 2069 6e70 7574 2064  y of the input d",
            "+000079e0: 6174 612e 0a20 2020 2020 2020 2022 2222  ata..        \"\"\"",
            "+000079f0: 0a20 2020 2020 2020 2064 6174 6120 3d20  .        data = ",
            "+00007a00: 7365 6c66 2e5f 7661 6c69 6461 7465 5f70  self._validate_p",
            "+00007a10: 6572 5f61 7272 6179 2864 6174 6129 0a20  er_array(data). ",
            "+00007a20: 2020 2020 2020 2072 6574 7572 6e20 7475         return tu",
            "+00007a30: 706c 6528 0a20 2020 2020 2020 2020 2020  ple(.           ",
            "+00007a40: 2073 6361 6c65 5f76 6f6c 7461 6765 5f63   scale_voltage_c",
            "+00007a50: 7572 7265 6e74 5f70 6f77 6572 2864 6174  urrent_power(dat",
            "+00007a60: 612c 0a20 2020 2020 2020 2020 2020 2020  a,.             ",
            "+00007a70: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00007a80: 2020 2020 2020 2020 2020 2076 6f6c 7461             volta",
            "+00007a90: 6765 3d61 7272 6179 2e6d 6f64 756c 6573  ge=array.modules",
            "+00007aa0: 5f70 6572 5f73 7472 696e 672c 0a20 2020  _per_string,.   ",
            "+00007ab0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00007ac0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00007ad0: 2020 2020 2063 7572 7265 6e74 3d61 7272       current=arr",
            "+00007ae0: 6179 2e73 7472 696e 6773 290a 2020 2020  ay.strings).    ",
            "+00007af0: 2020 2020 2020 2020 666f 7220 6172 7261          for arra",
            "+00007b00: 792c 2064 6174 6120 696e 207a 6970 2873  y, data in zip(s",
            "+00007b10: 656c 662e 6172 7261 7973 2c20 6461 7461  elf.arrays, data",
            "+00007b20: 290a 2020 2020 2020 2020 290a 0a20 2020  ).        )..   ",
            "+00007b30: 2040 7265 6e61 6d65 645f 6b77 6172 675f   @renamed_kwarg_",
            "+00007b40: 7761 726e 696e 6728 0a20 2020 2020 2020  warning(.       ",
            "+00007b50: 2022 302e 3133 2e30 222c 2022 675f 706f   \"0.13.0\", \"g_po",
            "+00007b60: 615f 6566 6665 6374 6976 6522 2c20 2265  a_effective\", \"e",
            "+00007b70: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "+00007b80: 6e63 6522 290a 2020 2020 405f 756e 7772  nce\").    @_unwr",
            "+00007b90: 6170 5f73 696e 676c 655f 7661 6c75 650a  ap_single_value.",
            "+00007ba0: 2020 2020 6465 6620 7076 7761 7474 735f      def pvwatts_",
            "+00007bb0: 6463 2873 656c 662c 2065 6666 6563 7469  dc(self, effecti",
            "+00007bc0: 7665 5f69 7272 6164 6961 6e63 652c 2074  ve_irradiance, t",
            "+00007bd0: 656d 705f 6365 6c6c 293a 0a20 2020 2020  emp_cell):.     ",
            "+00007be0: 2020 2022 2222 0a20 2020 2020 2020 2043     \"\"\".        C",
            "+00007bf0: 616c 6375 6c61 7465 7320 4443 2070 6f77  alculates DC pow",
            "+00007c00: 6572 2061 6363 6f72 6469 6e67 2074 6f20  er according to ",
            "+00007c10: 7468 6520 5056 5761 7474 7320 6d6f 6465  the PVWatts mode",
            "+00007c20: 6c20 7573 696e 670a 2020 2020 2020 2020  l using.        ",
            "+00007c30: 3a70 793a 6675 6e63 3a60 7076 6c69 622e  :py:func:`pvlib.",
            "+00007c40: 7076 7379 7374 656d 2e70 7677 6174 7473  pvsystem.pvwatts",
            "+00007c50: 5f64 6360 2c20 6073 656c 662e 6d6f 6475  _dc`, `self.modu",
            "+00007c60: 6c65 5f70 6172 616d 6574 6572 735b 2770  le_parameters['p",
            "+00007c70: 6463 3027 5d60 2c0a 2020 2020 2020 2020  dc0']`,.        ",
            "+00007c80: 616e 6420 6073 656c 662e 6d6f 6475 6c65  and `self.module",
            "+00007c90: 5f70 6172 616d 6574 6572 735b 2767 616d  _parameters['gam",
            "+00007ca0: 6d61 5f70 6463 275d 602e 0a0a 2020 2020  ma_pdc']`...    ",
            "+00007cb0: 2020 2020 5365 6520 3a70 793a 6675 6e63      See :py:func",
            "+00007cc0: 3a60 7076 6c69 622e 7076 7379 7374 656d  :`pvlib.pvsystem",
            "+00007cd0: 2e70 7677 6174 7473 5f64 6360 2066 6f72  .pvwatts_dc` for",
            "+00007ce0: 2064 6574 6169 6c73 2e0a 2020 2020 2020   details..      ",
            "+00007cf0: 2020 2222 220a 2020 2020 2020 2020 6566    \"\"\".        ef",
            "+00007d00: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "+00007d10: 6365 203d 2073 656c 662e 5f76 616c 6964  ce = self._valid",
            "+00007d20: 6174 655f 7065 725f 6172 7261 7928 6566  ate_per_array(ef",
            "+00007d30: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "+00007d40: 6365 290a 2020 2020 2020 2020 7465 6d70  ce).        temp",
            "+00007d50: 5f63 656c 6c20 3d20 7365 6c66 2e5f 7661  _cell = self._va",
            "+00007d60: 6c69 6461 7465 5f70 6572 5f61 7272 6179  lidate_per_array",
            "+00007d70: 2874 656d 705f 6365 6c6c 290a 2020 2020  (temp_cell).    ",
            "+00007d80: 2020 2020 7265 7475 726e 2074 7570 6c65      return tuple",
            "+00007d90: 280a 2020 2020 2020 2020 2020 2020 7076  (.            pv",
            "+00007da0: 7761 7474 735f 6463 2865 6666 6563 7469  watts_dc(effecti",
            "+00007db0: 7665 5f69 7272 6164 6961 6e63 652c 2074  ve_irradiance, t",
            "+00007dc0: 656d 705f 6365 6c6c 2c0a 2020 2020 2020  emp_cell,.      ",
            "+00007dd0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00007de0: 2061 7272 6179 2e6d 6f64 756c 655f 7061   array.module_pa",
            "+00007df0: 7261 6d65 7465 7273 5b27 7064 6330 275d  rameters['pdc0']",
            "+00007e00: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "+00007e10: 2020 2020 2020 2020 2061 7272 6179 2e6d           array.m",
            "+00007e20: 6f64 756c 655f 7061 7261 6d65 7465 7273  odule_parameters",
            "+00007e30: 5b27 6761 6d6d 615f 7064 6327 5d2c 0a20  ['gamma_pdc'],. ",
            "+00007e40: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00007e50: 2020 2020 2020 2a2a 5f62 7569 6c64 5f6b        **_build_k",
            "+00007e60: 7761 7267 7328 5b27 7465 6d70 5f72 6566  wargs(['temp_ref",
            "+00007e70: 275d 2c20 6172 7261 792e 6d6f 6475 6c65  '], array.module",
            "+00007e80: 5f70 6172 616d 6574 6572 7329 290a 2020  _parameters)).  ",
            "+00007e90: 2020 2020 2020 2020 2020 666f 7220 6172            for ar",
            "+00007ea0: 7261 792c 2065 6666 6563 7469 7665 5f69  ray, effective_i",
            "+00007eb0: 7272 6164 6961 6e63 652c 2074 656d 705f  rradiance, temp_",
            "+00007ec0: 6365 6c6c 0a20 2020 2020 2020 2020 2020  cell.           ",
            "+00007ed0: 2069 6e20 7a69 7028 7365 6c66 2e61 7272   in zip(self.arr",
            "+00007ee0: 6179 732c 2065 6666 6563 7469 7665 5f69  ays, effective_i",
            "+00007ef0: 7272 6164 6961 6e63 652c 2074 656d 705f  rradiance, temp_",
            "+00007f00: 6365 6c6c 290a 2020 2020 2020 2020 290a  cell).        ).",
            "+00007f10: 0a20 2020 2064 6566 2070 7677 6174 7473  .    def pvwatts",
            "+00007f20: 5f6c 6f73 7365 7328 7365 6c66 293a 0a20  _losses(self):. ",
            "+00007f30: 2020 2020 2020 2022 2222 0a20 2020 2020         \"\"\".     ",
            "+00007f40: 2020 2043 616c 6375 6c61 7465 7320 4443     Calculates DC",
            "+00007f50: 2070 6f77 6572 206c 6f73 7365 7320 6163   power losses ac",
            "+00007f60: 636f 7264 696e 6720 7468 6520 5056 7761  cording the PVwa",
            "+00007f70: 7474 7320 6d6f 6465 6c20 7573 696e 670a  tts model using.",
            "+00007f80: 2020 2020 2020 2020 3a70 793a 6675 6e63          :py:func",
            "+00007f90: 3a60 7076 6c69 622e 7076 7379 7374 656d  :`pvlib.pvsystem",
            "+00007fa0: 2e70 7677 6174 7473 5f6c 6f73 7365 7360  .pvwatts_losses`",
            "+00007fb0: 2061 6e64 0a20 2020 2020 2020 2060 6073   and.        ``s",
            "+00007fc0: 656c 662e 6c6f 7373 6573 5f70 6172 616d  elf.losses_param",
            "+00007fd0: 6574 6572 7360 602e 0a0a 2020 2020 2020  eters``...      ",
            "+00007fe0: 2020 5365 6520 3a70 793a 6675 6e63 3a60    See :py:func:`",
            "+00007ff0: 7076 6c69 622e 7076 7379 7374 656d 2e70  pvlib.pvsystem.p",
            "+00008000: 7677 6174 7473 5f6c 6f73 7365 7360 2066  vwatts_losses` f",
            "+00008010: 6f72 2064 6574 6169 6c73 2e0a 2020 2020  or details..    ",
            "+00008020: 2020 2020 2222 220a 2020 2020 2020 2020      \"\"\".        ",
            "+00008030: 6b77 6172 6773 203d 205f 6275 696c 645f  kwargs = _build_",
            "+00008040: 6b77 6172 6773 285b 2773 6f69 6c69 6e67  kwargs(['soiling",
            "+00008050: 272c 2027 7368 6164 696e 6727 2c20 2773  ', 'shading', 's",
            "+00008060: 6e6f 7727 2c20 276d 6973 6d61 7463 6827  now', 'mismatch'",
            "+00008070: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "+00008080: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00008090: 2020 2777 6972 696e 6727 2c20 2763 6f6e    'wiring', 'con",
            "+000080a0: 6e65 6374 696f 6e73 272c 2027 6c69 6427  nections', 'lid'",
            "+000080b0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "+000080c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000080d0: 2020 276e 616d 6570 6c61 7465 5f72 6174    'nameplate_rat",
            "+000080e0: 696e 6727 2c20 2761 6765 272c 2027 6176  ing', 'age', 'av",
            "+000080f0: 6169 6c61 6269 6c69 7479 275d 2c0a 2020  ailability'],.  ",
            "+00008100: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00008110: 2020 2020 2020 2020 2020 2020 2073 656c               sel",
            "+00008120: 662e 6c6f 7373 6573 5f70 6172 616d 6574  f.losses_paramet",
            "+00008130: 6572 7329 0a20 2020 2020 2020 2072 6574  ers).        ret",
            "+00008140: 7572 6e20 7076 7761 7474 735f 6c6f 7373  urn pvwatts_loss",
            "+00008150: 6573 282a 2a6b 7761 7267 7329 0a0a 2020  es(**kwargs)..  ",
            "+00008160: 2020 405f 756e 7772 6170 5f73 696e 676c    @_unwrap_singl",
            "+00008170: 655f 7661 6c75 650a 2020 2020 6465 6620  e_value.    def ",
            "+00008180: 6463 5f6f 686d 735f 6672 6f6d 5f70 6572  dc_ohms_from_per",
            "+00008190: 6365 6e74 2873 656c 6629 3a0a 2020 2020  cent(self):.    ",
            "+000081a0: 2020 2020 2222 220a 2020 2020 2020 2020      \"\"\".        ",
            "+000081b0: 4361 6c63 756c 6174 6573 2074 6865 2065  Calculates the e",
            "+000081c0: 7175 6976 616c 656e 7420 7265 7369 7374  quivalent resist",
            "+000081d0: 616e 6365 206f 6620 7468 6520 7769 7265  ance of the wire",
            "+000081e0: 7320 666f 7220 6561 6368 2061 7272 6179  s for each array",
            "+000081f0: 2075 7369 6e67 0a20 2020 2020 2020 203a   using.        :",
            "+00008200: 7079 3a66 756e 633a 6070 766c 6962 2e70  py:func:`pvlib.p",
            "+00008210: 7673 7973 7465 6d2e 6463 5f6f 686d 735f  vsystem.dc_ohms_",
            "+00008220: 6672 6f6d 5f70 6572 6365 6e74 600a 0a20  from_percent`.. ",
            "+00008230: 2020 2020 2020 2053 6565 203a 7079 3a66         See :py:f",
            "+00008240: 756e 633a 6070 766c 6962 2e70 7673 7973  unc:`pvlib.pvsys",
            "+00008250: 7465 6d2e 6463 5f6f 686d 735f 6672 6f6d  tem.dc_ohms_from",
            "+00008260: 5f70 6572 6365 6e74 6020 666f 7220 6465  _percent` for de",
            "+00008270: 7461 696c 732e 0a20 2020 2020 2020 2022  tails..        \"",
            "+00008280: 2222 0a0a 2020 2020 2020 2020 7265 7475  \"\"..        retu",
            "+00008290: 726e 2074 7570 6c65 2861 7272 6179 2e64  rn tuple(array.d",
            "+000082a0: 635f 6f68 6d73 5f66 726f 6d5f 7065 7263  c_ohms_from_perc",
            "+000082b0: 656e 7428 2920 666f 7220 6172 7261 7920  ent() for array ",
            "+000082c0: 696e 2073 656c 662e 6172 7261 7973 290a  in self.arrays).",
            "+000082d0: 0a20 2020 2040 7072 6f70 6572 7479 0a20  .    @property. ",
            "+000082e0: 2020 2064 6566 206e 756d 5f61 7272 6179     def num_array",
            "+000082f0: 7328 7365 6c66 293a 0a20 2020 2020 2020  s(self):.       ",
            "+00008300: 2022 2222 5468 6520 6e75 6d62 6572 206f   \"\"\"The number o",
            "+00008310: 6620 4172 7261 7973 2069 6e20 7468 6520  f Arrays in the ",
            "+00008320: 7379 7374 656d 2e22 2222 0a20 2020 2020  system.\"\"\".     ",
            "+00008330: 2020 2072 6574 7572 6e20 6c65 6e28 7365     return len(se",
            "+00008340: 6c66 2e61 7272 6179 7329 0a0a 0a63 6c61  lf.arrays)...cla",
            "+00008350: 7373 2041 7272 6179 3a0a 2020 2020 2222  ss Array:.    \"\"",
            "+00008360: 220a 2020 2020 416e 2041 7272 6179 2069  \".    An Array i",
            "+00008370: 7320 6120 7365 7420 6f66 206d 6f64 756c  s a set of modul",
            "+00008380: 6573 2061 7420 7468 6520 7361 6d65 206f  es at the same o",
            "+00008390: 7269 656e 7461 7469 6f6e 2e0a 0a20 2020  rientation...   ",
            "+000083a0: 2053 7065 6369 6669 6361 6c6c 792c 2061   Specifically, a",
            "+000083b0: 6e20 6172 7261 7920 6973 2064 6566 696e  n array is defin",
            "+000083c0: 6564 2062 7920 6974 7320 6d6f 756e 742c  ed by its mount,",
            "+000083d0: 2074 6865 0a20 2020 206d 6f64 756c 6520   the.    module ",
            "+000083e0: 7061 7261 6d65 7465 7273 2c20 7468 6520  parameters, the ",
            "+000083f0: 6e75 6d62 6572 206f 6620 7061 7261 6c6c  number of parall",
            "+00008400: 656c 2073 7472 696e 6773 206f 6620 6d6f  el strings of mo",
            "+00008410: 6475 6c65 730a 2020 2020 616e 6420 7468  dules.    and th",
            "+00008420: 6520 6e75 6d62 6572 206f 6620 6d6f 6475  e number of modu",
            "+00008430: 6c65 7320 6f6e 2065 6163 6820 7374 7269  les on each stri",
            "+00008440: 6e67 2e0a 0a20 2020 2050 6172 616d 6574  ng...    Paramet",
            "+00008450: 6572 730a 2020 2020 2d2d 2d2d 2d2d 2d2d  ers.    --------",
            "+00008460: 2d2d 0a20 2020 206d 6f75 6e74 3a20 4669  --.    mount: Fi",
            "+00008470: 7865 644d 6f75 6e74 2c20 5369 6e67 6c65  xedMount, Single",
            "+00008480: 4178 6973 5472 6163 6b65 724d 6f75 6e74  AxisTrackerMount",
            "+00008490: 2c20 6f72 206f 7468 6572 0a20 2020 2020  , or other.     ",
            "+000084a0: 2020 204d 6f75 6e74 696e 6720 666f 7220     Mounting for ",
            "+000084b0: 7468 6520 6172 7261 792c 2065 6974 6865  the array, eithe",
            "+000084c0: 7220 6f6e 2066 6978 6564 2d74 696c 7420  r on fixed-tilt ",
            "+000084d0: 7261 636b 696e 6720 6f72 2068 6f72 697a  racking or horiz",
            "+000084e0: 6f6e 7461 6c0a 2020 2020 2020 2020 7369  ontal.        si",
            "+000084f0: 6e67 6c65 2061 7869 7320 7472 6163 6b65  ngle axis tracke",
            "+00008500: 722e 204d 6f75 6e74 696e 6720 6973 2075  r. Mounting is u",
            "+00008510: 7365 6420 746f 2064 6574 6572 6d69 6e65  sed to determine",
            "+00008520: 206d 6f64 756c 6520 6f72 6965 6e74 6174   module orientat",
            "+00008530: 696f 6e2e 0a20 2020 2020 2020 2049 6620  ion..        If ",
            "+00008540: 6e6f 7420 7072 6f76 6964 6564 2c20 6120  not provided, a ",
            "+00008550: 4669 7865 644d 6f75 6e74 2077 6974 6820  FixedMount with ",
            "+00008560: 7a65 726f 2074 696c 7420 6973 2075 7365  zero tilt is use",
            "+00008570: 642e 0a0a 2020 2020 616c 6265 646f 203a  d...    albedo :",
            "+00008580: 2066 6c6f 6174 2c20 6f70 7469 6f6e 616c   float, optional",
            "+00008590: 0a20 2020 2020 2020 2047 726f 756e 6420  .        Ground ",
            "+000085a0: 7375 7266 6163 6520 616c 6265 646f 2e20  surface albedo. ",
            "+000085b0: 4966 206e 6f74 2073 7570 706c 6965 642c  If not supplied,",
            "+000085c0: 2074 6865 6e20 6060 7375 7266 6163 655f   then ``surface_",
            "+000085d0: 7479 7065 6060 2069 7320 7573 6564 0a20  type`` is used. ",
            "+000085e0: 2020 2020 2020 2074 6f20 6c6f 6f6b 2075         to look u",
            "+000085f0: 7020 6120 7661 6c75 6520 696e 2020 3a70  p a value in  :p",
            "+00008600: 793a 636f 6e73 743a 6070 766c 6962 2e61  y:const:`pvlib.a",
            "+00008610: 6c62 6564 6f2e 5355 5246 4143 455f 414c  lbedo.SURFACE_AL",
            "+00008620: 4245 444f 5360 2e0a 2020 2020 2020 2020  BEDOS`..        ",
            "+00008630: 4966 2060 6073 7572 6661 6365 5f74 7970  If ``surface_typ",
            "+00008640: 6560 6020 6973 2061 6c73 6f20 6e6f 7420  e`` is also not ",
            "+00008650: 7375 7070 6c69 6564 2074 6865 6e20 6120  supplied then a ",
            "+00008660: 6772 6f75 6e64 2073 7572 6661 6365 2061  ground surface a",
            "+00008670: 6c62 6564 6f0a 2020 2020 2020 2020 6f66  lbedo.        of",
            "+00008680: 2030 2e32 3520 6973 2075 7365 642e 0a0a   0.25 is used...",
            "+00008690: 2020 2020 7375 7266 6163 655f 7479 7065      surface_type",
            "+000086a0: 203a 2073 7472 696e 672c 206f 7074 696f   : string, optio",
            "+000086b0: 6e61 6c0a 2020 2020 2020 2020 5468 6520  nal.        The ",
            "+000086c0: 6772 6f75 6e64 2073 7572 6661 6365 2074  ground surface t",
            "+000086d0: 7970 652e 2053 6565 2020 3a70 793a 636f  ype. See  :py:co",
            "+000086e0: 6e73 743a 6070 766c 6962 2e61 6c62 6564  nst:`pvlib.albed",
            "+000086f0: 6f2e 5355 5246 4143 455f 414c 4245 444f  o.SURFACE_ALBEDO",
            "+00008700: 5360 0a20 2020 2020 2020 2066 6f72 2076  S`.        for v",
            "+00008710: 616c 6964 2076 616c 7565 732e 0a0a 2020  alid values...  ",
            "+00008720: 2020 6d6f 6475 6c65 203a 2073 7472 696e    module : strin",
            "+00008730: 672c 206f 7074 696f 6e61 6c0a 2020 2020  g, optional.    ",
            "+00008740: 2020 2020 5468 6520 6d6f 6465 6c20 6e61      The model na",
            "+00008750: 6d65 206f 6620 7468 6520 6d6f 6475 6c65  me of the module",
            "+00008760: 732e 0a20 2020 2020 2020 204d 6179 2062  s..        May b",
            "+00008770: 6520 7573 6564 2074 6f20 6c6f 6f6b 2075  e used to look u",
            "+00008780: 7020 7468 6520 6d6f 6475 6c65 5f70 6172  p the module_par",
            "+00008790: 616d 6574 6572 7320 6469 6374 696f 6e61  ameters dictiona",
            "+000087a0: 7279 0a20 2020 2020 2020 2076 6961 2073  ry.        via s",
            "+000087b0: 6f6d 6520 6f74 6865 7220 6d65 7468 6f64  ome other method",
            "+000087c0: 2e0a 0a20 2020 206d 6f64 756c 655f 7479  ...    module_ty",
            "+000087d0: 7065 203a 2073 7472 696e 672c 206f 7074  pe : string, opt",
            "+000087e0: 696f 6e61 6c0a 2020 2020 2020 2020 2044  ional.         D",
            "+000087f0: 6573 6372 6962 6573 2074 6865 206d 6f64  escribes the mod",
            "+00008800: 756c 6527 7320 636f 6e73 7472 7563 7469  ule's constructi",
            "+00008810: 6f6e 2e20 5661 6c69 6420 7374 7269 6e67  on. Valid string",
            "+00008820: 7320 6172 6520 2767 6c61 7373 5f70 6f6c  s are 'glass_pol",
            "+00008830: 796d 6572 270a 2020 2020 2020 2020 2061  ymer'.         a",
            "+00008840: 6e64 2027 676c 6173 735f 676c 6173 7327  nd 'glass_glass'",
            "+00008850: 2e20 5573 6564 2066 6f72 2063 656c 6c20  . Used for cell ",
            "+00008860: 616e 6420 6d6f 6475 6c65 2074 656d 7065  and module tempe",
            "+00008870: 7261 7475 7265 2063 616c 6375 6c61 7469  rature calculati",
            "+00008880: 6f6e 732e 0a0a 2020 2020 6d6f 6475 6c65  ons...    module",
            "+00008890: 5f70 6172 616d 6574 6572 7320 3a20 6469  _parameters : di",
            "+000088a0: 6374 206f 7220 5365 7269 6573 2c20 6f70  ct or Series, op",
            "+000088b0: 7469 6f6e 616c 0a20 2020 2020 2020 2050  tional.        P",
            "+000088c0: 6172 616d 6574 6572 7320 666f 7220 7468  arameters for th",
            "+000088d0: 6520 6d6f 6475 6c65 206d 6f64 656c 2c20  e module model, ",
            "+000088e0: 652e 672e 2c20 5341 504d 2c20 4345 432c  e.g., SAPM, CEC,",
            "+000088f0: 206f 7220 6f74 6865 722e 0a0a 2020 2020   or other...    ",
            "+00008900: 7465 6d70 6572 6174 7572 655f 6d6f 6465  temperature_mode",
            "+00008910: 6c5f 7061 7261 6d65 7465 7273 203a 2064  l_parameters : d",
            "+00008920: 6963 7420 6f72 2053 6572 6965 732c 206f  ict or Series, o",
            "+00008930: 7074 696f 6e61 6c0a 2020 2020 2020 2020  ptional.        ",
            "+00008940: 5061 7261 6d65 7465 7273 2066 6f72 2074  Parameters for t",
            "+00008950: 6865 206d 6f64 756c 6520 7465 6d70 6572  he module temper",
            "+00008960: 6174 7572 6520 6d6f 6465 6c2c 2065 2e67  ature model, e.g",
            "+00008970: 2e2c 2053 4150 4d2c 2050 7673 7973 742c  ., SAPM, Pvsyst,",
            "+00008980: 206f 720a 2020 2020 2020 2020 6f74 6865   or.        othe",
            "+00008990: 722e 0a0a 2020 2020 6d6f 6475 6c65 735f  r...    modules_",
            "+000089a0: 7065 725f 7374 7269 6e67 3a20 696e 742c  per_string: int,",
            "+000089b0: 2064 6566 6175 6c74 2031 0a20 2020 2020   default 1.     ",
            "+000089c0: 2020 204e 756d 6265 7220 6f66 206d 6f64     Number of mod",
            "+000089d0: 756c 6573 2070 6572 2073 7472 696e 6720  ules per string ",
            "+000089e0: 696e 2074 6865 2061 7272 6179 2e0a 0a20  in the array... ",
            "+000089f0: 2020 2073 7472 696e 6773 3a20 696e 742c     strings: int,",
            "+00008a00: 2064 6566 6175 6c74 2031 0a20 2020 2020   default 1.     ",
            "+00008a10: 2020 204e 756d 6265 7220 6f66 2070 6172     Number of par",
            "+00008a20: 616c 6c65 6c20 7374 7269 6e67 7320 696e  allel strings in",
            "+00008a30: 2074 6865 2061 7272 6179 2e0a 0a20 2020   the array...   ",
            "+00008a40: 2061 7272 6179 5f6c 6f73 7365 735f 7061   array_losses_pa",
            "+00008a50: 7261 6d65 7465 7273 203a 2064 6963 7420  rameters : dict ",
            "+00008a60: 6f72 2053 6572 6965 732c 206f 7074 696f  or Series, optio",
            "+00008a70: 6e61 6c0a 2020 2020 2020 2020 5375 7070  nal.        Supp",
            "+00008a80: 6f72 7465 6420 6b65 7973 2061 7265 2027  orted keys are '",
            "+00008a90: 6463 5f6f 686d 6963 5f70 6572 6365 6e74  dc_ohmic_percent",
            "+00008aa0: 272e 0a0a 2020 2020 6e61 6d65 203a 2073  '...    name : s",
            "+00008ab0: 7472 2c20 6f70 7469 6f6e 616c 0a20 2020  tr, optional.   ",
            "+00008ac0: 2020 2020 204e 616d 6520 6f66 2041 7272       Name of Arr",
            "+00008ad0: 6179 2069 6e73 7461 6e63 652e 0a20 2020  ay instance..   ",
            "+00008ae0: 2022 2222 0a0a 2020 2020 6465 6620 5f5f   \"\"\"..    def __",
            "+00008af0: 696e 6974 5f5f 2873 656c 662c 206d 6f75  init__(self, mou",
            "+00008b00: 6e74 2c0a 2020 2020 2020 2020 2020 2020  nt,.            ",
            "+00008b10: 2020 2020 2061 6c62 6564 6f3d 4e6f 6e65       albedo=None",
            "+00008b20: 2c20 7375 7266 6163 655f 7479 7065 3d4e  , surface_type=N",
            "+00008b30: 6f6e 652c 0a20 2020 2020 2020 2020 2020  one,.           ",
            "+00008b40: 2020 2020 2020 6d6f 6475 6c65 3d4e 6f6e        module=Non",
            "+00008b50: 652c 206d 6f64 756c 655f 7479 7065 3d4e  e, module_type=N",
            "+00008b60: 6f6e 652c 0a20 2020 2020 2020 2020 2020  one,.           ",
            "+00008b70: 2020 2020 2020 6d6f 6475 6c65 5f70 6172        module_par",
            "+00008b80: 616d 6574 6572 733d 4e6f 6e65 2c0a 2020  ameters=None,.  ",
            "+00008b90: 2020 2020 2020 2020 2020 2020 2020 2074                 t",
            "+00008ba0: 656d 7065 7261 7475 7265 5f6d 6f64 656c  emperature_model",
            "+00008bb0: 5f70 6172 616d 6574 6572 733d 4e6f 6e65  _parameters=None",
            "+00008bc0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "+00008bd0: 2020 206d 6f64 756c 6573 5f70 6572 5f73     modules_per_s",
            "+00008be0: 7472 696e 673d 312c 2073 7472 696e 6773  tring=1, strings",
            "+00008bf0: 3d31 2c0a 2020 2020 2020 2020 2020 2020  =1,.            ",
            "+00008c00: 2020 2020 2061 7272 6179 5f6c 6f73 7365       array_losse",
            "+00008c10: 735f 7061 7261 6d65 7465 7273 3d4e 6f6e  s_parameters=Non",
            "+00008c20: 652c 0a20 2020 2020 2020 2020 2020 2020  e,.             ",
            "+00008c30: 2020 2020 6e61 6d65 3d4e 6f6e 6529 3a0a      name=None):.",
            "+00008c40: 2020 2020 2020 2020 7365 6c66 2e6d 6f75          self.mou",
            "+00008c50: 6e74 203d 206d 6f75 6e74 0a0a 2020 2020  nt = mount..    ",
            "+00008c60: 2020 2020 7365 6c66 2e73 7572 6661 6365      self.surface",
            "+00008c70: 5f74 7970 6520 3d20 7375 7266 6163 655f  _type = surface_",
            "+00008c80: 7479 7065 0a20 2020 2020 2020 2069 6620  type.        if ",
            "+00008c90: 616c 6265 646f 2069 7320 4e6f 6e65 3a0a  albedo is None:.",
            "+00008ca0: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "+00008cb0: 2e61 6c62 6564 6f20 3d20 7076 6c69 622e  .albedo = pvlib.",
            "+00008cc0: 616c 6265 646f 2e53 5552 4641 4345 5f41  albedo.SURFACE_A",
            "+00008cd0: 4c42 4544 4f53 2e67 6574 2873 7572 6661  LBEDOS.get(surfa",
            "+00008ce0: 6365 5f74 7970 652c 2030 2e32 3529 0a20  ce_type, 0.25). ",
            "+00008cf0: 2020 2020 2020 2065 6c73 653a 0a20 2020         else:.   ",
            "+00008d00: 2020 2020 2020 2020 2073 656c 662e 616c           self.al",
            "+00008d10: 6265 646f 203d 2061 6c62 6564 6f0a 0a20  bedo = albedo.. ",
            "+00008d20: 2020 2020 2020 2073 656c 662e 6d6f 6475         self.modu",
            "+00008d30: 6c65 203d 206d 6f64 756c 650a 2020 2020  le = module.    ",
            "+00008d40: 2020 2020 6966 206d 6f64 756c 655f 7061      if module_pa",
            "+00008d50: 7261 6d65 7465 7273 2069 7320 4e6f 6e65  rameters is None",
            "+00008d60: 3a0a 2020 2020 2020 2020 2020 2020 7365  :.            se",
            "+00008d70: 6c66 2e6d 6f64 756c 655f 7061 7261 6d65  lf.module_parame",
            "+00008d80: 7465 7273 203d 207b 7d0a 2020 2020 2020  ters = {}.      ",
            "+00008d90: 2020 656c 7365 3a0a 2020 2020 2020 2020    else:.        ",
            "+00008da0: 2020 2020 7365 6c66 2e6d 6f64 756c 655f      self.module_",
            "+00008db0: 7061 7261 6d65 7465 7273 203d 206d 6f64  parameters = mod",
            "+00008dc0: 756c 655f 7061 7261 6d65 7465 7273 0a0a  ule_parameters..",
            "+00008dd0: 2020 2020 2020 2020 7365 6c66 2e6d 6f64          self.mod",
            "+00008de0: 756c 655f 7479 7065 203d 206d 6f64 756c  ule_type = modul",
            "+00008df0: 655f 7479 7065 0a0a 2020 2020 2020 2020  e_type..        ",
            "+00008e00: 7365 6c66 2e73 7472 696e 6773 203d 2073  self.strings = s",
            "+00008e10: 7472 696e 6773 0a20 2020 2020 2020 2073  trings.        s",
            "+00008e20: 656c 662e 6d6f 6475 6c65 735f 7065 725f  elf.modules_per_",
            "+00008e30: 7374 7269 6e67 203d 206d 6f64 756c 6573  string = modules",
            "+00008e40: 5f70 6572 5f73 7472 696e 670a 0a20 2020  _per_string..   ",
            "+00008e50: 2020 2020 2069 6620 7465 6d70 6572 6174       if temperat",
            "+00008e60: 7572 655f 6d6f 6465 6c5f 7061 7261 6d65  ure_model_parame",
            "+00008e70: 7465 7273 2069 7320 4e6f 6e65 3a0a 2020  ters is None:.  ",
            "+00008e80: 2020 2020 2020 2020 2020 7365 6c66 2e74            self.t",
            "+00008e90: 656d 7065 7261 7475 7265 5f6d 6f64 656c  emperature_model",
            "+00008ea0: 5f70 6172 616d 6574 6572 7320 3d20 5c0a  _parameters = \\.",
            "+00008eb0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00008ec0: 7365 6c66 2e5f 696e 6665 725f 7465 6d70  self._infer_temp",
            "+00008ed0: 6572 6174 7572 655f 6d6f 6465 6c5f 7061  erature_model_pa",
            "+00008ee0: 7261 6d73 2829 0a20 2020 2020 2020 2065  rams().        e",
            "+00008ef0: 6c73 653a 0a20 2020 2020 2020 2020 2020  lse:.           ",
            "+00008f00: 2073 656c 662e 7465 6d70 6572 6174 7572   self.temperatur",
            "+00008f10: 655f 6d6f 6465 6c5f 7061 7261 6d65 7465  e_model_paramete",
            "+00008f20: 7273 203d 2074 656d 7065 7261 7475 7265  rs = temperature",
            "+00008f30: 5f6d 6f64 656c 5f70 6172 616d 6574 6572  _model_parameter",
            "+00008f40: 730a 0a20 2020 2020 2020 2069 6620 6172  s..        if ar",
            "+00008f50: 7261 795f 6c6f 7373 6573 5f70 6172 616d  ray_losses_param",
            "+00008f60: 6574 6572 7320 6973 204e 6f6e 653a 0a20  eters is None:. ",
            "+00008f70: 2020 2020 2020 2020 2020 2073 656c 662e             self.",
            "+00008f80: 6172 7261 795f 6c6f 7373 6573 5f70 6172  array_losses_par",
            "+00008f90: 616d 6574 6572 7320 3d20 7b7d 0a20 2020  ameters = {}.   ",
            "+00008fa0: 2020 2020 2065 6c73 653a 0a20 2020 2020       else:.     ",
            "+00008fb0: 2020 2020 2020 2073 656c 662e 6172 7261         self.arra",
            "+00008fc0: 795f 6c6f 7373 6573 5f70 6172 616d 6574  y_losses_paramet",
            "+00008fd0: 6572 7320 3d20 6172 7261 795f 6c6f 7373  ers = array_loss",
            "+00008fe0: 6573 5f70 6172 616d 6574 6572 730a 0a20  es_parameters.. ",
            "+00008ff0: 2020 2020 2020 2073 656c 662e 6e61 6d65         self.name",
            "+00009000: 203d 206e 616d 650a 0a20 2020 2064 6566   = name..    def",
            "+00009010: 205f 5f72 6570 725f 5f28 7365 6c66 293a   __repr__(self):",
            "+00009020: 0a20 2020 2020 2020 2061 7474 7273 203d  .        attrs =",
            "+00009030: 205b 276e 616d 6527 2c20 276d 6f75 6e74   ['name', 'mount",
            "+00009040: 272c 2027 6d6f 6475 6c65 272c 0a20 2020  ', 'module',.   ",
            "+00009050: 2020 2020 2020 2020 2020 2020 2020 2761                'a",
            "+00009060: 6c62 6564 6f27 2c20 276d 6f64 756c 655f  lbedo', 'module_",
            "+00009070: 7479 7065 272c 0a20 2020 2020 2020 2020  type',.         ",
            "+00009080: 2020 2020 2020 2020 2774 656d 7065 7261          'tempera",
            "+00009090: 7475 7265 5f6d 6f64 656c 5f70 6172 616d  ture_model_param",
            "+000090a0: 6574 6572 7327 2c0a 2020 2020 2020 2020  eters',.        ",
            "+000090b0: 2020 2020 2020 2020 2027 7374 7269 6e67           'string",
            "+000090c0: 7327 2c20 276d 6f64 756c 6573 5f70 6572  s', 'modules_per",
            "+000090d0: 5f73 7472 696e 6727 5d0a 0a20 2020 2020  _string']..     ",
            "+000090e0: 2020 2072 6574 7572 6e20 2741 7272 6179     return 'Array",
            "+000090f0: 3a5c 6e20 2027 202b 2027 5c6e 2020 272e  :\\n  ' + '\\n  '.",
            "+00009100: 6a6f 696e 280a 2020 2020 2020 2020 2020  join(.          ",
            "+00009110: 2020 6627 7b61 7474 727d 3a20 7b67 6574    f'{attr}: {get",
            "+00009120: 6174 7472 2873 656c 662c 2061 7474 7229  attr(self, attr)",
            "+00009130: 7d27 2066 6f72 2061 7474 7220 696e 2061  }' for attr in a",
            "+00009140: 7474 7273 0a20 2020 2020 2020 2029 0a0a  ttrs.        )..",
            "+00009150: 2020 2020 6465 6620 5f69 6e66 6572 5f74      def _infer_t",
            "+00009160: 656d 7065 7261 7475 7265 5f6d 6f64 656c  emperature_model",
            "+00009170: 5f70 6172 616d 7328 7365 6c66 293a 0a20  _params(self):. ",
            "+00009180: 2020 2020 2020 2023 2074 7279 2074 6f20         # try to ",
            "+00009190: 696e 6665 7220 7465 6d70 6572 6174 7572  infer temperatur",
            "+000091a0: 6520 6d6f 6465 6c20 7061 7261 6d65 7465  e model paramete",
            "+000091b0: 7273 2066 726f 6d20 7261 636b 696e 675f  rs from racking_",
            "+000091c0: 6d6f 6465 6c0a 2020 2020 2020 2020 2320  model.        # ",
            "+000091d0: 616e 6420 6d6f 6475 6c65 5f74 7970 650a  and module_type.",
            "+000091e0: 2020 2020 2020 2020 7061 7261 6d5f 7365          param_se",
            "+000091f0: 7420 3d20 6627 7b73 656c 662e 6d6f 756e  t = f'{self.moun",
            "+00009200: 742e 7261 636b 696e 675f 6d6f 6465 6c7d  t.racking_model}",
            "+00009210: 5f7b 7365 6c66 2e6d 6f64 756c 655f 7479  _{self.module_ty",
            "+00009220: 7065 7d27 0a20 2020 2020 2020 2069 6620  pe}'.        if ",
            "+00009230: 7061 7261 6d5f 7365 7420 696e 2074 656d  param_set in tem",
            "+00009240: 7065 7261 7475 7265 2e54 454d 5045 5241  perature.TEMPERA",
            "+00009250: 5455 5245 5f4d 4f44 454c 5f50 4152 414d  TURE_MODEL_PARAM",
            "+00009260: 4554 4552 535b 2773 6170 6d27 5d3a 0a20  ETERS['sapm']:. ",
            "+00009270: 2020 2020 2020 2020 2020 2072 6574 7572             retur",
            "+00009280: 6e20 7465 6d70 6572 6174 7572 652e 5f74  n temperature._t",
            "+00009290: 656d 7065 7261 7475 7265 5f6d 6f64 656c  emperature_model",
            "+000092a0: 5f70 6172 616d 7328 2773 6170 6d27 2c20  _params('sapm', ",
            "+000092b0: 7061 7261 6d5f 7365 7429 0a20 2020 2020  param_set).     ",
            "+000092c0: 2020 2065 6c69 6620 2766 7265 6573 7461     elif 'freesta",
            "+000092d0: 6e64 696e 6727 2069 6e20 7061 7261 6d5f  nding' in param_",
            "+000092e0: 7365 743a 0a20 2020 2020 2020 2020 2020  set:.           ",
            "+000092f0: 2072 6574 7572 6e20 7465 6d70 6572 6174   return temperat",
            "+00009300: 7572 652e 5f74 656d 7065 7261 7475 7265  ure._temperature",
            "+00009310: 5f6d 6f64 656c 5f70 6172 616d 7328 2770  _model_params('p",
            "+00009320: 7673 7973 7427 2c0a 2020 2020 2020 2020  vsyst',.        ",
            "+00009330: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009340: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009350: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009360: 2027 6672 6565 7374 616e 6469 6e67 2729   'freestanding')",
            "+00009370: 0a20 2020 2020 2020 2065 6c69 6620 2769  .        elif 'i",
            "+00009380: 6e73 756c 6174 6564 2720 696e 2070 6172  nsulated' in par",
            "+00009390: 616d 5f73 6574 3a20 2023 2061 6674 6572  am_set:  # after",
            "+000093a0: 2053 4150 4d20 746f 2061 766f 6964 2063   SAPM to avoid c",
            "+000093b0: 6f6e 6675 7369 6e67 206b 6579 730a 2020  onfusing keys.  ",
            "+000093c0: 2020 2020 2020 2020 2020 7265 7475 726e            return",
            "+000093d0: 2074 656d 7065 7261 7475 7265 2e5f 7465   temperature._te",
            "+000093e0: 6d70 6572 6174 7572 655f 6d6f 6465 6c5f  mperature_model_",
            "+000093f0: 7061 7261 6d73 2827 7076 7379 7374 272c  params('pvsyst',",
            "+00009400: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+00009410: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009420: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009430: 2020 2020 2020 2020 2020 2769 6e73 756c            'insul",
            "+00009440: 6174 6564 2729 0a20 2020 2020 2020 2065  ated').        e",
            "+00009450: 6c69 6620 2773 656d 695f 696e 7465 6772  lif 'semi_integr",
            "+00009460: 6174 6564 2720 696e 2070 6172 616d 5f73  ated' in param_s",
            "+00009470: 6574 3a0a 2020 2020 2020 2020 2020 2020  et:.            ",
            "+00009480: 7265 7475 726e 2074 656d 7065 7261 7475  return temperatu",
            "+00009490: 7265 2e5f 7465 6d70 6572 6174 7572 655f  re._temperature_",
            "+000094a0: 6d6f 6465 6c5f 7061 7261 6d73 2827 7076  model_params('pv",
            "+000094b0: 7379 7374 272c 0a20 2020 2020 2020 2020  syst',.         ",
            "+000094c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000094d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000094e0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000094f0: 2773 656d 695f 696e 7465 6772 6174 6564  'semi_integrated",
            "+00009500: 2729 0a20 2020 2020 2020 2065 6c73 653a  ').        else:",
            "+00009510: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret",
            "+00009520: 7572 6e20 7b7d 0a0a 2020 2020 6465 6620  urn {}..    def ",
            "+00009530: 5f69 6e66 6572 5f63 656c 6c5f 7479 7065  _infer_cell_type",
            "+00009540: 2873 656c 6629 3a0a 2020 2020 2020 2020  (self):.        ",
            "+00009550: 2222 220a 2020 2020 2020 2020 4578 616d  \"\"\".        Exam",
            "+00009560: 696e 6573 206d 6f64 756c 655f 7061 7261  ines module_para",
            "+00009570: 6d65 7465 7273 2061 6e64 206d 6170 7320  meters and maps ",
            "+00009580: 7468 6520 5465 6368 6e6f 6c6f 6779 206b  the Technology k",
            "+00009590: 6579 2066 6f72 2074 6865 2043 4543 0a20  ey for the CEC. ",
            "+000095a0: 2020 2020 2020 2064 6174 6162 6173 6520         database ",
            "+000095b0: 616e 6420 7468 6520 4d61 7465 7269 616c  and the Material",
            "+000095c0: 206b 6579 2066 6f72 2074 6865 2053 616e   key for the San",
            "+000095d0: 6469 6120 6461 7461 6261 7365 2074 6f20  dia database to ",
            "+000095e0: 6120 636f 6d6d 6f6e 0a20 2020 2020 2020  a common.       ",
            "+000095f0: 206c 6973 7420 6f66 2073 7472 696e 6773   list of strings",
            "+00009600: 2066 6f72 2063 656c 6c20 7479 7065 2e0a   for cell type..",
            "+00009610: 0a20 2020 2020 2020 2052 6574 7572 6e73  .        Returns",
            "+00009620: 0a20 2020 2020 2020 202d 2d2d 2d2d 2d2d  .        -------",
            "+00009630: 0a20 2020 2020 2020 2063 656c 6c5f 7479  .        cell_ty",
            "+00009640: 7065 3a20 7374 720a 0a20 2020 2020 2020  pe: str..       ",
            "+00009650: 2022 2222 0a0a 2020 2020 2020 2020 5f63   \"\"\"..        _c",
            "+00009660: 656c 6c5f 7479 7065 5f64 6963 7420 3d20  ell_type_dict = ",
            "+00009670: 7b27 4d75 6c74 692d 632d 5369 273a 2027  {'Multi-c-Si': '",
            "+00009680: 6d75 6c74 6973 6927 2c0a 2020 2020 2020  multisi',.      ",
            "+00009690: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000096a0: 2020 2020 2027 4d6f 6e6f 2d63 2d53 6927       'Mono-c-Si'",
            "+000096b0: 3a20 276d 6f6e 6f73 6927 2c0a 2020 2020  : 'monosi',.    ",
            "+000096c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000096d0: 2020 2020 2020 2027 5468 696e 2046 696c         'Thin Fil",
            "+000096e0: 6d27 3a20 2763 6967 7327 2c0a 2020 2020  m': 'cigs',.    ",
            "+000096f0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009700: 2020 2020 2020 2027 612d 5369 2f6e 6327         'a-Si/nc'",
            "+00009710: 3a20 2761 7369 272c 0a20 2020 2020 2020  : 'asi',.       ",
            "+00009720: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009730: 2020 2020 2743 4953 273a 2027 6369 6773      'CIS': 'cigs",
            "+00009740: 272c 0a20 2020 2020 2020 2020 2020 2020  ',.             ",
            "+00009750: 2020 2020 2020 2020 2020 2020 2020 2743                'C",
            "+00009760: 4947 5327 3a20 2763 6967 7327 2c0a 2020  IGS': 'cigs',.  ",
            "+00009770: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009780: 2020 2020 2020 2020 2027 312d 612d 5369           '1-a-Si",
            "+00009790: 273a 2027 6173 6927 2c0a 2020 2020 2020  ': 'asi',.      ",
            "+000097a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000097b0: 2020 2020 2027 4364 5465 273a 2027 6364       'CdTe': 'cd",
            "+000097c0: 7465 272c 0a20 2020 2020 2020 2020 2020  te',.           ",
            "+000097d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000097e0: 2761 2d53 6927 3a20 2761 7369 272c 0a20  'a-Si': 'asi',. ",
            " 000097f0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009800: 2027 4761 4173 273a 204e 6f6e 652c 0a20   'GaAs': None,. ",
            "-00009810: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009820: 2020 2020 2020 2020 2020 2761 2d53 6920            'a-Si ",
            "-00009830: 2f20 6d6f 6e6f 2d53 6927 3a20 276d 6f6e  / mono-Si': 'mon",
            "-00009840: 6f73 6927 7d0a 0a20 2020 2020 2020 2069  osi'}..        i",
            "-00009850: 6620 2754 6563 686e 6f6c 6f67 7927 2069  f 'Technology' i",
            "-00009860: 6e20 7365 6c66 2e6d 6f64 756c 655f 7061  n self.module_pa",
            "-00009870: 7261 6d65 7465 7273 2e6b 6579 7328 293a  rameters.keys():",
            "-00009880: 0a20 2020 2020 2020 2020 2020 2023 2043  .            # C",
            "-00009890: 4543 206d 6f64 756c 6520 7061 7261 6d65  EC module parame",
            "-000098a0: 7465 7220 7365 740a 2020 2020 2020 2020  ter set.        ",
            "-000098b0: 2020 2020 6365 6c6c 5f74 7970 6520 3d20      cell_type = ",
            "-000098c0: 5f63 656c 6c5f 7479 7065 5f64 6963 745b  _cell_type_dict[",
            "-000098d0: 7365 6c66 2e6d 6f64 756c 655f 7061 7261  self.module_para",
            "-000098e0: 6d65 7465 7273 5b27 5465 6368 6e6f 6c6f  meters['Technolo",
            "-000098f0: 6779 275d 5d0a 2020 2020 2020 2020 656c  gy']].        el",
            "-00009900: 6966 2027 4d61 7465 7269 616c 2720 696e  if 'Material' in",
            "-00009910: 2073 656c 662e 6d6f 6475 6c65 5f70 6172   self.module_par",
            "-00009920: 616d 6574 6572 732e 6b65 7973 2829 3a0a  ameters.keys():.",
            "-00009930: 2020 2020 2020 2020 2020 2020 2320 5361              # Sa",
            "-00009940: 6e64 6961 206d 6f64 756c 6520 7061 7261  ndia module para",
            "-00009950: 6d65 7465 7220 7365 740a 2020 2020 2020  meter set.      ",
            "-00009960: 2020 2020 2020 6365 6c6c 5f74 7970 6520        cell_type ",
            "-00009970: 3d20 5f63 656c 6c5f 7479 7065 5f64 6963  = _cell_type_dic",
            "-00009980: 745b 7365 6c66 2e6d 6f64 756c 655f 7061  t[self.module_pa",
            "-00009990: 7261 6d65 7465 7273 5b27 4d61 7465 7269  rameters['Materi",
            "-000099a0: 616c 275d 5d0a 2020 2020 2020 2020 656c  al']].        el",
            "-000099b0: 7365 3a0a 2020 2020 2020 2020 2020 2020  se:.            ",
            "-000099c0: 6365 6c6c 5f74 7970 6520 3d20 4e6f 6e65  cell_type = None",
            "-000099d0: 0a0a 2020 2020 2020 2020 7265 7475 726e  ..        return",
            "-000099e0: 2063 656c 6c5f 7479 7065 0a0a 2020 2020   cell_type..    ",
            "-000099f0: 6465 6620 6765 745f 616f 6928 7365 6c66  def get_aoi(self",
            "-00009a00: 2c20 736f 6c61 725f 7a65 6e69 7468 2c20  , solar_zenith, ",
            "-00009a10: 736f 6c61 725f 617a 696d 7574 6829 3a0a  solar_azimuth):.",
            "-00009a20: 2020 2020 2020 2020 2222 220a 2020 2020          \"\"\".    ",
            "-00009a30: 2020 2020 4765 7420 7468 6520 616e 676c      Get the angl",
            "-00009a40: 6520 6f66 2069 6e63 6964 656e 6365 206f  e of incidence o",
            "-00009a50: 6e20 7468 6520 6172 7261 792e 0a0a 2020  n the array...  ",
            "-00009a60: 2020 2020 2020 5061 7261 6d65 7465 7273        Parameters",
            "-00009a70: 0a20 2020 2020 2020 202d 2d2d 2d2d 2d2d  .        -------",
            "-00009a80: 2d2d 2d0a 2020 2020 2020 2020 736f 6c61  ---.        sola",
            "-00009a90: 725f 7a65 6e69 7468 203a 2066 6c6f 6174  r_zenith : float",
            "-00009aa0: 206f 7220 5365 7269 6573 0a20 2020 2020   or Series.     ",
            "-00009ab0: 2020 2020 2020 2053 6f6c 6172 207a 656e         Solar zen",
            "-00009ac0: 6974 6820 616e 676c 652e 0a20 2020 2020  ith angle..     ",
            "-00009ad0: 2020 2073 6f6c 6172 5f61 7a69 6d75 7468     solar_azimuth",
            "-00009ae0: 203a 2066 6c6f 6174 206f 7220 5365 7269   : float or Seri",
            "-00009af0: 6573 0a20 2020 2020 2020 2020 2020 2053  es.            S",
            "-00009b00: 6f6c 6172 2061 7a69 6d75 7468 2061 6e67  olar azimuth ang",
            "-00009b10: 6c65 0a0a 2020 2020 2020 2020 5265 7475  le..        Retu",
            "-00009b20: 726e 730a 2020 2020 2020 2020 2d2d 2d2d  rns.        ----",
            "-00009b30: 2d2d 2d0a 2020 2020 2020 2020 616f 6920  ---.        aoi ",
            "-00009b40: 3a20 5365 7269 6573 0a20 2020 2020 2020  : Series.       ",
            "-00009b50: 2020 2020 2054 6865 6e20 616e 676c 6520       Then angle ",
            "-00009b60: 6f66 2069 6e63 6964 656e 6365 2e0a 2020  of incidence..  ",
            "-00009b70: 2020 2020 2020 2222 220a 2020 2020 2020        \"\"\".      ",
            "-00009b80: 2020 6f72 6965 6e74 6174 696f 6e20 3d20    orientation = ",
            "-00009b90: 7365 6c66 2e6d 6f75 6e74 2e67 6574 5f6f  self.mount.get_o",
            "-00009ba0: 7269 656e 7461 7469 6f6e 2873 6f6c 6172  rientation(solar",
            "-00009bb0: 5f7a 656e 6974 682c 2073 6f6c 6172 5f61  _zenith, solar_a",
            "-00009bc0: 7a69 6d75 7468 290a 2020 2020 2020 2020  zimuth).        ",
            "-00009bd0: 7265 7475 726e 2069 7272 6164 6961 6e63  return irradianc",
            "-00009be0: 652e 616f 6928 6f72 6965 6e74 6174 696f  e.aoi(orientatio",
            "-00009bf0: 6e5b 2773 7572 6661 6365 5f74 696c 7427  n['surface_tilt'",
            "-00009c00: 5d2c 0a20 2020 2020 2020 2020 2020 2020  ],.             ",
            "-00009c10: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00009c20: 206f 7269 656e 7461 7469 6f6e 5b27 7375   orientation['su",
            "-00009c30: 7266 6163 655f 617a 696d 7574 6827 5d2c  rface_azimuth'],",
            "-00009c40: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00009c50: 2020 2020 2020 2020 2020 2020 2020 2073                 s",
            "-00009c60: 6f6c 6172 5f7a 656e 6974 682c 2073 6f6c  olar_zenith, sol",
            "-00009c70: 6172 5f61 7a69 6d75 7468 290a 0a20 2020  ar_azimuth)..   ",
            "-00009c80: 2064 6566 2067 6574 5f69 7272 6164 6961   def get_irradia",
            "-00009c90: 6e63 6528 7365 6c66 2c20 736f 6c61 725f  nce(self, solar_",
            "-00009ca0: 7a65 6e69 7468 2c20 736f 6c61 725f 617a  zenith, solar_az",
            "-00009cb0: 696d 7574 682c 2064 6e69 2c20 6768 692c  imuth, dni, ghi,",
            "-00009cc0: 2064 6869 2c0a 2020 2020 2020 2020 2020   dhi,.          ",
            "-00009cd0: 2020 2020 2020 2020 2020 2020 2064 6e69               dni",
            "-00009ce0: 5f65 7874 7261 3d4e 6f6e 652c 2061 6972  _extra=None, air",
            "-00009cf0: 6d61 7373 3d4e 6f6e 652c 2061 6c62 6564  mass=None, albed",
            "-00009d00: 6f3d 4e6f 6e65 2c0a 2020 2020 2020 2020  o=None,.        ",
            "-00009d10: 2020 2020 2020 2020 2020 2020 2020 206d                 m",
            "-00009d20: 6f64 656c 3d27 6861 7964 6176 6965 7327  odel='haydavies'",
            "-00009d30: 2c20 2a2a 6b77 6172 6773 293a 0a20 2020  , **kwargs):.   ",
            "-00009d40: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "-00009d50: 2047 6574 2070 6c61 6e65 206f 6620 6172   Get plane of ar",
            "-00009d60: 7261 7920 6972 7261 6469 616e 6365 2063  ray irradiance c",
            "-00009d70: 6f6d 706f 6e65 6e74 732e 0a0a 2020 2020  omponents...    ",
            "-00009d80: 2020 2020 5573 6573 203a 7079 3a66 756e      Uses :py:fun",
            "-00009d90: 633a 6070 766c 6962 2e69 7272 6164 6961  c:`pvlib.irradia",
            "-00009da0: 6e63 652e 6765 745f 746f 7461 6c5f 6972  nce.get_total_ir",
            "-00009db0: 7261 6469 616e 6365 6020 746f 0a20 2020  radiance` to.   ",
            "-00009dc0: 2020 2020 2063 616c 6375 6c61 7465 2074       calculate t",
            "-00009dd0: 6865 2070 6c61 6e65 206f 6620 6172 7261  he plane of arra",
            "-00009de0: 7920 6972 7261 6469 616e 6365 2063 6f6d  y irradiance com",
            "-00009df0: 706f 6e65 6e74 7320 666f 7220 6120 7375  ponents for a su",
            "-00009e00: 7266 6163 650a 2020 2020 2020 2020 6465  rface.        de",
            "-00009e10: 6669 6e65 6420 6279 2060 6073 656c 662e  fined by ``self.",
            "-00009e20: 7375 7266 6163 655f 7469 6c74 6060 2061  surface_tilt`` a",
            "-00009e30: 6e64 2060 6073 656c 662e 7375 7266 6163  nd ``self.surfac",
            "-00009e40: 655f 617a 696d 7574 6860 602e 0a0a 2020  e_azimuth``...  ",
            "-00009e50: 2020 2020 2020 5061 7261 6d65 7465 7273        Parameters",
            "-00009e60: 0a20 2020 2020 2020 202d 2d2d 2d2d 2d2d  .        -------",
            "-00009e70: 2d2d 2d0a 2020 2020 2020 2020 736f 6c61  ---.        sola",
            "-00009e80: 725f 7a65 6e69 7468 203a 2066 6c6f 6174  r_zenith : float",
            "-00009e90: 206f 7220 5365 7269 6573 2e0a 2020 2020   or Series..    ",
            "-00009ea0: 2020 2020 2020 2020 536f 6c61 7220 7a65          Solar ze",
            "-00009eb0: 6e69 7468 2061 6e67 6c65 2e0a 2020 2020  nith angle..    ",
            "-00009ec0: 2020 2020 736f 6c61 725f 617a 696d 7574      solar_azimut",
            "-00009ed0: 6820 3a20 666c 6f61 7420 6f72 2053 6572  h : float or Ser",
            "-00009ee0: 6965 732e 0a20 2020 2020 2020 2020 2020  ies..           ",
            "-00009ef0: 2053 6f6c 6172 2061 7a69 6d75 7468 2061   Solar azimuth a",
            "-00009f00: 6e67 6c65 2e0a 2020 2020 2020 2020 646e  ngle..        dn",
            "-00009f10: 6920 3a20 666c 6f61 7420 6f72 2053 6572  i : float or Ser",
            "-00009f20: 6965 730a 2020 2020 2020 2020 2020 2020  ies.            ",
            "-00009f30: 4469 7265 6374 206e 6f72 6d61 6c20 6972  Direct normal ir",
            "-00009f40: 7261 6469 616e 6365 2e20 5b57 2f6d 325d  radiance. [W/m2]",
            "-00009f50: 0a20 2020 2020 2020 2067 6869 203a 2066  .        ghi : f",
            "-00009f60: 6c6f 6174 206f 7220 5365 7269 6573 2e20  loat or Series. ",
            "-00009f70: 5b57 2f6d 325d 0a20 2020 2020 2020 2020  [W/m2].         ",
            "-00009f80: 2020 2047 6c6f 6261 6c20 686f 7269 7a6f     Global horizo",
            "-00009f90: 6e74 616c 2069 7272 6164 6961 6e63 650a  ntal irradiance.",
            "-00009fa0: 2020 2020 2020 2020 6468 6920 3a20 666c          dhi : fl",
            "-00009fb0: 6f61 7420 6f72 2053 6572 6965 730a 2020  oat or Series.  ",
            "-00009fc0: 2020 2020 2020 2020 2020 4469 6666 7573            Diffus",
            "-00009fd0: 6520 686f 7269 7a6f 6e74 616c 2069 7272  e horizontal irr",
            "-00009fe0: 6164 6961 6e63 652e 205b 572f 6d32 5d0a  adiance. [W/m2].",
            "-00009ff0: 2020 2020 2020 2020 646e 695f 6578 7472          dni_extr",
            "-0000a000: 6120 3a20 666c 6f61 7420 6f72 2053 6572  a : float or Ser",
            "-0000a010: 6965 732c 206f 7074 696f 6e61 6c0a 2020  ies, optional.  ",
            "-0000a020: 2020 2020 2020 2020 2020 4578 7472 6174            Extrat",
            "-0000a030: 6572 7265 7374 7269 616c 2064 6972 6563  errestrial direc",
            "-0000a040: 7420 6e6f 726d 616c 2069 7272 6164 6961  t normal irradia",
            "-0000a050: 6e63 652e 205b 572f 6d32 5d0a 2020 2020  nce. [W/m2].    ",
            "-0000a060: 2020 2020 6169 726d 6173 7320 3a20 666c      airmass : fl",
            "-0000a070: 6f61 7420 6f72 2053 6572 6965 732c 206f  oat or Series, o",
            "-0000a080: 7074 696f 6e61 6c0a 2020 2020 2020 2020  ptional.        ",
            "-0000a090: 2020 2020 4169 726d 6173 732e 205b 756e      Airmass. [un",
            "-0000a0a0: 6974 6c65 7373 5d0a 2020 2020 2020 2020  itless].        ",
            "-0000a0b0: 616c 6265 646f 203a 2066 6c6f 6174 206f  albedo : float o",
            "-0000a0c0: 7220 5365 7269 6573 2c20 6f70 7469 6f6e  r Series, option",
            "-0000a0d0: 616c 0a20 2020 2020 2020 2020 2020 2047  al.            G",
            "-0000a0e0: 726f 756e 6420 7375 7266 6163 6520 616c  round surface al",
            "-0000a0f0: 6265 646f 2e20 5b75 6e69 746c 6573 735d  bedo. [unitless]",
            "-0000a100: 0a20 2020 2020 2020 206d 6f64 656c 203a  .        model :",
            "-0000a110: 2053 7472 696e 672c 2064 6566 6175 6c74   String, default",
            "-0000a120: 2027 6861 7964 6176 6965 7327 0a20 2020   'haydavies'.   ",
            "-0000a130: 2020 2020 2020 2020 2049 7272 6164 6961           Irradia",
            "-0000a140: 6e63 6520 6d6f 6465 6c2e 0a0a 2020 2020  nce model...    ",
            "-0000a150: 2020 2020 6b77 6172 6773 0a20 2020 2020      kwargs.     ",
            "-0000a160: 2020 2020 2020 2045 7874 7261 2070 6172         Extra par",
            "-0000a170: 616d 6574 6572 7320 7061 7373 6564 2074  ameters passed t",
            "-0000a180: 6f0a 2020 2020 2020 2020 2020 2020 3a70  o.            :p",
            "-0000a190: 793a 6675 6e63 3a60 7076 6c69 622e 6972  y:func:`pvlib.ir",
            "-0000a1a0: 7261 6469 616e 6365 2e67 6574 5f74 6f74  radiance.get_tot",
            "-0000a1b0: 616c 5f69 7272 6164 6961 6e63 6560 2e0a  al_irradiance`..",
            "-0000a1c0: 0a20 2020 2020 2020 2052 6574 7572 6e73  .        Returns",
            "-0000a1d0: 0a20 2020 2020 2020 202d 2d2d 2d2d 2d2d  .        -------",
            "-0000a1e0: 0a20 2020 2020 2020 2070 6f61 5f69 7272  .        poa_irr",
            "-0000a1f0: 6164 6961 6e63 6520 3a20 4461 7461 4672  adiance : DataFr",
            "-0000a200: 616d 650a 2020 2020 2020 2020 2020 2020  ame.            ",
            "-0000a210: 436f 6c75 6d6e 206e 616d 6573 2061 7265  Column names are",
            "-0000a220: 3a20 6060 2770 6f61 5f67 6c6f 6261 6c27  : ``'poa_global'",
            "-0000a230: 2c20 2770 6f61 5f64 6972 6563 7427 2c20  , 'poa_direct', ",
            "-0000a240: 2770 6f61 5f64 6966 6675 7365 272c 0a20  'poa_diffuse',. ",
            "-0000a250: 2020 2020 2020 2020 2020 2027 706f 615f             'poa_",
            "-0000a260: 736b 795f 6469 6666 7573 6527 2c20 2770  sky_diffuse', 'p",
            "-0000a270: 6f61 5f67 726f 756e 645f 6469 6666 7573  oa_ground_diffus",
            "-0000a280: 6527 6060 2e0a 0a20 2020 2020 2020 204e  e'``...        N",
            "-0000a290: 6f74 6573 0a20 2020 2020 2020 202d 2d2d  otes.        ---",
            "-0000a2a0: 2d2d 0a20 2020 2020 2020 2053 6f6d 6520  --.        Some ",
            "-0000a2b0: 736b 7920 6972 7261 6469 616e 6365 206d  sky irradiance m",
            "-0000a2c0: 6f64 656c 7320 7265 7175 6972 6520 6060  odels require ``",
            "-0000a2d0: 646e 695f 6578 7472 6160 602e 2046 6f72  dni_extra``. For",
            "-0000a2e0: 2074 6865 7365 206d 6f64 656c 732c 0a20   these models,. ",
            "-0000a2f0: 2020 2020 2020 2069 6620 6060 646e 695f         if ``dni_",
            "-0000a300: 6578 7472 6160 6020 6973 206e 6f74 2070  extra`` is not p",
            "-0000a310: 726f 7669 6465 6420 616e 6420 6060 736f  rovided and ``so",
            "-0000a320: 6c61 725f 7a65 6e69 7468 6060 2068 6173  lar_zenith`` has",
            "-0000a330: 2061 0a20 2020 2020 2020 2060 6044 6174   a.        ``Dat",
            "-0000a340: 6574 696d 6549 6e64 6578 6060 2c20 7468  etimeIndex``, th",
            "-0000a350: 656e 2060 6064 6e69 5f65 7874 7261 6060  en ``dni_extra``",
            "-0000a360: 2069 7320 6361 6c63 756c 6174 6564 2e0a   is calculated..",
            "-0000a370: 2020 2020 2020 2020 4f74 6865 7277 6973          Otherwis",
            "-0000a380: 652c 2060 6064 6e69 5f65 7874 7261 3d31  e, ``dni_extra=1",
            "-0000a390: 3336 3760 6020 6973 2061 7373 756d 6564  367`` is assumed",
            "-0000a3a0: 2e0a 0a20 2020 2020 2020 2053 6565 2061  ...        See a",
            "-0000a3b0: 6c73 6f0a 2020 2020 2020 2020 2d2d 2d2d  lso.        ----",
            "-0000a3c0: 2d2d 2d2d 0a20 2020 2020 2020 203a 7079  ----.        :py",
            "-0000a3d0: 3a66 756e 633a 6070 766c 6962 2e69 7272  :func:`pvlib.irr",
            "-0000a3e0: 6164 6961 6e63 652e 6765 745f 746f 7461  adiance.get_tota",
            "-0000a3f0: 6c5f 6972 7261 6469 616e 6365 600a 2020  l_irradiance`.  ",
            "-0000a400: 2020 2020 2020 2222 220a 2020 2020 2020        \"\"\".      ",
            "-0000a410: 2020 6966 2061 6c62 6564 6f20 6973 204e    if albedo is N",
            "-0000a420: 6f6e 653a 0a20 2020 2020 2020 2020 2020  one:.           ",
            "-0000a430: 2061 6c62 6564 6f20 3d20 7365 6c66 2e61   albedo = self.a",
            "-0000a440: 6c62 6564 6f0a 0a20 2020 2020 2020 2023  lbedo..        #",
            "-0000a450: 2064 6e69 5f65 7874 7261 2069 7320 6e6f   dni_extra is no",
            "-0000a460: 7420 6e65 6564 6564 2066 6f72 2061 6c6c  t needed for all",
            "-0000a470: 206d 6f64 656c 732c 2062 7574 2074 6869   models, but thi",
            "-0000a480: 7320 6973 2065 6173 6965 720a 2020 2020  s is easier.    ",
            "-0000a490: 2020 2020 6966 2064 6e69 5f65 7874 7261      if dni_extra",
            "-0000a4a0: 2069 7320 4e6f 6e65 3a0a 2020 2020 2020   is None:.      ",
            "-0000a4b0: 2020 2020 2020 6966 2028 6861 7361 7474        if (hasatt",
            "-0000a4c0: 7228 736f 6c61 725f 7a65 6e69 7468 2c20  r(solar_zenith, ",
            "-0000a4d0: 2769 6e64 6578 2729 2061 6e64 0a20 2020  'index') and.   ",
            "-0000a4e0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a4f0: 2069 7369 6e73 7461 6e63 6528 736f 6c61   isinstance(sola",
            "-0000a500: 725f 7a65 6e69 7468 2e69 6e64 6578 2c20  r_zenith.index, ",
            "-0000a510: 7064 2e44 6174 6574 696d 6549 6e64 6578  pd.DatetimeIndex",
            "-0000a520: 2929 3a0a 2020 2020 2020 2020 2020 2020  )):.            ",
            "-0000a530: 2020 2020 2320 6361 6c63 756c 6174 6520      # calculate ",
            "-0000a540: 6578 7472 6174 6572 7265 7374 7269 616c  extraterrestrial",
            "-0000a550: 2069 7272 6164 6961 6e63 650a 2020 2020   irradiance.    ",
            "-0000a560: 2020 2020 2020 2020 2020 2020 646e 695f              dni_",
            "-0000a570: 6578 7472 6120 3d20 6972 7261 6469 616e  extra = irradian",
            "-0000a580: 6365 2e67 6574 5f65 7874 7261 5f72 6164  ce.get_extra_rad",
            "-0000a590: 6961 7469 6f6e 280a 2020 2020 2020 2020  iation(.        ",
            "-0000a5a0: 2020 2020 2020 2020 2020 2020 736f 6c61              sola",
            "-0000a5b0: 725f 7a65 6e69 7468 2e69 6e64 6578 290a  r_zenith.index).",
            "-0000a5c0: 2020 2020 2020 2020 2020 2020 656c 7365              else",
            "-0000a5d0: 3a0a 2020 2020 2020 2020 2020 2020 2020  :.              ",
            "-0000a5e0: 2020 2320 7573 6520 7468 6520 736f 6c61    # use the sola",
            "-0000a5f0: 7220 636f 6e73 7461 6e74 0a20 2020 2020  r constant.     ",
            "-0000a600: 2020 2020 2020 2020 2020 2064 6e69 5f65             dni_e",
            "-0000a610: 7874 7261 203d 2031 3336 372e 300a 0a20  xtra = 1367.0.. ",
            "-0000a620: 2020 2020 2020 2069 6620 6169 726d 6173         if airmas",
            "-0000a630: 7320 6973 204e 6f6e 653a 0a20 2020 2020  s is None:.     ",
            "-0000a640: 2020 2020 2020 2061 6972 6d61 7373 203d         airmass =",
            "-0000a650: 2061 746d 6f73 7068 6572 652e 6765 745f   atmosphere.get_",
            "-0000a660: 7265 6c61 7469 7665 5f61 6972 6d61 7373  relative_airmass",
            "-0000a670: 2873 6f6c 6172 5f7a 656e 6974 6829 0a0a  (solar_zenith)..",
            "-0000a680: 2020 2020 2020 2020 6f72 6965 6e74 6174          orientat",
            "-0000a690: 696f 6e20 3d20 7365 6c66 2e6d 6f75 6e74  ion = self.mount",
            "-0000a6a0: 2e67 6574 5f6f 7269 656e 7461 7469 6f6e  .get_orientation",
            "-0000a6b0: 2873 6f6c 6172 5f7a 656e 6974 682c 2073  (solar_zenith, s",
            "-0000a6c0: 6f6c 6172 5f61 7a69 6d75 7468 290a 2020  olar_azimuth).  ",
            "-0000a6d0: 2020 2020 2020 7265 7475 726e 2069 7272        return irr",
            "-0000a6e0: 6164 6961 6e63 652e 6765 745f 746f 7461  adiance.get_tota",
            "-0000a6f0: 6c5f 6972 7261 6469 616e 6365 286f 7269  l_irradiance(ori",
            "-0000a700: 656e 7461 7469 6f6e 5b27 7375 7266 6163  entation['surfac",
            "-0000a710: 655f 7469 6c74 275d 2c0a 2020 2020 2020  e_tilt'],.      ",
            "-0000a720: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a730: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a740: 2020 2020 2020 2020 206f 7269 656e 7461           orienta",
            "-0000a750: 7469 6f6e 5b27 7375 7266 6163 655f 617a  tion['surface_az",
            "-0000a760: 696d 7574 6827 5d2c 0a20 2020 2020 2020  imuth'],.       ",
            "-0000a770: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a780: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a790: 2020 2020 2020 2020 736f 6c61 725f 7a65          solar_ze",
            "-0000a7a0: 6e69 7468 2c20 736f 6c61 725f 617a 696d  nith, solar_azim",
            "-0000a7b0: 7574 682c 0a20 2020 2020 2020 2020 2020  uth,.           ",
            "-0000a7c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a7d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a7e0: 2020 2020 646e 692c 2067 6869 2c20 6468      dni, ghi, dh",
            "-0000a7f0: 692c 0a20 2020 2020 2020 2020 2020 2020  i,.             ",
            "-0000a800: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a810: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a820: 2020 646e 695f 6578 7472 613d 646e 695f    dni_extra=dni_",
            "-0000a830: 6578 7472 612c 0a20 2020 2020 2020 2020  extra,.         ",
            "-0000a840: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a850: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a860: 2020 2020 2020 6169 726d 6173 733d 6169        airmass=ai",
            "-0000a870: 726d 6173 732c 0a20 2020 2020 2020 2020  rmass,.         ",
            "+00009800: 2020 2020 2020 2020 2020 2732 2d61 2d53            '2-a-S",
            "+00009810: 6927 3a20 4e6f 6e65 2c0a 2020 2020 2020  i': None,.      ",
            "+00009820: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009830: 2020 2020 2027 332d 612d 5369 273a 204e       '3-a-Si': N",
            "+00009840: 6f6e 652c 0a20 2020 2020 2020 2020 2020  one,.           ",
            "+00009850: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009860: 2748 4954 2d53 6927 3a20 276d 6f6e 6f73  'HIT-Si': 'monos",
            "+00009870: 6927 2c0a 2020 2020 2020 2020 2020 2020  i',.            ",
            "+00009880: 2020 2020 2020 2020 2020 2020 2020 2027                 '",
            "+00009890: 6d63 2d53 6927 3a20 276d 756c 7469 7369  mc-Si': 'multisi",
            "+000098a0: 272c 0a20 2020 2020 2020 2020 2020 2020  ',.             ",
            "+000098b0: 2020 2020 2020 2020 2020 2020 2020 2763                'c",
            "+000098c0: 2d53 6927 3a20 276d 756c 7469 7369 272c  -Si': 'multisi',",
            "+000098d0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+000098e0: 2020 2020 2020 2020 2020 2020 2753 692d              'Si-",
            "+000098f0: 4669 6c6d 273a 2027 6173 6927 2c0a 2020  Film': 'asi',.  ",
            "+00009900: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009910: 2020 2020 2020 2020 2027 4546 4720 6d63           'EFG mc",
            "+00009920: 2d53 6927 3a20 276d 756c 7469 7369 272c  -Si': 'multisi',",
            "+00009930: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+00009940: 2020 2020 2020 2020 2020 2020 2747 6141              'GaA",
            "+00009950: 7327 3a20 4e6f 6e65 2c0a 2020 2020 2020  s': None,.      ",
            "+00009960: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009970: 2020 2020 2027 612d 5369 202f 206d 6f6e       'a-Si / mon",
            "+00009980: 6f2d 5369 273a 2027 6d6f 6e6f 7369 277d  o-Si': 'monosi'}",
            "+00009990: 0a0a 2020 2020 2020 2020 6966 2027 5465  ..        if 'Te",
            "+000099a0: 6368 6e6f 6c6f 6779 2720 696e 2073 656c  chnology' in sel",
            "+000099b0: 662e 6d6f 6475 6c65 5f70 6172 616d 6574  f.module_paramet",
            "+000099c0: 6572 732e 6b65 7973 2829 3a0a 2020 2020  ers.keys():.    ",
            "+000099d0: 2020 2020 2020 2020 2320 4345 4320 6d6f          # CEC mo",
            "+000099e0: 6475 6c65 2070 6172 616d 6574 6572 2073  dule parameter s",
            "+000099f0: 6574 0a20 2020 2020 2020 2020 2020 2063  et.            c",
            "+00009a00: 656c 6c5f 7479 7065 203d 205f 6365 6c6c  ell_type = _cell",
            "+00009a10: 5f74 7970 655f 6469 6374 5b73 656c 662e  _type_dict[self.",
            "+00009a20: 6d6f 6475 6c65 5f70 6172 616d 6574 6572  module_parameter",
            "+00009a30: 735b 2754 6563 686e 6f6c 6f67 7927 5d5d  s['Technology']]",
            "+00009a40: 0a20 2020 2020 2020 2065 6c69 6620 274d  .        elif 'M",
            "+00009a50: 6174 6572 6961 6c27 2069 6e20 7365 6c66  aterial' in self",
            "+00009a60: 2e6d 6f64 756c 655f 7061 7261 6d65 7465  .module_paramete",
            "+00009a70: 7273 2e6b 6579 7328 293a 0a20 2020 2020  rs.keys():.     ",
            "+00009a80: 2020 2020 2020 2023 2053 616e 6469 6120         # Sandia ",
            "+00009a90: 6d6f 6475 6c65 2070 6172 616d 6574 6572  module parameter",
            "+00009aa0: 2073 6574 0a20 2020 2020 2020 2020 2020   set.           ",
            "+00009ab0: 2063 656c 6c5f 7479 7065 203d 205f 6365   cell_type = _ce",
            "+00009ac0: 6c6c 5f74 7970 655f 6469 6374 5b73 656c  ll_type_dict[sel",
            "+00009ad0: 662e 6d6f 6475 6c65 5f70 6172 616d 6574  f.module_paramet",
            "+00009ae0: 6572 735b 274d 6174 6572 6961 6c27 5d5d  ers['Material']]",
            "+00009af0: 0a20 2020 2020 2020 2065 6c73 653a 0a20  .        else:. ",
            "+00009b00: 2020 2020 2020 2020 2020 2063 656c 6c5f             cell_",
            "+00009b10: 7479 7065 203d 204e 6f6e 650a 0a20 2020  type = None..   ",
            "+00009b20: 2020 2020 2072 6574 7572 6e20 6365 6c6c       return cell",
            "+00009b30: 5f74 7970 650a 0a20 2020 2064 6566 2067  _type..    def g",
            "+00009b40: 6574 5f61 6f69 2873 656c 662c 2073 6f6c  et_aoi(self, sol",
            "+00009b50: 6172 5f7a 656e 6974 682c 2073 6f6c 6172  ar_zenith, solar",
            "+00009b60: 5f61 7a69 6d75 7468 293a 0a20 2020 2020  _azimuth):.     ",
            "+00009b70: 2020 2022 2222 0a20 2020 2020 2020 2047     \"\"\".        G",
            "+00009b80: 6574 2074 6865 2061 6e67 6c65 206f 6620  et the angle of ",
            "+00009b90: 696e 6369 6465 6e63 6520 6f6e 2074 6865  incidence on the",
            "+00009ba0: 2061 7272 6179 2e0a 0a20 2020 2020 2020   array...       ",
            "+00009bb0: 2050 6172 616d 6574 6572 730a 2020 2020   Parameters.    ",
            "+00009bc0: 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20      ----------. ",
            "+00009bd0: 2020 2020 2020 2073 6f6c 6172 5f7a 656e         solar_zen",
            "+00009be0: 6974 6820 3a20 666c 6f61 7420 6f72 2053  ith : float or S",
            "+00009bf0: 6572 6965 730a 2020 2020 2020 2020 2020  eries.          ",
            "+00009c00: 2020 536f 6c61 7220 7a65 6e69 7468 2061    Solar zenith a",
            "+00009c10: 6e67 6c65 2e0a 2020 2020 2020 2020 736f  ngle..        so",
            "+00009c20: 6c61 725f 617a 696d 7574 6820 3a20 666c  lar_azimuth : fl",
            "+00009c30: 6f61 7420 6f72 2053 6572 6965 730a 2020  oat or Series.  ",
            "+00009c40: 2020 2020 2020 2020 2020 536f 6c61 7220            Solar ",
            "+00009c50: 617a 696d 7574 6820 616e 676c 650a 0a20  azimuth angle.. ",
            "+00009c60: 2020 2020 2020 2052 6574 7572 6e73 0a20         Returns. ",
            "+00009c70: 2020 2020 2020 202d 2d2d 2d2d 2d2d 0a20         -------. ",
            "+00009c80: 2020 2020 2020 2061 6f69 203a 2053 6572         aoi : Ser",
            "+00009c90: 6965 730a 2020 2020 2020 2020 2020 2020  ies.            ",
            "+00009ca0: 5468 656e 2061 6e67 6c65 206f 6620 696e  Then angle of in",
            "+00009cb0: 6369 6465 6e63 652e 0a20 2020 2020 2020  cidence..       ",
            "+00009cc0: 2022 2222 0a20 2020 2020 2020 206f 7269   \"\"\".        ori",
            "+00009cd0: 656e 7461 7469 6f6e 203d 2073 656c 662e  entation = self.",
            "+00009ce0: 6d6f 756e 742e 6765 745f 6f72 6965 6e74  mount.get_orient",
            "+00009cf0: 6174 696f 6e28 736f 6c61 725f 7a65 6e69  ation(solar_zeni",
            "+00009d00: 7468 2c20 736f 6c61 725f 617a 696d 7574  th, solar_azimut",
            "+00009d10: 6829 0a20 2020 2020 2020 2072 6574 7572  h).        retur",
            "+00009d20: 6e20 6972 7261 6469 616e 6365 2e61 6f69  n irradiance.aoi",
            "+00009d30: 286f 7269 656e 7461 7469 6f6e 5b27 7375  (orientation['su",
            "+00009d40: 7266 6163 655f 7469 6c74 275d 2c0a 2020  rface_tilt'],.  ",
            "+00009d50: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009d60: 2020 2020 2020 2020 2020 2020 6f72 6965              orie",
            "+00009d70: 6e74 6174 696f 6e5b 2773 7572 6661 6365  ntation['surface",
            "+00009d80: 5f61 7a69 6d75 7468 275d 2c0a 2020 2020  _azimuth'],.    ",
            "+00009d90: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00009da0: 2020 2020 2020 2020 2020 736f 6c61 725f            solar_",
            "+00009db0: 7a65 6e69 7468 2c20 736f 6c61 725f 617a  zenith, solar_az",
            "+00009dc0: 696d 7574 6829 0a0a 2020 2020 6465 6620  imuth)..    def ",
            "+00009dd0: 6765 745f 6972 7261 6469 616e 6365 2873  get_irradiance(s",
            "+00009de0: 656c 662c 2073 6f6c 6172 5f7a 656e 6974  elf, solar_zenit",
            "+00009df0: 682c 2073 6f6c 6172 5f61 7a69 6d75 7468  h, solar_azimuth",
            "+00009e00: 2c20 646e 692c 2067 6869 2c20 6468 692c  , dni, ghi, dhi,",
            "+00009e10: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+00009e20: 2020 2020 2020 2020 646e 695f 6578 7472          dni_extr",
            "+00009e30: 613d 4e6f 6e65 2c20 6169 726d 6173 733d  a=None, airmass=",
            "+00009e40: 4e6f 6e65 2c20 616c 6265 646f 3d4e 6f6e  None, albedo=Non",
            "+00009e50: 652c 0a20 2020 2020 2020 2020 2020 2020  e,.             ",
            "+00009e60: 2020 2020 2020 2020 2020 6d6f 6465 6c3d            model=",
            "+00009e70: 2768 6179 6461 7669 6573 272c 202a 2a6b  'haydavies', **k",
            "+00009e80: 7761 7267 7329 3a0a 2020 2020 2020 2020  wargs):.        ",
            "+00009e90: 2222 220a 2020 2020 2020 2020 4765 7420  \"\"\".        Get ",
            "+00009ea0: 706c 616e 6520 6f66 2061 7272 6179 2069  plane of array i",
            "+00009eb0: 7272 6164 6961 6e63 6520 636f 6d70 6f6e  rradiance compon",
            "+00009ec0: 656e 7473 2e0a 0a20 2020 2020 2020 2055  ents...        U",
            "+00009ed0: 7365 7320 3a70 793a 6675 6e63 3a60 7076  ses :py:func:`pv",
            "+00009ee0: 6c69 622e 6972 7261 6469 616e 6365 2e67  lib.irradiance.g",
            "+00009ef0: 6574 5f74 6f74 616c 5f69 7272 6164 6961  et_total_irradia",
            "+00009f00: 6e63 6560 2074 6f0a 2020 2020 2020 2020  nce` to.        ",
            "+00009f10: 6361 6c63 756c 6174 6520 7468 6520 706c  calculate the pl",
            "+00009f20: 616e 6520 6f66 2061 7272 6179 2069 7272  ane of array irr",
            "+00009f30: 6164 6961 6e63 6520 636f 6d70 6f6e 656e  adiance componen",
            "+00009f40: 7473 2066 6f72 2061 2073 7572 6661 6365  ts for a surface",
            "+00009f50: 0a20 2020 2020 2020 2064 6566 696e 6564  .        defined",
            "+00009f60: 2062 7920 6060 7365 6c66 2e73 7572 6661   by ``self.surfa",
            "+00009f70: 6365 5f74 696c 7460 6020 616e 6420 6060  ce_tilt`` and ``",
            "+00009f80: 7365 6c66 2e73 7572 6661 6365 5f61 7a69  self.surface_azi",
            "+00009f90: 6d75 7468 6060 2e0a 0a20 2020 2020 2020  muth``...       ",
            "+00009fa0: 2050 6172 616d 6574 6572 730a 2020 2020   Parameters.    ",
            "+00009fb0: 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20      ----------. ",
            "+00009fc0: 2020 2020 2020 2073 6f6c 6172 5f7a 656e         solar_zen",
            "+00009fd0: 6974 6820 3a20 666c 6f61 7420 6f72 2053  ith : float or S",
            "+00009fe0: 6572 6965 732e 0a20 2020 2020 2020 2020  eries..         ",
            "+00009ff0: 2020 2053 6f6c 6172 207a 656e 6974 6820     Solar zenith ",
            "+0000a000: 616e 676c 652e 0a20 2020 2020 2020 2073  angle..        s",
            "+0000a010: 6f6c 6172 5f61 7a69 6d75 7468 203a 2066  olar_azimuth : f",
            "+0000a020: 6c6f 6174 206f 7220 5365 7269 6573 2e0a  loat or Series..",
            "+0000a030: 2020 2020 2020 2020 2020 2020 536f 6c61              Sola",
            "+0000a040: 7220 617a 696d 7574 6820 616e 676c 652e  r azimuth angle.",
            "+0000a050: 0a20 2020 2020 2020 2064 6e69 203a 2066  .        dni : f",
            "+0000a060: 6c6f 6174 206f 7220 5365 7269 6573 0a20  loat or Series. ",
            "+0000a070: 2020 2020 2020 2020 2020 2044 6972 6563             Direc",
            "+0000a080: 7420 6e6f 726d 616c 2069 7272 6164 6961  t normal irradia",
            "+0000a090: 6e63 652e 205b 572f 6d32 5d0a 2020 2020  nce. [W/m2].    ",
            "+0000a0a0: 2020 2020 6768 6920 3a20 666c 6f61 7420      ghi : float ",
            "+0000a0b0: 6f72 2053 6572 6965 732e 205b 572f 6d32  or Series. [W/m2",
            "+0000a0c0: 5d0a 2020 2020 2020 2020 2020 2020 476c  ].            Gl",
            "+0000a0d0: 6f62 616c 2068 6f72 697a 6f6e 7461 6c20  obal horizontal ",
            "+0000a0e0: 6972 7261 6469 616e 6365 0a20 2020 2020  irradiance.     ",
            "+0000a0f0: 2020 2064 6869 203a 2066 6c6f 6174 206f     dhi : float o",
            "+0000a100: 7220 5365 7269 6573 0a20 2020 2020 2020  r Series.       ",
            "+0000a110: 2020 2020 2044 6966 6675 7365 2068 6f72       Diffuse hor",
            "+0000a120: 697a 6f6e 7461 6c20 6972 7261 6469 616e  izontal irradian",
            "+0000a130: 6365 2e20 5b57 2f6d 325d 0a20 2020 2020  ce. [W/m2].     ",
            "+0000a140: 2020 2064 6e69 5f65 7874 7261 203a 2066     dni_extra : f",
            "+0000a150: 6c6f 6174 206f 7220 5365 7269 6573 2c20  loat or Series, ",
            "+0000a160: 6f70 7469 6f6e 616c 0a20 2020 2020 2020  optional.       ",
            "+0000a170: 2020 2020 2045 7874 7261 7465 7272 6573       Extraterres",
            "+0000a180: 7472 6961 6c20 6469 7265 6374 206e 6f72  trial direct nor",
            "+0000a190: 6d61 6c20 6972 7261 6469 616e 6365 2e20  mal irradiance. ",
            "+0000a1a0: 5b57 2f6d 325d 0a20 2020 2020 2020 2061  [W/m2].        a",
            "+0000a1b0: 6972 6d61 7373 203a 2066 6c6f 6174 206f  irmass : float o",
            "+0000a1c0: 7220 5365 7269 6573 2c20 6f70 7469 6f6e  r Series, option",
            "+0000a1d0: 616c 0a20 2020 2020 2020 2020 2020 2041  al.            A",
            "+0000a1e0: 6972 6d61 7373 2e20 5b75 6e69 746c 6573  irmass. [unitles",
            "+0000a1f0: 735d 0a20 2020 2020 2020 2061 6c62 6564  s].        albed",
            "+0000a200: 6f20 3a20 666c 6f61 7420 6f72 2053 6572  o : float or Ser",
            "+0000a210: 6965 732c 206f 7074 696f 6e61 6c0a 2020  ies, optional.  ",
            "+0000a220: 2020 2020 2020 2020 2020 4772 6f75 6e64            Ground",
            "+0000a230: 2073 7572 6661 6365 2061 6c62 6564 6f2e   surface albedo.",
            "+0000a240: 205b 756e 6974 6c65 7373 5d0a 2020 2020   [unitless].    ",
            "+0000a250: 2020 2020 6d6f 6465 6c20 3a20 5374 7269      model : Stri",
            "+0000a260: 6e67 2c20 6465 6661 756c 7420 2768 6179  ng, default 'hay",
            "+0000a270: 6461 7669 6573 270a 2020 2020 2020 2020  davies'.        ",
            "+0000a280: 2020 2020 4972 7261 6469 616e 6365 206d      Irradiance m",
            "+0000a290: 6f64 656c 2e0a 0a20 2020 2020 2020 206b  odel...        k",
            "+0000a2a0: 7761 7267 730a 2020 2020 2020 2020 2020  wargs.          ",
            "+0000a2b0: 2020 4578 7472 6120 7061 7261 6d65 7465    Extra paramete",
            "+0000a2c0: 7273 2070 6173 7365 6420 746f 0a20 2020  rs passed to.   ",
            "+0000a2d0: 2020 2020 2020 2020 203a 7079 3a66 756e           :py:fun",
            "+0000a2e0: 633a 6070 766c 6962 2e69 7272 6164 6961  c:`pvlib.irradia",
            "+0000a2f0: 6e63 652e 6765 745f 746f 7461 6c5f 6972  nce.get_total_ir",
            "+0000a300: 7261 6469 616e 6365 602e 0a0a 2020 2020  radiance`...    ",
            "+0000a310: 2020 2020 5265 7475 726e 730a 2020 2020      Returns.    ",
            "+0000a320: 2020 2020 2d2d 2d2d 2d2d 2d0a 2020 2020      -------.    ",
            "+0000a330: 2020 2020 706f 615f 6972 7261 6469 616e      poa_irradian",
            "+0000a340: 6365 203a 2044 6174 6146 7261 6d65 0a20  ce : DataFrame. ",
            "+0000a350: 2020 2020 2020 2020 2020 2043 6f6c 756d             Colum",
            "+0000a360: 6e20 6e61 6d65 7320 6172 653a 2060 6027  n names are: ``'",
            "+0000a370: 706f 615f 676c 6f62 616c 272c 2027 706f  poa_global', 'po",
            "+0000a380: 615f 6469 7265 6374 272c 2027 706f 615f  a_direct', 'poa_",
            "+0000a390: 6469 6666 7573 6527 2c0a 2020 2020 2020  diffuse',.      ",
            "+0000a3a0: 2020 2020 2020 2770 6f61 5f73 6b79 5f64        'poa_sky_d",
            "+0000a3b0: 6966 6675 7365 272c 2027 706f 615f 6772  iffuse', 'poa_gr",
            "+0000a3c0: 6f75 6e64 5f64 6966 6675 7365 2760 602e  ound_diffuse'``.",
            "+0000a3d0: 0a0a 2020 2020 2020 2020 4e6f 7465 730a  ..        Notes.",
            "+0000a3e0: 2020 2020 2020 2020 2d2d 2d2d 2d0a 2020          -----.  ",
            "+0000a3f0: 2020 2020 2020 536f 6d65 2073 6b79 2069        Some sky i",
            "+0000a400: 7272 6164 6961 6e63 6520 6d6f 6465 6c73  rradiance models",
            "+0000a410: 2072 6571 7569 7265 2060 6064 6e69 5f65   require ``dni_e",
            "+0000a420: 7874 7261 6060 2e20 466f 7220 7468 6573  xtra``. For thes",
            "+0000a430: 6520 6d6f 6465 6c73 2c0a 2020 2020 2020  e models,.      ",
            "+0000a440: 2020 6966 2060 6064 6e69 5f65 7874 7261    if ``dni_extra",
            "+0000a450: 6060 2069 7320 6e6f 7420 7072 6f76 6964  `` is not provid",
            "+0000a460: 6564 2061 6e64 2060 6073 6f6c 6172 5f7a  ed and ``solar_z",
            "+0000a470: 656e 6974 6860 6020 6861 7320 610a 2020  enith`` has a.  ",
            "+0000a480: 2020 2020 2020 6060 4461 7465 7469 6d65        ``Datetime",
            "+0000a490: 496e 6465 7860 602c 2074 6865 6e20 6060  Index``, then ``",
            "+0000a4a0: 646e 695f 6578 7472 6160 6020 6973 2063  dni_extra`` is c",
            "+0000a4b0: 616c 6375 6c61 7465 642e 0a20 2020 2020  alculated..     ",
            "+0000a4c0: 2020 204f 7468 6572 7769 7365 2c20 6060     Otherwise, ``",
            "+0000a4d0: 646e 695f 6578 7472 613d 3133 3637 6060  dni_extra=1367``",
            "+0000a4e0: 2069 7320 6173 7375 6d65 642e 0a0a 2020   is assumed...  ",
            "+0000a4f0: 2020 2020 2020 5365 6520 616c 736f 0a20        See also. ",
            "+0000a500: 2020 2020 2020 202d 2d2d 2d2d 2d2d 2d0a         --------.",
            "+0000a510: 2020 2020 2020 2020 3a70 793a 6675 6e63          :py:func",
            "+0000a520: 3a60 7076 6c69 622e 6972 7261 6469 616e  :`pvlib.irradian",
            "+0000a530: 6365 2e67 6574 5f74 6f74 616c 5f69 7272  ce.get_total_irr",
            "+0000a540: 6164 6961 6e63 6560 0a20 2020 2020 2020  adiance`.       ",
            "+0000a550: 2022 2222 0a20 2020 2020 2020 2069 6620   \"\"\".        if ",
            "+0000a560: 616c 6265 646f 2069 7320 4e6f 6e65 3a0a  albedo is None:.",
            "+0000a570: 2020 2020 2020 2020 2020 2020 616c 6265              albe",
            "+0000a580: 646f 203d 2073 656c 662e 616c 6265 646f  do = self.albedo",
            "+0000a590: 0a0a 2020 2020 2020 2020 2320 646e 695f  ..        # dni_",
            "+0000a5a0: 6578 7472 6120 6973 206e 6f74 206e 6565  extra is not nee",
            "+0000a5b0: 6465 6420 666f 7220 616c 6c20 6d6f 6465  ded for all mode",
            "+0000a5c0: 6c73 2c20 6275 7420 7468 6973 2069 7320  ls, but this is ",
            "+0000a5d0: 6561 7369 6572 0a20 2020 2020 2020 2069  easier.        i",
            "+0000a5e0: 6620 646e 695f 6578 7472 6120 6973 204e  f dni_extra is N",
            "+0000a5f0: 6f6e 653a 0a20 2020 2020 2020 2020 2020  one:.           ",
            "+0000a600: 2069 6620 2868 6173 6174 7472 2873 6f6c   if (hasattr(sol",
            "+0000a610: 6172 5f7a 656e 6974 682c 2027 696e 6465  ar_zenith, 'inde",
            "+0000a620: 7827 2920 616e 640a 2020 2020 2020 2020  x') and.        ",
            "+0000a630: 2020 2020 2020 2020 2020 2020 6973 696e              isin",
            "+0000a640: 7374 616e 6365 2873 6f6c 6172 5f7a 656e  stance(solar_zen",
            "+0000a650: 6974 682e 696e 6465 782c 2070 642e 4461  ith.index, pd.Da",
            "+0000a660: 7465 7469 6d65 496e 6465 7829 293a 0a20  tetimeIndex)):. ",
            "+0000a670: 2020 2020 2020 2020 2020 2020 2020 2023                 #",
            "+0000a680: 2063 616c 6375 6c61 7465 2065 7874 7261   calculate extra",
            "+0000a690: 7465 7272 6573 7472 6961 6c20 6972 7261  terrestrial irra",
            "+0000a6a0: 6469 616e 6365 0a20 2020 2020 2020 2020  diance.         ",
            "+0000a6b0: 2020 2020 2020 2064 6e69 5f65 7874 7261         dni_extra",
            "+0000a6c0: 203d 2069 7272 6164 6961 6e63 652e 6765   = irradiance.ge",
            "+0000a6d0: 745f 6578 7472 615f 7261 6469 6174 696f  t_extra_radiatio",
            "+0000a6e0: 6e28 0a20 2020 2020 2020 2020 2020 2020  n(.             ",
            "+0000a6f0: 2020 2020 2020 2073 6f6c 6172 5f7a 656e         solar_zen",
            "+0000a700: 6974 682e 696e 6465 7829 0a20 2020 2020  ith.index).     ",
            "+0000a710: 2020 2020 2020 2065 6c73 653a 0a20 2020         else:.   ",
            "+0000a720: 2020 2020 2020 2020 2020 2020 2023 2075               # u",
            "+0000a730: 7365 2074 6865 2073 6f6c 6172 2063 6f6e  se the solar con",
            "+0000a740: 7374 616e 740a 2020 2020 2020 2020 2020  stant.          ",
            "+0000a750: 2020 2020 2020 646e 695f 6578 7472 6120        dni_extra ",
            "+0000a760: 3d20 3133 3637 2e30 0a0a 2020 2020 2020  = 1367.0..      ",
            "+0000a770: 2020 6966 2061 6972 6d61 7373 2069 7320    if airmass is ",
            "+0000a780: 4e6f 6e65 3a0a 2020 2020 2020 2020 2020  None:.          ",
            "+0000a790: 2020 6169 726d 6173 7320 3d20 6174 6d6f    airmass = atmo",
            "+0000a7a0: 7370 6865 7265 2e67 6574 5f72 656c 6174  sphere.get_relat",
            "+0000a7b0: 6976 655f 6169 726d 6173 7328 736f 6c61  ive_airmass(sola",
            "+0000a7c0: 725f 7a65 6e69 7468 290a 0a20 2020 2020  r_zenith)..     ",
            "+0000a7d0: 2020 206f 7269 656e 7461 7469 6f6e 203d     orientation =",
            "+0000a7e0: 2073 656c 662e 6d6f 756e 742e 6765 745f   self.mount.get_",
            "+0000a7f0: 6f72 6965 6e74 6174 696f 6e28 736f 6c61  orientation(sola",
            "+0000a800: 725f 7a65 6e69 7468 2c20 736f 6c61 725f  r_zenith, solar_",
            "+0000a810: 617a 696d 7574 6829 0a20 2020 2020 2020  azimuth).       ",
            "+0000a820: 2072 6574 7572 6e20 6972 7261 6469 616e   return irradian",
            "+0000a830: 6365 2e67 6574 5f74 6f74 616c 5f69 7272  ce.get_total_irr",
            "+0000a840: 6164 6961 6e63 6528 6f72 6965 6e74 6174  adiance(orientat",
            "+0000a850: 696f 6e5b 2773 7572 6661 6365 5f74 696c  ion['surface_til",
            "+0000a860: 7427 5d2c 0a20 2020 2020 2020 2020 2020  t'],.           ",
            "+0000a870: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            " 0000a880: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a890: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a8a0: 2020 2020 2020 616c 6265 646f 3d61 6c62        albedo=alb",
            "-0000a8b0: 6564 6f2c 0a20 2020 2020 2020 2020 2020  edo,.           ",
            "+0000a890: 2020 2020 6f72 6965 6e74 6174 696f 6e5b      orientation[",
            "+0000a8a0: 2773 7572 6661 6365 5f61 7a69 6d75 7468  'surface_azimuth",
            "+0000a8b0: 275d 2c0a 2020 2020 2020 2020 2020 2020  '],.            ",
            " 0000a8c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            " 0000a8d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a8e0: 2020 2020 6d6f 6465 6c3d 6d6f 6465 6c2c      model=model,",
            "-0000a8f0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+0000a8e0: 2020 2073 6f6c 6172 5f7a 656e 6974 682c     solar_zenith,",
            "+0000a8f0: 2073 6f6c 6172 5f61 7a69 6d75 7468 2c0a   solar_azimuth,.",
            " 0000a900: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            " 0000a910: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000a920: 2a2a 6b77 6172 6773 290a 0a20 2020 2064  **kwargs)..    d",
            "-0000a930: 6566 2067 6574 5f69 616d 2873 656c 662c  ef get_iam(self,",
            "-0000a940: 2061 6f69 2c20 6961 6d5f 6d6f 6465 6c3d   aoi, iam_model=",
            "-0000a950: 2770 6879 7369 6361 6c27 293a 0a20 2020  'physical'):.   ",
            "-0000a960: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "-0000a970: 2044 6574 6572 6d69 6e65 2074 6865 2069   Determine the i",
            "-0000a980: 6e63 6964 656e 6365 2061 6e67 6c65 206d  ncidence angle m",
            "-0000a990: 6f64 6966 6965 7220 7573 696e 6720 7468  odifier using th",
            "-0000a9a0: 6520 6d65 7468 6f64 2073 7065 6369 6669  e method specifi",
            "-0000a9b0: 6564 2062 790a 2020 2020 2020 2020 6060  ed by.        ``",
            "-0000a9c0: 6961 6d5f 6d6f 6465 6c60 602e 0a0a 2020  iam_model``...  ",
            "-0000a9d0: 2020 2020 2020 5061 7261 6d65 7465 7273        Parameters",
            "-0000a9e0: 2066 6f72 2074 6865 2073 656c 6563 7465   for the selecte",
            "-0000a9f0: 6420 4941 4d20 6d6f 6465 6c20 6172 6520  d IAM model are ",
            "-0000aa00: 6578 7065 6374 6564 2074 6f20 6265 2069  expected to be i",
            "-0000aa10: 6e0a 2020 2020 2020 2020 6060 4172 7261  n.        ``Arra",
            "-0000aa20: 792e 6d6f 6475 6c65 5f70 6172 616d 6574  y.module_paramet",
            "-0000aa30: 6572 7360 602e 2044 6566 6175 6c74 2070  ers``. Default p",
            "-0000aa40: 6172 616d 6574 6572 7320 6172 6520 6176  arameters are av",
            "-0000aa50: 6169 6c61 626c 6520 666f 720a 2020 2020  ailable for.    ",
            "-0000aa60: 2020 2020 7468 6520 2770 6879 7369 6361      the 'physica",
            "-0000aa70: 6c27 2c20 2761 7368 7261 6527 2061 6e64  l', 'ashrae' and",
            "-0000aa80: 2027 6d61 7274 696e 5f72 7569 7a27 206d   'martin_ruiz' m",
            "-0000aa90: 6f64 656c 732e 0a0a 2020 2020 2020 2020  odels...        ",
            "-0000aaa0: 5061 7261 6d65 7465 7273 0a20 2020 2020  Parameters.     ",
            "-0000aab0: 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020     ----------.  ",
            "-0000aac0: 2020 2020 2020 616f 6920 3a20 6e75 6d65        aoi : nume",
            "-0000aad0: 7269 630a 2020 2020 2020 2020 2020 2020  ric.            ",
            "-0000aae0: 5468 6520 616e 676c 6520 6f66 2069 6e63  The angle of inc",
            "-0000aaf0: 6964 656e 6365 2069 6e20 6465 6772 6565  idence in degree",
            "-0000ab00: 732e 0a0a 2020 2020 2020 2020 616f 695f  s...        aoi_",
            "-0000ab10: 6d6f 6465 6c20 3a20 7374 7269 6e67 2c20  model : string, ",
            "-0000ab20: 6465 6661 756c 7420 2770 6879 7369 6361  default 'physica",
            "-0000ab30: 6c27 0a20 2020 2020 2020 2020 2020 2054  l'.            T",
            "-0000ab40: 6865 2049 414d 206d 6f64 656c 2074 6f20  he IAM model to ",
            "-0000ab50: 6265 2075 7365 642e 2056 616c 6964 2073  be used. Valid s",
            "-0000ab60: 7472 696e 6773 2061 7265 2027 7068 7973  trings are 'phys",
            "-0000ab70: 6963 616c 272c 2027 6173 6872 6165 272c  ical', 'ashrae',",
            "-0000ab80: 0a20 2020 2020 2020 2020 2020 2027 6d61  .            'ma",
            "-0000ab90: 7274 696e 5f72 7569 7a27 2c20 2773 6170  rtin_ruiz', 'sap",
            "-0000aba0: 6d27 2061 6e64 2027 696e 7465 7270 272e  m' and 'interp'.",
            "-0000abb0: 0a0a 2020 2020 2020 2020 5265 7475 726e  ..        Return",
            "-0000abc0: 730a 2020 2020 2020 2020 2d2d 2d2d 2d2d  s.        ------",
            "-0000abd0: 2d0a 2020 2020 2020 2020 6961 6d20 3a20  -.        iam : ",
            "-0000abe0: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "-0000abf0: 2020 2020 5468 6520 414f 4920 6d6f 6469      The AOI modi",
            "-0000ac00: 6669 6572 2e0a 0a20 2020 2020 2020 2052  fier...        R",
            "-0000ac10: 6169 7365 730a 2020 2020 2020 2020 2d2d  aises.        --",
            "-0000ac20: 2d2d 2d2d 0a20 2020 2020 2020 2056 616c  ----.        Val",
            "-0000ac30: 7565 4572 726f 720a 2020 2020 2020 2020  ueError.        ",
            "-0000ac40: 2020 2020 6966 2060 6961 6d5f 6d6f 6465      if `iam_mode",
            "-0000ac50: 6c60 2069 7320 6e6f 7420 6120 7661 6c69  l` is not a vali",
            "-0000ac60: 6420 6d6f 6465 6c20 6e61 6d65 2e0a 2020  d model name..  ",
            "-0000ac70: 2020 2020 2020 2222 220a 2020 2020 2020        \"\"\".      ",
            "-0000ac80: 2020 6d6f 6465 6c20 3d20 6961 6d5f 6d6f    model = iam_mo",
            "-0000ac90: 6465 6c2e 6c6f 7765 7228 290a 2020 2020  del.lower().    ",
            "-0000aca0: 2020 2020 6966 206d 6f64 656c 2069 6e20      if model in ",
            "-0000acb0: 5b27 6173 6872 6165 272c 2027 7068 7973  ['ashrae', 'phys",
            "-0000acc0: 6963 616c 272c 2027 6d61 7274 696e 5f72  ical', 'martin_r",
            "-0000acd0: 7569 7a27 2c20 2769 6e74 6572 7027 5d3a  uiz', 'interp']:",
            "-0000ace0: 0a20 2020 2020 2020 2020 2020 2066 756e  .            fun",
            "-0000acf0: 6320 3d20 6765 7461 7474 7228 6961 6d2c  c = getattr(iam,",
            "-0000ad00: 206d 6f64 656c 2920 2023 2067 6574 2066   model)  # get f",
            "-0000ad10: 756e 6374 696f 6e20 6174 2070 766c 6962  unction at pvlib",
            "-0000ad20: 2e69 616d 0a20 2020 2020 2020 2020 2020  .iam.           ",
            "-0000ad30: 2023 2067 6574 2061 6c6c 2070 6172 616d   # get all param",
            "-0000ad40: 6574 6572 7320 6672 6f6d 2066 756e 6374  eters from funct",
            "-0000ad50: 696f 6e20 7369 676e 6174 7572 6520 746f  ion signature to",
            "-0000ad60: 2072 6574 7269 6576 6520 7468 656d 2066   retrieve them f",
            "-0000ad70: 726f 6d0a 2020 2020 2020 2020 2020 2020  rom.            ",
            "-0000ad80: 2320 6d6f 6475 6c65 5f70 6172 616d 6574  # module_paramet",
            "-0000ad90: 6572 7320 6966 2070 7265 7365 6e74 0a20  ers if present. ",
            "-0000ada0: 2020 2020 2020 2020 2020 2070 6172 616d             param",
            "-0000adb0: 7320 3d20 7365 7428 696e 7370 6563 742e  s = set(inspect.",
            "-0000adc0: 7369 676e 6174 7572 6528 6675 6e63 292e  signature(func).",
            "-0000add0: 7061 7261 6d65 7465 7273 2e6b 6579 7328  parameters.keys(",
            "-0000ade0: 2929 0a20 2020 2020 2020 2020 2020 2070  )).            p",
            "-0000adf0: 6172 616d 732e 6469 7363 6172 6428 2761  arams.discard('a",
            "-0000ae00: 6f69 2729 2020 2320 6578 636c 7564 6520  oi')  # exclude ",
            "-0000ae10: 616f 6920 736f 2069 7420 6361 6e27 7420  aoi so it can't ",
            "-0000ae20: 6265 2072 6570 6561 7465 640a 2020 2020  be repeated.    ",
            "-0000ae30: 2020 2020 2020 2020 6b77 6172 6773 203d          kwargs =",
            "-0000ae40: 205f 6275 696c 645f 6b77 6172 6773 2870   _build_kwargs(p",
            "-0000ae50: 6172 616d 732c 2073 656c 662e 6d6f 6475  arams, self.modu",
            "-0000ae60: 6c65 5f70 6172 616d 6574 6572 7329 0a20  le_parameters). ",
            "-0000ae70: 2020 2020 2020 2020 2020 2072 6574 7572             retur",
            "-0000ae80: 6e20 6675 6e63 2861 6f69 2c20 2a2a 6b77  n func(aoi, **kw",
            "-0000ae90: 6172 6773 290a 2020 2020 2020 2020 656c  args).        el",
            "-0000aea0: 6966 206d 6f64 656c 203d 3d20 2773 6170  if model == 'sap",
            "-0000aeb0: 6d27 3a0a 2020 2020 2020 2020 2020 2020  m':.            ",
            "-0000aec0: 7265 7475 726e 2069 616d 2e73 6170 6d28  return iam.sapm(",
            "-0000aed0: 616f 692c 2073 656c 662e 6d6f 6475 6c65  aoi, self.module",
            "-0000aee0: 5f70 6172 616d 6574 6572 7329 0a20 2020  _parameters).   ",
            "-0000aef0: 2020 2020 2065 6c73 653a 0a20 2020 2020       else:.     ",
            "-0000af00: 2020 2020 2020 2072 6169 7365 2056 616c         raise Val",
            "-0000af10: 7565 4572 726f 7228 6d6f 6465 6c20 2b20  ueError(model + ",
            "-0000af20: 2720 6973 206e 6f74 2061 2076 616c 6964  ' is not a valid",
            "-0000af30: 2049 414d 206d 6f64 656c 2729 0a0a 2020   IAM model')..  ",
            "-0000af40: 2020 6465 6620 6765 745f 6365 6c6c 5f74    def get_cell_t",
            "-0000af50: 656d 7065 7261 7475 7265 2873 656c 662c  emperature(self,",
            "-0000af60: 2070 6f61 5f67 6c6f 6261 6c2c 2074 656d   poa_global, tem",
            "-0000af70: 705f 6169 722c 2077 696e 645f 7370 6565  p_air, wind_spee",
            "-0000af80: 642c 206d 6f64 656c 2c0a 2020 2020 2020  d, model,.      ",
            "-0000af90: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000afa0: 2020 2020 2020 2065 6666 6563 7469 7665         effective",
            "-0000afb0: 5f69 7272 6164 6961 6e63 653d 4e6f 6e65  _irradiance=None",
            "-0000afc0: 293a 0a20 2020 2020 2020 2022 2222 0a20  ):.        \"\"\". ",
            "-0000afd0: 2020 2020 2020 2044 6574 6572 6d69 6e65         Determine",
            "-0000afe0: 2063 656c 6c20 7465 6d70 6572 6174 7572   cell temperatur",
            "-0000aff0: 6520 7573 696e 6720 7468 6520 6d65 7468  e using the meth",
            "-0000b000: 6f64 2073 7065 6369 6669 6564 2062 7920  od specified by ",
            "-0000b010: 6060 6d6f 6465 6c60 602e 0a0a 2020 2020  ``model``...    ",
            "-0000b020: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "-0000b030: 2020 2020 2020 202d 2d2d 2d2d 2d2d 2d2d         ---------",
            "-0000b040: 2d0a 2020 2020 2020 2020 706f 615f 676c  -.        poa_gl",
            "-0000b050: 6f62 616c 203a 206e 756d 6572 6963 0a20  obal : numeric. ",
            "-0000b060: 2020 2020 2020 2020 2020 2054 6f74 616c             Total",
            "-0000b070: 2069 6e63 6964 656e 7420 6972 7261 6469   incident irradi",
            "-0000b080: 616e 6365 205b 572f 6d5e 325d 0a0a 2020  ance [W/m^2]..  ",
            "-0000b090: 2020 2020 2020 7465 6d70 5f61 6972 203a        temp_air :",
            "-0000b0a0: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "-0000b0b0: 2020 2020 2041 6d62 6965 6e74 2064 7279       Ambient dry",
            "-0000b0c0: 2062 756c 6220 7465 6d70 6572 6174 7572   bulb temperatur",
            "-0000b0d0: 6520 5b43 5d0a 0a20 2020 2020 2020 2077  e [C]..        w",
            "-0000b0e0: 696e 645f 7370 6565 6420 3a20 6e75 6d65  ind_speed : nume",
            "-0000b0f0: 7269 630a 2020 2020 2020 2020 2020 2020  ric.            ",
            "-0000b100: 5769 6e64 2073 7065 6564 205b 6d2f 735d  Wind speed [m/s]",
            "-0000b110: 0a0a 2020 2020 2020 2020 6d6f 6465 6c20  ..        model ",
            "-0000b120: 3a20 7374 720a 2020 2020 2020 2020 2020  : str.          ",
            "-0000b130: 2020 5375 7070 6f72 7465 6420 6d6f 6465    Supported mode",
            "-0000b140: 6c73 2069 6e63 6c75 6465 2060 6027 7361  ls include ``'sa",
            "-0000b150: 706d 2760 602c 2060 6027 7076 7379 7374  pm'``, ``'pvsyst",
            "-0000b160: 2760 602c 0a20 2020 2020 2020 2020 2020  '``,.           ",
            "-0000b170: 2060 6027 6661 696d 616e 2760 602c 2060   ``'faiman'``, `",
            "-0000b180: 6027 6675 656e 7465 7327 6060 2c20 616e  `'fuentes'``, an",
            "-0000b190: 6420 6060 276e 6f63 745f 7361 6d27 6060  d ``'noct_sam'``",
            "-0000b1a0: 0a0a 2020 2020 2020 2020 6566 6665 6374  ..        effect",
            "-0000b1b0: 6976 655f 6972 7261 6469 616e 6365 203a  ive_irradiance :",
            "-0000b1c0: 206e 756d 6572 6963 2c20 6f70 7469 6f6e   numeric, option",
            "-0000b1d0: 616c 0a20 2020 2020 2020 2020 2020 2054  al.            T",
            "-0000b1e0: 6865 2069 7272 6164 6961 6e63 6520 7468  he irradiance th",
            "-0000b1f0: 6174 2069 7320 636f 6e76 6572 7465 6420  at is converted ",
            "-0000b200: 746f 2070 686f 746f 6375 7272 656e 7420  to photocurrent ",
            "-0000b210: 696e 2057 2f6d 5e32 2e0a 2020 2020 2020  in W/m^2..      ",
            "-0000b220: 2020 2020 2020 4f6e 6c79 2075 7365 6420        Only used ",
            "-0000b230: 666f 7220 736f 6d65 206d 6f64 656c 732e  for some models.",
            "-0000b240: 0a0a 2020 2020 2020 2020 5265 7475 726e  ..        Return",
            "-0000b250: 730a 2020 2020 2020 2020 2d2d 2d2d 2d2d  s.        ------",
            "-0000b260: 2d0a 2020 2020 2020 2020 6e75 6d65 7269  -.        numeri",
            "-0000b270: 630a 2020 2020 2020 2020 2020 2020 5661  c.            Va",
            "-0000b280: 6c75 6573 2069 6e20 6465 6772 6565 7320  lues in degrees ",
            "-0000b290: 432e 0a0a 2020 2020 2020 2020 5365 6520  C...        See ",
            "-0000b2a0: 416c 736f 0a20 2020 2020 2020 202d 2d2d  Also.        ---",
            "-0000b2b0: 2d2d 2d2d 2d0a 2020 2020 2020 2020 7076  -----.        pv",
            "-0000b2c0: 6c69 622e 7465 6d70 6572 6174 7572 652e  lib.temperature.",
            "-0000b2d0: 7361 706d 5f63 656c 6c2c 2070 766c 6962  sapm_cell, pvlib",
            "-0000b2e0: 2e74 656d 7065 7261 7475 7265 2e70 7673  .temperature.pvs",
            "-0000b2f0: 7973 745f 6365 6c6c 2c0a 2020 2020 2020  yst_cell,.      ",
            "-0000b300: 2020 7076 6c69 622e 7465 6d70 6572 6174    pvlib.temperat",
            "-0000b310: 7572 652e 6661 696d 616e 2c20 7076 6c69  ure.faiman, pvli",
            "-0000b320: 622e 7465 6d70 6572 6174 7572 652e 6675  b.temperature.fu",
            "-0000b330: 656e 7465 732c 0a20 2020 2020 2020 2070  entes,.        p",
            "-0000b340: 766c 6962 2e74 656d 7065 7261 7475 7265  vlib.temperature",
            "-0000b350: 2e6e 6f63 745f 7361 6d0a 0a20 2020 2020  .noct_sam..     ",
            "-0000b360: 2020 204e 6f74 6573 0a20 2020 2020 2020     Notes.       ",
            "-0000b370: 202d 2d2d 2d2d 0a20 2020 2020 2020 2053   -----.        S",
            "-0000b380: 6f6d 6520 7465 6d70 6572 6174 7572 6520  ome temperature ",
            "-0000b390: 6d6f 6465 6c73 2068 6176 6520 7265 7175  models have requ",
            "-0000b3a0: 6972 656d 656e 7473 2066 6f72 2074 6865  irements for the",
            "-0000b3b0: 2069 6e70 7574 2074 7970 6573 3b0a 2020   input types;.  ",
            "-0000b3c0: 2020 2020 2020 7365 6520 7468 6520 646f        see the do",
            "-0000b3d0: 6375 6d65 6e74 6174 696f 6e20 6f66 2074  cumentation of t",
            "-0000b3e0: 6865 2075 6e64 6572 6c79 696e 6720 6d6f  he underlying mo",
            "-0000b3f0: 6465 6c20 6675 6e63 7469 6f6e 2066 6f72  del function for",
            "-0000b400: 2064 6574 6169 6c73 2e0a 2020 2020 2020   details..      ",
            "-0000b410: 2020 2222 220a 2020 2020 2020 2020 2320    \"\"\".        # ",
            "-0000b420: 636f 6e76 656e 6965 6e63 6520 7772 6170  convenience wrap",
            "-0000b430: 7065 7220 746f 2061 766f 6964 2070 6173  per to avoid pas",
            "-0000b440: 7369 6e67 2061 7267 7320 3220 616e 6420  sing args 2 and ",
            "-0000b450: 3320 6576 6572 7920 6361 6c6c 0a20 2020  3 every call.   ",
            "-0000b460: 2020 2020 205f 6275 696c 645f 7463 656c       _build_tcel",
            "-0000b470: 6c5f 6172 6773 203d 2066 756e 6374 6f6f  l_args = functoo",
            "-0000b480: 6c73 2e70 6172 7469 616c 280a 2020 2020  ls.partial(.    ",
            "-0000b490: 2020 2020 2020 2020 5f62 7569 6c64 5f61          _build_a",
            "-0000b4a0: 7267 732c 2069 6e70 7574 5f64 6963 743d  rgs, input_dict=",
            "-0000b4b0: 7365 6c66 2e74 656d 7065 7261 7475 7265  self.temperature",
            "-0000b4c0: 5f6d 6f64 656c 5f70 6172 616d 6574 6572  _model_parameter",
            "-0000b4d0: 732c 0a20 2020 2020 2020 2020 2020 2064  s,.            d",
            "-0000b4e0: 6963 745f 6e61 6d65 3d27 7465 6d70 6572  ict_name='temper",
            "-0000b4f0: 6174 7572 655f 6d6f 6465 6c5f 7061 7261  ature_model_para",
            "-0000b500: 6d65 7465 7273 2729 0a0a 2020 2020 2020  meters')..      ",
            "-0000b510: 2020 6966 206d 6f64 656c 203d 3d20 2773    if model == 's",
            "-0000b520: 6170 6d27 3a0a 2020 2020 2020 2020 2020  apm':.          ",
            "-0000b530: 2020 6675 6e63 203d 2074 656d 7065 7261    func = tempera",
            "-0000b540: 7475 7265 2e73 6170 6d5f 6365 6c6c 0a20  ture.sapm_cell. ",
            "-0000b550: 2020 2020 2020 2020 2020 2072 6571 7569             requi",
            "-0000b560: 7265 6420 3d20 5f62 7569 6c64 5f74 6365  red = _build_tce",
            "-0000b570: 6c6c 5f61 7267 7328 5b27 6127 2c20 2762  ll_args(['a', 'b",
            "-0000b580: 272c 2027 6465 6c74 6154 275d 290a 2020  ', 'deltaT']).  ",
            "-0000b590: 2020 2020 2020 2020 2020 6f70 7469 6f6e            option",
            "-0000b5a0: 616c 203d 205f 6275 696c 645f 6b77 6172  al = _build_kwar",
            "-0000b5b0: 6773 285b 2769 7272 6164 5f72 6566 275d  gs(['irrad_ref']",
            "-0000b5c0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "-0000b5d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000b5e0: 2020 2020 2020 2073 656c 662e 7465 6d70         self.temp",
            "-0000b5f0: 6572 6174 7572 655f 6d6f 6465 6c5f 7061  erature_model_pa",
            "-0000b600: 7261 6d65 7465 7273 290a 2020 2020 2020  rameters).      ",
            "-0000b610: 2020 656c 6966 206d 6f64 656c 203d 3d20    elif model == ",
            "-0000b620: 2770 7673 7973 7427 3a0a 2020 2020 2020  'pvsyst':.      ",
            "-0000b630: 2020 2020 2020 6675 6e63 203d 2074 656d        func = tem",
            "-0000b640: 7065 7261 7475 7265 2e70 7673 7973 745f  perature.pvsyst_",
            "-0000b650: 6365 6c6c 0a20 2020 2020 2020 2020 2020  cell.           ",
            "-0000b660: 2072 6571 7569 7265 6420 3d20 7475 706c   required = tupl",
            "-0000b670: 6528 290a 2020 2020 2020 2020 2020 2020  e().            ",
            "-0000b680: 6f70 7469 6f6e 616c 203d 207b 0a20 2020  optional = {.   ",
            "-0000b690: 2020 2020 2020 2020 2020 2020 202a 2a5f               **_",
            "-0000b6a0: 6275 696c 645f 6b77 6172 6773 285b 276d  build_kwargs(['m",
            "-0000b6b0: 6f64 756c 655f 6566 6669 6369 656e 6379  odule_efficiency",
            "-0000b6c0: 272c 2027 616c 7068 615f 6162 736f 7270  ', 'alpha_absorp",
            "-0000b6d0: 7469 6f6e 275d 2c0a 2020 2020 2020 2020  tion'],.        ",
            "-0000b6e0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000b6f0: 2020 2020 2020 2020 7365 6c66 2e6d 6f64          self.mod",
            "-0000b700: 756c 655f 7061 7261 6d65 7465 7273 292c  ule_parameters),",
            "-0000b710: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-0000b720: 202a 2a5f 6275 696c 645f 6b77 6172 6773   **_build_kwargs",
            "-0000b730: 285b 2775 5f63 272c 2027 755f 7627 5d2c  (['u_c', 'u_v'],",
            "-0000b740: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-0000b750: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000b760: 2073 656c 662e 7465 6d70 6572 6174 7572   self.temperatur",
            "-0000b770: 655f 6d6f 6465 6c5f 7061 7261 6d65 7465  e_model_paramete",
            "-0000b780: 7273 290a 2020 2020 2020 2020 2020 2020  rs).            ",
            "-0000b790: 7d0a 2020 2020 2020 2020 656c 6966 206d  }.        elif m",
            "-0000b7a0: 6f64 656c 203d 3d20 2766 6169 6d61 6e27  odel == 'faiman'",
            "-0000b7b0: 3a0a 2020 2020 2020 2020 2020 2020 6675  :.            fu",
            "-0000b7c0: 6e63 203d 2074 656d 7065 7261 7475 7265  nc = temperature",
            "-0000b7d0: 2e66 6169 6d61 6e0a 2020 2020 2020 2020  .faiman.        ",
            "-0000b7e0: 2020 2020 7265 7175 6972 6564 203d 2074      required = t",
            "-0000b7f0: 7570 6c65 2829 0a20 2020 2020 2020 2020  uple().         ",
            "-0000b800: 2020 206f 7074 696f 6e61 6c20 3d20 5f62     optional = _b",
            "-0000b810: 7569 6c64 5f6b 7761 7267 7328 5b27 7530  uild_kwargs(['u0",
            "-0000b820: 272c 2027 7531 275d 2c0a 2020 2020 2020  ', 'u1'],.      ",
            "+0000a920: 2020 2020 2020 2020 2020 2020 2020 2064                 d",
            "+0000a930: 6e69 2c20 6768 692c 2064 6869 2c0a 2020  ni, ghi, dhi,.  ",
            "+0000a940: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000a950: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000a960: 2020 2020 2020 2020 2020 2020 2064 6e69               dni",
            "+0000a970: 5f65 7874 7261 3d64 6e69 5f65 7874 7261  _extra=dni_extra",
            "+0000a980: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "+0000a990: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000a9a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000a9b0: 2061 6972 6d61 7373 3d61 6972 6d61 7373   airmass=airmass",
            "+0000a9c0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "+0000a9d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000a9e0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000a9f0: 2061 6c62 6564 6f3d 616c 6265 646f 2c0a   albedo=albedo,.",
            "+0000aa00: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000aa10: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000aa20: 2020 2020 2020 2020 2020 2020 2020 206d                 m",
            "+0000aa30: 6f64 656c 3d6d 6f64 656c 2c0a 2020 2020  odel=model,.    ",
            "+0000aa40: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000aa50: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000aa60: 2020 2020 2020 2020 2020 202a 2a6b 7761             **kwa",
            "+0000aa70: 7267 7329 0a0a 2020 2020 6465 6620 6765  rgs)..    def ge",
            "+0000aa80: 745f 6961 6d28 7365 6c66 2c20 616f 692c  t_iam(self, aoi,",
            "+0000aa90: 2069 616d 5f6d 6f64 656c 3d27 7068 7973   iam_model='phys",
            "+0000aaa0: 6963 616c 2729 3a0a 2020 2020 2020 2020  ical'):.        ",
            "+0000aab0: 2222 220a 2020 2020 2020 2020 4465 7465  \"\"\".        Dete",
            "+0000aac0: 726d 696e 6520 7468 6520 696e 6369 6465  rmine the incide",
            "+0000aad0: 6e63 6520 616e 676c 6520 6d6f 6469 6669  nce angle modifi",
            "+0000aae0: 6572 2075 7369 6e67 2074 6865 206d 6574  er using the met",
            "+0000aaf0: 686f 6420 7370 6563 6966 6965 6420 6279  hod specified by",
            "+0000ab00: 0a20 2020 2020 2020 2060 6069 616d 5f6d  .        ``iam_m",
            "+0000ab10: 6f64 656c 6060 2e0a 0a20 2020 2020 2020  odel``...       ",
            "+0000ab20: 2050 6172 616d 6574 6572 7320 666f 7220   Parameters for ",
            "+0000ab30: 7468 6520 7365 6c65 6374 6564 2049 414d  the selected IAM",
            "+0000ab40: 206d 6f64 656c 2061 7265 2065 7870 6563   model are expec",
            "+0000ab50: 7465 6420 746f 2062 6520 696e 0a20 2020  ted to be in.   ",
            "+0000ab60: 2020 2020 2060 6041 7272 6179 2e6d 6f64       ``Array.mod",
            "+0000ab70: 756c 655f 7061 7261 6d65 7465 7273 6060  ule_parameters``",
            "+0000ab80: 2e20 4465 6661 756c 7420 7061 7261 6d65  . Default parame",
            "+0000ab90: 7465 7273 2061 7265 2061 7661 696c 6162  ters are availab",
            "+0000aba0: 6c65 2066 6f72 0a20 2020 2020 2020 2074  le for.        t",
            "+0000abb0: 6865 2027 7068 7973 6963 616c 272c 2027  he 'physical', '",
            "+0000abc0: 6173 6872 6165 2720 616e 6420 276d 6172  ashrae' and 'mar",
            "+0000abd0: 7469 6e5f 7275 697a 2720 6d6f 6465 6c73  tin_ruiz' models",
            "+0000abe0: 2e0a 0a20 2020 2020 2020 2050 6172 616d  ...        Param",
            "+0000abf0: 6574 6572 730a 2020 2020 2020 2020 2d2d  eters.        --",
            "+0000ac00: 2d2d 2d2d 2d2d 2d2d 0a20 2020 2020 2020  --------.       ",
            "+0000ac10: 2061 6f69 203a 206e 756d 6572 6963 0a20   aoi : numeric. ",
            "+0000ac20: 2020 2020 2020 2020 2020 2054 6865 2061             The a",
            "+0000ac30: 6e67 6c65 206f 6620 696e 6369 6465 6e63  ngle of incidenc",
            "+0000ac40: 6520 696e 2064 6567 7265 6573 2e0a 0a20  e in degrees... ",
            "+0000ac50: 2020 2020 2020 2061 6f69 5f6d 6f64 656c         aoi_model",
            "+0000ac60: 203a 2073 7472 696e 672c 2064 6566 6175   : string, defau",
            "+0000ac70: 6c74 2027 7068 7973 6963 616c 270a 2020  lt 'physical'.  ",
            "+0000ac80: 2020 2020 2020 2020 2020 5468 6520 4941            The IA",
            "+0000ac90: 4d20 6d6f 6465 6c20 746f 2062 6520 7573  M model to be us",
            "+0000aca0: 6564 2e20 5661 6c69 6420 7374 7269 6e67  ed. Valid string",
            "+0000acb0: 7320 6172 6520 2770 6879 7369 6361 6c27  s are 'physical'",
            "+0000acc0: 2c20 2761 7368 7261 6527 2c0a 2020 2020  , 'ashrae',.    ",
            "+0000acd0: 2020 2020 2020 2020 276d 6172 7469 6e5f          'martin_",
            "+0000ace0: 7275 697a 272c 2027 7361 706d 2720 616e  ruiz', 'sapm' an",
            "+0000acf0: 6420 2769 6e74 6572 7027 2e0a 0a20 2020  d 'interp'...   ",
            "+0000ad00: 2020 2020 2052 6574 7572 6e73 0a20 2020       Returns.   ",
            "+0000ad10: 2020 2020 202d 2d2d 2d2d 2d2d 0a20 2020       -------.   ",
            "+0000ad20: 2020 2020 2069 616d 203a 206e 756d 6572       iam : numer",
            "+0000ad30: 6963 0a20 2020 2020 2020 2020 2020 2054  ic.            T",
            "+0000ad40: 6865 2041 4f49 206d 6f64 6966 6965 722e  he AOI modifier.",
            "+0000ad50: 0a0a 2020 2020 2020 2020 5261 6973 6573  ..        Raises",
            "+0000ad60: 0a20 2020 2020 2020 202d 2d2d 2d2d 2d0a  .        ------.",
            "+0000ad70: 2020 2020 2020 2020 5661 6c75 6545 7272          ValueErr",
            "+0000ad80: 6f72 0a20 2020 2020 2020 2020 2020 2069  or.            i",
            "+0000ad90: 6620 6069 616d 5f6d 6f64 656c 6020 6973  f `iam_model` is",
            "+0000ada0: 206e 6f74 2061 2076 616c 6964 206d 6f64   not a valid mod",
            "+0000adb0: 656c 206e 616d 652e 0a20 2020 2020 2020  el name..       ",
            "+0000adc0: 2022 2222 0a20 2020 2020 2020 206d 6f64   \"\"\".        mod",
            "+0000add0: 656c 203d 2069 616d 5f6d 6f64 656c 2e6c  el = iam_model.l",
            "+0000ade0: 6f77 6572 2829 0a20 2020 2020 2020 2069  ower().        i",
            "+0000adf0: 6620 6d6f 6465 6c20 696e 205b 2761 7368  f model in ['ash",
            "+0000ae00: 7261 6527 2c20 2770 6879 7369 6361 6c27  rae', 'physical'",
            "+0000ae10: 2c20 276d 6172 7469 6e5f 7275 697a 272c  , 'martin_ruiz',",
            "+0000ae20: 2027 696e 7465 7270 275d 3a0a 2020 2020   'interp']:.    ",
            "+0000ae30: 2020 2020 2020 2020 6675 6e63 203d 2067          func = g",
            "+0000ae40: 6574 6174 7472 2869 616d 2c20 6d6f 6465  etattr(iam, mode",
            "+0000ae50: 6c29 2020 2320 6765 7420 6675 6e63 7469  l)  # get functi",
            "+0000ae60: 6f6e 2061 7420 7076 6c69 622e 6961 6d0a  on at pvlib.iam.",
            "+0000ae70: 2020 2020 2020 2020 2020 2020 2320 6765              # ge",
            "+0000ae80: 7420 616c 6c20 7061 7261 6d65 7465 7273  t all parameters",
            "+0000ae90: 2066 726f 6d20 6675 6e63 7469 6f6e 2073   from function s",
            "+0000aea0: 6967 6e61 7475 7265 2074 6f20 7265 7472  ignature to retr",
            "+0000aeb0: 6965 7665 2074 6865 6d20 6672 6f6d 0a20  ieve them from. ",
            "+0000aec0: 2020 2020 2020 2020 2020 2023 206d 6f64             # mod",
            "+0000aed0: 756c 655f 7061 7261 6d65 7465 7273 2069  ule_parameters i",
            "+0000aee0: 6620 7072 6573 656e 740a 2020 2020 2020  f present.      ",
            "+0000aef0: 2020 2020 2020 7061 7261 6d73 203d 2073        params = s",
            "+0000af00: 6574 2869 6e73 7065 6374 2e73 6967 6e61  et(inspect.signa",
            "+0000af10: 7475 7265 2866 756e 6329 2e70 6172 616d  ture(func).param",
            "+0000af20: 6574 6572 732e 6b65 7973 2829 290a 2020  eters.keys()).  ",
            "+0000af30: 2020 2020 2020 2020 2020 7061 7261 6d73            params",
            "+0000af40: 2e64 6973 6361 7264 2827 616f 6927 2920  .discard('aoi') ",
            "+0000af50: 2023 2065 7863 6c75 6465 2061 6f69 2073   # exclude aoi s",
            "+0000af60: 6f20 6974 2063 616e 2774 2062 6520 7265  o it can't be re",
            "+0000af70: 7065 6174 6564 0a20 2020 2020 2020 2020  peated.         ",
            "+0000af80: 2020 206b 7761 7267 7320 3d20 5f62 7569     kwargs = _bui",
            "+0000af90: 6c64 5f6b 7761 7267 7328 7061 7261 6d73  ld_kwargs(params",
            "+0000afa0: 2c20 7365 6c66 2e6d 6f64 756c 655f 7061  , self.module_pa",
            "+0000afb0: 7261 6d65 7465 7273 290a 2020 2020 2020  rameters).      ",
            "+0000afc0: 2020 2020 2020 7265 7475 726e 2066 756e        return fun",
            "+0000afd0: 6328 616f 692c 202a 2a6b 7761 7267 7329  c(aoi, **kwargs)",
            "+0000afe0: 0a20 2020 2020 2020 2065 6c69 6620 6d6f  .        elif mo",
            "+0000aff0: 6465 6c20 3d3d 2027 7361 706d 273a 0a20  del == 'sapm':. ",
            "+0000b000: 2020 2020 2020 2020 2020 2072 6574 7572             retur",
            "+0000b010: 6e20 6961 6d2e 7361 706d 2861 6f69 2c20  n iam.sapm(aoi, ",
            "+0000b020: 7365 6c66 2e6d 6f64 756c 655f 7061 7261  self.module_para",
            "+0000b030: 6d65 7465 7273 290a 2020 2020 2020 2020  meters).        ",
            "+0000b040: 656c 7365 3a0a 2020 2020 2020 2020 2020  else:.          ",
            "+0000b050: 2020 7261 6973 6520 5661 6c75 6545 7272    raise ValueErr",
            "+0000b060: 6f72 286d 6f64 656c 202b 2027 2069 7320  or(model + ' is ",
            "+0000b070: 6e6f 7420 6120 7661 6c69 6420 4941 4d20  not a valid IAM ",
            "+0000b080: 6d6f 6465 6c27 290a 0a20 2020 2064 6566  model')..    def",
            "+0000b090: 2067 6574 5f63 656c 6c5f 7465 6d70 6572   get_cell_temper",
            "+0000b0a0: 6174 7572 6528 7365 6c66 2c20 706f 615f  ature(self, poa_",
            "+0000b0b0: 676c 6f62 616c 2c20 7465 6d70 5f61 6972  global, temp_air",
            "+0000b0c0: 2c20 7769 6e64 5f73 7065 6564 2c20 6d6f  , wind_speed, mo",
            "+0000b0d0: 6465 6c2c 0a20 2020 2020 2020 2020 2020  del,.           ",
            "+0000b0e0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000b0f0: 2020 6566 6665 6374 6976 655f 6972 7261    effective_irra",
            "+0000b100: 6469 616e 6365 3d4e 6f6e 6529 3a0a 2020  diance=None):.  ",
            "+0000b110: 2020 2020 2020 2222 220a 2020 2020 2020        \"\"\".      ",
            "+0000b120: 2020 4465 7465 726d 696e 6520 6365 6c6c    Determine cell",
            "+0000b130: 2074 656d 7065 7261 7475 7265 2075 7369   temperature usi",
            "+0000b140: 6e67 2074 6865 206d 6574 686f 6420 7370  ng the method sp",
            "+0000b150: 6563 6966 6965 6420 6279 2060 606d 6f64  ecified by ``mod",
            "+0000b160: 656c 6060 2e0a 0a20 2020 2020 2020 2050  el``...        P",
            "+0000b170: 6172 616d 6574 6572 730a 2020 2020 2020  arameters.      ",
            "+0000b180: 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020    ----------.   ",
            "+0000b190: 2020 2020 2070 6f61 5f67 6c6f 6261 6c20       poa_global ",
            "+0000b1a0: 3a20 6e75 6d65 7269 630a 2020 2020 2020  : numeric.      ",
            "+0000b1b0: 2020 2020 2020 546f 7461 6c20 696e 6369        Total inci",
            "+0000b1c0: 6465 6e74 2069 7272 6164 6961 6e63 6520  dent irradiance ",
            "+0000b1d0: 5b57 2f6d 5e32 5d0a 0a20 2020 2020 2020  [W/m^2]..       ",
            "+0000b1e0: 2074 656d 705f 6169 7220 3a20 6e75 6d65   temp_air : nume",
            "+0000b1f0: 7269 630a 2020 2020 2020 2020 2020 2020  ric.            ",
            "+0000b200: 416d 6269 656e 7420 6472 7920 6275 6c62  Ambient dry bulb",
            "+0000b210: 2074 656d 7065 7261 7475 7265 205b 435d   temperature [C]",
            "+0000b220: 0a0a 2020 2020 2020 2020 7769 6e64 5f73  ..        wind_s",
            "+0000b230: 7065 6564 203a 206e 756d 6572 6963 0a20  peed : numeric. ",
            "+0000b240: 2020 2020 2020 2020 2020 2057 696e 6420             Wind ",
            "+0000b250: 7370 6565 6420 5b6d 2f73 5d0a 0a20 2020  speed [m/s]..   ",
            "+0000b260: 2020 2020 206d 6f64 656c 203a 2073 7472       model : str",
            "+0000b270: 0a20 2020 2020 2020 2020 2020 2053 7570  .            Sup",
            "+0000b280: 706f 7274 6564 206d 6f64 656c 7320 696e  ported models in",
            "+0000b290: 636c 7564 6520 6060 2773 6170 6d27 6060  clude ``'sapm'``",
            "+0000b2a0: 2c20 6060 2770 7673 7973 7427 6060 2c0a  , ``'pvsyst'``,.",
            "+0000b2b0: 2020 2020 2020 2020 2020 2020 6060 2766              ``'f",
            "+0000b2c0: 6169 6d61 6e27 6060 2c20 6060 2766 7565  aiman'``, ``'fue",
            "+0000b2d0: 6e74 6573 2760 602c 2061 6e64 2060 6027  ntes'``, and ``'",
            "+0000b2e0: 6e6f 6374 5f73 616d 2760 600a 0a20 2020  noct_sam'``..   ",
            "+0000b2f0: 2020 2020 2065 6666 6563 7469 7665 5f69       effective_i",
            "+0000b300: 7272 6164 6961 6e63 6520 3a20 6e75 6d65  rradiance : nume",
            "+0000b310: 7269 632c 206f 7074 696f 6e61 6c0a 2020  ric, optional.  ",
            "+0000b320: 2020 2020 2020 2020 2020 5468 6520 6972            The ir",
            "+0000b330: 7261 6469 616e 6365 2074 6861 7420 6973  radiance that is",
            "+0000b340: 2063 6f6e 7665 7274 6564 2074 6f20 7068   converted to ph",
            "+0000b350: 6f74 6f63 7572 7265 6e74 2069 6e20 572f  otocurrent in W/",
            "+0000b360: 6d5e 322e 0a20 2020 2020 2020 2020 2020  m^2..           ",
            "+0000b370: 204f 6e6c 7920 7573 6564 2066 6f72 2073   Only used for s",
            "+0000b380: 6f6d 6520 6d6f 6465 6c73 2e0a 0a20 2020  ome models...   ",
            "+0000b390: 2020 2020 2052 6574 7572 6e73 0a20 2020       Returns.   ",
            "+0000b3a0: 2020 2020 202d 2d2d 2d2d 2d2d 0a20 2020       -------.   ",
            "+0000b3b0: 2020 2020 206e 756d 6572 6963 0a20 2020       numeric.   ",
            "+0000b3c0: 2020 2020 2020 2020 2056 616c 7565 7320           Values ",
            "+0000b3d0: 696e 2064 6567 7265 6573 2043 2e0a 0a20  in degrees C... ",
            "+0000b3e0: 2020 2020 2020 2053 6565 2041 6c73 6f0a         See Also.",
            "+0000b3f0: 2020 2020 2020 2020 2d2d 2d2d 2d2d 2d2d          --------",
            "+0000b400: 0a20 2020 2020 2020 2070 766c 6962 2e74  .        pvlib.t",
            "+0000b410: 656d 7065 7261 7475 7265 2e73 6170 6d5f  emperature.sapm_",
            "+0000b420: 6365 6c6c 2c20 7076 6c69 622e 7465 6d70  cell, pvlib.temp",
            "+0000b430: 6572 6174 7572 652e 7076 7379 7374 5f63  erature.pvsyst_c",
            "+0000b440: 656c 6c2c 0a20 2020 2020 2020 2070 766c  ell,.        pvl",
            "+0000b450: 6962 2e74 656d 7065 7261 7475 7265 2e66  ib.temperature.f",
            "+0000b460: 6169 6d61 6e2c 2070 766c 6962 2e74 656d  aiman, pvlib.tem",
            "+0000b470: 7065 7261 7475 7265 2e66 7565 6e74 6573  perature.fuentes",
            "+0000b480: 2c0a 2020 2020 2020 2020 7076 6c69 622e  ,.        pvlib.",
            "+0000b490: 7465 6d70 6572 6174 7572 652e 6e6f 6374  temperature.noct",
            "+0000b4a0: 5f73 616d 0a0a 2020 2020 2020 2020 4e6f  _sam..        No",
            "+0000b4b0: 7465 730a 2020 2020 2020 2020 2d2d 2d2d  tes.        ----",
            "+0000b4c0: 2d0a 2020 2020 2020 2020 536f 6d65 2074  -.        Some t",
            "+0000b4d0: 656d 7065 7261 7475 7265 206d 6f64 656c  emperature model",
            "+0000b4e0: 7320 6861 7665 2072 6571 7569 7265 6d65  s have requireme",
            "+0000b4f0: 6e74 7320 666f 7220 7468 6520 696e 7075  nts for the inpu",
            "+0000b500: 7420 7479 7065 733b 0a20 2020 2020 2020  t types;.       ",
            "+0000b510: 2073 6565 2074 6865 2064 6f63 756d 656e   see the documen",
            "+0000b520: 7461 7469 6f6e 206f 6620 7468 6520 756e  tation of the un",
            "+0000b530: 6465 726c 7969 6e67 206d 6f64 656c 2066  derlying model f",
            "+0000b540: 756e 6374 696f 6e20 666f 7220 6465 7461  unction for deta",
            "+0000b550: 696c 732e 0a20 2020 2020 2020 2022 2222  ils..        \"\"\"",
            "+0000b560: 0a20 2020 2020 2020 2023 2063 6f6e 7665  .        # conve",
            "+0000b570: 6e69 656e 6365 2077 7261 7070 6572 2074  nience wrapper t",
            "+0000b580: 6f20 6176 6f69 6420 7061 7373 696e 6720  o avoid passing ",
            "+0000b590: 6172 6773 2032 2061 6e64 2033 2065 7665  args 2 and 3 eve",
            "+0000b5a0: 7279 2063 616c 6c0a 2020 2020 2020 2020  ry call.        ",
            "+0000b5b0: 5f62 7569 6c64 5f74 6365 6c6c 5f61 7267  _build_tcell_arg",
            "+0000b5c0: 7320 3d20 6675 6e63 746f 6f6c 732e 7061  s = functools.pa",
            "+0000b5d0: 7274 6961 6c28 0a20 2020 2020 2020 2020  rtial(.         ",
            "+0000b5e0: 2020 205f 6275 696c 645f 6172 6773 2c20     _build_args, ",
            "+0000b5f0: 696e 7075 745f 6469 6374 3d73 656c 662e  input_dict=self.",
            "+0000b600: 7465 6d70 6572 6174 7572 655f 6d6f 6465  temperature_mode",
            "+0000b610: 6c5f 7061 7261 6d65 7465 7273 2c0a 2020  l_parameters,.  ",
            "+0000b620: 2020 2020 2020 2020 2020 6469 6374 5f6e            dict_n",
            "+0000b630: 616d 653d 2774 656d 7065 7261 7475 7265  ame='temperature",
            "+0000b640: 5f6d 6f64 656c 5f70 6172 616d 6574 6572  _model_parameter",
            "+0000b650: 7327 290a 0a20 2020 2020 2020 2069 6620  s')..        if ",
            "+0000b660: 6d6f 6465 6c20 3d3d 2027 7361 706d 273a  model == 'sapm':",
            "+0000b670: 0a20 2020 2020 2020 2020 2020 2066 756e  .            fun",
            "+0000b680: 6320 3d20 7465 6d70 6572 6174 7572 652e  c = temperature.",
            "+0000b690: 7361 706d 5f63 656c 6c0a 2020 2020 2020  sapm_cell.      ",
            "+0000b6a0: 2020 2020 2020 7265 7175 6972 6564 203d        required =",
            "+0000b6b0: 205f 6275 696c 645f 7463 656c 6c5f 6172   _build_tcell_ar",
            "+0000b6c0: 6773 285b 2761 272c 2027 6227 2c20 2764  gs(['a', 'b', 'd",
            "+0000b6d0: 656c 7461 5427 5d29 0a20 2020 2020 2020  eltaT']).       ",
            "+0000b6e0: 2020 2020 206f 7074 696f 6e61 6c20 3d20       optional = ",
            "+0000b6f0: 5f62 7569 6c64 5f6b 7761 7267 7328 5b27  _build_kwargs(['",
            "+0000b700: 6972 7261 645f 7265 6627 5d2c 0a20 2020  irrad_ref'],.   ",
            "+0000b710: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000b720: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000b730: 2020 7365 6c66 2e74 656d 7065 7261 7475    self.temperatu",
            "+0000b740: 7265 5f6d 6f64 656c 5f70 6172 616d 6574  re_model_paramet",
            "+0000b750: 6572 7329 0a20 2020 2020 2020 2065 6c69  ers).        eli",
            "+0000b760: 6620 6d6f 6465 6c20 3d3d 2027 7076 7379  f model == 'pvsy",
            "+0000b770: 7374 273a 0a20 2020 2020 2020 2020 2020  st':.           ",
            "+0000b780: 2066 756e 6320 3d20 7465 6d70 6572 6174   func = temperat",
            "+0000b790: 7572 652e 7076 7379 7374 5f63 656c 6c0a  ure.pvsyst_cell.",
            "+0000b7a0: 2020 2020 2020 2020 2020 2020 7265 7175              requ",
            "+0000b7b0: 6972 6564 203d 2074 7570 6c65 2829 0a20  ired = tuple(). ",
            "+0000b7c0: 2020 2020 2020 2020 2020 206f 7074 696f             optio",
            "+0000b7d0: 6e61 6c20 3d20 7b0a 2020 2020 2020 2020  nal = {.        ",
            "+0000b7e0: 2020 2020 2020 2020 2a2a 5f62 7569 6c64          **_build",
            "+0000b7f0: 5f6b 7761 7267 7328 5b27 6d6f 6475 6c65  _kwargs(['module",
            "+0000b800: 5f65 6666 6963 6965 6e63 7927 2c20 2761  _efficiency', 'a",
            "+0000b810: 6c70 6861 5f61 6273 6f72 7074 696f 6e27  lpha_absorption'",
            "+0000b820: 5d2c 0a20 2020 2020 2020 2020 2020 2020  ],.             ",
            " 0000b830: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000b840: 2020 2020 2020 2020 2020 2020 2020 2073                 s",
            "-0000b850: 656c 662e 7465 6d70 6572 6174 7572 655f  elf.temperature_",
            "-0000b860: 6d6f 6465 6c5f 7061 7261 6d65 7465 7273  model_parameters",
            "-0000b870: 290a 2020 2020 2020 2020 656c 6966 206d  ).        elif m",
            "-0000b880: 6f64 656c 203d 3d20 2766 7565 6e74 6573  odel == 'fuentes",
            "-0000b890: 273a 0a20 2020 2020 2020 2020 2020 2066  ':.            f",
            "-0000b8a0: 756e 6320 3d20 7465 6d70 6572 6174 7572  unc = temperatur",
            "-0000b8b0: 652e 6675 656e 7465 730a 2020 2020 2020  e.fuentes.      ",
            "-0000b8c0: 2020 2020 2020 7265 7175 6972 6564 203d        required =",
            "-0000b8d0: 205f 6275 696c 645f 7463 656c 6c5f 6172   _build_tcell_ar",
            "-0000b8e0: 6773 285b 276e 6f63 745f 696e 7374 616c  gs(['noct_instal",
            "-0000b8f0: 6c65 6427 5d29 0a20 2020 2020 2020 2020  led']).         ",
            "-0000b900: 2020 206f 7074 696f 6e61 6c20 3d20 5f62     optional = _b",
            "-0000b910: 7569 6c64 5f6b 7761 7267 7328 5b0a 2020  uild_kwargs([.  ",
            "-0000b920: 2020 2020 2020 2020 2020 2020 2020 2777                'w",
            "-0000b930: 696e 645f 6865 6967 6874 272c 2027 656d  ind_height', 'em",
            "-0000b940: 6973 7369 7669 7479 272c 2027 6162 736f  issivity', 'abso",
            "-0000b950: 7270 7469 6f6e 272c 0a20 2020 2020 2020  rption',.       ",
            "-0000b960: 2020 2020 2020 2020 2027 7375 7266 6163           'surfac",
            "-0000b970: 655f 7469 6c74 272c 2027 6d6f 6475 6c65  e_tilt', 'module",
            "-0000b980: 5f77 6964 7468 272c 2027 6d6f 6475 6c65  _width', 'module",
            "-0000b990: 5f6c 656e 6774 6827 5d2c 0a20 2020 2020  _length'],.     ",
            "-0000b9a0: 2020 2020 2020 2020 2020 2073 656c 662e             self.",
            "-0000b9b0: 7465 6d70 6572 6174 7572 655f 6d6f 6465  temperature_mode",
            "-0000b9c0: 6c5f 7061 7261 6d65 7465 7273 290a 2020  l_parameters).  ",
            "-0000b9d0: 2020 2020 2020 2020 2020 6966 2073 656c            if sel",
            "-0000b9e0: 662e 6d6f 756e 742e 6d6f 6475 6c65 5f68  f.mount.module_h",
            "-0000b9f0: 6569 6768 7420 6973 206e 6f74 204e 6f6e  eight is not Non",
            "-0000ba00: 653a 0a20 2020 2020 2020 2020 2020 2020  e:.             ",
            "-0000ba10: 2020 206f 7074 696f 6e61 6c5b 276d 6f64     optional['mod",
            "-0000ba20: 756c 655f 6865 6967 6874 275d 203d 2073  ule_height'] = s",
            "-0000ba30: 656c 662e 6d6f 756e 742e 6d6f 6475 6c65  elf.mount.module",
            "-0000ba40: 5f68 6569 6768 740a 2020 2020 2020 2020  _height.        ",
            "-0000ba50: 656c 6966 206d 6f64 656c 203d 3d20 276e  elif model == 'n",
            "-0000ba60: 6f63 745f 7361 6d27 3a0a 2020 2020 2020  oct_sam':.      ",
            "-0000ba70: 2020 2020 2020 6675 6e63 203d 2066 756e        func = fun",
            "-0000ba80: 6374 6f6f 6c73 2e70 6172 7469 616c 2874  ctools.partial(t",
            "-0000ba90: 656d 7065 7261 7475 7265 2e6e 6f63 745f  emperature.noct_",
            "-0000baa0: 7361 6d2c 0a20 2020 2020 2020 2020 2020  sam,.           ",
            "-0000bab0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000bac0: 2020 2020 2020 2020 2020 6566 6665 6374            effect",
            "-0000bad0: 6976 655f 6972 7261 6469 616e 6365 3d65  ive_irradiance=e",
            "-0000bae0: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "-0000baf0: 6e63 6529 0a20 2020 2020 2020 2020 2020  nce).           ",
            "-0000bb00: 2072 6571 7569 7265 6420 3d20 5f62 7569   required = _bui",
            "-0000bb10: 6c64 5f74 6365 6c6c 5f61 7267 7328 5b27  ld_tcell_args(['",
            "-0000bb20: 6e6f 6374 272c 2027 6d6f 6475 6c65 5f65  noct', 'module_e",
            "-0000bb30: 6666 6963 6965 6e63 7927 5d29 0a20 2020  fficiency']).   ",
            "-0000bb40: 2020 2020 2020 2020 206f 7074 696f 6e61           optiona",
            "-0000bb50: 6c20 3d20 5f62 7569 6c64 5f6b 7761 7267  l = _build_kwarg",
            "-0000bb60: 7328 5b27 7472 616e 736d 6974 7461 6e63  s(['transmittanc",
            "-0000bb70: 655f 6162 736f 7270 7461 6e63 6527 2c0a  e_absorptance',.",
            "-0000bb80: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000bb90: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000bba0: 2020 2020 2020 2761 7272 6179 5f68 6569        'array_hei",
            "-0000bbb0: 6768 7427 2c20 276d 6f75 6e74 5f73 7461  ght', 'mount_sta",
            "-0000bbc0: 6e64 6f66 6627 5d2c 0a20 2020 2020 2020  ndoff'],.       ",
            "-0000bbd0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000bbe0: 2020 2020 2020 2020 2020 2020 2020 7365                se",
            "-0000bbf0: 6c66 2e74 656d 7065 7261 7475 7265 5f6d  lf.temperature_m",
            "-0000bc00: 6f64 656c 5f70 6172 616d 6574 6572 7329  odel_parameters)",
            "-0000bc10: 0a20 2020 2020 2020 2065 6c73 653a 0a20  .        else:. ",
            "-0000bc20: 2020 2020 2020 2020 2020 2072 6169 7365             raise",
            "-0000bc30: 2056 616c 7565 4572 726f 7228 6627 7b6d   ValueError(f'{m",
            "-0000bc40: 6f64 656c 7d20 6973 206e 6f74 2061 2076  odel} is not a v",
            "-0000bc50: 616c 6964 2063 656c 6c20 7465 6d70 6572  alid cell temper",
            "-0000bc60: 6174 7572 6520 6d6f 6465 6c27 290a 0a20  ature model').. ",
            "-0000bc70: 2020 2020 2020 2074 656d 7065 7261 7475         temperatu",
            "-0000bc80: 7265 5f63 656c 6c20 3d20 6675 6e63 2870  re_cell = func(p",
            "-0000bc90: 6f61 5f67 6c6f 6261 6c2c 2074 656d 705f  oa_global, temp_",
            "-0000bca0: 6169 722c 2077 696e 645f 7370 6565 642c  air, wind_speed,",
            "-0000bcb0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-0000bcc0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000bcd0: 202a 7265 7175 6972 6564 2c20 2a2a 6f70   *required, **op",
            "-0000bce0: 7469 6f6e 616c 290a 2020 2020 2020 2020  tional).        ",
            "-0000bcf0: 7265 7475 726e 2074 656d 7065 7261 7475  return temperatu",
            "-0000bd00: 7265 5f63 656c 6c0a 0a20 2020 2064 6566  re_cell..    def",
            "-0000bd10: 2064 635f 6f68 6d73 5f66 726f 6d5f 7065   dc_ohms_from_pe",
            "-0000bd20: 7263 656e 7428 7365 6c66 293a 0a20 2020  rcent(self):.   ",
            "-0000bd30: 2020 2020 2022 2222 0a20 2020 2020 2020       \"\"\".       ",
            "-0000bd40: 2043 616c 6375 6c61 7465 7320 7468 6520   Calculates the ",
            "-0000bd50: 6571 7569 7661 6c65 6e74 2072 6573 6973  equivalent resis",
            "-0000bd60: 7461 6e63 6520 6f66 2074 6865 2077 6972  tance of the wir",
            "-0000bd70: 6573 2075 7369 6e67 0a20 2020 2020 2020  es using.       ",
            "-0000bd80: 203a 7079 3a66 756e 633a 6070 766c 6962   :py:func:`pvlib",
            "-0000bd90: 2e70 7673 7973 7465 6d2e 6463 5f6f 686d  .pvsystem.dc_ohm",
            "-0000bda0: 735f 6672 6f6d 5f70 6572 6365 6e74 600a  s_from_percent`.",
            "-0000bdb0: 0a20 2020 2020 2020 204d 616b 6573 2075  .        Makes u",
            "-0000bdc0: 7365 206f 6620 6172 7261 7920 6d6f 6475  se of array modu",
            "-0000bdd0: 6c65 2070 6172 616d 6574 6572 7320 6163  le parameters ac",
            "-0000bde0: 636f 7264 696e 6720 746f 2074 6865 0a20  cording to the. ",
            "-0000bdf0: 2020 2020 2020 2066 6f6c 6c6f 7769 6e67         following",
            "-0000be00: 2044 4320 6d6f 6465 6c73 3a0a 0a20 2020   DC models:..   ",
            "-0000be10: 2020 2020 2043 4543 3a0a 0a20 2020 2020       CEC:..     ",
            "-0000be20: 2020 2020 2020 202a 2060 7365 6c66 2e6d         * `self.m",
            "-0000be30: 6f64 756c 655f 7061 7261 6d65 7465 7273  odule_parameters",
            "-0000be40: 5b22 565f 6d70 5f72 6566 225d 600a 2020  [\"V_mp_ref\"]`.  ",
            "-0000be50: 2020 2020 2020 2020 2020 2a20 6073 656c            * `sel",
            "-0000be60: 662e 6d6f 6475 6c65 5f70 6172 616d 6574  f.module_paramet",
            "-0000be70: 6572 735b 2249 5f6d 705f 7265 6622 5d60  ers[\"I_mp_ref\"]`",
            "-0000be80: 0a0a 2020 2020 2020 2020 5341 504d 3a0a  ..        SAPM:.",
            "-0000be90: 0a20 2020 2020 2020 2020 2020 202a 2060  .            * `",
            "-0000bea0: 7365 6c66 2e6d 6f64 756c 655f 7061 7261  self.module_para",
            "-0000beb0: 6d65 7465 7273 5b22 566d 706f 225d 600a  meters[\"Vmpo\"]`.",
            "-0000bec0: 2020 2020 2020 2020 2020 2020 2a20 6073              * `s",
            "-0000bed0: 656c 662e 6d6f 6475 6c65 5f70 6172 616d  elf.module_param",
            "-0000bee0: 6574 6572 735b 2249 6d70 6f22 5d60 0a0a  eters[\"Impo\"]`..",
            "-0000bef0: 2020 2020 2020 2020 5056 7379 7374 2d6c          PVsyst-l",
            "-0000bf00: 696b 6520 6f72 206f 7468 6572 3a0a 0a20  ike or other:.. ",
            "-0000bf10: 2020 2020 2020 2020 2020 202a 2060 7365             * `se",
            "-0000bf20: 6c66 2e6d 6f64 756c 655f 7061 7261 6d65  lf.module_parame",
            "-0000bf30: 7465 7273 5b22 566d 7070 225d 600a 2020  ters[\"Vmpp\"]`.  ",
            "-0000bf40: 2020 2020 2020 2020 2020 2a20 6073 656c            * `sel",
            "-0000bf50: 662e 6d6f 6475 6c65 5f70 6172 616d 6574  f.module_paramet",
            "-0000bf60: 6572 735b 2249 6d70 7022 5d60 0a0a 2020  ers[\"Impp\"]`..  ",
            "-0000bf70: 2020 2020 2020 4f74 6865 7220 6172 7261        Other arra",
            "-0000bf80: 7920 7061 7261 6d65 7465 7273 2074 6861  y parameters tha",
            "-0000bf90: 7420 6172 6520 7573 6564 2061 7265 3a0a  t are used are:.",
            "-0000bfa0: 2020 2020 2020 2020 6073 656c 662e 6c6f          `self.lo",
            "-0000bfb0: 7373 6573 5f70 6172 616d 6574 6572 735b  sses_parameters[",
            "-0000bfc0: 2264 635f 6f68 6d69 635f 7065 7263 656e  \"dc_ohmic_percen",
            "-0000bfd0: 7422 5d60 2c0a 2020 2020 2020 2020 6073  t\"]`,.        `s",
            "-0000bfe0: 656c 662e 6d6f 6475 6c65 735f 7065 725f  elf.modules_per_",
            "-0000bff0: 7374 7269 6e67 602c 2061 6e64 0a20 2020  string`, and.   ",
            "-0000c000: 2020 2020 2060 7365 6c66 2e73 7472 696e       `self.strin",
            "-0000c010: 6773 602e 0a0a 2020 2020 2020 2020 5365  gs`...        Se",
            "-0000c020: 6520 3a70 793a 6675 6e63 3a60 7076 6c69  e :py:func:`pvli",
            "-0000c030: 622e 7076 7379 7374 656d 2e64 635f 6f68  b.pvsystem.dc_oh",
            "-0000c040: 6d73 5f66 726f 6d5f 7065 7263 656e 7460  ms_from_percent`",
            "-0000c050: 2066 6f72 206d 6f72 6520 6465 7461 696c   for more detail",
            "-0000c060: 732e 0a20 2020 2020 2020 2022 2222 0a0a  s..        \"\"\"..",
            "-0000c070: 2020 2020 2020 2020 2320 6765 7420 7265          # get re",
            "-0000c080: 6c65 7665 6e74 2056 6d70 2061 6e64 2049  levent Vmp and I",
            "-0000c090: 6d70 2070 6172 616d 6574 6572 7320 6672  mp parameters fr",
            "-0000c0a0: 6f6d 2043 4543 2070 6172 616d 6574 6572  om CEC parameter",
            "-0000c0b0: 730a 2020 2020 2020 2020 6966 2061 6c6c  s.        if all",
            "-0000c0c0: 2865 6c65 6d20 696e 2073 656c 662e 6d6f  (elem in self.mo",
            "-0000c0d0: 6475 6c65 5f70 6172 616d 6574 6572 730a  dule_parameters.",
            "-0000c0e0: 2020 2020 2020 2020 2020 2020 2020 2066                 f",
            "-0000c0f0: 6f72 2065 6c65 6d20 696e 205b 2756 5f6d  or elem in ['V_m",
            "-0000c100: 705f 7265 6627 2c20 2749 5f6d 705f 7265  p_ref', 'I_mp_re",
            "-0000c110: 6627 5d29 3a0a 2020 2020 2020 2020 2020  f']):.          ",
            "-0000c120: 2020 766d 705f 7265 6620 3d20 7365 6c66    vmp_ref = self",
            "-0000c130: 2e6d 6f64 756c 655f 7061 7261 6d65 7465  .module_paramete",
            "-0000c140: 7273 5b27 565f 6d70 5f72 6566 275d 0a20  rs['V_mp_ref']. ",
            "-0000c150: 2020 2020 2020 2020 2020 2069 6d70 5f72             imp_r",
            "-0000c160: 6566 203d 2073 656c 662e 6d6f 6475 6c65  ef = self.module",
            "-0000c170: 5f70 6172 616d 6574 6572 735b 2749 5f6d  _parameters['I_m",
            "-0000c180: 705f 7265 6627 5d0a 0a20 2020 2020 2020  p_ref']..       ",
            "-0000c190: 2023 2067 6574 2072 656c 6576 616e 7420   # get relevant ",
            "-0000c1a0: 566d 7020 616e 6420 496d 7020 7061 7261  Vmp and Imp para",
            "-0000c1b0: 6d65 7465 7273 2066 726f 6d20 5341 504d  meters from SAPM",
            "-0000c1c0: 2070 6172 616d 6574 6572 730a 2020 2020   parameters.    ",
            "-0000c1d0: 2020 2020 656c 6966 2061 6c6c 2865 6c65      elif all(ele",
            "-0000c1e0: 6d20 696e 2073 656c 662e 6d6f 6475 6c65  m in self.module",
            "-0000c1f0: 5f70 6172 616d 6574 6572 7320 666f 7220  _parameters for ",
            "-0000c200: 656c 656d 2069 6e20 5b27 566d 706f 272c  elem in ['Vmpo',",
            "-0000c210: 2027 496d 706f 275d 293a 0a20 2020 2020   'Impo']):.     ",
            "-0000c220: 2020 2020 2020 2076 6d70 5f72 6566 203d         vmp_ref =",
            "-0000c230: 2073 656c 662e 6d6f 6475 6c65 5f70 6172   self.module_par",
            "-0000c240: 616d 6574 6572 735b 2756 6d70 6f27 5d0a  ameters['Vmpo'].",
            "-0000c250: 2020 2020 2020 2020 2020 2020 696d 705f              imp_",
            "-0000c260: 7265 6620 3d20 7365 6c66 2e6d 6f64 756c  ref = self.modul",
            "-0000c270: 655f 7061 7261 6d65 7465 7273 5b27 496d  e_parameters['Im",
            "-0000c280: 706f 275d 0a0a 2020 2020 2020 2020 2320  po']..        # ",
            "-0000c290: 6765 7420 7265 6c65 7661 6e74 2056 6d70  get relevant Vmp",
            "-0000c2a0: 2061 6e64 2049 6d70 2070 6172 616d 6574   and Imp paramet",
            "-0000c2b0: 6572 7320 6966 2074 6865 7920 6172 6520  ers if they are ",
            "-0000c2c0: 5056 7379 7374 2d6c 696b 650a 2020 2020  PVsyst-like.    ",
            "-0000c2d0: 2020 2020 656c 6966 2061 6c6c 2865 6c65      elif all(ele",
            "-0000c2e0: 6d20 696e 2073 656c 662e 6d6f 6475 6c65  m in self.module",
            "-0000c2f0: 5f70 6172 616d 6574 6572 7320 666f 7220  _parameters for ",
            "-0000c300: 656c 656d 2069 6e20 5b27 566d 7070 272c  elem in ['Vmpp',",
            "-0000c310: 2027 496d 7070 275d 293a 0a20 2020 2020   'Impp']):.     ",
            "-0000c320: 2020 2020 2020 2076 6d70 5f72 6566 203d         vmp_ref =",
            "-0000c330: 2073 656c 662e 6d6f 6475 6c65 5f70 6172   self.module_par",
            "-0000c340: 616d 6574 6572 735b 2756 6d70 7027 5d0a  ameters['Vmpp'].",
            "-0000c350: 2020 2020 2020 2020 2020 2020 696d 705f              imp_",
            "-0000c360: 7265 6620 3d20 7365 6c66 2e6d 6f64 756c  ref = self.modul",
            "-0000c370: 655f 7061 7261 6d65 7465 7273 5b27 496d  e_parameters['Im",
            "-0000c380: 7070 275d 0a0a 2020 2020 2020 2020 2320  pp']..        # ",
            "-0000c390: 7261 6973 6520 6572 726f 7220 6966 2072  raise error if r",
            "-0000c3a0: 656c 6576 616e 7420 566d 7020 616e 6420  elevant Vmp and ",
            "-0000c3b0: 496d 7020 7061 7261 6d65 7465 7273 2061  Imp parameters a",
            "-0000c3c0: 7265 206e 6f74 2066 6f75 6e64 0a20 2020  re not found.   ",
            "-0000c3d0: 2020 2020 2065 6c73 653a 0a20 2020 2020       else:.     ",
            "-0000c3e0: 2020 2020 2020 2072 6169 7365 2056 616c         raise Val",
            "-0000c3f0: 7565 4572 726f 7228 2750 6172 616d 6574  ueError('Paramet",
            "-0000c400: 6572 7320 666f 7220 566d 7020 616e 6420  ers for Vmp and ",
            "-0000c410: 496d 7020 636f 756c 6420 6e6f 7420 6265  Imp could not be",
            "-0000c420: 2066 6f75 6e64 2027 0a20 2020 2020 2020   found '.       ",
            "-0000c430: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000c440: 2020 2020 2020 2769 6e20 7468 6520 6172        'in the ar",
            "-0000c450: 7261 7920 6d6f 6475 6c65 2070 6172 616d  ray module param",
            "-0000c460: 6574 6572 732e 204d 6f64 756c 6520 270a  eters. Module '.",
            "-0000c470: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000c480: 2020 2020 2020 2020 2020 2020 2027 7061               'pa",
            "-0000c490: 7261 6d65 7465 7273 206d 7573 7420 696e  rameters must in",
            "-0000c4a0: 636c 7564 6520 6f6e 6520 7365 7420 6f66  clude one set of",
            "-0000c4b0: 2027 0a20 2020 2020 2020 2020 2020 2020   '.             ",
            "-0000c4c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000c4d0: 277b 2256 5f6d 705f 7265 6622 2c20 2249  '{\"V_mp_ref\", \"I",
            "-0000c4e0: 5f6d 705f 5265 6622 7d2c 2027 0a20 2020  _mp_Ref\"}, '.   ",
            "-0000c4f0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000c500: 2020 2020 2020 2020 2020 277b 2256 6d70            '{\"Vmp",
            "-0000c510: 6f22 2c20 2249 6d70 6f22 7d2c 206f 7220  o\", \"Impo\"}, or ",
            "-0000c520: 270a 2020 2020 2020 2020 2020 2020 2020  '.              ",
            "-0000c530: 2020 2020 2020 2020 2020 2020 2020 2027                 '",
            "-0000c540: 7b22 566d 7070 222c 2022 496d 7070 227d  {\"Vmpp\", \"Impp\"}",
            "-0000c550: 2e27 0a20 2020 2020 2020 2020 2020 2020  .'.             ",
            "-0000c560: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000c570: 290a 0a20 2020 2020 2020 2072 6574 7572  )..        retur",
            "-0000c580: 6e20 6463 5f6f 686d 735f 6672 6f6d 5f70  n dc_ohms_from_p",
            "-0000c590: 6572 6365 6e74 280a 2020 2020 2020 2020  ercent(.        ",
            "-0000c5a0: 2020 2020 766d 705f 7265 662c 0a20 2020      vmp_ref,.   ",
            "-0000c5b0: 2020 2020 2020 2020 2069 6d70 5f72 6566           imp_ref",
            "-0000c5c0: 2c0a 2020 2020 2020 2020 2020 2020 7365  ,.            se",
            "-0000c5d0: 6c66 2e61 7272 6179 5f6c 6f73 7365 735f  lf.array_losses_",
            "-0000c5e0: 7061 7261 6d65 7465 7273 5b27 6463 5f6f  parameters['dc_o",
            "-0000c5f0: 686d 6963 5f70 6572 6365 6e74 275d 2c0a  hmic_percent'],.",
            "-0000c600: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "-0000c610: 2e6d 6f64 756c 6573 5f70 6572 5f73 7472  .modules_per_str",
            "-0000c620: 696e 672c 0a20 2020 2020 2020 2020 2020  ing,.           ",
            "-0000c630: 2073 656c 662e 7374 7269 6e67 7329 0a0a   self.strings)..",
            "-0000c640: 0a40 6461 7461 636c 6173 730a 636c 6173  .@dataclass.clas",
            "-0000c650: 7320 4162 7374 7261 6374 4d6f 756e 7428  s AbstractMount(",
            "-0000c660: 4142 4329 3a0a 2020 2020 2222 220a 2020  ABC):.    \"\"\".  ",
            "-0000c670: 2020 4120 6261 7365 2063 6c61 7373 2066    A base class f",
            "-0000c680: 6f72 204d 6f75 6e74 2063 6c61 7373 6573  or Mount classes",
            "-0000c690: 2074 6f20 6578 7465 6e64 2e20 4974 2069   to extend. It i",
            "-0000c6a0: 7320 6e6f 7420 696e 7465 6e64 6564 2074  s not intended t",
            "-0000c6b0: 6f20 6265 0a20 2020 2069 6e73 7461 6e74  o be.    instant",
            "-0000c6c0: 6961 7465 6420 6469 7265 6374 6c79 2e0a  iated directly..",
            "-0000c6d0: 2020 2020 2222 220a 0a20 2020 2040 6162      \"\"\"..    @ab",
            "-0000c6e0: 7374 7261 6374 6d65 7468 6f64 0a20 2020  stractmethod.   ",
            "-0000c6f0: 2064 6566 2067 6574 5f6f 7269 656e 7461   def get_orienta",
            "-0000c700: 7469 6f6e 2873 656c 662c 2073 6f6c 6172  tion(self, solar",
            "-0000c710: 5f7a 656e 6974 682c 2073 6f6c 6172 5f61  _zenith, solar_a",
            "-0000c720: 7a69 6d75 7468 293a 0a20 2020 2020 2020  zimuth):.       ",
            "-0000c730: 2022 2222 0a20 2020 2020 2020 2044 6574   \"\"\".        Det",
            "-0000c740: 6572 6d69 6e65 206d 6f64 756c 6520 6f72  ermine module or",
            "-0000c750: 6965 6e74 6174 696f 6e2e 0a0a 2020 2020  ientation...    ",
            "-0000c760: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "-0000c770: 2020 2020 2020 202d 2d2d 2d2d 2d2d 2d2d         ---------",
            "-0000c780: 2d0a 2020 2020 2020 2020 736f 6c61 725f  -.        solar_",
            "-0000c790: 7a65 6e69 7468 203a 206e 756d 6572 6963  zenith : numeric",
            "-0000c7a0: 0a20 2020 2020 2020 2020 2020 2053 6f6c  .            Sol",
            "-0000c7b0: 6172 2061 7070 6172 656e 7420 7a65 6e69  ar apparent zeni",
            "-0000c7c0: 7468 2061 6e67 6c65 205b 6465 6772 6565  th angle [degree",
            "-0000c7d0: 735d 0a20 2020 2020 2020 2073 6f6c 6172  s].        solar",
            "-0000c7e0: 5f61 7a69 6d75 7468 203a 206e 756d 6572  _azimuth : numer",
            "-0000c7f0: 6963 0a20 2020 2020 2020 2020 2020 2053  ic.            S",
            "-0000c800: 6f6c 6172 2061 7a69 6d75 7468 2061 6e67  olar azimuth ang",
            "-0000c810: 6c65 205b 6465 6772 6565 735d 0a0a 2020  le [degrees]..  ",
            "-0000c820: 2020 2020 2020 5265 7475 726e 730a 2020        Returns.  ",
            "-0000c830: 2020 2020 2020 2d2d 2d2d 2d2d 2d0a 2020        -------.  ",
            "-0000c840: 2020 2020 2020 6f72 6965 6e74 6174 696f        orientatio",
            "-0000c850: 6e20 3a20 6469 6374 2d6c 696b 650a 2020  n : dict-like.  ",
            "-0000c860: 2020 2020 2020 2020 2020 4120 6469 6374            A dict",
            "-0000c870: 2d6c 696b 6520 6f62 6a65 6374 2077 6974  -like object wit",
            "-0000c880: 6820 6b65 7973 2060 2773 7572 6661 6365  h keys `'surface",
            "-0000c890: 5f74 696c 7427 2c20 2773 7572 6661 6365  _tilt', 'surface",
            "-0000c8a0: 5f61 7a69 6d75 7468 2760 0a20 2020 2020  _azimuth'`.     ",
            "-0000c8b0: 2020 2020 2020 2028 7479 7069 6361 6c6c         (typicall",
            "-0000c8c0: 7920 6120 6469 6374 206f 7220 7061 6e64  y a dict or pand",
            "-0000c8d0: 6173 2e44 6174 6146 7261 6d65 290a 2020  as.DataFrame).  ",
            "-0000c8e0: 2020 2020 2020 2222 220a 0a0a 4064 6174        \"\"\"...@dat",
            "-0000c8f0: 6163 6c61 7373 0a63 6c61 7373 2046 6978  aclass.class Fix",
            "-0000c900: 6564 4d6f 756e 7428 4162 7374 7261 6374  edMount(Abstract",
            "-0000c910: 4d6f 756e 7429 3a0a 2020 2020 2222 220a  Mount):.    \"\"\".",
            "-0000c920: 2020 2020 5261 636b 696e 6720 6174 2066      Racking at f",
            "-0000c930: 6978 6564 2028 7374 6174 6963 2920 6f72  ixed (static) or",
            "-0000c940: 6965 6e74 6174 696f 6e2e 0a0a 2020 2020  ientation...    ",
            "-0000c950: 5061 7261 6d65 7465 7273 0a20 2020 202d  Parameters.    -",
            "-0000c960: 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020 7375  ---------.    su",
            "-0000c970: 7266 6163 655f 7469 6c74 203a 2066 6c6f  rface_tilt : flo",
            "-0000c980: 6174 2c20 6465 6661 756c 7420 300a 2020  at, default 0.  ",
            "-0000c990: 2020 2020 2020 5375 7266 6163 6520 7469        Surface ti",
            "-0000c9a0: 6c74 2061 6e67 6c65 2e20 5468 6520 7469  lt angle. The ti",
            "-0000c9b0: 6c74 2061 6e67 6c65 2069 7320 6465 6669  lt angle is defi",
            "-0000c9c0: 6e65 6420 6173 2061 6e67 6c65 2066 726f  ned as angle fro",
            "-0000c9d0: 6d20 686f 7269 7a6f 6e74 616c 0a20 2020  m horizontal.   ",
            "-0000c9e0: 2020 2020 2028 652e 672e 2073 7572 6661       (e.g. surfa",
            "-0000c9f0: 6365 2066 6163 696e 6720 7570 203d 2030  ce facing up = 0",
            "-0000ca00: 2c20 7375 7266 6163 6520 6661 6369 6e67  , surface facing",
            "-0000ca10: 2068 6f72 697a 6f6e 203d 2039 3029 205b   horizon = 90) [",
            "-0000ca20: 6465 6772 6565 735d 0a0a 2020 2020 7375  degrees]..    su",
            "-0000ca30: 7266 6163 655f 617a 696d 7574 6820 3a20  rface_azimuth : ",
            "-0000ca40: 666c 6f61 742c 2064 6566 6175 6c74 2031  float, default 1",
            "-0000ca50: 3830 0a20 2020 2020 2020 2041 7a69 6d75  80.        Azimu",
            "-0000ca60: 7468 2061 6e67 6c65 206f 6620 7468 6520  th angle of the ",
            "-0000ca70: 6d6f 6475 6c65 2073 7572 6661 6365 2e20  module surface. ",
            "-0000ca80: 4e6f 7274 683d 302c 2045 6173 743d 3930  North=0, East=90",
            "-0000ca90: 2c20 536f 7574 683d 3138 302c 0a20 2020  , South=180,.   ",
            "-0000caa0: 2020 2020 2057 6573 743d 3237 302e 205b       West=270. [",
            "-0000cab0: 6465 6772 6565 735d 0a0a 2020 2020 7261  degrees]..    ra",
            "-0000cac0: 636b 696e 675f 6d6f 6465 6c20 3a20 7374  cking_model : st",
            "-0000cad0: 722c 206f 7074 696f 6e61 6c0a 2020 2020  r, optional.    ",
            "-0000cae0: 2020 2020 5661 6c69 6420 7374 7269 6e67      Valid string",
            "-0000caf0: 7320 6172 6520 6060 276f 7065 6e5f 7261  s are ``'open_ra",
            "-0000cb00: 636b 2760 602c 2060 6027 636c 6f73 655f  ck'``, ``'close_",
            "-0000cb10: 6d6f 756e 7427 6060 2c0a 2020 2020 2020  mount'``,.      ",
            "-0000cb20: 2020 6060 2769 6e73 756c 6174 6564 5f62    ``'insulated_b",
            "-0000cb30: 6163 6b27 6060 2c20 6060 2766 7265 6573  ack'``, ``'frees",
            "-0000cb40: 7461 6e64 696e 6727 6060 2061 6e64 2060  tanding'`` and `",
            "-0000cb50: 6027 696e 7375 6c61 7465 6427 6060 2e0a  `'insulated'``..",
            "-0000cb60: 2020 2020 2020 2020 5573 6564 2074 6f20          Used to ",
            "-0000cb70: 6964 656e 7469 6679 2061 2070 6172 616d  identify a param",
            "-0000cb80: 6574 6572 2073 6574 2066 6f72 2074 6865  eter set for the",
            "-0000cb90: 2053 4150 4d20 6f72 2050 5673 7973 7420   SAPM or PVsyst ",
            "-0000cba0: 6365 6c6c 0a20 2020 2020 2020 2074 656d  cell.        tem",
            "-0000cbb0: 7065 7261 7475 7265 206d 6f64 656c 2e0a  perature model..",
            "-0000cbc0: 2020 2020 2020 2020 5365 6520 3a70 793a          See :py:",
            "-0000cbd0: 6675 6e63 3a60 7e70 766c 6962 2e74 656d  func:`~pvlib.tem",
            "-0000cbe0: 7065 7261 7475 7265 2e73 6170 6d5f 6d6f  perature.sapm_mo",
            "-0000cbf0: 6475 6c65 6020 2061 6e64 0a20 2020 2020  dule`  and.     ",
            "-0000cc00: 2020 203a 7079 3a66 756e 633a 607e 7076     :py:func:`~pv",
            "-0000cc10: 6c69 622e 7465 6d70 6572 6174 7572 652e  lib.temperature.",
            "-0000cc20: 7076 7379 7374 5f63 656c 6c60 2066 6f72  pvsyst_cell` for",
            "-0000cc30: 2064 6566 696e 6974 696f 6e73 2e0a 0a20   definitions... ",
            "-0000cc40: 2020 206d 6f64 756c 655f 6865 6967 6874     module_height",
            "-0000cc50: 203a 2066 6c6f 6174 2c20 6f70 7469 6f6e   : float, option",
            "-0000cc60: 616c 0a20 2020 2020 2020 5468 6520 6865  al.       The he",
            "-0000cc70: 6967 6874 2061 626f 7665 2067 726f 756e  ight above groun",
            "-0000cc80: 6420 6f66 2074 6865 2063 656e 7465 7220  d of the center ",
            "-0000cc90: 6f66 2074 6865 206d 6f64 756c 6520 5b6d  of the module [m",
            "-0000cca0: 5d2e 2055 7365 6420 666f 720a 2020 2020  ]. Used for.    ",
            "-0000ccb0: 2020 2074 6865 2046 7565 6e74 6573 2063     the Fuentes c",
            "-0000ccc0: 656c 6c20 7465 6d70 6572 6174 7572 6520  ell temperature ",
            "-0000ccd0: 6d6f 6465 6c2e 0a20 2020 2022 2222 0a0a  model..    \"\"\"..",
            "-0000cce0: 2020 2020 7375 7266 6163 655f 7469 6c74      surface_tilt",
            "-0000ccf0: 3a20 666c 6f61 7420 3d20 302e 300a 2020  : float = 0.0.  ",
            "-0000cd00: 2020 7375 7266 6163 655f 617a 696d 7574    surface_azimut",
            "-0000cd10: 683a 2066 6c6f 6174 203d 2031 3830 2e30  h: float = 180.0",
            "-0000cd20: 0a20 2020 2072 6163 6b69 6e67 5f6d 6f64  .    racking_mod",
            "-0000cd30: 656c 3a20 4f70 7469 6f6e 616c 5b73 7472  el: Optional[str",
            "-0000cd40: 5d20 3d20 4e6f 6e65 0a20 2020 206d 6f64  ] = None.    mod",
            "-0000cd50: 756c 655f 6865 6967 6874 3a20 4f70 7469  ule_height: Opti",
            "-0000cd60: 6f6e 616c 5b66 6c6f 6174 5d20 3d20 4e6f  onal[float] = No",
            "-0000cd70: 6e65 0a0a 2020 2020 6465 6620 6765 745f  ne..    def get_",
            "-0000cd80: 6f72 6965 6e74 6174 696f 6e28 7365 6c66  orientation(self",
            "-0000cd90: 2c20 736f 6c61 725f 7a65 6e69 7468 2c20  , solar_zenith, ",
            "-0000cda0: 736f 6c61 725f 617a 696d 7574 6829 3a0a  solar_azimuth):.",
            "-0000cdb0: 2020 2020 2020 2020 2320 6e6f 7465 202d          # note -",
            "-0000cdc0: 2d20 646f 6373 7472 696e 6720 6973 2061  - docstring is a",
            "-0000cdd0: 7574 6f6d 6174 6963 616c 6c79 2069 6e68  utomatically inh",
            "-0000cde0: 6572 6974 6564 2066 726f 6d20 4162 7374  erited from Abst",
            "-0000cdf0: 7261 6374 4d6f 756e 740a 2020 2020 2020  ractMount.      ",
            "-0000ce00: 2020 7265 7475 726e 207b 0a20 2020 2020    return {.     ",
            "-0000ce10: 2020 2020 2020 2027 7375 7266 6163 655f         'surface_",
            "-0000ce20: 7469 6c74 273a 2073 656c 662e 7375 7266  tilt': self.surf",
            "-0000ce30: 6163 655f 7469 6c74 2c0a 2020 2020 2020  ace_tilt,.      ",
            "-0000ce40: 2020 2020 2020 2773 7572 6661 6365 5f61        'surface_a",
            "-0000ce50: 7a69 6d75 7468 273a 2073 656c 662e 7375  zimuth': self.su",
            "-0000ce60: 7266 6163 655f 617a 696d 7574 682c 0a20  rface_azimuth,. ",
            "-0000ce70: 2020 2020 2020 207d 0a0a 0a40 6461 7461         }...@data",
            "-0000ce80: 636c 6173 730a 636c 6173 7320 5369 6e67  class.class Sing",
            "-0000ce90: 6c65 4178 6973 5472 6163 6b65 724d 6f75  leAxisTrackerMou",
            "-0000cea0: 6e74 2841 6273 7472 6163 744d 6f75 6e74  nt(AbstractMount",
            "-0000ceb0: 293a 0a20 2020 2022 2222 0a20 2020 2053  ):.    \"\"\".    S",
            "-0000cec0: 696e 676c 652d 6178 6973 2074 7261 636b  ingle-axis track",
            "-0000ced0: 6572 2072 6163 6b69 6e67 2066 6f72 2064  er racking for d",
            "-0000cee0: 796e 616d 6963 2073 6f6c 6172 2074 7261  ynamic solar tra",
            "-0000cef0: 636b 696e 672e 0a0a 2020 2020 5061 7261  cking...    Para",
            "-0000cf00: 6d65 7465 7273 0a20 2020 202d 2d2d 2d2d  meters.    -----",
            "-0000cf10: 2d2d 2d2d 2d0a 2020 2020 6178 6973 5f74  -----.    axis_t",
            "-0000cf20: 696c 7420 3a20 666c 6f61 742c 2064 6566  ilt : float, def",
            "-0000cf30: 6175 6c74 2030 0a20 2020 2020 2020 2054  ault 0.        T",
            "-0000cf40: 6865 2074 696c 7420 6f66 2074 6865 2061  he tilt of the a",
            "-0000cf50: 7869 7320 6f66 2072 6f74 6174 696f 6e20  xis of rotation ",
            "-0000cf60: 2869 2e65 2c20 7468 6520 792d 6178 6973  (i.e, the y-axis",
            "-0000cf70: 2064 6566 696e 6564 2062 790a 2020 2020   defined by.    ",
            "-0000cf80: 2020 2020 6178 6973 5f61 7a69 6d75 7468      axis_azimuth",
            "-0000cf90: 2920 7769 7468 2072 6573 7065 6374 2074  ) with respect t",
            "-0000cfa0: 6f20 686f 7269 7a6f 6e74 616c 2e20 5b64  o horizontal. [d",
            "-0000cfb0: 6567 7265 6573 5d0a 0a20 2020 2061 7869  egrees]..    axi",
            "-0000cfc0: 735f 617a 696d 7574 6820 3a20 666c 6f61  s_azimuth : floa",
            "-0000cfd0: 742c 2064 6566 6175 6c74 2031 3830 0a20  t, default 180. ",
            "-0000cfe0: 2020 2020 2020 2041 2076 616c 7565 2064         A value d",
            "-0000cff0: 656e 6f74 696e 6720 7468 6520 636f 6d70  enoting the comp",
            "-0000d000: 6173 7320 6469 7265 6374 696f 6e20 616c  ass direction al",
            "-0000d010: 6f6e 6720 7768 6963 6820 7468 6520 6178  ong which the ax",
            "-0000d020: 6973 206f 660a 2020 2020 2020 2020 726f  is of.        ro",
            "-0000d030: 7461 7469 6f6e 206c 6965 732c 206d 6561  tation lies, mea",
            "-0000d040: 7375 7265 6420 6561 7374 206f 6620 6e6f  sured east of no",
            "-0000d050: 7274 682e 205b 6465 6772 6565 735d 0a0a  rth. [degrees]..",
            "-0000d060: 2020 2020 6d61 785f 616e 676c 6520 3a20      max_angle : ",
            "-0000d070: 666c 6f61 7420 6f72 2074 7570 6c65 2c20  float or tuple, ",
            "-0000d080: 6465 6661 756c 7420 3930 0a20 2020 2020  default 90.     ",
            "-0000d090: 2020 2041 2076 616c 7565 2064 656e 6f74     A value denot",
            "-0000d0a0: 696e 6720 7468 6520 6d61 7869 6d75 6d20  ing the maximum ",
            "-0000d0b0: 726f 7461 7469 6f6e 2061 6e67 6c65 2c20  rotation angle, ",
            "-0000d0c0: 696e 2064 6563 696d 616c 2064 6567 7265  in decimal degre",
            "-0000d0d0: 6573 2c0a 2020 2020 2020 2020 6f66 2074  es,.        of t",
            "-0000d0e0: 6865 206f 6e65 2d61 7869 7320 7472 6163  he one-axis trac",
            "-0000d0f0: 6b65 7220 6672 6f6d 2069 7473 2068 6f72  ker from its hor",
            "-0000d100: 697a 6f6e 7461 6c20 706f 7369 7469 6f6e  izontal position",
            "-0000d110: 2028 686f 7269 7a6f 6e74 616c 0a20 2020   (horizontal.   ",
            "-0000d120: 2020 2020 2069 6620 6178 6973 5f74 696c       if axis_til",
            "-0000d130: 7420 3d20 3029 2e20 4966 2061 2066 6c6f  t = 0). If a flo",
            "-0000d140: 6174 2069 7320 7072 6f76 6964 6564 2c20  at is provided, ",
            "-0000d150: 6974 2072 6570 7265 7365 6e74 7320 7468  it represents th",
            "-0000d160: 6520 6d61 7869 6d75 6d0a 2020 2020 2020  e maximum.      ",
            "-0000d170: 2020 726f 7461 7469 6f6e 2061 6e67 6c65    rotation angle",
            "-0000d180: 2c20 616e 6420 7468 6520 6d69 6e69 6d75  , and the minimu",
            "-0000d190: 6d20 726f 7461 7469 6f6e 2061 6e67 6c65  m rotation angle",
            "-0000d1a0: 2069 7320 6173 7375 6d65 6420 746f 2062   is assumed to b",
            "-0000d1b0: 6520 7468 650a 2020 2020 2020 2020 6f70  e the.        op",
            "-0000d1c0: 706f 7369 7465 206f 6620 7468 6520 6d61  posite of the ma",
            "-0000d1d0: 7869 6d75 6d20 616e 676c 652e 2049 6620  ximum angle. If ",
            "-0000d1e0: 6120 7475 706c 6520 6f66 2028 6d69 6e5f  a tuple of (min_",
            "-0000d1f0: 616e 676c 652c 206d 6178 5f61 6e67 6c65  angle, max_angle",
            "-0000d200: 2920 6973 0a20 2020 2020 2020 2070 726f  ) is.        pro",
            "-0000d210: 7669 6465 642c 2069 7420 7265 7072 6573  vided, it repres",
            "-0000d220: 656e 7473 2062 6f74 6820 7468 6520 6d69  ents both the mi",
            "-0000d230: 6e69 6d75 6d20 616e 6420 6d61 7869 6d75  nimum and maximu",
            "-0000d240: 6d20 726f 7461 7469 6f6e 2061 6e67 6c65  m rotation angle",
            "-0000d250: 732e 0a0a 2020 2020 2020 2020 4120 726f  s...        A ro",
            "-0000d260: 7461 7469 6f6e 2074 6f20 276d 6178 5f61  tation to 'max_a",
            "-0000d270: 6e67 6c65 2720 6973 2061 2063 6f75 6e74  ngle' is a count",
            "-0000d280: 6572 2d63 6c6f 636b 7769 7365 2072 6f74  er-clockwise rot",
            "-0000d290: 6174 696f 6e20 6162 6f75 7420 7468 650a  ation about the.",
            "-0000d2a0: 2020 2020 2020 2020 792d 6178 6973 206f          y-axis o",
            "-0000d2b0: 6620 7468 6520 7472 6163 6b65 7220 636f  f the tracker co",
            "-0000d2c0: 6f72 6469 6e61 7465 2073 7973 7465 6d2e  ordinate system.",
            "-0000d2d0: 2046 6f72 2065 7861 6d70 6c65 2c20 666f   For example, fo",
            "-0000d2e0: 7220 6120 7472 6163 6b65 720a 2020 2020  r a tracker.    ",
            "-0000d2f0: 2020 2020 7769 7468 2027 6178 6973 5f61      with 'axis_a",
            "-0000d300: 7a69 6d75 7468 2720 6f72 6965 6e74 6564  zimuth' oriented",
            "-0000d310: 2074 6f20 7468 6520 736f 7574 682c 2061   to the south, a",
            "-0000d320: 2072 6f74 6174 696f 6e20 746f 2027 6d61   rotation to 'ma",
            "-0000d330: 785f 616e 676c 6527 0a20 2020 2020 2020  x_angle'.       ",
            "-0000d340: 2069 7320 746f 7761 7264 7320 7468 6520   is towards the ",
            "-0000d350: 7765 7374 2c20 616e 6420 6120 726f 7461  west, and a rota",
            "-0000d360: 7469 6f6e 2074 6f77 6172 6420 276d 696e  tion toward 'min",
            "-0000d370: 5f61 6e67 6c65 2720 6973 2069 6e20 7468  _angle' is in th",
            "-0000d380: 650a 2020 2020 2020 2020 6f70 706f 7369  e.        opposi",
            "-0000d390: 7465 2064 6972 6563 7469 6f6e 2c20 746f  te direction, to",
            "-0000d3a0: 7761 7264 2074 6865 2065 6173 742e 2048  ward the east. H",
            "-0000d3b0: 656e 6365 2061 206d 6178 5f61 6e67 6c65  ence a max_angle",
            "-0000d3c0: 206f 6620 3138 3020 6465 6772 6565 730a   of 180 degrees.",
            "-0000d3d0: 2020 2020 2020 2020 2865 7175 6976 616c          (equival",
            "-0000d3e0: 656e 7420 746f 206d 6178 5f61 6e67 6c65  ent to max_angle",
            "-0000d3f0: 203d 2028 2d31 3830 2c20 3138 3029 2920   = (-180, 180)) ",
            "-0000d400: 616c 6c6f 7773 2074 6865 2074 7261 636b  allows the track",
            "-0000d410: 6572 2074 6f20 6163 6869 6576 650a 2020  er to achieve.  ",
            "-0000d420: 2020 2020 2020 6974 7320 6675 6c6c 2072        its full r",
            "-0000d430: 6f74 6174 696f 6e20 6361 7061 6269 6c69  otation capabili",
            "-0000d440: 7479 2e0a 0a20 2020 2062 6163 6b74 7261  ty...    backtra",
            "-0000d450: 636b 203a 2062 6f6f 6c2c 2064 6566 6175  ck : bool, defau",
            "-0000d460: 6c74 2054 7275 650a 2020 2020 2020 2020  lt True.        ",
            "-0000d470: 436f 6e74 726f 6c73 2077 6865 7468 6572  Controls whether",
            "-0000d480: 2074 6865 2074 7261 636b 6572 2068 6173   the tracker has",
            "-0000d490: 2074 6865 2063 6170 6162 696c 6974 7920   the capability ",
            "-0000d4a0: 746f 2022 6261 636b 7472 6163 6b22 0a20  to \"backtrack\". ",
            "-0000d4b0: 2020 2020 2020 2074 6f20 6176 6f69 6420         to avoid ",
            "-0000d4c0: 726f 772d 746f 2d72 6f77 2073 6861 6469  row-to-row shadi",
            "-0000d4d0: 6e67 2e20 4661 6c73 6520 6465 6e6f 7465  ng. False denote",
            "-0000d4e0: 7320 6e6f 2062 6163 6b74 7261 636b 0a20  s no backtrack. ",
            "-0000d4f0: 2020 2020 2020 2063 6170 6162 696c 6974         capabilit",
            "-0000d500: 792e 2054 7275 6520 6465 6e6f 7465 7320  y. True denotes ",
            "-0000d510: 6261 636b 7472 6163 6b20 6361 7061 6269  backtrack capabi",
            "-0000d520: 6c69 7479 2e0a 0a20 2020 2067 6372 203a  lity...    gcr :",
            "-0000d530: 2066 6c6f 6174 2c20 6465 6661 756c 7420   float, default ",
            "-0000d540: 322e 302f 372e 300a 2020 2020 2020 2020  2.0/7.0.        ",
            "-0000d550: 4120 7661 6c75 6520 6465 6e6f 7469 6e67  A value denoting",
            "-0000d560: 2074 6865 2067 726f 756e 6420 636f 7665   the ground cove",
            "-0000d570: 7261 6765 2072 6174 696f 206f 6620 6120  rage ratio of a ",
            "-0000d580: 7472 6163 6b65 7220 7379 7374 656d 0a20  tracker system. ",
            "-0000d590: 2020 2020 2020 2077 6869 6368 2075 7469         which uti",
            "-0000d5a0: 6c69 7a65 7320 6261 636b 7472 6163 6b69  lizes backtracki",
            "-0000d5b0: 6e67 3b20 692e 652e 2074 6865 2072 6174  ng; i.e. the rat",
            "-0000d5c0: 696f 2062 6574 7765 656e 2074 6865 2050  io between the P",
            "-0000d5d0: 5620 6172 7261 790a 2020 2020 2020 2020  V array.        ",
            "-0000d5e0: 7375 7266 6163 6520 6172 6561 2074 6f20  surface area to ",
            "-0000d5f0: 746f 7461 6c20 6772 6f75 6e64 2061 7265  total ground are",
            "-0000d600: 612e 2041 2074 7261 636b 6572 2073 7973  a. A tracker sys",
            "-0000d610: 7465 6d20 7769 7468 206d 6f64 756c 6573  tem with modules",
            "-0000d620: 0a20 2020 2020 2020 2032 206d 6574 6572  .        2 meter",
            "-0000d630: 7320 7769 6465 2c20 6365 6e74 6572 6564  s wide, centered",
            "-0000d640: 206f 6e20 7468 6520 7472 6163 6b69 6e67   on the tracking",
            "-0000d650: 2061 7869 732c 2077 6974 6820 3620 6d65   axis, with 6 me",
            "-0000d660: 7465 7273 0a20 2020 2020 2020 2062 6574  ters.        bet",
            "-0000d670: 7765 656e 2074 6865 2074 7261 636b 696e  ween the trackin",
            "-0000d680: 6720 6178 6573 2068 6173 2061 2067 6372  g axes has a gcr",
            "-0000d690: 206f 6620 322f 363d 302e 3333 332e 2049   of 2/6=0.333. I",
            "-0000d6a0: 6620 6763 7220 6973 206e 6f74 0a20 2020  f gcr is not.   ",
            "-0000d6b0: 2020 2020 2070 726f 7669 6465 642c 2061       provided, a",
            "-0000d6c0: 2067 6372 206f 6620 322f 3720 6973 2064   gcr of 2/7 is d",
            "-0000d6d0: 6566 6175 6c74 2e20 6763 7220 6d75 7374  efault. gcr must",
            "-0000d6e0: 2062 6520 3c3d 312e 205b 756e 6974 6c65   be <=1. [unitle",
            "-0000d6f0: 7373 5d0a 0a20 2020 2063 726f 7373 5f61  ss]..    cross_a",
            "-0000d700: 7869 735f 7469 6c74 203a 2066 6c6f 6174  xis_tilt : float",
            "-0000d710: 2c20 6465 6661 756c 7420 302e 300a 2020  , default 0.0.  ",
            "-0000d720: 2020 2020 2020 5468 6520 616e 676c 652c        The angle,",
            "-0000d730: 2072 656c 6174 6976 6520 746f 2068 6f72   relative to hor",
            "-0000d740: 697a 6f6e 7461 6c2c 206f 6620 7468 6520  izontal, of the ",
            "-0000d750: 6c69 6e65 2066 6f72 6d65 6420 6279 2074  line formed by t",
            "-0000d760: 6865 0a20 2020 2020 2020 2069 6e74 6572  he.        inter",
            "-0000d770: 7365 6374 696f 6e20 6265 7477 6565 6e20  section between ",
            "-0000d780: 7468 6520 736c 6f70 6520 636f 6e74 6169  the slope contai",
            "-0000d790: 6e69 6e67 2074 6865 2074 7261 636b 6572  ning the tracker",
            "-0000d7a0: 2061 7865 7320 616e 6420 6120 706c 616e   axes and a plan",
            "-0000d7b0: 650a 2020 2020 2020 2020 7065 7270 656e  e.        perpen",
            "-0000d7c0: 6469 6375 6c61 7220 746f 2074 6865 2074  dicular to the t",
            "-0000d7d0: 7261 636b 6572 2061 7865 732e 2043 726f  racker axes. Cro",
            "-0000d7e0: 7373 2d61 7869 7320 7469 6c74 2073 686f  ss-axis tilt sho",
            "-0000d7f0: 756c 6420 6265 2073 7065 6369 6669 6564  uld be specified",
            "-0000d800: 0a20 2020 2020 2020 2075 7369 6e67 2061  .        using a",
            "-0000d810: 2072 6967 6874 2d68 616e 6465 6420 636f   right-handed co",
            "-0000d820: 6e76 656e 7469 6f6e 2e20 466f 7220 6578  nvention. For ex",
            "-0000d830: 616d 706c 652c 2074 7261 636b 6572 7320  ample, trackers ",
            "-0000d840: 7769 7468 2061 7869 730a 2020 2020 2020  with axis.      ",
            "-0000d850: 2020 617a 696d 7574 6820 6f66 2031 3830    azimuth of 180",
            "-0000d860: 2064 6567 7265 6573 2028 6865 6164 696e   degrees (headin",
            "-0000d870: 6720 736f 7574 6829 2077 696c 6c20 6861  g south) will ha",
            "-0000d880: 7665 2061 206e 6567 6174 6976 6520 6372  ve a negative cr",
            "-0000d890: 6f73 732d 6178 6973 0a20 2020 2020 2020  oss-axis.       ",
            "-0000d8a0: 2074 696c 7420 6966 2074 6865 2074 7261   tilt if the tra",
            "-0000d8b0: 636b 6572 2061 7865 7320 706c 616e 6520  cker axes plane ",
            "-0000d8c0: 736c 6f70 6573 2064 6f77 6e20 746f 2074  slopes down to t",
            "-0000d8d0: 6865 2065 6173 7420 616e 6420 706f 7369  he east and posi",
            "-0000d8e0: 7469 7665 0a20 2020 2020 2020 2063 726f  tive.        cro",
            "-0000d8f0: 7373 2d61 7869 7320 7469 6c74 2069 6620  ss-axis tilt if ",
            "-0000d900: 7468 6520 7472 6163 6b65 7220 6178 6573  the tracker axes",
            "-0000d910: 2070 6c61 6e65 2073 6c6f 7065 7320 7570   plane slopes up",
            "-0000d920: 2074 6f20 7468 6520 6561 7374 2e20 5573   to the east. Us",
            "-0000d930: 650a 2020 2020 2020 2020 3a66 756e 633a  e.        :func:",
            "-0000d940: 607e 7076 6c69 622e 7472 6163 6b69 6e67  `~pvlib.tracking",
            "-0000d950: 2e63 616c 635f 6372 6f73 735f 6178 6973  .calc_cross_axis",
            "-0000d960: 5f74 696c 7460 2074 6f20 6361 6c63 756c  _tilt` to calcul",
            "-0000d970: 6174 650a 2020 2020 2020 2020 6063 726f  ate.        `cro",
            "-0000d980: 7373 5f61 7869 735f 7469 6c74 602e 205b  ss_axis_tilt`. [",
            "-0000d990: 6465 6772 6565 735d 0a0a 2020 2020 7261  degrees]..    ra",
            "-0000d9a0: 636b 696e 675f 6d6f 6465 6c20 3a20 7374  cking_model : st",
            "-0000d9b0: 722c 206f 7074 696f 6e61 6c0a 2020 2020  r, optional.    ",
            "-0000d9c0: 2020 2020 5661 6c69 6420 7374 7269 6e67      Valid string",
            "-0000d9d0: 7320 6172 6520 6060 276f 7065 6e5f 7261  s are ``'open_ra",
            "-0000d9e0: 636b 2760 602c 2060 6027 636c 6f73 655f  ck'``, ``'close_",
            "-0000d9f0: 6d6f 756e 7427 6060 2c0a 2020 2020 2020  mount'``,.      ",
            "-0000da00: 2020 6060 2769 6e73 756c 6174 6564 5f62    ``'insulated_b",
            "-0000da10: 6163 6b27 6060 2c20 6060 2766 7265 6573  ack'``, ``'frees",
            "-0000da20: 7461 6e64 696e 6727 6060 2061 6e64 2060  tanding'`` and `",
            "-0000da30: 6027 696e 7375 6c61 7465 6427 6060 2e0a  `'insulated'``..",
            "-0000da40: 2020 2020 2020 2020 5573 6564 2074 6f20          Used to ",
            "-0000da50: 6964 656e 7469 6679 2061 2070 6172 616d  identify a param",
            "-0000da60: 6574 6572 2073 6574 2066 6f72 2074 6865  eter set for the",
            "-0000da70: 2053 4150 4d20 6f72 2050 5673 7973 7420   SAPM or PVsyst ",
            "-0000da80: 6365 6c6c 0a20 2020 2020 2020 2074 656d  cell.        tem",
            "-0000da90: 7065 7261 7475 7265 206d 6f64 656c 2e20  perature model. ",
            "-0000daa0: 6060 276f 7065 6e5f 7261 636b 2760 6020  ``'open_rack'`` ",
            "-0000dab0: 6f72 2060 6027 6672 6565 7374 616e 6469  or ``'freestandi",
            "-0000dac0: 6e67 2760 6020 7368 6f75 6c64 0a20 2020  ng'`` should.   ",
            "-0000dad0: 2020 2020 2062 6520 7573 6564 2066 6f72       be used for",
            "-0000dae0: 2073 7973 7465 6d73 2077 6974 6820 7369   systems with si",
            "-0000daf0: 6e67 6c65 2d61 7869 7320 7472 6163 6b65  ngle-axis tracke",
            "-0000db00: 7273 2e0a 2020 2020 2020 2020 5365 6520  rs..        See ",
            "-0000db10: 3a70 793a 6675 6e63 3a60 7e70 766c 6962  :py:func:`~pvlib",
            "-0000db20: 2e74 656d 7065 7261 7475 7265 2e73 6170  .temperature.sap",
            "-0000db30: 6d5f 6d6f 6475 6c65 6020 616e 640a 2020  m_module` and.  ",
            "-0000db40: 2020 2020 2020 3a70 793a 6675 6e63 3a60        :py:func:`",
            "-0000db50: 7e70 766c 6962 2e74 656d 7065 7261 7475  ~pvlib.temperatu",
            "-0000db60: 7265 2e70 7673 7973 745f 6365 6c6c 6020  re.pvsyst_cell` ",
            "-0000db70: 666f 7220 6465 6669 6e69 7469 6f6e 732e  for definitions.",
            "-0000db80: 0a0a 2020 2020 6d6f 6475 6c65 5f68 6569  ..    module_hei",
            "-0000db90: 6768 7420 3a20 666c 6f61 742c 206f 7074  ght : float, opt",
            "-0000dba0: 696f 6e61 6c0a 2020 2020 2020 2054 6865  ional.       The",
            "-0000dbb0: 2068 6569 6768 7420 6162 6f76 6520 6772   height above gr",
            "-0000dbc0: 6f75 6e64 206f 6620 7468 6520 6365 6e74  ound of the cent",
            "-0000dbd0: 6572 206f 6620 7468 6520 6d6f 6475 6c65  er of the module",
            "-0000dbe0: 205b 6d5d 2e20 5573 6564 2066 6f72 0a20   [m]. Used for. ",
            "-0000dbf0: 2020 2020 2020 7468 6520 4675 656e 7465        the Fuente",
            "-0000dc00: 7320 6365 6c6c 2074 656d 7065 7261 7475  s cell temperatu",
            "-0000dc10: 7265 206d 6f64 656c 2e0a 2020 2020 2222  re model..    \"\"",
            "-0000dc20: 220a 2020 2020 6178 6973 5f74 696c 743a  \".    axis_tilt:",
            "-0000dc30: 2066 6c6f 6174 203d 2030 2e30 0a20 2020   float = 0.0.   ",
            "-0000dc40: 2061 7869 735f 617a 696d 7574 683a 2066   axis_azimuth: f",
            "-0000dc50: 6c6f 6174 203d 2030 2e30 0a20 2020 206d  loat = 0.0.    m",
            "-0000dc60: 6178 5f61 6e67 6c65 3a20 556e 696f 6e5b  ax_angle: Union[",
            "-0000dc70: 666c 6f61 742c 2074 7570 6c65 5d20 3d20  float, tuple] = ",
            "-0000dc80: 3930 2e30 0a20 2020 2062 6163 6b74 7261  90.0.    backtra",
            "-0000dc90: 636b 3a20 626f 6f6c 203d 2054 7275 650a  ck: bool = True.",
            "-0000dca0: 2020 2020 6763 723a 2066 6c6f 6174 203d      gcr: float =",
            "-0000dcb0: 2032 2e30 2f37 2e30 0a20 2020 2063 726f   2.0/7.0.    cro",
            "-0000dcc0: 7373 5f61 7869 735f 7469 6c74 3a20 666c  ss_axis_tilt: fl",
            "-0000dcd0: 6f61 7420 3d20 302e 300a 2020 2020 7261  oat = 0.0.    ra",
            "-0000dce0: 636b 696e 675f 6d6f 6465 6c3a 204f 7074  cking_model: Opt",
            "-0000dcf0: 696f 6e61 6c5b 7374 725d 203d 204e 6f6e  ional[str] = Non",
            "-0000dd00: 650a 2020 2020 6d6f 6475 6c65 5f68 6569  e.    module_hei",
            "-0000dd10: 6768 743a 204f 7074 696f 6e61 6c5b 666c  ght: Optional[fl",
            "-0000dd20: 6f61 745d 203d 204e 6f6e 650a 0a20 2020  oat] = None..   ",
            "-0000dd30: 2064 6566 2067 6574 5f6f 7269 656e 7461   def get_orienta",
            "-0000dd40: 7469 6f6e 2873 656c 662c 2073 6f6c 6172  tion(self, solar",
            "-0000dd50: 5f7a 656e 6974 682c 2073 6f6c 6172 5f61  _zenith, solar_a",
            "-0000dd60: 7a69 6d75 7468 293a 0a20 2020 2020 2020  zimuth):.       ",
            "-0000dd70: 2023 206e 6f74 6520 2d2d 2064 6f63 7374   # note -- docst",
            "-0000dd80: 7269 6e67 2069 7320 6175 746f 6d61 7469  ring is automati",
            "-0000dd90: 6361 6c6c 7920 696e 6865 7269 7465 6420  cally inherited ",
            "-0000dda0: 6672 6f6d 2041 6273 7472 6163 744d 6f75  from AbstractMou",
            "-0000ddb0: 6e74 0a20 2020 2020 2020 2066 726f 6d20  nt.        from ",
            "-0000ddc0: 7076 6c69 6220 696d 706f 7274 2074 7261  pvlib import tra",
            "-0000ddd0: 636b 696e 6720 2023 2061 766f 6964 2063  cking  # avoid c",
            "-0000dde0: 6972 6375 6c61 7220 696d 706f 7274 2069  ircular import i",
            "-0000ddf0: 7373 7565 0a20 2020 2020 2020 2074 7261  ssue.        tra",
            "-0000de00: 636b 696e 675f 6461 7461 203d 2074 7261  cking_data = tra",
            "-0000de10: 636b 696e 672e 7369 6e67 6c65 6178 6973  cking.singleaxis",
            "-0000de20: 280a 2020 2020 2020 2020 2020 2020 736f  (.            so",
            "-0000de30: 6c61 725f 7a65 6e69 7468 2c20 736f 6c61  lar_zenith, sola",
            "-0000de40: 725f 617a 696d 7574 682c 0a20 2020 2020  r_azimuth,.     ",
            "-0000de50: 2020 2020 2020 2073 656c 662e 6178 6973         self.axis",
            "-0000de60: 5f74 696c 742c 2073 656c 662e 6178 6973  _tilt, self.axis",
            "-0000de70: 5f61 7a69 6d75 7468 2c0a 2020 2020 2020  _azimuth,.      ",
            "-0000de80: 2020 2020 2020 7365 6c66 2e6d 6178 5f61        self.max_a",
            "-0000de90: 6e67 6c65 2c20 7365 6c66 2e62 6163 6b74  ngle, self.backt",
            "-0000dea0: 7261 636b 2c0a 2020 2020 2020 2020 2020  rack,.          ",
            "-0000deb0: 2020 7365 6c66 2e67 6372 2c20 7365 6c66    self.gcr, self",
            "-0000dec0: 2e63 726f 7373 5f61 7869 735f 7469 6c74  .cross_axis_tilt",
            "-0000ded0: 0a20 2020 2020 2020 2029 0a20 2020 2020  .        ).     ",
            "-0000dee0: 2020 2072 6574 7572 6e20 7472 6163 6b69     return tracki",
            "-0000def0: 6e67 5f64 6174 610a 0a0a 6465 6620 6361  ng_data...def ca",
            "-0000df00: 6c63 7061 7261 6d73 5f64 6573 6f74 6f28  lcparams_desoto(",
            "-0000df10: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "-0000df20: 616e 6365 2c20 7465 6d70 5f63 656c 6c2c  ance, temp_cell,",
            "-0000df30: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-0000df40: 2020 2020 2020 2061 6c70 6861 5f73 632c         alpha_sc,",
            "-0000df50: 2061 5f72 6566 2c20 495f 4c5f 7265 662c   a_ref, I_L_ref,",
            "-0000df60: 2049 5f6f 5f72 6566 2c20 525f 7368 5f72   I_o_ref, R_sh_r",
            "-0000df70: 6566 2c20 525f 732c 0a20 2020 2020 2020  ef, R_s,.       ",
            "-0000df80: 2020 2020 2020 2020 2020 2020 2020 2045                 E",
            "-0000df90: 6752 6566 3d31 2e31 3231 2c20 6445 6764  gRef=1.121, dEgd",
            "-0000dfa0: 543d 2d30 2e30 3030 3236 3737 2c0a 2020  T=-0.0002677,.  ",
            "-0000dfb0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000dfc0: 2020 2020 6972 7261 645f 7265 663d 3130      irrad_ref=10",
            "-0000dfd0: 3030 2c20 7465 6d70 5f72 6566 3d32 3529  00, temp_ref=25)",
            "-0000dfe0: 3a0a 2020 2020 2727 270a 2020 2020 4361  :.    '''.    Ca",
            "-0000dff0: 6c63 756c 6174 6573 2066 6976 6520 7061  lculates five pa",
            "-0000e000: 7261 6d65 7465 7220 7661 6c75 6573 2066  rameter values f",
            "-0000e010: 6f72 2074 6865 2073 696e 676c 6520 6469  or the single di",
            "-0000e020: 6f64 6520 6571 7561 7469 6f6e 2061 740a  ode equation at.",
            "-0000e030: 2020 2020 6566 6665 6374 6976 6520 6972      effective ir",
            "-0000e040: 7261 6469 616e 6365 2061 6e64 2063 656c  radiance and cel",
            "-0000e050: 6c20 7465 6d70 6572 6174 7572 6520 7573  l temperature us",
            "-0000e060: 696e 6720 7468 6520 4465 2053 6f74 6f20  ing the De Soto ",
            "-0000e070: 6574 2061 6c2e 0a20 2020 206d 6f64 656c  et al..    model",
            "-0000e080: 2e20 5468 6520 6669 7665 2076 616c 7565  . The five value",
            "-0000e090: 7320 7265 7475 726e 6564 2062 7920 6060  s returned by ``",
            "-0000e0a0: 6361 6c63 7061 7261 6d73 5f64 6573 6f74  calcparams_desot",
            "-0000e0b0: 6f60 6020 6361 6e20 6265 2075 7365 6420  o`` can be used ",
            "-0000e0c0: 6279 0a20 2020 2073 696e 676c 6564 696f  by.    singledio",
            "-0000e0d0: 6465 2074 6f20 6361 6c63 756c 6174 6520  de to calculate ",
            "-0000e0e0: 616e 2049 5620 6375 7276 652e 0a0a 2020  an IV curve...  ",
            "-0000e0f0: 2020 5468 6520 6d6f 6465 6c20 6973 2064    The model is d",
            "-0000e100: 6573 6372 6962 6564 2069 6e20 5b31 5d5f  escribed in [1]_",
            "-0000e110: 2e0a 0a20 2020 2050 6172 616d 6574 6572  ...    Parameter",
            "-0000e120: 730a 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d  s.    ----------",
            "-0000e130: 0a20 2020 2065 6666 6563 7469 7665 5f69  .    effective_i",
            "-0000e140: 7272 6164 6961 6e63 6520 3a20 6e75 6d65  rradiance : nume",
            "-0000e150: 7269 630a 2020 2020 2020 2020 5468 6520  ric.        The ",
            "-0000e160: 6972 7261 6469 616e 6365 2028 572f 6d32  irradiance (W/m2",
            "-0000e170: 2920 7468 6174 2069 7320 636f 6e76 6572  ) that is conver",
            "-0000e180: 7465 6420 746f 2070 686f 746f 6375 7272  ted to photocurr",
            "-0000e190: 656e 742e 0a0a 2020 2020 7465 6d70 5f63  ent...    temp_c",
            "-0000e1a0: 656c 6c20 3a20 6e75 6d65 7269 630a 2020  ell : numeric.  ",
            "-0000e1b0: 2020 2020 2020 5468 6520 6176 6572 6167        The averag",
            "-0000e1c0: 6520 6365 6c6c 2074 656d 7065 7261 7475  e cell temperatu",
            "-0000e1d0: 7265 206f 6620 6365 6c6c 7320 7769 7468  re of cells with",
            "-0000e1e0: 696e 2061 206d 6f64 756c 6520 696e 2043  in a module in C",
            "-0000e1f0: 2e0a 0a20 2020 2061 6c70 6861 5f73 6320  ...    alpha_sc ",
            "-0000e200: 3a20 666c 6f61 740a 2020 2020 2020 2020  : float.        ",
            "-0000e210: 5468 6520 7368 6f72 742d 6369 7263 7569  The short-circui",
            "-0000e220: 7420 6375 7272 656e 7420 7465 6d70 6572  t current temper",
            "-0000e230: 6174 7572 6520 636f 6566 6669 6369 656e  ature coefficien",
            "-0000e240: 7420 6f66 2074 6865 0a20 2020 2020 2020  t of the.       ",
            "-0000e250: 206d 6f64 756c 6520 696e 2075 6e69 7473   module in units",
            "-0000e260: 206f 6620 412f 432e 0a0a 2020 2020 615f   of A/C...    a_",
            "-0000e270: 7265 6620 3a20 666c 6f61 740a 2020 2020  ref : float.    ",
            "-0000e280: 2020 2020 5468 6520 7072 6f64 7563 7420      The product ",
            "-0000e290: 6f66 2074 6865 2075 7375 616c 2064 696f  of the usual dio",
            "-0000e2a0: 6465 2069 6465 616c 6974 7920 6661 6374  de ideality fact",
            "-0000e2b0: 6f72 2028 6e2c 2075 6e69 746c 6573 7329  or (n, unitless)",
            "-0000e2c0: 2c0a 2020 2020 2020 2020 6e75 6d62 6572  ,.        number",
            "-0000e2d0: 206f 6620 6365 6c6c 7320 696e 2073 6572   of cells in ser",
            "-0000e2e0: 6965 7320 284e 7329 2c20 616e 6420 6365  ies (Ns), and ce",
            "-0000e2f0: 6c6c 2074 6865 726d 616c 2076 6f6c 7461  ll thermal volta",
            "-0000e300: 6765 2061 7420 7265 6665 7265 6e63 650a  ge at reference.",
            "-0000e310: 2020 2020 2020 2020 636f 6e64 6974 696f          conditio",
            "-0000e320: 6e73 2c20 696e 2075 6e69 7473 206f 6620  ns, in units of ",
            "-0000e330: 562e 0a0a 2020 2020 495f 4c5f 7265 6620  V...    I_L_ref ",
            "-0000e340: 3a20 666c 6f61 740a 2020 2020 2020 2020  : float.        ",
            "-0000e350: 5468 6520 6c69 6768 742d 6765 6e65 7261  The light-genera",
            "-0000e360: 7465 6420 6375 7272 656e 7420 286f 7220  ted current (or ",
            "-0000e370: 7068 6f74 6f63 7572 7265 6e74 2920 6174  photocurrent) at",
            "-0000e380: 2072 6566 6572 656e 6365 2063 6f6e 6469   reference condi",
            "-0000e390: 7469 6f6e 732c 0a20 2020 2020 2020 2069  tions,.        i",
            "-0000e3a0: 6e20 616d 7065 7265 732e 0a0a 2020 2020  n amperes...    ",
            "-0000e3b0: 495f 6f5f 7265 6620 3a20 666c 6f61 740a  I_o_ref : float.",
            "-0000e3c0: 2020 2020 2020 2020 5468 6520 6461 726b          The dark",
            "-0000e3d0: 206f 7220 6469 6f64 6520 7265 7665 7273   or diode revers",
            "-0000e3e0: 6520 7361 7475 7261 7469 6f6e 2063 7572  e saturation cur",
            "-0000e3f0: 7265 6e74 2061 7420 7265 6665 7265 6e63  rent at referenc",
            "-0000e400: 6520 636f 6e64 6974 696f 6e73 2c0a 2020  e conditions,.  ",
            "-0000e410: 2020 2020 2020 696e 2061 6d70 6572 6573        in amperes",
            "-0000e420: 2e0a 0a20 2020 2052 5f73 685f 7265 6620  ...    R_sh_ref ",
            "-0000e430: 3a20 666c 6f61 740a 2020 2020 2020 2020  : float.        ",
            "-0000e440: 5468 6520 7368 756e 7420 7265 7369 7374  The shunt resist",
            "-0000e450: 616e 6365 2061 7420 7265 6665 7265 6e63  ance at referenc",
            "-0000e460: 6520 636f 6e64 6974 696f 6e73 2c20 696e  e conditions, in",
            "-0000e470: 206f 686d 732e 0a0a 2020 2020 525f 7320   ohms...    R_s ",
            "-0000e480: 3a20 666c 6f61 740a 2020 2020 2020 2020  : float.        ",
            "-0000e490: 5468 6520 7365 7269 6573 2072 6573 6973  The series resis",
            "-0000e4a0: 7461 6e63 6520 6174 2072 6566 6572 656e  tance at referen",
            "-0000e4b0: 6365 2063 6f6e 6469 7469 6f6e 732c 2069  ce conditions, i",
            "-0000e4c0: 6e20 6f68 6d73 2e0a 0a20 2020 2045 6752  n ohms...    EgR",
            "-0000e4d0: 6566 203a 2066 6c6f 6174 0a20 2020 2020  ef : float.     ",
            "-0000e4e0: 2020 2054 6865 2065 6e65 7267 7920 6261     The energy ba",
            "-0000e4f0: 6e64 6761 7020 6174 2072 6566 6572 656e  ndgap at referen",
            "-0000e500: 6365 2074 656d 7065 7261 7475 7265 2069  ce temperature i",
            "-0000e510: 6e20 756e 6974 7320 6f66 2065 562e 0a20  n units of eV.. ",
            "-0000e520: 2020 2020 2020 2031 2e31 3231 2065 5620         1.121 eV ",
            "-0000e530: 666f 7220 6372 7973 7461 6c6c 696e 6520  for crystalline ",
            "-0000e540: 7369 6c69 636f 6e2e 2045 6752 6566 206d  silicon. EgRef m",
            "-0000e550: 7573 7420 6265 203e 302e 2020 466f 7220  ust be >0.  For ",
            "-0000e560: 7061 7261 6d65 7465 7273 0a20 2020 2020  parameters.     ",
            "-0000e570: 2020 2066 726f 6d20 7468 6520 5341 4d20     from the SAM ",
            "-0000e580: 4345 4320 6d6f 6475 6c65 2064 6174 6162  CEC module datab",
            "-0000e590: 6173 652c 2045 6752 6566 3d31 2e31 3231  ase, EgRef=1.121",
            "-0000e5a0: 2069 7320 696d 706c 6963 6974 2066 6f72   is implicit for",
            "-0000e5b0: 2061 6c6c 0a20 2020 2020 2020 2063 656c   all.        cel",
            "-0000e5c0: 6c20 7479 7065 7320 696e 2074 6865 2070  l types in the p",
            "-0000e5d0: 6172 616d 6574 6572 2065 7374 696d 6174  arameter estimat",
            "-0000e5e0: 696f 6e20 616c 676f 7269 7468 6d20 7573  ion algorithm us",
            "-0000e5f0: 6564 2062 7920 4e52 454c 2e0a 0a20 2020  ed by NREL...   ",
            "-0000e600: 2064 4567 6454 203a 2066 6c6f 6174 0a20   dEgdT : float. ",
            "-0000e610: 2020 2020 2020 2054 6865 2074 656d 7065         The tempe",
            "-0000e620: 7261 7475 7265 2064 6570 656e 6465 6e63  rature dependenc",
            "-0000e630: 6520 6f66 2074 6865 2065 6e65 7267 7920  e of the energy ",
            "-0000e640: 6261 6e64 6761 7020 6174 2072 6566 6572  bandgap at refer",
            "-0000e650: 656e 6365 0a20 2020 2020 2020 2063 6f6e  ence.        con",
            "-0000e660: 6469 7469 6f6e 7320 696e 2075 6e69 7473  ditions in units",
            "-0000e670: 206f 6620 312f 4b2e 204d 6179 2062 6520   of 1/K. May be ",
            "-0000e680: 6569 7468 6572 2061 2073 6361 6c61 7220  either a scalar ",
            "-0000e690: 7661 6c75 650a 2020 2020 2020 2020 2865  value.        (e",
            "-0000e6a0: 2e67 2e20 2d30 2e30 3030 3236 3737 2061  .g. -0.0002677 a",
            "-0000e6b0: 7320 696e 205b 315d 5f29 206f 7220 6120  s in [1]_) or a ",
            "-0000e6c0: 4461 7461 4672 616d 6520 2874 6869 7320  DataFrame (this ",
            "-0000e6d0: 6d61 7920 6265 2075 7365 6675 6c20 6966  may be useful if",
            "-0000e6e0: 0a20 2020 2020 2020 2064 4567 6454 2069  .        dEgdT i",
            "-0000e6f0: 7320 6120 6d6f 6465 6c65 6420 6173 2061  s a modeled as a",
            "-0000e700: 2066 756e 6374 696f 6e20 6f66 2074 656d   function of tem",
            "-0000e710: 7065 7261 7475 7265 292e 2046 6f72 2070  perature). For p",
            "-0000e720: 6172 616d 6574 6572 7320 6672 6f6d 0a20  arameters from. ",
            "-0000e730: 2020 2020 2020 2074 6865 2053 414d 2043         the SAM C",
            "-0000e740: 4543 206d 6f64 756c 6520 6461 7461 6261  EC module databa",
            "-0000e750: 7365 2c20 6445 6764 543d 2d30 2e30 3030  se, dEgdT=-0.000",
            "-0000e760: 3236 3737 2069 7320 696d 706c 6963 6974  2677 is implicit",
            "-0000e770: 2066 6f72 2061 6c6c 2063 656c 6c0a 2020   for all cell.  ",
            "-0000e780: 2020 2020 2020 7479 7065 7320 696e 2074        types in t",
            "-0000e790: 6865 2070 6172 616d 6574 6572 2065 7374  he parameter est",
            "-0000e7a0: 696d 6174 696f 6e20 616c 676f 7269 7468  imation algorith",
            "-0000e7b0: 6d20 7573 6564 2062 7920 4e52 454c 2e0a  m used by NREL..",
            "-0000e7c0: 0a20 2020 2069 7272 6164 5f72 6566 203a  .    irrad_ref :",
            "-0000e7d0: 2066 6c6f 6174 2c20 6465 6661 756c 7420   float, default ",
            "-0000e7e0: 3130 3030 0a20 2020 2020 2020 2052 6566  1000.        Ref",
            "-0000e7f0: 6572 656e 6365 2069 7272 6164 6961 6e63  erence irradianc",
            "-0000e800: 6520 696e 2057 2f6d 5e32 2e0a 0a20 2020  e in W/m^2...   ",
            "-0000e810: 2074 656d 705f 7265 6620 3a20 666c 6f61   temp_ref : floa",
            "-0000e820: 742c 2064 6566 6175 6c74 2032 350a 2020  t, default 25.  ",
            "-0000e830: 2020 2020 2020 5265 6665 7265 6e63 6520        Reference ",
            "-0000e840: 6365 6c6c 2074 656d 7065 7261 7475 7265  cell temperature",
            "-0000e850: 2069 6e20 432e 0a0a 2020 2020 5265 7475   in C...    Retu",
            "-0000e860: 726e 730a 2020 2020 2d2d 2d2d 2d2d 2d0a  rns.    -------.",
            "-0000e870: 2020 2020 5475 706c 6520 6f66 2074 6865      Tuple of the",
            "-0000e880: 2066 6f6c 6c6f 7769 6e67 2072 6573 756c   following resul",
            "-0000e890: 7473 3a0a 0a20 2020 2070 686f 746f 6375  ts:..    photocu",
            "-0000e8a0: 7272 656e 7420 3a20 6e75 6d65 7269 630a  rrent : numeric.",
            "-0000e8b0: 2020 2020 2020 2020 4c69 6768 742d 6765          Light-ge",
            "-0000e8c0: 6e65 7261 7465 6420 6375 7272 656e 7420  nerated current ",
            "-0000e8d0: 696e 2061 6d70 6572 6573 0a0a 2020 2020  in amperes..    ",
            "-0000e8e0: 7361 7475 7261 7469 6f6e 5f63 7572 7265  saturation_curre",
            "-0000e8f0: 6e74 203a 206e 756d 6572 6963 0a20 2020  nt : numeric.   ",
            "-0000e900: 2020 2020 2044 696f 6465 2073 6174 7572       Diode satur",
            "-0000e910: 6174 696f 6e20 6375 7272 656e 7420 696e  ation current in",
            "-0000e920: 2061 6d70 6572 6573 0a0a 2020 2020 7265   amperes..    re",
            "-0000e930: 7369 7374 616e 6365 5f73 6572 6965 7320  sistance_series ",
            "-0000e940: 3a20 6e75 6d65 7269 630a 2020 2020 2020  : numeric.      ",
            "-0000e950: 2020 5365 7269 6573 2072 6573 6973 7461    Series resista",
            "-0000e960: 6e63 6520 696e 206f 686d 730a 0a20 2020  nce in ohms..   ",
            "-0000e970: 2072 6573 6973 7461 6e63 655f 7368 756e   resistance_shun",
            "-0000e980: 7420 3a20 6e75 6d65 7269 630a 2020 2020  t : numeric.    ",
            "-0000e990: 2020 2020 5368 756e 7420 7265 7369 7374      Shunt resist",
            "-0000e9a0: 616e 6365 2069 6e20 6f68 6d73 0a0a 2020  ance in ohms..  ",
            "-0000e9b0: 2020 6e4e 7356 7468 203a 206e 756d 6572    nNsVth : numer",
            "-0000e9c0: 6963 0a20 2020 2020 2020 2054 6865 2070  ic.        The p",
            "-0000e9d0: 726f 6475 6374 206f 6620 7468 6520 7573  roduct of the us",
            "-0000e9e0: 7561 6c20 6469 6f64 6520 6964 6561 6c69  ual diode ideali",
            "-0000e9f0: 7479 2066 6163 746f 7220 286e 2c20 756e  ty factor (n, un",
            "-0000ea00: 6974 6c65 7373 292c 0a20 2020 2020 2020  itless),.       ",
            "-0000ea10: 206e 756d 6265 7220 6f66 2063 656c 6c73   number of cells",
            "-0000ea20: 2069 6e20 7365 7269 6573 2028 4e73 292c   in series (Ns),",
            "-0000ea30: 2061 6e64 2063 656c 6c20 7468 6572 6d61   and cell therma",
            "-0000ea40: 6c20 766f 6c74 6167 6520 6174 0a20 2020  l voltage at.   ",
            "-0000ea50: 2020 2020 2073 7065 6369 6669 6564 2065       specified e",
            "-0000ea60: 6666 6563 7469 7665 2069 7272 6164 6961  ffective irradia",
            "-0000ea70: 6e63 6520 616e 6420 6365 6c6c 2074 656d  nce and cell tem",
            "-0000ea80: 7065 7261 7475 7265 2e0a 0a20 2020 2052  perature...    R",
            "-0000ea90: 6566 6572 656e 6365 730a 2020 2020 2d2d  eferences.    --",
            "-0000eaa0: 2d2d 2d2d 2d2d 2d2d 0a20 2020 202e 2e20  --------.    .. ",
            "-0000eab0: 5b31 5d20 572e 2044 6520 536f 746f 2065  [1] W. De Soto e",
            "-0000eac0: 7420 616c 2e2c 2022 496d 7072 6f76 656d  t al., \"Improvem",
            "-0000ead0: 656e 7420 616e 6420 7661 6c69 6461 7469  ent and validati",
            "-0000eae0: 6f6e 206f 6620 6120 6d6f 6465 6c20 666f  on of a model fo",
            "-0000eaf0: 720a 2020 2020 2020 2070 686f 746f 766f  r.       photovo",
            "-0000eb00: 6c74 6169 6320 6172 7261 7920 7065 7266  ltaic array perf",
            "-0000eb10: 6f72 6d61 6e63 6522 2c20 536f 6c61 7220  ormance\", Solar ",
            "-0000eb20: 456e 6572 6779 2c20 766f 6c20 3830 2c20  Energy, vol 80, ",
            "-0000eb30: 7070 2e20 3738 2d38 382c 0a20 2020 2020  pp. 78-88,.     ",
            "-0000eb40: 2020 3230 3036 2e0a 0a20 2020 202e 2e20    2006...    .. ",
            "-0000eb50: 5b32 5d20 5379 7374 656d 2041 6476 6973  [2] System Advis",
            "-0000eb60: 6f72 204d 6f64 656c 2077 6562 2070 6167  or Model web pag",
            "-0000eb70: 652e 2068 7474 7073 3a2f 2f73 616d 2e6e  e. https://sam.n",
            "-0000eb80: 7265 6c2e 676f 762e 0a0a 2020 2020 2e2e  rel.gov...    ..",
            "-0000eb90: 205b 335d 2041 2e20 446f 626f 732c 2022   [3] A. Dobos, \"",
            "-0000eba0: 416e 2049 6d70 726f 7665 6420 436f 6566  An Improved Coef",
            "-0000ebb0: 6669 6369 656e 7420 4361 6c63 756c 6174  ficient Calculat",
            "-0000ebc0: 6f72 2066 6f72 2074 6865 2043 616c 6966  or for the Calif",
            "-0000ebd0: 6f72 6e69 610a 2020 2020 2020 2045 6e65  ornia.       Ene",
            "-0000ebe0: 7267 7920 436f 6d6d 6973 7369 6f6e 2036  rgy Commission 6",
            "-0000ebf0: 2050 6172 616d 6574 6572 2050 686f 746f   Parameter Photo",
            "-0000ec00: 766f 6c74 6169 6320 4d6f 6475 6c65 204d  voltaic Module M",
            "-0000ec10: 6f64 656c 222c 204a 6f75 726e 616c 206f  odel\", Journal o",
            "-0000ec20: 660a 2020 2020 2020 2053 6f6c 6172 2045  f.       Solar E",
            "-0000ec30: 6e65 7267 7920 456e 6769 6e65 6572 696e  nergy Engineerin",
            "-0000ec40: 672c 2076 6f6c 2031 3334 2c20 3230 3132  g, vol 134, 2012",
            "-0000ec50: 2e0a 0a20 2020 202e 2e20 5b34 5d20 4f2e  ...    .. [4] O.",
            "-0000ec60: 204d 6164 656c 756e 672c 2022 5365 6d69   Madelung, \"Semi",
            "-0000ec70: 636f 6e64 7563 746f 7273 3a20 4461 7461  conductors: Data",
            "-0000ec80: 2048 616e 6462 6f6f 6b2c 2033 7264 2065   Handbook, 3rd e",
            "-0000ec90: 642e 2220 4953 424e 0a20 2020 2020 2020  d.\" ISBN.       ",
            "-0000eca0: 332d 3534 302d 3430 3438 382d 300a 0a20  3-540-40488-0.. ",
            "-0000ecb0: 2020 2053 6565 2041 6c73 6f0a 2020 2020     See Also.    ",
            "-0000ecc0: 2d2d 2d2d 2d2d 2d2d 0a20 2020 2073 696e  --------.    sin",
            "-0000ecd0: 676c 6564 696f 6465 0a20 2020 2072 6574  glediode.    ret",
            "-0000ece0: 7269 6576 655f 7361 6d0a 0a20 2020 204e  rieve_sam..    N",
            "-0000ecf0: 6f74 6573 0a20 2020 202d 2d2d 2d2d 0a20  otes.    -----. ",
            "-0000ed00: 2020 2049 6620 7468 6520 7265 6665 7265     If the refere",
            "-0000ed10: 6e63 6520 7061 7261 6d65 7465 7273 2069  nce parameters i",
            "-0000ed20: 6e20 7468 6520 4d6f 6475 6c65 5061 7261  n the ModulePara",
            "-0000ed30: 6d65 7465 7273 2073 7472 7563 7420 6172  meters struct ar",
            "-0000ed40: 6520 7265 6164 0a20 2020 2066 726f 6d20  e read.    from ",
            "-0000ed50: 6120 6461 7461 6261 7365 206f 7220 6c69  a database or li",
            "-0000ed60: 6272 6172 7920 6f66 2070 6172 616d 6574  brary of paramet",
            "-0000ed70: 6572 7320 2865 2e67 2e20 5379 7374 656d  ers (e.g. System",
            "-0000ed80: 2041 6476 6973 6f72 0a20 2020 204d 6f64   Advisor.    Mod",
            "-0000ed90: 656c 292c 2069 7420 6973 2069 6d70 6f72  el), it is impor",
            "-0000eda0: 7461 6e74 2074 6f20 7573 6520 7468 6520  tant to use the ",
            "-0000edb0: 7361 6d65 2045 6752 6566 2061 6e64 2064  same EgRef and d",
            "-0000edc0: 4567 6454 2076 616c 7565 7320 7468 6174  EgdT values that",
            "-0000edd0: 0a20 2020 2077 6572 6520 7573 6564 2074  .    were used t",
            "-0000ede0: 6f20 6765 6e65 7261 7465 2074 6865 2072  o generate the r",
            "-0000edf0: 6566 6572 656e 6365 2070 6172 616d 6574  eference paramet",
            "-0000ee00: 6572 732c 2072 6567 6172 646c 6573 7320  ers, regardless ",
            "-0000ee10: 6f66 2074 6865 0a20 2020 2061 6374 7561  of the.    actua",
            "-0000ee20: 6c20 6261 6e64 6761 7020 6368 6172 6163  l bandgap charac",
            "-0000ee30: 7465 7269 7374 6963 7320 6f66 2074 6865  teristics of the",
            "-0000ee40: 2073 656d 6963 6f6e 6475 6374 6f72 2e20   semiconductor. ",
            "-0000ee50: 466f 7220 6578 616d 706c 652c 2069 6e0a  For example, in.",
            "-0000ee60: 2020 2020 7468 6520 6361 7365 206f 6620      the case of ",
            "-0000ee70: 7468 6520 5379 7374 656d 2041 6476 6973  the System Advis",
            "-0000ee80: 6f72 204d 6f64 656c 206c 6962 7261 7279  or Model library",
            "-0000ee90: 2c20 6372 6561 7465 6420 6173 2064 6573  , created as des",
            "-0000eea0: 6372 6962 6564 0a20 2020 2069 6e20 5b33  cribed.    in [3",
            "-0000eeb0: 5d2c 2045 6752 6566 2061 6e64 2064 4567  ], EgRef and dEg",
            "-0000eec0: 6454 2066 6f72 2061 6c6c 206d 6f64 756c  dT for all modul",
            "-0000eed0: 6573 2077 6572 6520 312e 3132 3120 616e  es were 1.121 an",
            "-0000eee0: 6420 2d30 2e30 3030 3236 3737 2c0a 2020  d -0.0002677,.  ",
            "-0000eef0: 2020 7265 7370 6563 7469 7665 6c79 2e0a    respectively..",
            "-0000ef00: 0a20 2020 2054 6869 7320 7461 626c 6520  .    This table ",
            "-0000ef10: 6f66 2072 6566 6572 656e 6365 2062 616e  of reference ban",
            "-0000ef20: 6467 6170 2065 6e65 7267 6965 7320 2845  dgap energies (E",
            "-0000ef30: 6752 6566 292c 2062 616e 6467 6170 2065  gRef), bandgap e",
            "-0000ef40: 6e65 7267 790a 2020 2020 7465 6d70 6572  nergy.    temper",
            "-0000ef50: 6174 7572 6520 6465 7065 6e64 656e 6365  ature dependence",
            "-0000ef60: 2028 6445 6764 5429 2c20 616e 6420 2274   (dEgdT), and \"t",
            "-0000ef70: 7970 6963 616c 2220 6169 726d 6173 7320  ypical\" airmass ",
            "-0000ef80: 7265 7370 6f6e 7365 2028 4d29 0a20 2020  response (M).   ",
            "-0000ef90: 2069 7320 7072 6f76 6964 6564 2070 7572   is provided pur",
            "-0000efa0: 656c 7920 6173 2072 6566 6572 656e 6365  ely as reference",
            "-0000efb0: 2074 6f20 7468 6f73 6520 7768 6f20 6d61   to those who ma",
            "-0000efc0: 7920 6765 6e65 7261 7465 2074 6865 6972  y generate their",
            "-0000efd0: 206f 776e 0a20 2020 2072 6566 6572 656e   own.    referen",
            "-0000efe0: 6365 206d 6f64 756c 6520 7061 7261 6d65  ce module parame",
            "-0000eff0: 7465 7273 2028 615f 7265 662c 2049 4c5f  ters (a_ref, IL_",
            "-0000f000: 7265 662c 2049 305f 7265 662c 2065 7463  ref, I0_ref, etc",
            "-0000f010: 2e29 2062 6173 6564 2075 706f 6e0a 2020  .) based upon.  ",
            "-0000f020: 2020 7468 6520 7661 7269 6f75 7320 5056    the various PV",
            "-0000f030: 2073 656d 6963 6f6e 6475 6374 6f72 732e   semiconductors.",
            "-0000f040: 2041 6761 696e 2c20 7765 2073 7472 6573   Again, we stres",
            "-0000f050: 7320 7468 6520 696d 706f 7274 616e 6365  s the importance",
            "-0000f060: 206f 660a 2020 2020 7573 696e 6720 6964   of.    using id",
            "-0000f070: 656e 7469 6361 6c20 4567 5265 6620 616e  entical EgRef an",
            "-0000f080: 6420 6445 6764 5420 7768 656e 2067 656e  d dEgdT when gen",
            "-0000f090: 6572 6174 696f 6e20 7265 6665 7265 6e63  eration referenc",
            "-0000f0a0: 6520 7061 7261 6d65 7465 7273 0a20 2020  e parameters.   ",
            "-0000f0b0: 2061 6e64 206d 6f64 6966 7969 6e67 2074   and modifying t",
            "-0000f0c0: 6865 2072 6566 6572 656e 6365 2070 6172  he reference par",
            "-0000f0d0: 616d 6574 6572 7320 2866 6f72 2069 7272  ameters (for irr",
            "-0000f0e0: 6164 6961 6e63 652c 2074 656d 7065 7261  adiance, tempera",
            "-0000f0f0: 7475 7265 2c0a 2020 2020 616e 6420 6169  ture,.    and ai",
            "-0000f100: 726d 6173 7329 2070 6572 2044 6553 6f74  rmass) per DeSot",
            "-0000f110: 6f27 7320 6571 7561 7469 6f6e 732e 0a0a  o's equations...",
            "-0000f120: 2020 2020 2043 7279 7374 616c 6c69 6e65       Crystalline",
            "-0000f130: 2053 696c 6963 6f6e 2028 5369 293a 0a20   Silicon (Si):. ",
            "-0000f140: 2020 2020 2020 2020 2a20 4567 5265 6620          * EgRef ",
            "-0000f150: 3d20 312e 3132 310a 2020 2020 2020 2020  = 1.121.        ",
            "-0000f160: 202a 2064 4567 6454 203d 202d 302e 3030   * dEgdT = -0.00",
            "-0000f170: 3032 3637 370a 0a20 2020 2020 2020 2020  02677..         ",
            "-0000f180: 3e3e 3e20 4d20 3d20 6e70 2e70 6f6c 7976  >>> M = np.polyv",
            "-0000f190: 616c 285b 2d31 2e32 3645 2d34 2c20 322e  al([-1.26E-4, 2.",
            "-0000f1a0: 3831 3645 2d33 2c20 2d30 2e30 3234 3435  816E-3, -0.02445",
            "-0000f1b0: 392c 2030 2e30 3836 3235 372c 2030 2e39  9, 0.086257, 0.9",
            "-0000f1c0: 3138 315d 2c0a 2020 2020 2020 2020 202e  181],.         .",
            "-0000f1d0: 2e2e 2020 2020 2020 2020 2020 2020 2020  ..              ",
            "-0000f1e0: 2020 414d 6129 2023 2064 6f63 7465 7374    AMa) # doctest",
            "-0000f1f0: 3a20 2b53 4b49 500a 0a20 2020 2020 2020  : +SKIP..       ",
            "-0000f200: 2020 536f 7572 6365 3a20 5b31 5d0a 0a20    Source: [1].. ",
            "-0000f210: 2020 2020 4361 646d 6975 6d20 5465 6c6c      Cadmium Tell",
            "-0000f220: 7572 6964 6520 2843 6454 6529 3a0a 2020  uride (CdTe):.  ",
            "-0000f230: 2020 2020 2020 202a 2045 6752 6566 203d         * EgRef =",
            "-0000f240: 2031 2e34 3735 0a20 2020 2020 2020 2020   1.475.         ",
            "-0000f250: 2a20 6445 6764 5420 3d20 2d30 2e30 3030  * dEgdT = -0.000",
            "-0000f260: 330a 0a20 2020 2020 2020 2020 3e3e 3e20  3..         >>> ",
            "-0000f270: 4d20 3d20 6e70 2e70 6f6c 7976 616c 285b  M = np.polyval([",
            "-0000f280: 2d32 2e34 3645 2d35 2c20 392e 3630 3745  -2.46E-5, 9.607E",
            "-0000f290: 2d34 2c20 2d30 2e30 3133 342c 2030 2e30  -4, -0.0134, 0.0",
            "-0000f2a0: 3731 362c 2030 2e39 3139 365d 2c0a 2020  716, 0.9196],.  ",
            "-0000f2b0: 2020 2020 2020 202e 2e2e 2020 2020 2020         ...      ",
            "-0000f2c0: 2020 2020 2020 2020 2020 414d 6129 2023            AMa) #",
            "-0000f2d0: 2064 6f63 7465 7374 3a20 2b53 4b49 500a   doctest: +SKIP.",
            "-0000f2e0: 0a20 2020 2020 2020 2020 536f 7572 6365  .         Source",
            "-0000f2f0: 3a20 5b34 5d0a 0a20 2020 2020 436f 7070  : [4]..     Copp",
            "-0000f300: 6572 2049 6e64 6975 6d20 6469 5365 6c65  er Indium diSele",
            "-0000f310: 6e69 6465 2028 4349 5329 3a0a 2020 2020  nide (CIS):.    ",
            "-0000f320: 2020 2020 202a 2045 6752 6566 203d 2031       * EgRef = 1",
            "-0000f330: 2e30 3130 0a20 2020 2020 2020 2020 2a20  .010.         * ",
            "-0000f340: 6445 6764 5420 3d20 2d30 2e30 3030 3131  dEgdT = -0.00011",
            "-0000f350: 0a0a 2020 2020 2020 2020 203e 3e3e 204d  ..         >>> M",
            "-0000f360: 203d 206e 702e 706f 6c79 7661 6c28 5b2d   = np.polyval([-",
            "-0000f370: 332e 3734 452d 352c 2030 2e30 3031 3235  3.74E-5, 0.00125",
            "-0000f380: 2c20 2d30 2e30 3134 3632 2c20 302e 3037  , -0.01462, 0.07",
            "-0000f390: 3138 2c20 302e 3932 3130 5d2c 0a20 2020  18, 0.9210],.   ",
            "-0000f3a0: 2020 2020 2020 2e2e 2e20 2020 2020 2020        ...       ",
            "-0000f3b0: 2020 2020 2020 2020 2041 4d61 2920 2320           AMa) # ",
            "-0000f3c0: 646f 6374 6573 743a 202b 534b 4950 0a0a  doctest: +SKIP..",
            "-0000f3d0: 2020 2020 2020 2020 2053 6f75 7263 653a           Source:",
            "-0000f3e0: 205b 345d 0a0a 2020 2020 2043 6f70 7065   [4]..     Coppe",
            "-0000f3f0: 7220 496e 6469 756d 2047 616c 6c69 756d  r Indium Gallium",
            "-0000f400: 2064 6953 656c 656e 6964 6520 2843 4947   diSelenide (CIG",
            "-0000f410: 5329 3a0a 2020 2020 2020 2020 202a 2045  S):.         * E",
            "-0000f420: 6752 6566 203d 2031 2e31 350a 2020 2020  gRef = 1.15.    ",
            "-0000f430: 2020 2020 202a 2064 4567 6454 203d 203f       * dEgdT = ?",
            "-0000f440: 3f3f 3f0a 0a20 2020 2020 2020 2020 3e3e  ???..         >>",
            "-0000f450: 3e20 4d20 3d20 6e70 2e70 6f6c 7976 616c  > M = np.polyval",
            "-0000f460: 285b 2d39 2e30 3745 2d35 2c20 302e 3030  ([-9.07E-5, 0.00",
            "-0000f470: 3232 2c20 2d30 2e30 3230 322c 2030 2e30  22, -0.0202, 0.0",
            "-0000f480: 3635 322c 2030 2e39 3431 375d 2c0a 2020  652, 0.9417],.  ",
            "-0000f490: 2020 2020 2020 202e 2e2e 2020 2020 2020         ...      ",
            "-0000f4a0: 2020 2020 2020 2020 2020 414d 6129 2023            AMa) #",
            "-0000f4b0: 2064 6f63 7465 7374 3a20 2b53 4b49 500a   doctest: +SKIP.",
            "-0000f4c0: 0a20 2020 2020 2020 2020 536f 7572 6365  .         Source",
            "-0000f4d0: 3a20 5769 6b69 7065 6469 610a 0a20 2020  : Wikipedia..   ",
            "-0000f4e0: 2020 4761 6c6c 6975 6d20 4172 7365 6e69    Gallium Arseni",
            "-0000f4f0: 6465 2028 4761 4173 293a 0a20 2020 2020  de (GaAs):.     ",
            "-0000f500: 2020 2020 2a20 4567 5265 6620 3d20 312e      * EgRef = 1.",
            "-0000f510: 3432 340a 2020 2020 2020 2020 202a 2064  424.         * d",
            "-0000f520: 4567 6454 203d 202d 302e 3030 3034 3333  EgdT = -0.000433",
            "-0000f530: 0a20 2020 2020 2020 2020 2a20 4d20 3d20  .         * M = ",
            "-0000f540: 756e 6b6e 6f77 6e0a 0a20 2020 2020 2020  unknown..       ",
            "-0000f550: 2020 536f 7572 6365 3a20 5b34 5d0a 2020    Source: [4].  ",
            "-0000f560: 2020 2727 270a 0a20 2020 2023 2042 6f6c    '''..    # Bol",
            "-0000f570: 747a 6d61 6e6e 2063 6f6e 7374 616e 7420  tzmann constant ",
            "-0000f580: 696e 2065 562f 4b2c 2038 2e36 3137 3333  in eV/K, 8.61733",
            "-0000f590: 3234 3738 652d 3035 0a20 2020 206b 203d  2478e-05.    k =",
            "-0000f5a0: 2063 6f6e 7374 616e 7473 2e76 616c 7565   constants.value",
            "-0000f5b0: 2827 426f 6c74 7a6d 616e 6e20 636f 6e73  ('Boltzmann cons",
            "-0000f5c0: 7461 6e74 2069 6e20 6556 2f4b 2729 0a0a  tant in eV/K')..",
            "-0000f5d0: 2020 2020 2320 7265 6665 7265 6e63 6520      # reference ",
            "-0000f5e0: 7465 6d70 6572 6174 7572 650a 2020 2020  temperature.    ",
            "-0000f5f0: 5472 6566 5f4b 203d 2074 656d 705f 7265  Tref_K = temp_re",
            "-0000f600: 6620 2b20 3237 332e 3135 0a20 2020 2054  f + 273.15.    T",
            "-0000f610: 6365 6c6c 5f4b 203d 2074 656d 705f 6365  cell_K = temp_ce",
            "-0000f620: 6c6c 202b 2032 3733 2e31 350a 0a20 2020  ll + 273.15..   ",
            "-0000f630: 2045 5f67 203d 2045 6752 6566 202a 2028   E_g = EgRef * (",
            "-0000f640: 3120 2b20 6445 6764 542a 2854 6365 6c6c  1 + dEgdT*(Tcell",
            "-0000f650: 5f4b 202d 2054 7265 665f 4b29 290a 0a20  _K - Tref_K)).. ",
            "-0000f660: 2020 206e 4e73 5674 6820 3d20 615f 7265     nNsVth = a_re",
            "-0000f670: 6620 2a20 2854 6365 6c6c 5f4b 202f 2054  f * (Tcell_K / T",
            "-0000f680: 7265 665f 4b29 0a0a 2020 2020 2320 496e  ref_K)..    # In",
            "-0000f690: 2074 6865 2065 7175 6174 696f 6e20 666f   the equation fo",
            "-0000f6a0: 7220 494c 2c20 7468 6520 7369 6e67 6c65  r IL, the single",
            "-0000f6b0: 2066 6163 746f 7220 6566 6665 6374 6976   factor effectiv",
            "-0000f6c0: 655f 6972 7261 6469 616e 6365 2069 730a  e_irradiance is.",
            "-0000f6d0: 2020 2020 2320 7573 6564 2c20 696e 2070      # used, in p",
            "-0000f6e0: 6c61 6365 206f 6620 7468 6520 7072 6f64  lace of the prod",
            "-0000f6f0: 7563 7420 532a 4d20 696e 205b 315d 2e20  uct S*M in [1]. ",
            "-0000f700: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "-0000f710: 616e 6365 2069 730a 2020 2020 2320 6571  ance is.    # eq",
            "-0000f720: 7569 7661 6c65 6e74 2074 6f20 7468 6520  uivalent to the ",
            "-0000f730: 7072 6f64 7563 7420 6f66 2053 2028 6972  product of S (ir",
            "-0000f740: 7261 6469 616e 6365 2072 6561 6368 696e  radiance reachin",
            "-0000f750: 6720 6120 6d6f 6475 6c65 2773 2063 656c  g a module's cel",
            "-0000f760: 6c73 2920 2a0a 2020 2020 2320 4d20 2873  ls) *.    # M (s",
            "-0000f770: 7065 6374 7261 6c20 6164 6a75 7374 6d65  pectral adjustme",
            "-0000f780: 6e74 2066 6163 746f 7229 2061 7320 6465  nt factor) as de",
            "-0000f790: 7363 7269 6265 6420 696e 205b 315d 2e0a  scribed in [1]..",
            "-0000f7a0: 2020 2020 494c 203d 2065 6666 6563 7469      IL = effecti",
            "-0000f7b0: 7665 5f69 7272 6164 6961 6e63 6520 2f20  ve_irradiance / ",
            "-0000f7c0: 6972 7261 645f 7265 6620 2a20 5c0a 2020  irrad_ref * \\.  ",
            "-0000f7d0: 2020 2020 2020 2849 5f4c 5f72 6566 202b        (I_L_ref +",
            "-0000f7e0: 2061 6c70 6861 5f73 6320 2a20 2854 6365   alpha_sc * (Tce",
            "-0000f7f0: 6c6c 5f4b 202d 2054 7265 665f 4b29 290a  ll_K - Tref_K)).",
            "-0000f800: 2020 2020 4930 203d 2028 495f 6f5f 7265      I0 = (I_o_re",
            "-0000f810: 6620 2a20 2828 5463 656c 6c5f 4b20 2f20  f * ((Tcell_K / ",
            "-0000f820: 5472 6566 5f4b 2920 2a2a 2033 2920 2a0a  Tref_K) ** 3) *.",
            "-0000f830: 2020 2020 2020 2020 2020 286e 702e 6578            (np.ex",
            "-0000f840: 7028 4567 5265 6620 2f20 286b 2a28 5472  p(EgRef / (k*(Tr",
            "-0000f850: 6566 5f4b 2929 202d 2028 455f 6720 2f20  ef_K)) - (E_g / ",
            "-0000f860: 286b 2a28 5463 656c 6c5f 4b29 2929 2929  (k*(Tcell_K)))))",
            "-0000f870: 290a 2020 2020 2320 4e6f 7465 2074 6861  ).    # Note tha",
            "-0000f880: 7420 7468 6520 6571 7561 7469 6f6e 2066  t the equation f",
            "-0000f890: 6f72 2052 7368 2064 6966 6665 7273 2066  or Rsh differs f",
            "-0000f8a0: 726f 6d20 5b31 5d2e 2049 6e20 5b31 5d20  rom [1]. In [1] ",
            "-0000f8b0: 5273 6820 6973 2067 6976 656e 2061 730a  Rsh is given as.",
            "-0000f8c0: 2020 2020 2320 5273 6820 3d20 5273 685f      # Rsh = Rsh_",
            "-0000f8d0: 7265 6620 2a20 2853 5f72 6566 202f 2053  ref * (S_ref / S",
            "-0000f8e0: 2920 7768 6572 6520 5320 6973 2062 726f  ) where S is bro",
            "-0000f8f0: 6164 6261 6e64 2069 7272 6164 6961 6e63  adband irradianc",
            "-0000f900: 6520 7265 6163 6869 6e67 0a20 2020 2023  e reaching.    #",
            "-0000f910: 2074 6865 206d 6f64 756c 6527 7320 6365   the module's ce",
            "-0000f920: 6c6c 732e 2049 6620 6465 7369 7265 6420  lls. If desired ",
            "-0000f930: 7468 6973 206d 6f64 656c 2062 6568 6176  this model behav",
            "-0000f940: 696f 7220 6361 6e20 6265 2064 7570 6c69  ior can be dupli",
            "-0000f950: 6361 7465 640a 2020 2020 2320 6279 2061  cated.    # by a",
            "-0000f960: 7070 6c79 696e 6720 7265 666c 6563 7469  pplying reflecti",
            "-0000f970: 6f6e 2061 6e64 2073 6f69 6c69 6e67 206c  on and soiling l",
            "-0000f980: 6f73 7365 7320 746f 2062 726f 6164 6261  osses to broadba",
            "-0000f990: 6e64 2070 6c61 6e65 206f 6620 6172 7261  nd plane of arra",
            "-0000f9a0: 790a 2020 2020 2320 6972 7261 6469 616e  y.    # irradian",
            "-0000f9b0: 6365 2061 6e64 206e 6f74 2061 7070 6c79  ce and not apply",
            "-0000f9c0: 696e 6720 6120 7370 6563 7472 616c 206c  ing a spectral l",
            "-0000f9d0: 6f73 7320 6d6f 6469 6669 6572 2c20 692e  oss modifier, i.",
            "-0000f9e0: 652e 2c0a 2020 2020 2320 7370 6563 7472  e.,.    # spectr",
            "-0000f9f0: 616c 5f6d 6f64 6966 6965 7220 3d20 312e  al_modifier = 1.",
            "-0000fa00: 302e 0a20 2020 2023 2075 7365 2065 7272  0..    # use err",
            "-0000fa10: 7374 6174 6520 746f 2073 696c 656e 6365  state to silence",
            "-0000fa20: 2064 6976 6964 6520 6279 2077 6172 6e69   divide by warni",
            "-0000fa30: 6e67 0a20 2020 2077 6974 6820 6e70 2e65  ng.    with np.e",
            "-0000fa40: 7272 7374 6174 6528 6469 7669 6465 3d27  rrstate(divide='",
            "-0000fa50: 6967 6e6f 7265 2729 3a0a 2020 2020 2020  ignore'):.      ",
            "-0000fa60: 2020 5273 6820 3d20 525f 7368 5f72 6566    Rsh = R_sh_ref",
            "-0000fa70: 202a 2028 6972 7261 645f 7265 6620 2f20   * (irrad_ref / ",
            "-0000fa80: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "-0000fa90: 616e 6365 290a 0a20 2020 2052 7320 3d20  ance)..    Rs = ",
            "-0000faa0: 525f 730a 0a20 2020 206e 756d 6572 6963  R_s..    numeric",
            "-0000fab0: 5f61 7267 7320 3d20 2865 6666 6563 7469  _args = (effecti",
            "-0000fac0: 7665 5f69 7272 6164 6961 6e63 652c 2074  ve_irradiance, t",
            "-0000fad0: 656d 705f 6365 6c6c 290a 2020 2020 2320  emp_cell).    # ",
            "-0000fae0: 494c 3a20 7068 6f74 6f63 7572 7265 6e74  IL: photocurrent",
            "-0000faf0: 2c20 4930 3a20 7361 7475 7261 7469 6f6e  , I0: saturation",
            "-0000fb00: 5f63 7572 7265 6e74 2c20 5273 3a20 7265  _current, Rs: re",
            "-0000fb10: 7369 7374 616e 6365 5f73 6572 6965 732c  sistance_series,",
            "-0000fb20: 0a20 2020 2023 2052 7368 3a20 7265 7369  .    # Rsh: resi",
            "-0000fb30: 7374 616e 6365 5f73 6875 6e74 0a20 2020  stance_shunt.   ",
            "-0000fb40: 206f 7574 203d 2028 494c 2c20 4930 2c20   out = (IL, I0, ",
            "-0000fb50: 5273 2c20 5273 682c 206e 4e73 5674 6829  Rs, Rsh, nNsVth)",
            "-0000fb60: 0a0a 2020 2020 6966 2061 6c6c 286d 6170  ..    if all(map",
            "-0000fb70: 286e 702e 6973 7363 616c 6172 2c20 6e75  (np.isscalar, nu",
            "-0000fb80: 6d65 7269 635f 6172 6773 2929 3a0a 2020  meric_args)):.  ",
            "-0000fb90: 2020 2020 2020 7265 7475 726e 206f 7574        return out",
            "-0000fba0: 0a0a 2020 2020 696e 6465 7820 3d20 746f  ..    index = to",
            "-0000fbb0: 6f6c 732e 6765 745f 7061 6e64 6173 5f69  ols.get_pandas_i",
            "-0000fbc0: 6e64 6578 282a 6e75 6d65 7269 635f 6172  ndex(*numeric_ar",
            "-0000fbd0: 6773 290a 0a20 2020 2069 6620 696e 6465  gs)..    if inde",
            "-0000fbe0: 7820 6973 204e 6f6e 653a 0a20 2020 2020  x is None:.     ",
            "-0000fbf0: 2020 2072 6574 7572 6e20 6e70 2e62 726f     return np.bro",
            "-0000fc00: 6164 6361 7374 5f61 7272 6179 7328 2a6f  adcast_arrays(*o",
            "-0000fc10: 7574 290a 0a20 2020 2072 6574 7572 6e20  ut)..    return ",
            "-0000fc20: 7475 706c 6528 7064 2e53 6572 6965 7328  tuple(pd.Series(",
            "-0000fc30: 612c 2069 6e64 6578 3d69 6e64 6578 292e  a, index=index).",
            "-0000fc40: 7265 6e61 6d65 284e 6f6e 6529 2066 6f72  rename(None) for",
            "-0000fc50: 2061 2069 6e20 6f75 7429 0a0a 0a64 6566   a in out)...def",
            "-0000fc60: 2063 616c 6370 6172 616d 735f 6365 6328   calcparams_cec(",
            "-0000fc70: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "-0000fc80: 616e 6365 2c20 7465 6d70 5f63 656c 6c2c  ance, temp_cell,",
            "-0000fc90: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-0000fca0: 2020 2020 616c 7068 615f 7363 2c20 615f      alpha_sc, a_",
            "-0000fcb0: 7265 662c 2049 5f4c 5f72 6566 2c20 495f  ref, I_L_ref, I_",
            "-0000fcc0: 6f5f 7265 662c 2052 5f73 685f 7265 662c  o_ref, R_sh_ref,",
            "-0000fcd0: 2052 5f73 2c0a 2020 2020 2020 2020 2020   R_s,.          ",
            "-0000fce0: 2020 2020 2020 2020 2041 646a 7573 742c           Adjust,",
            "-0000fcf0: 2045 6752 6566 3d31 2e31 3231 2c20 6445   EgRef=1.121, dE",
            "-0000fd00: 6764 543d 2d30 2e30 3030 3236 3737 2c0a  gdT=-0.0002677,.",
            "-0000fd10: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0000fd20: 2020 2069 7272 6164 5f72 6566 3d31 3030     irrad_ref=100",
            "-0000fd30: 302c 2074 656d 705f 7265 663d 3235 293a  0, temp_ref=25):",
            "-0000fd40: 0a20 2020 2027 2727 0a20 2020 2043 616c  .    '''.    Cal",
            "-0000fd50: 6375 6c61 7465 7320 6669 7665 2070 6172  culates five par",
            "-0000fd60: 616d 6574 6572 2076 616c 7565 7320 666f  ameter values fo",
            "-0000fd70: 7220 7468 6520 7369 6e67 6c65 2064 696f  r the single dio",
            "-0000fd80: 6465 2065 7175 6174 696f 6e20 6174 0a20  de equation at. ",
            "-0000fd90: 2020 2065 6666 6563 7469 7665 2069 7272     effective irr",
            "-0000fda0: 6164 6961 6e63 6520 616e 6420 6365 6c6c  adiance and cell",
            "-0000fdb0: 2074 656d 7065 7261 7475 7265 2075 7369   temperature usi",
            "-0000fdc0: 6e67 2074 6865 2043 4543 0a20 2020 206d  ng the CEC.    m",
            "-0000fdd0: 6f64 656c 2e20 5468 6520 4345 4320 6d6f  odel. The CEC mo",
            "-0000fde0: 6465 6c20 5b31 5d5f 2064 6966 6665 7273  del [1]_ differs",
            "-0000fdf0: 2066 726f 6d20 7468 6520 4465 2073 6f74   from the De sot",
            "-0000fe00: 6f20 6574 2061 6c2e 0a20 2020 206d 6f64  o et al..    mod",
            "-0000fe10: 656c 205b 335d 5f20 6279 2074 6865 2070  el [3]_ by the p",
            "-0000fe20: 6172 616d 6574 6572 2041 646a 7573 742e  arameter Adjust.",
            "-0000fe30: 2054 6865 2066 6976 6520 7661 6c75 6573   The five values",
            "-0000fe40: 2072 6574 7572 6e65 6420 6279 0a20 2020   returned by.   ",
            "-0000fe50: 2063 616c 6370 6172 616d 735f 6365 6320   calcparams_cec ",
            "-0000fe60: 6361 6e20 6265 2075 7365 6420 6279 2073  can be used by s",
            "-0000fe70: 696e 676c 6564 696f 6465 2074 6f20 6361  inglediode to ca",
            "-0000fe80: 6c63 756c 6174 6520 616e 2049 5620 6375  lculate an IV cu",
            "-0000fe90: 7276 652e 0a0a 2020 2020 5061 7261 6d65  rve...    Parame",
            "-0000fea0: 7465 7273 0a20 2020 202d 2d2d 2d2d 2d2d  ters.    -------",
            "-0000feb0: 2d2d 2d0a 2020 2020 6566 6665 6374 6976  ---.    effectiv",
            "-0000fec0: 655f 6972 7261 6469 616e 6365 203a 206e  e_irradiance : n",
            "-0000fed0: 756d 6572 6963 0a20 2020 2020 2020 2054  umeric.        T",
            "-0000fee0: 6865 2069 7272 6164 6961 6e63 6520 2857  he irradiance (W",
            "-0000fef0: 2f6d 3229 2074 6861 7420 6973 2063 6f6e  /m2) that is con",
            "-0000ff00: 7665 7274 6564 2074 6f20 7068 6f74 6f63  verted to photoc",
            "-0000ff10: 7572 7265 6e74 2e0a 0a20 2020 2074 656d  urrent...    tem",
            "-0000ff20: 705f 6365 6c6c 203a 206e 756d 6572 6963  p_cell : numeric",
            "-0000ff30: 0a20 2020 2020 2020 2054 6865 2061 7665  .        The ave",
            "-0000ff40: 7261 6765 2063 656c 6c20 7465 6d70 6572  rage cell temper",
            "-0000ff50: 6174 7572 6520 6f66 2063 656c 6c73 2077  ature of cells w",
            "-0000ff60: 6974 6869 6e20 6120 6d6f 6475 6c65 2069  ithin a module i",
            "-0000ff70: 6e20 432e 0a0a 2020 2020 616c 7068 615f  n C...    alpha_",
            "-0000ff80: 7363 203a 2066 6c6f 6174 0a20 2020 2020  sc : float.     ",
            "-0000ff90: 2020 2054 6865 2073 686f 7274 2d63 6972     The short-cir",
            "-0000ffa0: 6375 6974 2063 7572 7265 6e74 2074 656d  cuit current tem",
            "-0000ffb0: 7065 7261 7475 7265 2063 6f65 6666 6963  perature coeffic",
            "-0000ffc0: 6965 6e74 206f 6620 7468 650a 2020 2020  ient of the.    ",
            "-0000ffd0: 2020 2020 6d6f 6475 6c65 2069 6e20 756e      module in un",
            "-0000ffe0: 6974 7320 6f66 2041 2f43 2e0a 0a20 2020  its of A/C...   ",
            "-0000fff0: 2061 5f72 6566 203a 2066 6c6f 6174 0a20   a_ref : float. ",
            "-00010000: 2020 2020 2020 2054 6865 2070 726f 6475         The produ",
            "-00010010: 6374 206f 6620 7468 6520 7573 7561 6c20  ct of the usual ",
            "-00010020: 6469 6f64 6520 6964 6561 6c69 7479 2066  diode ideality f",
            "-00010030: 6163 746f 7220 286e 2c20 756e 6974 6c65  actor (n, unitle",
            "-00010040: 7373 292c 0a20 2020 2020 2020 206e 756d  ss),.        num",
            "-00010050: 6265 7220 6f66 2063 656c 6c73 2069 6e20  ber of cells in ",
            "-00010060: 7365 7269 6573 2028 4e73 292c 2061 6e64  series (Ns), and",
            "-00010070: 2063 656c 6c20 7468 6572 6d61 6c20 766f   cell thermal vo",
            "-00010080: 6c74 6167 6520 6174 2072 6566 6572 656e  ltage at referen",
            "-00010090: 6365 0a20 2020 2020 2020 2063 6f6e 6469  ce.        condi",
            "-000100a0: 7469 6f6e 732c 2069 6e20 756e 6974 7320  tions, in units ",
            "-000100b0: 6f66 2056 2e0a 0a20 2020 2049 5f4c 5f72  of V...    I_L_r",
            "-000100c0: 6566 203a 2066 6c6f 6174 0a20 2020 2020  ef : float.     ",
            "-000100d0: 2020 2054 6865 206c 6967 6874 2d67 656e     The light-gen",
            "-000100e0: 6572 6174 6564 2063 7572 7265 6e74 2028  erated current (",
            "-000100f0: 6f72 2070 686f 746f 6375 7272 656e 7429  or photocurrent)",
            "-00010100: 2061 7420 7265 6665 7265 6e63 6520 636f   at reference co",
            "-00010110: 6e64 6974 696f 6e73 2c0a 2020 2020 2020  nditions,.      ",
            "-00010120: 2020 696e 2061 6d70 6572 6573 2e0a 0a20    in amperes... ",
            "-00010130: 2020 2049 5f6f 5f72 6566 203a 2066 6c6f     I_o_ref : flo",
            "-00010140: 6174 0a20 2020 2020 2020 2054 6865 2064  at.        The d",
            "-00010150: 6172 6b20 6f72 2064 696f 6465 2072 6576  ark or diode rev",
            "-00010160: 6572 7365 2073 6174 7572 6174 696f 6e20  erse saturation ",
            "-00010170: 6375 7272 656e 7420 6174 2072 6566 6572  current at refer",
            "-00010180: 656e 6365 2063 6f6e 6469 7469 6f6e 732c  ence conditions,",
            "-00010190: 0a20 2020 2020 2020 2069 6e20 616d 7065  .        in ampe",
            "-000101a0: 7265 732e 0a0a 2020 2020 525f 7368 5f72  res...    R_sh_r",
            "-000101b0: 6566 203a 2066 6c6f 6174 0a20 2020 2020  ef : float.     ",
            "-000101c0: 2020 2054 6865 2073 6875 6e74 2072 6573     The shunt res",
            "-000101d0: 6973 7461 6e63 6520 6174 2072 6566 6572  istance at refer",
            "-000101e0: 656e 6365 2063 6f6e 6469 7469 6f6e 732c  ence conditions,",
            "-000101f0: 2069 6e20 6f68 6d73 2e0a 0a20 2020 2052   in ohms...    R",
            "-00010200: 5f73 203a 2066 6c6f 6174 0a20 2020 2020  _s : float.     ",
            "-00010210: 2020 2054 6865 2073 6572 6965 7320 7265     The series re",
            "-00010220: 7369 7374 616e 6365 2061 7420 7265 6665  sistance at refe",
            "-00010230: 7265 6e63 6520 636f 6e64 6974 696f 6e73  rence conditions",
            "-00010240: 2c20 696e 206f 686d 732e 0a0a 2020 2020  , in ohms...    ",
            "-00010250: 4164 6a75 7374 203a 2066 6c6f 6174 0a20  Adjust : float. ",
            "-00010260: 2020 2020 2020 2054 6865 2061 646a 7573         The adjus",
            "-00010270: 746d 656e 7420 746f 2074 6865 2074 656d  tment to the tem",
            "-00010280: 7065 7261 7475 7265 2063 6f65 6666 6963  perature coeffic",
            "-00010290: 6965 6e74 2066 6f72 2073 686f 7274 2063  ient for short c",
            "-000102a0: 6972 6375 6974 0a20 2020 2020 2020 2063  ircuit.        c",
            "-000102b0: 7572 7265 6e74 2c20 696e 2070 6572 6365  urrent, in perce",
            "-000102c0: 6e74 0a0a 2020 2020 4567 5265 6620 3a20  nt..    EgRef : ",
            "-000102d0: 666c 6f61 740a 2020 2020 2020 2020 5468  float.        Th",
            "-000102e0: 6520 656e 6572 6779 2062 616e 6467 6170  e energy bandgap",
            "-000102f0: 2061 7420 7265 6665 7265 6e63 6520 7465   at reference te",
            "-00010300: 6d70 6572 6174 7572 6520 696e 2075 6e69  mperature in uni",
            "-00010310: 7473 206f 6620 6556 2e0a 2020 2020 2020  ts of eV..      ",
            "-00010320: 2020 312e 3132 3120 6556 2066 6f72 2063    1.121 eV for c",
            "-00010330: 7279 7374 616c 6c69 6e65 2073 696c 6963  rystalline silic",
            "-00010340: 6f6e 2e20 4567 5265 6620 6d75 7374 2062  on. EgRef must b",
            "-00010350: 6520 3e30 2e20 2046 6f72 2070 6172 616d  e >0.  For param",
            "-00010360: 6574 6572 730a 2020 2020 2020 2020 6672  eters.        fr",
            "-00010370: 6f6d 2074 6865 2053 414d 2043 4543 206d  om the SAM CEC m",
            "-00010380: 6f64 756c 6520 6461 7461 6261 7365 2c20  odule database, ",
            "-00010390: 4567 5265 663d 312e 3132 3120 6973 2069  EgRef=1.121 is i",
            "-000103a0: 6d70 6c69 6369 7420 666f 7220 616c 6c0a  mplicit for all.",
            "-000103b0: 2020 2020 2020 2020 6365 6c6c 2074 7970          cell typ",
            "-000103c0: 6573 2069 6e20 7468 6520 7061 7261 6d65  es in the parame",
            "-000103d0: 7465 7220 6573 7469 6d61 7469 6f6e 2061  ter estimation a",
            "-000103e0: 6c67 6f72 6974 686d 2075 7365 6420 6279  lgorithm used by",
            "-000103f0: 204e 5245 4c2e 0a0a 2020 2020 6445 6764   NREL...    dEgd",
            "-00010400: 5420 3a20 666c 6f61 740a 2020 2020 2020  T : float.      ",
            "-00010410: 2020 5468 6520 7465 6d70 6572 6174 7572    The temperatur",
            "-00010420: 6520 6465 7065 6e64 656e 6365 206f 6620  e dependence of ",
            "-00010430: 7468 6520 656e 6572 6779 2062 616e 6467  the energy bandg",
            "-00010440: 6170 2061 7420 7265 6665 7265 6e63 650a  ap at reference.",
            "-00010450: 2020 2020 2020 2020 636f 6e64 6974 696f          conditio",
            "-00010460: 6e73 2069 6e20 756e 6974 7320 6f66 2031  ns in units of 1",
            "-00010470: 2f4b 2e20 4d61 7920 6265 2065 6974 6865  /K. May be eithe",
            "-00010480: 7220 6120 7363 616c 6172 2076 616c 7565  r a scalar value",
            "-00010490: 0a20 2020 2020 2020 2028 652e 672e 202d  .        (e.g. -",
            "-000104a0: 302e 3030 3032 3637 3720 6173 2069 6e20  0.0002677 as in ",
            "-000104b0: 5b33 5d29 206f 7220 6120 4461 7461 4672  [3]) or a DataFr",
            "-000104c0: 616d 6520 2874 6869 7320 6d61 7920 6265  ame (this may be",
            "-000104d0: 2075 7365 6675 6c20 6966 0a20 2020 2020   useful if.     ",
            "-000104e0: 2020 2064 4567 6454 2069 7320 6120 6d6f     dEgdT is a mo",
            "-000104f0: 6465 6c65 6420 6173 2061 2066 756e 6374  deled as a funct",
            "-00010500: 696f 6e20 6f66 2074 656d 7065 7261 7475  ion of temperatu",
            "-00010510: 7265 292e 2046 6f72 2070 6172 616d 6574  re). For paramet",
            "-00010520: 6572 7320 6672 6f6d 0a20 2020 2020 2020  ers from.       ",
            "-00010530: 2074 6865 2053 414d 2043 4543 206d 6f64   the SAM CEC mod",
            "-00010540: 756c 6520 6461 7461 6261 7365 2c20 6445  ule database, dE",
            "-00010550: 6764 543d 2d30 2e30 3030 3236 3737 2069  gdT=-0.0002677 i",
            "-00010560: 7320 696d 706c 6963 6974 2066 6f72 2061  s implicit for a",
            "-00010570: 6c6c 2063 656c 6c0a 2020 2020 2020 2020  ll cell.        ",
            "-00010580: 7479 7065 7320 696e 2074 6865 2070 6172  types in the par",
            "-00010590: 616d 6574 6572 2065 7374 696d 6174 696f  ameter estimatio",
            "-000105a0: 6e20 616c 676f 7269 7468 6d20 7573 6564  n algorithm used",
            "-000105b0: 2062 7920 4e52 454c 2e0a 0a20 2020 2069   by NREL...    i",
            "-000105c0: 7272 6164 5f72 6566 203a 2066 6c6f 6174  rrad_ref : float",
            "-000105d0: 2c20 6465 6661 756c 7420 3130 3030 0a20  , default 1000. ",
            "-000105e0: 2020 2020 2020 2052 6566 6572 656e 6365         Reference",
            "-000105f0: 2069 7272 6164 6961 6e63 6520 696e 2057   irradiance in W",
            "-00010600: 2f6d 5e32 2e0a 0a20 2020 2074 656d 705f  /m^2...    temp_",
            "-00010610: 7265 6620 3a20 666c 6f61 742c 2064 6566  ref : float, def",
            "-00010620: 6175 6c74 2032 350a 2020 2020 2020 2020  ault 25.        ",
            "-00010630: 5265 6665 7265 6e63 6520 6365 6c6c 2074  Reference cell t",
            "-00010640: 656d 7065 7261 7475 7265 2069 6e20 432e  emperature in C.",
            "-00010650: 0a0a 2020 2020 5265 7475 726e 730a 2020  ..    Returns.  ",
            "-00010660: 2020 2d2d 2d2d 2d2d 2d0a 2020 2020 5475    -------.    Tu",
            "-00010670: 706c 6520 6f66 2074 6865 2066 6f6c 6c6f  ple of the follo",
            "-00010680: 7769 6e67 2072 6573 756c 7473 3a0a 0a20  wing results:.. ",
            "-00010690: 2020 2070 686f 746f 6375 7272 656e 7420     photocurrent ",
            "-000106a0: 3a20 6e75 6d65 7269 630a 2020 2020 2020  : numeric.      ",
            "-000106b0: 2020 4c69 6768 742d 6765 6e65 7261 7465    Light-generate",
            "-000106c0: 6420 6375 7272 656e 7420 696e 2061 6d70  d current in amp",
            "-000106d0: 6572 6573 0a0a 2020 2020 7361 7475 7261  eres..    satura",
            "-000106e0: 7469 6f6e 5f63 7572 7265 6e74 203a 206e  tion_current : n",
            "-000106f0: 756d 6572 6963 0a20 2020 2020 2020 2044  umeric.        D",
            "-00010700: 696f 6465 2073 6174 7572 6174 696f 6e20  iode saturation ",
            "-00010710: 6375 7265 6e74 2069 6e20 616d 7065 7265  curent in ampere",
            "-00010720: 730a 0a20 2020 2072 6573 6973 7461 6e63  s..    resistanc",
            "-00010730: 655f 7365 7269 6573 203a 206e 756d 6572  e_series : numer",
            "-00010740: 6963 0a20 2020 2020 2020 2053 6572 6965  ic.        Serie",
            "-00010750: 7320 7265 7369 7374 616e 6365 2069 6e20  s resistance in ",
            "-00010760: 6f68 6d73 0a0a 2020 2020 7265 7369 7374  ohms..    resist",
            "-00010770: 616e 6365 5f73 6875 6e74 203a 206e 756d  ance_shunt : num",
            "-00010780: 6572 6963 0a20 2020 2020 2020 2053 6875  eric.        Shu",
            "-00010790: 6e74 2072 6573 6973 7461 6e63 6520 696e  nt resistance in",
            "-000107a0: 206f 686d 730a 0a20 2020 206e 4e73 5674   ohms..    nNsVt",
            "-000107b0: 6820 3a20 6e75 6d65 7269 630a 2020 2020  h : numeric.    ",
            "-000107c0: 2020 2020 5468 6520 7072 6f64 7563 7420      The product ",
            "-000107d0: 6f66 2074 6865 2075 7375 616c 2064 696f  of the usual dio",
            "-000107e0: 6465 2069 6465 616c 6974 7920 6661 6374  de ideality fact",
            "-000107f0: 6f72 2028 6e2c 2075 6e69 746c 6573 7329  or (n, unitless)",
            "-00010800: 2c0a 2020 2020 2020 2020 6e75 6d62 6572  ,.        number",
            "-00010810: 206f 6620 6365 6c6c 7320 696e 2073 6572   of cells in ser",
            "-00010820: 6965 7320 284e 7329 2c20 616e 6420 6365  ies (Ns), and ce",
            "-00010830: 6c6c 2074 6865 726d 616c 2076 6f6c 7461  ll thermal volta",
            "-00010840: 6765 2061 740a 2020 2020 2020 2020 7370  ge at.        sp",
            "-00010850: 6563 6966 6965 6420 6566 6665 6374 6976  ecified effectiv",
            "-00010860: 6520 6972 7261 6469 616e 6365 2061 6e64  e irradiance and",
            "-00010870: 2063 656c 6c20 7465 6d70 6572 6174 7572   cell temperatur",
            "-00010880: 652e 0a0a 2020 2020 5265 6665 7265 6e63  e...    Referenc",
            "-00010890: 6573 0a20 2020 202d 2d2d 2d2d 2d2d 2d2d  es.    ---------",
            "-000108a0: 2d0a 2020 2020 2e2e 205b 315d 2041 2e20  -.    .. [1] A. ",
            "-000108b0: 446f 626f 732c 2022 416e 2049 6d70 726f  Dobos, \"An Impro",
            "-000108c0: 7665 6420 436f 6566 6669 6369 656e 7420  ved Coefficient ",
            "-000108d0: 4361 6c63 756c 6174 6f72 2066 6f72 2074  Calculator for t",
            "-000108e0: 6865 2043 616c 6966 6f72 6e69 610a 2020  he California.  ",
            "-000108f0: 2020 2020 2045 6e65 7267 7920 436f 6d6d       Energy Comm",
            "-00010900: 6973 7369 6f6e 2036 2050 6172 616d 6574  ission 6 Paramet",
            "-00010910: 6572 2050 686f 746f 766f 6c74 6169 6320  er Photovoltaic ",
            "-00010920: 4d6f 6475 6c65 204d 6f64 656c 222c 204a  Module Model\", J",
            "-00010930: 6f75 726e 616c 206f 660a 2020 2020 2020  ournal of.      ",
            "-00010940: 2053 6f6c 6172 2045 6e65 7267 7920 456e   Solar Energy En",
            "-00010950: 6769 6e65 6572 696e 672c 2076 6f6c 2031  gineering, vol 1",
            "-00010960: 3334 2c20 3230 3132 2e0a 0a20 2020 202e  34, 2012...    .",
            "-00010970: 2e20 5b32 5d20 5379 7374 656d 2041 6476  . [2] System Adv",
            "-00010980: 6973 6f72 204d 6f64 656c 2077 6562 2070  isor Model web p",
            "-00010990: 6167 652e 2068 7474 7073 3a2f 2f73 616d  age. https://sam",
            "-000109a0: 2e6e 7265 6c2e 676f 762e 0a0a 2020 2020  .nrel.gov...    ",
            "-000109b0: 2e2e 205b 335d 2057 2e20 4465 2053 6f74  .. [3] W. De Sot",
            "-000109c0: 6f20 6574 2061 6c2e 2c20 2249 6d70 726f  o et al., \"Impro",
            "-000109d0: 7665 6d65 6e74 2061 6e64 2076 616c 6964  vement and valid",
            "-000109e0: 6174 696f 6e20 6f66 2061 206d 6f64 656c  ation of a model",
            "-000109f0: 2066 6f72 0a20 2020 2020 2020 7068 6f74   for.       phot",
            "-00010a00: 6f76 6f6c 7461 6963 2061 7272 6179 2070  ovoltaic array p",
            "-00010a10: 6572 666f 726d 616e 6365 222c 2053 6f6c  erformance\", Sol",
            "-00010a20: 6172 2045 6e65 7267 792c 2076 6f6c 2038  ar Energy, vol 8",
            "-00010a30: 302c 2070 702e 2037 382d 3838 2c0a 2020  0, pp. 78-88,.  ",
            "-00010a40: 2020 2020 2032 3030 362e 0a0a 2020 2020       2006...    ",
            "-00010a50: 5365 6520 416c 736f 0a20 2020 202d 2d2d  See Also.    ---",
            "-00010a60: 2d2d 2d2d 2d0a 2020 2020 6361 6c63 7061  -----.    calcpa",
            "-00010a70: 7261 6d73 5f64 6573 6f74 6f0a 2020 2020  rams_desoto.    ",
            "-00010a80: 7369 6e67 6c65 6469 6f64 650a 2020 2020  singlediode.    ",
            "-00010a90: 7265 7472 6965 7665 5f73 616d 0a0a 2020  retrieve_sam..  ",
            "-00010aa0: 2020 2727 270a 0a20 2020 2023 2070 6173    '''..    # pas",
            "-00010ab0: 7320 6164 6a75 7374 6564 2074 656d 7065  s adjusted tempe",
            "-00010ac0: 7261 7475 7265 2063 6f65 6666 6963 6965  rature coefficie",
            "-00010ad0: 6e74 2074 6f20 6465 736f 746f 0a20 2020  nt to desoto.   ",
            "-00010ae0: 2072 6574 7572 6e20 6361 6c63 7061 7261   return calcpara",
            "-00010af0: 6d73 5f64 6573 6f74 6f28 6566 6665 6374  ms_desoto(effect",
            "-00010b00: 6976 655f 6972 7261 6469 616e 6365 2c20  ive_irradiance, ",
            "-00010b10: 7465 6d70 5f63 656c 6c2c 0a20 2020 2020  temp_cell,.     ",
            "-00010b20: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00010b30: 2020 2020 2020 2020 616c 7068 615f 7363          alpha_sc",
            "-00010b40: 2a28 312e 3020 2d20 4164 6a75 7374 2f31  *(1.0 - Adjust/1",
            "-00010b50: 3030 292c 0a20 2020 2020 2020 2020 2020  00),.           ",
            "-00010b60: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00010b70: 2020 615f 7265 662c 2049 5f4c 5f72 6566    a_ref, I_L_ref",
            "-00010b80: 2c20 495f 6f5f 7265 662c 0a20 2020 2020  , I_o_ref,.     ",
            "-00010b90: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00010ba0: 2020 2020 2020 2020 525f 7368 5f72 6566          R_sh_ref",
            "-00010bb0: 2c20 525f 732c 0a20 2020 2020 2020 2020  , R_s,.         ",
            "-00010bc0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00010bd0: 2020 2020 4567 5265 663d 4567 5265 662c      EgRef=EgRef,",
            "-00010be0: 2064 4567 6454 3d64 4567 6454 2c0a 2020   dEgdT=dEgdT,.  ",
            "-00010bf0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00010c00: 2020 2020 2020 2020 2020 2069 7272 6164             irrad",
            "-00010c10: 5f72 6566 3d69 7272 6164 5f72 6566 2c20  _ref=irrad_ref, ",
            "-00010c20: 7465 6d70 5f72 6566 3d74 656d 705f 7265  temp_ref=temp_re",
            "-00010c30: 6629 0a0a 0a64 6566 2063 616c 6370 6172  f)...def calcpar",
            "-00010c40: 616d 735f 7076 7379 7374 2865 6666 6563  ams_pvsyst(effec",
            "-00010c50: 7469 7665 5f69 7272 6164 6961 6e63 652c  tive_irradiance,",
            "-00010c60: 2074 656d 705f 6365 6c6c 2c0a 2020 2020   temp_cell,.    ",
            "-00010c70: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00010c80: 2020 616c 7068 615f 7363 2c20 6761 6d6d    alpha_sc, gamm",
            "-00010c90: 615f 7265 662c 206d 755f 6761 6d6d 612c  a_ref, mu_gamma,",
            "-00010ca0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00010cb0: 2020 2020 2020 2049 5f4c 5f72 6566 2c20         I_L_ref, ",
            "-00010cc0: 495f 6f5f 7265 662c 0a20 2020 2020 2020  I_o_ref,.       ",
            "-00010cd0: 2020 2020 2020 2020 2020 2020 2020 2052                 R",
            "-00010ce0: 5f73 685f 7265 662c 2052 5f73 685f 302c  _sh_ref, R_sh_0,",
            "-00010cf0: 2052 5f73 2c0a 2020 2020 2020 2020 2020   R_s,.          ",
            "-00010d00: 2020 2020 2020 2020 2020 2020 6365 6c6c              cell",
            "-00010d10: 735f 696e 5f73 6572 6965 732c 0a20 2020  s_in_series,.   ",
            "+0000b840: 2020 2073 656c 662e 6d6f 6475 6c65 5f70     self.module_p",
            "+0000b850: 6172 616d 6574 6572 7329 2c0a 2020 2020  arameters),.    ",
            "+0000b860: 2020 2020 2020 2020 2020 2020 2a2a 5f62              **_b",
            "+0000b870: 7569 6c64 5f6b 7761 7267 7328 5b27 755f  uild_kwargs(['u_",
            "+0000b880: 6327 2c20 2775 5f76 275d 2c0a 2020 2020  c', 'u_v'],.    ",
            "+0000b890: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000b8a0: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "+0000b8b0: 2e74 656d 7065 7261 7475 7265 5f6d 6f64  .temperature_mod",
            "+0000b8c0: 656c 5f70 6172 616d 6574 6572 7329 0a20  el_parameters). ",
            "+0000b8d0: 2020 2020 2020 2020 2020 207d 0a20 2020             }.   ",
            "+0000b8e0: 2020 2020 2065 6c69 6620 6d6f 6465 6c20       elif model ",
            "+0000b8f0: 3d3d 2027 6661 696d 616e 273a 0a20 2020  == 'faiman':.   ",
            "+0000b900: 2020 2020 2020 2020 2066 756e 6320 3d20           func = ",
            "+0000b910: 7465 6d70 6572 6174 7572 652e 6661 696d  temperature.faim",
            "+0000b920: 616e 0a20 2020 2020 2020 2020 2020 2072  an.            r",
            "+0000b930: 6571 7569 7265 6420 3d20 7475 706c 6528  equired = tuple(",
            "+0000b940: 290a 2020 2020 2020 2020 2020 2020 6f70  ).            op",
            "+0000b950: 7469 6f6e 616c 203d 205f 6275 696c 645f  tional = _build_",
            "+0000b960: 6b77 6172 6773 285b 2775 3027 2c20 2775  kwargs(['u0', 'u",
            "+0000b970: 3127 5d2c 0a20 2020 2020 2020 2020 2020  1'],.           ",
            "+0000b980: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000b990: 2020 2020 2020 2020 2020 7365 6c66 2e74            self.t",
            "+0000b9a0: 656d 7065 7261 7475 7265 5f6d 6f64 656c  emperature_model",
            "+0000b9b0: 5f70 6172 616d 6574 6572 7329 0a20 2020  _parameters).   ",
            "+0000b9c0: 2020 2020 2065 6c69 6620 6d6f 6465 6c20       elif model ",
            "+0000b9d0: 3d3d 2027 6675 656e 7465 7327 3a0a 2020  == 'fuentes':.  ",
            "+0000b9e0: 2020 2020 2020 2020 2020 6675 6e63 203d            func =",
            "+0000b9f0: 2074 656d 7065 7261 7475 7265 2e66 7565   temperature.fue",
            "+0000ba00: 6e74 6573 0a20 2020 2020 2020 2020 2020  ntes.           ",
            "+0000ba10: 2072 6571 7569 7265 6420 3d20 5f62 7569   required = _bui",
            "+0000ba20: 6c64 5f74 6365 6c6c 5f61 7267 7328 5b27  ld_tcell_args(['",
            "+0000ba30: 6e6f 6374 5f69 6e73 7461 6c6c 6564 275d  noct_installed']",
            "+0000ba40: 290a 2020 2020 2020 2020 2020 2020 6f70  ).            op",
            "+0000ba50: 7469 6f6e 616c 203d 205f 6275 696c 645f  tional = _build_",
            "+0000ba60: 6b77 6172 6773 285b 0a20 2020 2020 2020  kwargs([.       ",
            "+0000ba70: 2020 2020 2020 2020 2027 7769 6e64 5f68           'wind_h",
            "+0000ba80: 6569 6768 7427 2c20 2765 6d69 7373 6976  eight', 'emissiv",
            "+0000ba90: 6974 7927 2c20 2761 6273 6f72 7074 696f  ity', 'absorptio",
            "+0000baa0: 6e27 2c0a 2020 2020 2020 2020 2020 2020  n',.            ",
            "+0000bab0: 2020 2020 2773 7572 6661 6365 5f74 696c      'surface_til",
            "+0000bac0: 7427 2c20 276d 6f64 756c 655f 7769 6474  t', 'module_widt",
            "+0000bad0: 6827 2c20 276d 6f64 756c 655f 6c65 6e67  h', 'module_leng",
            "+0000bae0: 7468 275d 2c0a 2020 2020 2020 2020 2020  th'],.          ",
            "+0000baf0: 2020 2020 2020 7365 6c66 2e74 656d 7065        self.tempe",
            "+0000bb00: 7261 7475 7265 5f6d 6f64 656c 5f70 6172  rature_model_par",
            "+0000bb10: 616d 6574 6572 7329 0a20 2020 2020 2020  ameters).       ",
            "+0000bb20: 2020 2020 2069 6620 7365 6c66 2e6d 6f75       if self.mou",
            "+0000bb30: 6e74 2e6d 6f64 756c 655f 6865 6967 6874  nt.module_height",
            "+0000bb40: 2069 7320 6e6f 7420 4e6f 6e65 3a0a 2020   is not None:.  ",
            "+0000bb50: 2020 2020 2020 2020 2020 2020 2020 6f70                op",
            "+0000bb60: 7469 6f6e 616c 5b27 6d6f 6475 6c65 5f68  tional['module_h",
            "+0000bb70: 6569 6768 7427 5d20 3d20 7365 6c66 2e6d  eight'] = self.m",
            "+0000bb80: 6f75 6e74 2e6d 6f64 756c 655f 6865 6967  ount.module_heig",
            "+0000bb90: 6874 0a20 2020 2020 2020 2065 6c69 6620  ht.        elif ",
            "+0000bba0: 6d6f 6465 6c20 3d3d 2027 6e6f 6374 5f73  model == 'noct_s",
            "+0000bbb0: 616d 273a 0a20 2020 2020 2020 2020 2020  am':.           ",
            "+0000bbc0: 2066 756e 6320 3d20 6675 6e63 746f 6f6c   func = functool",
            "+0000bbd0: 732e 7061 7274 6961 6c28 7465 6d70 6572  s.partial(temper",
            "+0000bbe0: 6174 7572 652e 6e6f 6374 5f73 616d 2c0a  ature.noct_sam,.",
            "+0000bbf0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000bc00: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000bc10: 2020 2020 2065 6666 6563 7469 7665 5f69       effective_i",
            "+0000bc20: 7272 6164 6961 6e63 653d 6566 6665 6374  rradiance=effect",
            "+0000bc30: 6976 655f 6972 7261 6469 616e 6365 290a  ive_irradiance).",
            "+0000bc40: 2020 2020 2020 2020 2020 2020 7265 7175              requ",
            "+0000bc50: 6972 6564 203d 205f 6275 696c 645f 7463  ired = _build_tc",
            "+0000bc60: 656c 6c5f 6172 6773 285b 276e 6f63 7427  ell_args(['noct'",
            "+0000bc70: 2c20 276d 6f64 756c 655f 6566 6669 6369  , 'module_effici",
            "+0000bc80: 656e 6379 275d 290a 2020 2020 2020 2020  ency']).        ",
            "+0000bc90: 2020 2020 6f70 7469 6f6e 616c 203d 205f      optional = _",
            "+0000bca0: 6275 696c 645f 6b77 6172 6773 285b 2774  build_kwargs(['t",
            "+0000bcb0: 7261 6e73 6d69 7474 616e 6365 5f61 6273  ransmittance_abs",
            "+0000bcc0: 6f72 7074 616e 6365 272c 0a20 2020 2020  orptance',.     ",
            "+0000bcd0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000bce0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000bcf0: 2027 6172 7261 795f 6865 6967 6874 272c   'array_height',",
            "+0000bd00: 2027 6d6f 756e 745f 7374 616e 646f 6666   'mount_standoff",
            "+0000bd10: 275d 2c0a 2020 2020 2020 2020 2020 2020  '],.            ",
            "+0000bd20: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000bd30: 2020 2020 2020 2020 2073 656c 662e 7465           self.te",
            "+0000bd40: 6d70 6572 6174 7572 655f 6d6f 6465 6c5f  mperature_model_",
            "+0000bd50: 7061 7261 6d65 7465 7273 290a 2020 2020  parameters).    ",
            "+0000bd60: 2020 2020 656c 7365 3a0a 2020 2020 2020      else:.      ",
            "+0000bd70: 2020 2020 2020 7261 6973 6520 5661 6c75        raise Valu",
            "+0000bd80: 6545 7272 6f72 2866 277b 6d6f 6465 6c7d  eError(f'{model}",
            "+0000bd90: 2069 7320 6e6f 7420 6120 7661 6c69 6420   is not a valid ",
            "+0000bda0: 6365 6c6c 2074 656d 7065 7261 7475 7265  cell temperature",
            "+0000bdb0: 206d 6f64 656c 2729 0a0a 2020 2020 2020   model')..      ",
            "+0000bdc0: 2020 7465 6d70 6572 6174 7572 655f 6365    temperature_ce",
            "+0000bdd0: 6c6c 203d 2066 756e 6328 706f 615f 676c  ll = func(poa_gl",
            "+0000bde0: 6f62 616c 2c20 7465 6d70 5f61 6972 2c20  obal, temp_air, ",
            "+0000bdf0: 7769 6e64 5f73 7065 6564 2c0a 2020 2020  wind_speed,.    ",
            "+0000be00: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000be10: 2020 2020 2020 2020 2020 2020 2a72 6571              *req",
            "+0000be20: 7569 7265 642c 202a 2a6f 7074 696f 6e61  uired, **optiona",
            "+0000be30: 6c29 0a20 2020 2020 2020 2072 6574 7572  l).        retur",
            "+0000be40: 6e20 7465 6d70 6572 6174 7572 655f 6365  n temperature_ce",
            "+0000be50: 6c6c 0a0a 2020 2020 6465 6620 6463 5f6f  ll..    def dc_o",
            "+0000be60: 686d 735f 6672 6f6d 5f70 6572 6365 6e74  hms_from_percent",
            "+0000be70: 2873 656c 6629 3a0a 2020 2020 2020 2020  (self):.        ",
            "+0000be80: 2222 220a 2020 2020 2020 2020 4361 6c63  \"\"\".        Calc",
            "+0000be90: 756c 6174 6573 2074 6865 2065 7175 6976  ulates the equiv",
            "+0000bea0: 616c 656e 7420 7265 7369 7374 616e 6365  alent resistance",
            "+0000beb0: 206f 6620 7468 6520 7769 7265 7320 7573   of the wires us",
            "+0000bec0: 696e 670a 2020 2020 2020 2020 3a70 793a  ing.        :py:",
            "+0000bed0: 6675 6e63 3a60 7076 6c69 622e 7076 7379  func:`pvlib.pvsy",
            "+0000bee0: 7374 656d 2e64 635f 6f68 6d73 5f66 726f  stem.dc_ohms_fro",
            "+0000bef0: 6d5f 7065 7263 656e 7460 0a0a 2020 2020  m_percent`..    ",
            "+0000bf00: 2020 2020 4d61 6b65 7320 7573 6520 6f66      Makes use of",
            "+0000bf10: 2061 7272 6179 206d 6f64 756c 6520 7061   array module pa",
            "+0000bf20: 7261 6d65 7465 7273 2061 6363 6f72 6469  rameters accordi",
            "+0000bf30: 6e67 2074 6f20 7468 650a 2020 2020 2020  ng to the.      ",
            "+0000bf40: 2020 666f 6c6c 6f77 696e 6720 4443 206d    following DC m",
            "+0000bf50: 6f64 656c 733a 0a0a 2020 2020 2020 2020  odels:..        ",
            "+0000bf60: 4345 433a 0a0a 2020 2020 2020 2020 2020  CEC:..          ",
            "+0000bf70: 2020 2a20 6073 656c 662e 6d6f 6475 6c65    * `self.module",
            "+0000bf80: 5f70 6172 616d 6574 6572 735b 2256 5f6d  _parameters[\"V_m",
            "+0000bf90: 705f 7265 6622 5d60 0a20 2020 2020 2020  p_ref\"]`.       ",
            "+0000bfa0: 2020 2020 202a 2060 7365 6c66 2e6d 6f64       * `self.mod",
            "+0000bfb0: 756c 655f 7061 7261 6d65 7465 7273 5b22  ule_parameters[\"",
            "+0000bfc0: 495f 6d70 5f72 6566 225d 600a 0a20 2020  I_mp_ref\"]`..   ",
            "+0000bfd0: 2020 2020 2053 4150 4d3a 0a0a 2020 2020       SAPM:..    ",
            "+0000bfe0: 2020 2020 2020 2020 2a20 6073 656c 662e          * `self.",
            "+0000bff0: 6d6f 6475 6c65 5f70 6172 616d 6574 6572  module_parameter",
            "+0000c000: 735b 2256 6d70 6f22 5d60 0a20 2020 2020  s[\"Vmpo\"]`.     ",
            "+0000c010: 2020 2020 2020 202a 2060 7365 6c66 2e6d         * `self.m",
            "+0000c020: 6f64 756c 655f 7061 7261 6d65 7465 7273  odule_parameters",
            "+0000c030: 5b22 496d 706f 225d 600a 0a20 2020 2020  [\"Impo\"]`..     ",
            "+0000c040: 2020 2050 5673 7973 742d 6c69 6b65 206f     PVsyst-like o",
            "+0000c050: 7220 6f74 6865 723a 0a0a 2020 2020 2020  r other:..      ",
            "+0000c060: 2020 2020 2020 2a20 6073 656c 662e 6d6f        * `self.mo",
            "+0000c070: 6475 6c65 5f70 6172 616d 6574 6572 735b  dule_parameters[",
            "+0000c080: 2256 6d70 7022 5d60 0a20 2020 2020 2020  \"Vmpp\"]`.       ",
            "+0000c090: 2020 2020 202a 2060 7365 6c66 2e6d 6f64       * `self.mod",
            "+0000c0a0: 756c 655f 7061 7261 6d65 7465 7273 5b22  ule_parameters[\"",
            "+0000c0b0: 496d 7070 225d 600a 0a20 2020 2020 2020  Impp\"]`..       ",
            "+0000c0c0: 204f 7468 6572 2061 7272 6179 2070 6172   Other array par",
            "+0000c0d0: 616d 6574 6572 7320 7468 6174 2061 7265  ameters that are",
            "+0000c0e0: 2075 7365 6420 6172 653a 0a20 2020 2020   used are:.     ",
            "+0000c0f0: 2020 2060 7365 6c66 2e6c 6f73 7365 735f     `self.losses_",
            "+0000c100: 7061 7261 6d65 7465 7273 5b22 6463 5f6f  parameters[\"dc_o",
            "+0000c110: 686d 6963 5f70 6572 6365 6e74 225d 602c  hmic_percent\"]`,",
            "+0000c120: 0a20 2020 2020 2020 2060 7365 6c66 2e6d  .        `self.m",
            "+0000c130: 6f64 756c 6573 5f70 6572 5f73 7472 696e  odules_per_strin",
            "+0000c140: 6760 2c20 616e 640a 2020 2020 2020 2020  g`, and.        ",
            "+0000c150: 6073 656c 662e 7374 7269 6e67 7360 2e0a  `self.strings`..",
            "+0000c160: 0a20 2020 2020 2020 2053 6565 203a 7079  .        See :py",
            "+0000c170: 3a66 756e 633a 6070 766c 6962 2e70 7673  :func:`pvlib.pvs",
            "+0000c180: 7973 7465 6d2e 6463 5f6f 686d 735f 6672  ystem.dc_ohms_fr",
            "+0000c190: 6f6d 5f70 6572 6365 6e74 6020 666f 7220  om_percent` for ",
            "+0000c1a0: 6d6f 7265 2064 6574 6169 6c73 2e0a 2020  more details..  ",
            "+0000c1b0: 2020 2020 2020 2222 220a 0a20 2020 2020        \"\"\"..     ",
            "+0000c1c0: 2020 2023 2067 6574 2072 656c 6576 656e     # get releven",
            "+0000c1d0: 7420 566d 7020 616e 6420 496d 7020 7061  t Vmp and Imp pa",
            "+0000c1e0: 7261 6d65 7465 7273 2066 726f 6d20 4345  rameters from CE",
            "+0000c1f0: 4320 7061 7261 6d65 7465 7273 0a20 2020  C parameters.   ",
            "+0000c200: 2020 2020 2069 6620 616c 6c28 656c 656d       if all(elem",
            "+0000c210: 2069 6e20 7365 6c66 2e6d 6f64 756c 655f   in self.module_",
            "+0000c220: 7061 7261 6d65 7465 7273 0a20 2020 2020  parameters.     ",
            "+0000c230: 2020 2020 2020 2020 2020 666f 7220 656c            for el",
            "+0000c240: 656d 2069 6e20 5b27 565f 6d70 5f72 6566  em in ['V_mp_ref",
            "+0000c250: 272c 2027 495f 6d70 5f72 6566 275d 293a  ', 'I_mp_ref']):",
            "+0000c260: 0a20 2020 2020 2020 2020 2020 2076 6d70  .            vmp",
            "+0000c270: 5f72 6566 203d 2073 656c 662e 6d6f 6475  _ref = self.modu",
            "+0000c280: 6c65 5f70 6172 616d 6574 6572 735b 2756  le_parameters['V",
            "+0000c290: 5f6d 705f 7265 6627 5d0a 2020 2020 2020  _mp_ref'].      ",
            "+0000c2a0: 2020 2020 2020 696d 705f 7265 6620 3d20        imp_ref = ",
            "+0000c2b0: 7365 6c66 2e6d 6f64 756c 655f 7061 7261  self.module_para",
            "+0000c2c0: 6d65 7465 7273 5b27 495f 6d70 5f72 6566  meters['I_mp_ref",
            "+0000c2d0: 275d 0a0a 2020 2020 2020 2020 2320 6765  ']..        # ge",
            "+0000c2e0: 7420 7265 6c65 7661 6e74 2056 6d70 2061  t relevant Vmp a",
            "+0000c2f0: 6e64 2049 6d70 2070 6172 616d 6574 6572  nd Imp parameter",
            "+0000c300: 7320 6672 6f6d 2053 4150 4d20 7061 7261  s from SAPM para",
            "+0000c310: 6d65 7465 7273 0a20 2020 2020 2020 2065  meters.        e",
            "+0000c320: 6c69 6620 616c 6c28 656c 656d 2069 6e20  lif all(elem in ",
            "+0000c330: 7365 6c66 2e6d 6f64 756c 655f 7061 7261  self.module_para",
            "+0000c340: 6d65 7465 7273 2066 6f72 2065 6c65 6d20  meters for elem ",
            "+0000c350: 696e 205b 2756 6d70 6f27 2c20 2749 6d70  in ['Vmpo', 'Imp",
            "+0000c360: 6f27 5d29 3a0a 2020 2020 2020 2020 2020  o']):.          ",
            "+0000c370: 2020 766d 705f 7265 6620 3d20 7365 6c66    vmp_ref = self",
            "+0000c380: 2e6d 6f64 756c 655f 7061 7261 6d65 7465  .module_paramete",
            "+0000c390: 7273 5b27 566d 706f 275d 0a20 2020 2020  rs['Vmpo'].     ",
            "+0000c3a0: 2020 2020 2020 2069 6d70 5f72 6566 203d         imp_ref =",
            "+0000c3b0: 2073 656c 662e 6d6f 6475 6c65 5f70 6172   self.module_par",
            "+0000c3c0: 616d 6574 6572 735b 2749 6d70 6f27 5d0a  ameters['Impo'].",
            "+0000c3d0: 0a20 2020 2020 2020 2023 2067 6574 2072  .        # get r",
            "+0000c3e0: 656c 6576 616e 7420 566d 7020 616e 6420  elevant Vmp and ",
            "+0000c3f0: 496d 7020 7061 7261 6d65 7465 7273 2069  Imp parameters i",
            "+0000c400: 6620 7468 6579 2061 7265 2050 5673 7973  f they are PVsys",
            "+0000c410: 742d 6c69 6b65 0a20 2020 2020 2020 2065  t-like.        e",
            "+0000c420: 6c69 6620 616c 6c28 656c 656d 2069 6e20  lif all(elem in ",
            "+0000c430: 7365 6c66 2e6d 6f64 756c 655f 7061 7261  self.module_para",
            "+0000c440: 6d65 7465 7273 2066 6f72 2065 6c65 6d20  meters for elem ",
            "+0000c450: 696e 205b 2756 6d70 7027 2c20 2749 6d70  in ['Vmpp', 'Imp",
            "+0000c460: 7027 5d29 3a0a 2020 2020 2020 2020 2020  p']):.          ",
            "+0000c470: 2020 766d 705f 7265 6620 3d20 7365 6c66    vmp_ref = self",
            "+0000c480: 2e6d 6f64 756c 655f 7061 7261 6d65 7465  .module_paramete",
            "+0000c490: 7273 5b27 566d 7070 275d 0a20 2020 2020  rs['Vmpp'].     ",
            "+0000c4a0: 2020 2020 2020 2069 6d70 5f72 6566 203d         imp_ref =",
            "+0000c4b0: 2073 656c 662e 6d6f 6475 6c65 5f70 6172   self.module_par",
            "+0000c4c0: 616d 6574 6572 735b 2749 6d70 7027 5d0a  ameters['Impp'].",
            "+0000c4d0: 0a20 2020 2020 2020 2023 2072 6169 7365  .        # raise",
            "+0000c4e0: 2065 7272 6f72 2069 6620 7265 6c65 7661   error if releva",
            "+0000c4f0: 6e74 2056 6d70 2061 6e64 2049 6d70 2070  nt Vmp and Imp p",
            "+0000c500: 6172 616d 6574 6572 7320 6172 6520 6e6f  arameters are no",
            "+0000c510: 7420 666f 756e 640a 2020 2020 2020 2020  t found.        ",
            "+0000c520: 656c 7365 3a0a 2020 2020 2020 2020 2020  else:.          ",
            "+0000c530: 2020 7261 6973 6520 5661 6c75 6545 7272    raise ValueErr",
            "+0000c540: 6f72 2827 5061 7261 6d65 7465 7273 2066  or('Parameters f",
            "+0000c550: 6f72 2056 6d70 2061 6e64 2049 6d70 2063  or Vmp and Imp c",
            "+0000c560: 6f75 6c64 206e 6f74 2062 6520 666f 756e  ould not be foun",
            "+0000c570: 6420 270a 2020 2020 2020 2020 2020 2020  d '.            ",
            "+0000c580: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000c590: 2027 696e 2074 6865 2061 7272 6179 206d   'in the array m",
            "+0000c5a0: 6f64 756c 6520 7061 7261 6d65 7465 7273  odule parameters",
            "+0000c5b0: 2e20 4d6f 6475 6c65 2027 0a20 2020 2020  . Module '.     ",
            "+0000c5c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000c5d0: 2020 2020 2020 2020 2770 6172 616d 6574          'paramet",
            "+0000c5e0: 6572 7320 6d75 7374 2069 6e63 6c75 6465  ers must include",
            "+0000c5f0: 206f 6e65 2073 6574 206f 6620 270a 2020   one set of '.  ",
            "+0000c600: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000c610: 2020 2020 2020 2020 2020 2027 7b22 565f             '{\"V_",
            "+0000c620: 6d70 5f72 6566 222c 2022 495f 6d70 5f52  mp_ref\", \"I_mp_R",
            "+0000c630: 6566 227d 2c20 270a 2020 2020 2020 2020  ef\"}, '.        ",
            "+0000c640: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000c650: 2020 2020 2027 7b22 566d 706f 222c 2022       '{\"Vmpo\", \"",
            "+0000c660: 496d 706f 227d 2c20 6f72 2027 0a20 2020  Impo\"}, or '.   ",
            "+0000c670: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000c680: 2020 2020 2020 2020 2020 277b 2256 6d70            '{\"Vmp",
            "+0000c690: 7022 2c20 2249 6d70 7022 7d2e 270a 2020  p\", \"Impp\"}.'.  ",
            "+0000c6a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000c6b0: 2020 2020 2020 2020 2020 2029 0a0a 2020             )..  ",
            "+0000c6c0: 2020 2020 2020 7265 7475 726e 2064 635f        return dc_",
            "+0000c6d0: 6f68 6d73 5f66 726f 6d5f 7065 7263 656e  ohms_from_percen",
            "+0000c6e0: 7428 0a20 2020 2020 2020 2020 2020 2076  t(.            v",
            "+0000c6f0: 6d70 5f72 6566 2c0a 2020 2020 2020 2020  mp_ref,.        ",
            "+0000c700: 2020 2020 696d 705f 7265 662c 0a20 2020      imp_ref,.   ",
            "+0000c710: 2020 2020 2020 2020 2073 656c 662e 6172           self.ar",
            "+0000c720: 7261 795f 6c6f 7373 6573 5f70 6172 616d  ray_losses_param",
            "+0000c730: 6574 6572 735b 2764 635f 6f68 6d69 635f  eters['dc_ohmic_",
            "+0000c740: 7065 7263 656e 7427 5d2c 0a20 2020 2020  percent'],.     ",
            "+0000c750: 2020 2020 2020 2073 656c 662e 6d6f 6475         self.modu",
            "+0000c760: 6c65 735f 7065 725f 7374 7269 6e67 2c0a  les_per_string,.",
            "+0000c770: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "+0000c780: 2e73 7472 696e 6773 290a 0a0a 4064 6174  .strings)...@dat",
            "+0000c790: 6163 6c61 7373 0a63 6c61 7373 2041 6273  aclass.class Abs",
            "+0000c7a0: 7472 6163 744d 6f75 6e74 2841 4243 293a  tractMount(ABC):",
            "+0000c7b0: 0a20 2020 2022 2222 0a20 2020 2041 2062  .    \"\"\".    A b",
            "+0000c7c0: 6173 6520 636c 6173 7320 666f 7220 4d6f  ase class for Mo",
            "+0000c7d0: 756e 7420 636c 6173 7365 7320 746f 2065  unt classes to e",
            "+0000c7e0: 7874 656e 642e 2049 7420 6973 206e 6f74  xtend. It is not",
            "+0000c7f0: 2069 6e74 656e 6465 6420 746f 2062 650a   intended to be.",
            "+0000c800: 2020 2020 696e 7374 616e 7469 6174 6564      instantiated",
            "+0000c810: 2064 6972 6563 746c 792e 0a20 2020 2022   directly..    \"",
            "+0000c820: 2222 0a0a 2020 2020 4061 6273 7472 6163  \"\"..    @abstrac",
            "+0000c830: 746d 6574 686f 640a 2020 2020 6465 6620  tmethod.    def ",
            "+0000c840: 6765 745f 6f72 6965 6e74 6174 696f 6e28  get_orientation(",
            "+0000c850: 7365 6c66 2c20 736f 6c61 725f 7a65 6e69  self, solar_zeni",
            "+0000c860: 7468 2c20 736f 6c61 725f 617a 696d 7574  th, solar_azimut",
            "+0000c870: 6829 3a0a 2020 2020 2020 2020 2222 220a  h):.        \"\"\".",
            "+0000c880: 2020 2020 2020 2020 4465 7465 726d 696e          Determin",
            "+0000c890: 6520 6d6f 6475 6c65 206f 7269 656e 7461  e module orienta",
            "+0000c8a0: 7469 6f6e 2e0a 0a20 2020 2020 2020 2050  tion...        P",
            "+0000c8b0: 6172 616d 6574 6572 730a 2020 2020 2020  arameters.      ",
            "+0000c8c0: 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020    ----------.   ",
            "+0000c8d0: 2020 2020 2073 6f6c 6172 5f7a 656e 6974       solar_zenit",
            "+0000c8e0: 6820 3a20 6e75 6d65 7269 630a 2020 2020  h : numeric.    ",
            "+0000c8f0: 2020 2020 2020 2020 536f 6c61 7220 6170          Solar ap",
            "+0000c900: 7061 7265 6e74 207a 656e 6974 6820 616e  parent zenith an",
            "+0000c910: 676c 6520 5b64 6567 7265 6573 5d0a 2020  gle [degrees].  ",
            "+0000c920: 2020 2020 2020 736f 6c61 725f 617a 696d        solar_azim",
            "+0000c930: 7574 6820 3a20 6e75 6d65 7269 630a 2020  uth : numeric.  ",
            "+0000c940: 2020 2020 2020 2020 2020 536f 6c61 7220            Solar ",
            "+0000c950: 617a 696d 7574 6820 616e 676c 6520 5b64  azimuth angle [d",
            "+0000c960: 6567 7265 6573 5d0a 0a20 2020 2020 2020  egrees]..       ",
            "+0000c970: 2052 6574 7572 6e73 0a20 2020 2020 2020   Returns.       ",
            "+0000c980: 202d 2d2d 2d2d 2d2d 0a20 2020 2020 2020   -------.       ",
            "+0000c990: 206f 7269 656e 7461 7469 6f6e 203a 2064   orientation : d",
            "+0000c9a0: 6963 742d 6c69 6b65 0a20 2020 2020 2020  ict-like.       ",
            "+0000c9b0: 2020 2020 2041 2064 6963 742d 6c69 6b65       A dict-like",
            "+0000c9c0: 206f 626a 6563 7420 7769 7468 206b 6579   object with key",
            "+0000c9d0: 7320 6027 7375 7266 6163 655f 7469 6c74  s `'surface_tilt",
            "+0000c9e0: 272c 2027 7375 7266 6163 655f 617a 696d  ', 'surface_azim",
            "+0000c9f0: 7574 6827 600a 2020 2020 2020 2020 2020  uth'`.          ",
            "+0000ca00: 2020 2874 7970 6963 616c 6c79 2061 2064    (typically a d",
            "+0000ca10: 6963 7420 6f72 2070 616e 6461 732e 4461  ict or pandas.Da",
            "+0000ca20: 7461 4672 616d 6529 0a20 2020 2020 2020  taFrame).       ",
            "+0000ca30: 2022 2222 0a0a 0a40 6461 7461 636c 6173   \"\"\"...@dataclas",
            "+0000ca40: 730a 636c 6173 7320 4669 7865 644d 6f75  s.class FixedMou",
            "+0000ca50: 6e74 2841 6273 7472 6163 744d 6f75 6e74  nt(AbstractMount",
            "+0000ca60: 293a 0a20 2020 2022 2222 0a20 2020 2052  ):.    \"\"\".    R",
            "+0000ca70: 6163 6b69 6e67 2061 7420 6669 7865 6420  acking at fixed ",
            "+0000ca80: 2873 7461 7469 6329 206f 7269 656e 7461  (static) orienta",
            "+0000ca90: 7469 6f6e 2e0a 0a20 2020 2050 6172 616d  tion...    Param",
            "+0000caa0: 6574 6572 730a 2020 2020 2d2d 2d2d 2d2d  eters.    ------",
            "+0000cab0: 2d2d 2d2d 0a20 2020 2073 7572 6661 6365  ----.    surface",
            "+0000cac0: 5f74 696c 7420 3a20 666c 6f61 742c 2064  _tilt : float, d",
            "+0000cad0: 6566 6175 6c74 2030 0a20 2020 2020 2020  efault 0.       ",
            "+0000cae0: 2053 7572 6661 6365 2074 696c 7420 616e   Surface tilt an",
            "+0000caf0: 676c 652e 2054 6865 2074 696c 7420 616e  gle. The tilt an",
            "+0000cb00: 676c 6520 6973 2064 6566 696e 6564 2061  gle is defined a",
            "+0000cb10: 7320 616e 676c 6520 6672 6f6d 2068 6f72  s angle from hor",
            "+0000cb20: 697a 6f6e 7461 6c0a 2020 2020 2020 2020  izontal.        ",
            "+0000cb30: 2865 2e67 2e20 7375 7266 6163 6520 6661  (e.g. surface fa",
            "+0000cb40: 6369 6e67 2075 7020 3d20 302c 2073 7572  cing up = 0, sur",
            "+0000cb50: 6661 6365 2066 6163 696e 6720 686f 7269  face facing hori",
            "+0000cb60: 7a6f 6e20 3d20 3930 2920 5b64 6567 7265  zon = 90) [degre",
            "+0000cb70: 6573 5d0a 0a20 2020 2073 7572 6661 6365  es]..    surface",
            "+0000cb80: 5f61 7a69 6d75 7468 203a 2066 6c6f 6174  _azimuth : float",
            "+0000cb90: 2c20 6465 6661 756c 7420 3138 300a 2020  , default 180.  ",
            "+0000cba0: 2020 2020 2020 417a 696d 7574 6820 616e        Azimuth an",
            "+0000cbb0: 676c 6520 6f66 2074 6865 206d 6f64 756c  gle of the modul",
            "+0000cbc0: 6520 7375 7266 6163 652e 204e 6f72 7468  e surface. North",
            "+0000cbd0: 3d30 2c20 4561 7374 3d39 302c 2053 6f75  =0, East=90, Sou",
            "+0000cbe0: 7468 3d31 3830 2c0a 2020 2020 2020 2020  th=180,.        ",
            "+0000cbf0: 5765 7374 3d32 3730 2e20 5b64 6567 7265  West=270. [degre",
            "+0000cc00: 6573 5d0a 0a20 2020 2072 6163 6b69 6e67  es]..    racking",
            "+0000cc10: 5f6d 6f64 656c 203a 2073 7472 2c20 6f70  _model : str, op",
            "+0000cc20: 7469 6f6e 616c 0a20 2020 2020 2020 2056  tional.        V",
            "+0000cc30: 616c 6964 2073 7472 696e 6773 2061 7265  alid strings are",
            "+0000cc40: 2060 6027 6f70 656e 5f72 6163 6b27 6060   ``'open_rack'``",
            "+0000cc50: 2c20 6060 2763 6c6f 7365 5f6d 6f75 6e74  , ``'close_mount",
            "+0000cc60: 2760 602c 0a20 2020 2020 2020 2060 6027  '``,.        ``'",
            "+0000cc70: 696e 7375 6c61 7465 645f 6261 636b 2760  insulated_back'`",
            "+0000cc80: 602c 2060 6027 6672 6565 7374 616e 6469  `, ``'freestandi",
            "+0000cc90: 6e67 2760 602c 2060 6027 696e 7375 6c61  ng'``, ``'insula",
            "+0000cca0: 7465 6427 6060 2c20 616e 640a 2020 2020  ted'``, and.    ",
            "+0000ccb0: 2020 2020 6060 2773 656d 695f 696e 7465      ``'semi_inte",
            "+0000ccc0: 6772 6174 6564 2760 602e 0a20 2020 2020  grated'``..     ",
            "+0000ccd0: 2020 2055 7365 6420 746f 2069 6465 6e74     Used to ident",
            "+0000cce0: 6966 7920 6120 7061 7261 6d65 7465 7220  ify a parameter ",
            "+0000ccf0: 7365 7420 666f 7220 7468 6520 5341 504d  set for the SAPM",
            "+0000cd00: 206f 7220 5056 7379 7374 2063 656c 6c0a   or PVsyst cell.",
            "+0000cd10: 2020 2020 2020 2020 7465 6d70 6572 6174          temperat",
            "+0000cd20: 7572 6520 6d6f 6465 6c2e 0a20 2020 2020  ure model..     ",
            "+0000cd30: 2020 2053 6565 203a 7079 3a66 756e 633a     See :py:func:",
            "+0000cd40: 607e 7076 6c69 622e 7465 6d70 6572 6174  `~pvlib.temperat",
            "+0000cd50: 7572 652e 7361 706d 5f6d 6f64 756c 6560  ure.sapm_module`",
            "+0000cd60: 2061 6e64 0a20 2020 2020 2020 203a 7079   and.        :py",
            "+0000cd70: 3a66 756e 633a 607e 7076 6c69 622e 7465  :func:`~pvlib.te",
            "+0000cd80: 6d70 6572 6174 7572 652e 7076 7379 7374  mperature.pvsyst",
            "+0000cd90: 5f63 656c 6c60 2066 6f72 2064 6566 696e  _cell` for defin",
            "+0000cda0: 6974 696f 6e73 2e0a 0a20 2020 206d 6f64  itions...    mod",
            "+0000cdb0: 756c 655f 6865 6967 6874 203a 2066 6c6f  ule_height : flo",
            "+0000cdc0: 6174 2c20 6f70 7469 6f6e 616c 0a20 2020  at, optional.   ",
            "+0000cdd0: 2020 2020 5468 6520 6865 6967 6874 2061      The height a",
            "+0000cde0: 626f 7665 2067 726f 756e 6420 6f66 2074  bove ground of t",
            "+0000cdf0: 6865 2063 656e 7465 7220 6f66 2074 6865  he center of the",
            "+0000ce00: 206d 6f64 756c 6520 5b6d 5d2e 2055 7365   module [m]. Use",
            "+0000ce10: 6420 666f 720a 2020 2020 2020 2074 6865  d for.       the",
            "+0000ce20: 2046 7565 6e74 6573 2063 656c 6c20 7465   Fuentes cell te",
            "+0000ce30: 6d70 6572 6174 7572 6520 6d6f 6465 6c2e  mperature model.",
            "+0000ce40: 0a20 2020 2022 2222 0a0a 2020 2020 7375  .    \"\"\"..    su",
            "+0000ce50: 7266 6163 655f 7469 6c74 3a20 666c 6f61  rface_tilt: floa",
            "+0000ce60: 7420 3d20 302e 300a 2020 2020 7375 7266  t = 0.0.    surf",
            "+0000ce70: 6163 655f 617a 696d 7574 683a 2066 6c6f  ace_azimuth: flo",
            "+0000ce80: 6174 203d 2031 3830 2e30 0a20 2020 2072  at = 180.0.    r",
            "+0000ce90: 6163 6b69 6e67 5f6d 6f64 656c 3a20 4f70  acking_model: Op",
            "+0000cea0: 7469 6f6e 616c 5b73 7472 5d20 3d20 4e6f  tional[str] = No",
            "+0000ceb0: 6e65 0a20 2020 206d 6f64 756c 655f 6865  ne.    module_he",
            "+0000cec0: 6967 6874 3a20 4f70 7469 6f6e 616c 5b66  ight: Optional[f",
            "+0000ced0: 6c6f 6174 5d20 3d20 4e6f 6e65 0a0a 2020  loat] = None..  ",
            "+0000cee0: 2020 6465 6620 6765 745f 6f72 6965 6e74    def get_orient",
            "+0000cef0: 6174 696f 6e28 7365 6c66 2c20 736f 6c61  ation(self, sola",
            "+0000cf00: 725f 7a65 6e69 7468 2c20 736f 6c61 725f  r_zenith, solar_",
            "+0000cf10: 617a 696d 7574 6829 3a0a 2020 2020 2020  azimuth):.      ",
            "+0000cf20: 2020 2320 6e6f 7465 202d 2d20 646f 6373    # note -- docs",
            "+0000cf30: 7472 696e 6720 6973 2061 7574 6f6d 6174  tring is automat",
            "+0000cf40: 6963 616c 6c79 2069 6e68 6572 6974 6564  ically inherited",
            "+0000cf50: 2066 726f 6d20 4162 7374 7261 6374 4d6f   from AbstractMo",
            "+0000cf60: 756e 740a 2020 2020 2020 2020 7265 7475  unt.        retu",
            "+0000cf70: 726e 207b 0a20 2020 2020 2020 2020 2020  rn {.           ",
            "+0000cf80: 2027 7375 7266 6163 655f 7469 6c74 273a   'surface_tilt':",
            "+0000cf90: 2073 656c 662e 7375 7266 6163 655f 7469   self.surface_ti",
            "+0000cfa0: 6c74 2c0a 2020 2020 2020 2020 2020 2020  lt,.            ",
            "+0000cfb0: 2773 7572 6661 6365 5f61 7a69 6d75 7468  'surface_azimuth",
            "+0000cfc0: 273a 2073 656c 662e 7375 7266 6163 655f  ': self.surface_",
            "+0000cfd0: 617a 696d 7574 682c 0a20 2020 2020 2020  azimuth,.       ",
            "+0000cfe0: 207d 0a0a 0a40 6461 7461 636c 6173 730a   }...@dataclass.",
            "+0000cff0: 636c 6173 7320 5369 6e67 6c65 4178 6973  class SingleAxis",
            "+0000d000: 5472 6163 6b65 724d 6f75 6e74 2841 6273  TrackerMount(Abs",
            "+0000d010: 7472 6163 744d 6f75 6e74 293a 0a20 2020  tractMount):.   ",
            "+0000d020: 2022 2222 0a20 2020 2053 696e 676c 652d   \"\"\".    Single-",
            "+0000d030: 6178 6973 2074 7261 636b 6572 2072 6163  axis tracker rac",
            "+0000d040: 6b69 6e67 2066 6f72 2064 796e 616d 6963  king for dynamic",
            "+0000d050: 2073 6f6c 6172 2074 7261 636b 696e 672e   solar tracking.",
            "+0000d060: 0a0a 2020 2020 5061 7261 6d65 7465 7273  ..    Parameters",
            "+0000d070: 0a20 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a  .    ----------.",
            "+0000d080: 2020 2020 6178 6973 5f74 696c 7420 3a20      axis_tilt : ",
            "+0000d090: 666c 6f61 742c 2064 6566 6175 6c74 2030  float, default 0",
            "+0000d0a0: 0a20 2020 2020 2020 2054 6865 2074 696c  .        The til",
            "+0000d0b0: 7420 6f66 2074 6865 2061 7869 7320 6f66  t of the axis of",
            "+0000d0c0: 2072 6f74 6174 696f 6e20 2869 2e65 2c20   rotation (i.e, ",
            "+0000d0d0: 7468 6520 792d 6178 6973 2064 6566 696e  the y-axis defin",
            "+0000d0e0: 6564 2062 790a 2020 2020 2020 2020 6178  ed by.        ax",
            "+0000d0f0: 6973 5f61 7a69 6d75 7468 2920 7769 7468  is_azimuth) with",
            "+0000d100: 2072 6573 7065 6374 2074 6f20 686f 7269   respect to hori",
            "+0000d110: 7a6f 6e74 616c 2e20 5b64 6567 7265 6573  zontal. [degrees",
            "+0000d120: 5d0a 0a20 2020 2061 7869 735f 617a 696d  ]..    axis_azim",
            "+0000d130: 7574 6820 3a20 666c 6f61 742c 2064 6566  uth : float, def",
            "+0000d140: 6175 6c74 2031 3830 0a20 2020 2020 2020  ault 180.       ",
            "+0000d150: 2041 2076 616c 7565 2064 656e 6f74 696e   A value denotin",
            "+0000d160: 6720 7468 6520 636f 6d70 6173 7320 6469  g the compass di",
            "+0000d170: 7265 6374 696f 6e20 616c 6f6e 6720 7768  rection along wh",
            "+0000d180: 6963 6820 7468 6520 6178 6973 206f 660a  ich the axis of.",
            "+0000d190: 2020 2020 2020 2020 726f 7461 7469 6f6e          rotation",
            "+0000d1a0: 206c 6965 732c 206d 6561 7375 7265 6420   lies, measured ",
            "+0000d1b0: 6561 7374 206f 6620 6e6f 7274 682e 205b  east of north. [",
            "+0000d1c0: 6465 6772 6565 735d 0a0a 2020 2020 6d61  degrees]..    ma",
            "+0000d1d0: 785f 616e 676c 6520 3a20 666c 6f61 7420  x_angle : float ",
            "+0000d1e0: 6f72 2074 7570 6c65 2c20 6465 6661 756c  or tuple, defaul",
            "+0000d1f0: 7420 3930 0a20 2020 2020 2020 2041 2076  t 90.        A v",
            "+0000d200: 616c 7565 2064 656e 6f74 696e 6720 7468  alue denoting th",
            "+0000d210: 6520 6d61 7869 6d75 6d20 726f 7461 7469  e maximum rotati",
            "+0000d220: 6f6e 2061 6e67 6c65 2c20 696e 2064 6563  on angle, in dec",
            "+0000d230: 696d 616c 2064 6567 7265 6573 2c0a 2020  imal degrees,.  ",
            "+0000d240: 2020 2020 2020 6f66 2074 6865 206f 6e65        of the one",
            "+0000d250: 2d61 7869 7320 7472 6163 6b65 7220 6672  -axis tracker fr",
            "+0000d260: 6f6d 2069 7473 2068 6f72 697a 6f6e 7461  om its horizonta",
            "+0000d270: 6c20 706f 7369 7469 6f6e 2028 686f 7269  l position (hori",
            "+0000d280: 7a6f 6e74 616c 0a20 2020 2020 2020 2069  zontal.        i",
            "+0000d290: 6620 6178 6973 5f74 696c 7420 3d20 3029  f axis_tilt = 0)",
            "+0000d2a0: 2e20 4966 2061 2066 6c6f 6174 2069 7320  . If a float is ",
            "+0000d2b0: 7072 6f76 6964 6564 2c20 6974 2072 6570  provided, it rep",
            "+0000d2c0: 7265 7365 6e74 7320 7468 6520 6d61 7869  resents the maxi",
            "+0000d2d0: 6d75 6d0a 2020 2020 2020 2020 726f 7461  mum.        rota",
            "+0000d2e0: 7469 6f6e 2061 6e67 6c65 2c20 616e 6420  tion angle, and ",
            "+0000d2f0: 7468 6520 6d69 6e69 6d75 6d20 726f 7461  the minimum rota",
            "+0000d300: 7469 6f6e 2061 6e67 6c65 2069 7320 6173  tion angle is as",
            "+0000d310: 7375 6d65 6420 746f 2062 6520 7468 650a  sumed to be the.",
            "+0000d320: 2020 2020 2020 2020 6f70 706f 7369 7465          opposite",
            "+0000d330: 206f 6620 7468 6520 6d61 7869 6d75 6d20   of the maximum ",
            "+0000d340: 616e 676c 652e 2049 6620 6120 7475 706c  angle. If a tupl",
            "+0000d350: 6520 6f66 2028 6d69 6e5f 616e 676c 652c  e of (min_angle,",
            "+0000d360: 206d 6178 5f61 6e67 6c65 2920 6973 0a20   max_angle) is. ",
            "+0000d370: 2020 2020 2020 2070 726f 7669 6465 642c         provided,",
            "+0000d380: 2069 7420 7265 7072 6573 656e 7473 2062   it represents b",
            "+0000d390: 6f74 6820 7468 6520 6d69 6e69 6d75 6d20  oth the minimum ",
            "+0000d3a0: 616e 6420 6d61 7869 6d75 6d20 726f 7461  and maximum rota",
            "+0000d3b0: 7469 6f6e 2061 6e67 6c65 732e 0a0a 2020  tion angles...  ",
            "+0000d3c0: 2020 2020 2020 4120 726f 7461 7469 6f6e        A rotation",
            "+0000d3d0: 2074 6f20 276d 6178 5f61 6e67 6c65 2720   to 'max_angle' ",
            "+0000d3e0: 6973 2061 2063 6f75 6e74 6572 2d63 6c6f  is a counter-clo",
            "+0000d3f0: 636b 7769 7365 2072 6f74 6174 696f 6e20  ckwise rotation ",
            "+0000d400: 6162 6f75 7420 7468 650a 2020 2020 2020  about the.      ",
            "+0000d410: 2020 792d 6178 6973 206f 6620 7468 6520    y-axis of the ",
            "+0000d420: 7472 6163 6b65 7220 636f 6f72 6469 6e61  tracker coordina",
            "+0000d430: 7465 2073 7973 7465 6d2e 2046 6f72 2065  te system. For e",
            "+0000d440: 7861 6d70 6c65 2c20 666f 7220 6120 7472  xample, for a tr",
            "+0000d450: 6163 6b65 720a 2020 2020 2020 2020 7769  acker.        wi",
            "+0000d460: 7468 2027 6178 6973 5f61 7a69 6d75 7468  th 'axis_azimuth",
            "+0000d470: 2720 6f72 6965 6e74 6564 2074 6f20 7468  ' oriented to th",
            "+0000d480: 6520 736f 7574 682c 2061 2072 6f74 6174  e south, a rotat",
            "+0000d490: 696f 6e20 746f 2027 6d61 785f 616e 676c  ion to 'max_angl",
            "+0000d4a0: 6527 0a20 2020 2020 2020 2069 7320 746f  e'.        is to",
            "+0000d4b0: 7761 7264 7320 7468 6520 7765 7374 2c20  wards the west, ",
            "+0000d4c0: 616e 6420 6120 726f 7461 7469 6f6e 2074  and a rotation t",
            "+0000d4d0: 6f77 6172 6420 276d 696e 5f61 6e67 6c65  oward 'min_angle",
            "+0000d4e0: 2720 6973 2069 6e20 7468 650a 2020 2020  ' is in the.    ",
            "+0000d4f0: 2020 2020 6f70 706f 7369 7465 2064 6972      opposite dir",
            "+0000d500: 6563 7469 6f6e 2c20 746f 7761 7264 2074  ection, toward t",
            "+0000d510: 6865 2065 6173 742e 2048 656e 6365 2061  he east. Hence a",
            "+0000d520: 206d 6178 5f61 6e67 6c65 206f 6620 3138   max_angle of 18",
            "+0000d530: 3020 6465 6772 6565 730a 2020 2020 2020  0 degrees.      ",
            "+0000d540: 2020 2865 7175 6976 616c 656e 7420 746f    (equivalent to",
            "+0000d550: 206d 6178 5f61 6e67 6c65 203d 2028 2d31   max_angle = (-1",
            "+0000d560: 3830 2c20 3138 3029 2920 616c 6c6f 7773  80, 180)) allows",
            "+0000d570: 2074 6865 2074 7261 636b 6572 2074 6f20   the tracker to ",
            "+0000d580: 6163 6869 6576 650a 2020 2020 2020 2020  achieve.        ",
            "+0000d590: 6974 7320 6675 6c6c 2072 6f74 6174 696f  its full rotatio",
            "+0000d5a0: 6e20 6361 7061 6269 6c69 7479 2e0a 0a20  n capability... ",
            "+0000d5b0: 2020 2062 6163 6b74 7261 636b 203a 2062     backtrack : b",
            "+0000d5c0: 6f6f 6c2c 2064 6566 6175 6c74 2054 7275  ool, default Tru",
            "+0000d5d0: 650a 2020 2020 2020 2020 436f 6e74 726f  e.        Contro",
            "+0000d5e0: 6c73 2077 6865 7468 6572 2074 6865 2074  ls whether the t",
            "+0000d5f0: 7261 636b 6572 2068 6173 2074 6865 2063  racker has the c",
            "+0000d600: 6170 6162 696c 6974 7920 746f 2022 6261  apability to \"ba",
            "+0000d610: 636b 7472 6163 6b22 0a20 2020 2020 2020  cktrack\".       ",
            "+0000d620: 2074 6f20 6176 6f69 6420 726f 772d 746f   to avoid row-to",
            "+0000d630: 2d72 6f77 2073 6861 6469 6e67 2e20 4661  -row shading. Fa",
            "+0000d640: 6c73 6520 6465 6e6f 7465 7320 6e6f 2062  lse denotes no b",
            "+0000d650: 6163 6b74 7261 636b 0a20 2020 2020 2020  acktrack.       ",
            "+0000d660: 2063 6170 6162 696c 6974 792e 2054 7275   capability. Tru",
            "+0000d670: 6520 6465 6e6f 7465 7320 6261 636b 7472  e denotes backtr",
            "+0000d680: 6163 6b20 6361 7061 6269 6c69 7479 2e0a  ack capability..",
            "+0000d690: 0a20 2020 2067 6372 203a 2066 6c6f 6174  .    gcr : float",
            "+0000d6a0: 2c20 6465 6661 756c 7420 322e 302f 372e  , default 2.0/7.",
            "+0000d6b0: 300a 2020 2020 2020 2020 4120 7661 6c75  0.        A valu",
            "+0000d6c0: 6520 6465 6e6f 7469 6e67 2074 6865 2067  e denoting the g",
            "+0000d6d0: 726f 756e 6420 636f 7665 7261 6765 2072  round coverage r",
            "+0000d6e0: 6174 696f 206f 6620 6120 7472 6163 6b65  atio of a tracke",
            "+0000d6f0: 7220 7379 7374 656d 0a20 2020 2020 2020  r system.       ",
            "+0000d700: 2077 6869 6368 2075 7469 6c69 7a65 7320   which utilizes ",
            "+0000d710: 6261 636b 7472 6163 6b69 6e67 3b20 692e  backtracking; i.",
            "+0000d720: 652e 2074 6865 2072 6174 696f 2062 6574  e. the ratio bet",
            "+0000d730: 7765 656e 2074 6865 2050 5620 6172 7261  ween the PV arra",
            "+0000d740: 790a 2020 2020 2020 2020 7375 7266 6163  y.        surfac",
            "+0000d750: 6520 6172 6561 2074 6f20 746f 7461 6c20  e area to total ",
            "+0000d760: 6772 6f75 6e64 2061 7265 612e 2041 2074  ground area. A t",
            "+0000d770: 7261 636b 6572 2073 7973 7465 6d20 7769  racker system wi",
            "+0000d780: 7468 206d 6f64 756c 6573 0a20 2020 2020  th modules.     ",
            "+0000d790: 2020 2032 206d 6574 6572 7320 7769 6465     2 meters wide",
            "+0000d7a0: 2c20 6365 6e74 6572 6564 206f 6e20 7468  , centered on th",
            "+0000d7b0: 6520 7472 6163 6b69 6e67 2061 7869 732c  e tracking axis,",
            "+0000d7c0: 2077 6974 6820 3620 6d65 7465 7273 0a20   with 6 meters. ",
            "+0000d7d0: 2020 2020 2020 2062 6574 7765 656e 2074         between t",
            "+0000d7e0: 6865 2074 7261 636b 696e 6720 6178 6573  he tracking axes",
            "+0000d7f0: 2068 6173 2061 2067 6372 206f 6620 322f   has a gcr of 2/",
            "+0000d800: 363d 302e 3333 332e 2049 6620 6763 7220  6=0.333. If gcr ",
            "+0000d810: 6973 206e 6f74 0a20 2020 2020 2020 2070  is not.        p",
            "+0000d820: 726f 7669 6465 642c 2061 2067 6372 206f  rovided, a gcr o",
            "+0000d830: 6620 322f 3720 6973 2064 6566 6175 6c74  f 2/7 is default",
            "+0000d840: 2e20 6763 7220 6d75 7374 2062 6520 3c3d  . gcr must be <=",
            "+0000d850: 312e 205b 756e 6974 6c65 7373 5d0a 0a20  1. [unitless].. ",
            "+0000d860: 2020 2063 726f 7373 5f61 7869 735f 7469     cross_axis_ti",
            "+0000d870: 6c74 203a 2066 6c6f 6174 2c20 6465 6661  lt : float, defa",
            "+0000d880: 756c 7420 302e 300a 2020 2020 2020 2020  ult 0.0.        ",
            "+0000d890: 5468 6520 616e 676c 652c 2072 656c 6174  The angle, relat",
            "+0000d8a0: 6976 6520 746f 2068 6f72 697a 6f6e 7461  ive to horizonta",
            "+0000d8b0: 6c2c 206f 6620 7468 6520 6c69 6e65 2066  l, of the line f",
            "+0000d8c0: 6f72 6d65 6420 6279 2074 6865 0a20 2020  ormed by the.   ",
            "+0000d8d0: 2020 2020 2069 6e74 6572 7365 6374 696f       intersectio",
            "+0000d8e0: 6e20 6265 7477 6565 6e20 7468 6520 736c  n between the sl",
            "+0000d8f0: 6f70 6520 636f 6e74 6169 6e69 6e67 2074  ope containing t",
            "+0000d900: 6865 2074 7261 636b 6572 2061 7865 7320  he tracker axes ",
            "+0000d910: 616e 6420 6120 706c 616e 650a 2020 2020  and a plane.    ",
            "+0000d920: 2020 2020 7065 7270 656e 6469 6375 6c61      perpendicula",
            "+0000d930: 7220 746f 2074 6865 2074 7261 636b 6572  r to the tracker",
            "+0000d940: 2061 7865 732e 2043 726f 7373 2d61 7869   axes. Cross-axi",
            "+0000d950: 7320 7469 6c74 2073 686f 756c 6420 6265  s tilt should be",
            "+0000d960: 2073 7065 6369 6669 6564 0a20 2020 2020   specified.     ",
            "+0000d970: 2020 2075 7369 6e67 2061 2072 6967 6874     using a right",
            "+0000d980: 2d68 616e 6465 6420 636f 6e76 656e 7469  -handed conventi",
            "+0000d990: 6f6e 2e20 466f 7220 6578 616d 706c 652c  on. For example,",
            "+0000d9a0: 2074 7261 636b 6572 7320 7769 7468 2061   trackers with a",
            "+0000d9b0: 7869 730a 2020 2020 2020 2020 617a 696d  xis.        azim",
            "+0000d9c0: 7574 6820 6f66 2031 3830 2064 6567 7265  uth of 180 degre",
            "+0000d9d0: 6573 2028 6865 6164 696e 6720 736f 7574  es (heading sout",
            "+0000d9e0: 6829 2077 696c 6c20 6861 7665 2061 206e  h) will have a n",
            "+0000d9f0: 6567 6174 6976 6520 6372 6f73 732d 6178  egative cross-ax",
            "+0000da00: 6973 0a20 2020 2020 2020 2074 696c 7420  is.        tilt ",
            "+0000da10: 6966 2074 6865 2074 7261 636b 6572 2061  if the tracker a",
            "+0000da20: 7865 7320 706c 616e 6520 736c 6f70 6573  xes plane slopes",
            "+0000da30: 2064 6f77 6e20 746f 2074 6865 2065 6173   down to the eas",
            "+0000da40: 7420 616e 6420 706f 7369 7469 7665 0a20  t and positive. ",
            "+0000da50: 2020 2020 2020 2063 726f 7373 2d61 7869         cross-axi",
            "+0000da60: 7320 7469 6c74 2069 6620 7468 6520 7472  s tilt if the tr",
            "+0000da70: 6163 6b65 7220 6178 6573 2070 6c61 6e65  acker axes plane",
            "+0000da80: 2073 6c6f 7065 7320 7570 2074 6f20 7468   slopes up to th",
            "+0000da90: 6520 6561 7374 2e20 5573 650a 2020 2020  e east. Use.    ",
            "+0000daa0: 2020 2020 3a66 756e 633a 607e 7076 6c69      :func:`~pvli",
            "+0000dab0: 622e 7472 6163 6b69 6e67 2e63 616c 635f  b.tracking.calc_",
            "+0000dac0: 6372 6f73 735f 6178 6973 5f74 696c 7460  cross_axis_tilt`",
            "+0000dad0: 2074 6f20 6361 6c63 756c 6174 650a 2020   to calculate.  ",
            "+0000dae0: 2020 2020 2020 6063 726f 7373 5f61 7869        `cross_axi",
            "+0000daf0: 735f 7469 6c74 602e 205b 6465 6772 6565  s_tilt`. [degree",
            "+0000db00: 735d 0a0a 2020 2020 7261 636b 696e 675f  s]..    racking_",
            "+0000db10: 6d6f 6465 6c20 3a20 7374 722c 206f 7074  model : str, opt",
            "+0000db20: 696f 6e61 6c0a 2020 2020 2020 2020 5661  ional.        Va",
            "+0000db30: 6c69 6420 7374 7269 6e67 7320 6172 6520  lid strings are ",
            "+0000db40: 6060 276f 7065 6e5f 7261 636b 2760 602c  ``'open_rack'``,",
            "+0000db50: 2060 6027 636c 6f73 655f 6d6f 756e 7427   ``'close_mount'",
            "+0000db60: 6060 2c0a 2020 2020 2020 2020 6060 2769  ``,.        ``'i",
            "+0000db70: 6e73 756c 6174 6564 5f62 6163 6b27 6060  nsulated_back'``",
            "+0000db80: 2c20 6060 2766 7265 6573 7461 6e64 696e  , ``'freestandin",
            "+0000db90: 6727 6060 2c20 6060 2769 6e73 756c 6174  g'``, ``'insulat",
            "+0000dba0: 6564 2760 602c 2061 6e64 0a20 2020 2020  ed'``, and.     ",
            "+0000dbb0: 2020 2060 6027 7365 6d69 5f69 6e74 6567     ``'semi_integ",
            "+0000dbc0: 7261 7465 6427 6060 2e0a 2020 2020 2020  rated'``..      ",
            "+0000dbd0: 2020 5573 6564 2074 6f20 6964 656e 7469    Used to identi",
            "+0000dbe0: 6679 2061 2070 6172 616d 6574 6572 2073  fy a parameter s",
            "+0000dbf0: 6574 2066 6f72 2074 6865 2053 4150 4d20  et for the SAPM ",
            "+0000dc00: 6f72 2050 5673 7973 7420 6365 6c6c 0a20  or PVsyst cell. ",
            "+0000dc10: 2020 2020 2020 2074 656d 7065 7261 7475         temperatu",
            "+0000dc20: 7265 206d 6f64 656c 2e20 6060 276f 7065  re model. ``'ope",
            "+0000dc30: 6e5f 7261 636b 2760 6020 6f72 2060 6027  n_rack'`` or ``'",
            "+0000dc40: 6672 6565 7374 616e 6469 6e67 2760 6020  freestanding'`` ",
            "+0000dc50: 7368 6f75 6c64 0a20 2020 2020 2020 2062  should.        b",
            "+0000dc60: 6520 7573 6564 2066 6f72 2073 7973 7465  e used for syste",
            "+0000dc70: 6d73 2077 6974 6820 7369 6e67 6c65 2d61  ms with single-a",
            "+0000dc80: 7869 7320 7472 6163 6b65 7273 2e0a 2020  xis trackers..  ",
            "+0000dc90: 2020 2020 2020 5365 6520 3a70 793a 6675        See :py:fu",
            "+0000dca0: 6e63 3a60 7e70 766c 6962 2e74 656d 7065  nc:`~pvlib.tempe",
            "+0000dcb0: 7261 7475 7265 2e73 6170 6d5f 6d6f 6475  rature.sapm_modu",
            "+0000dcc0: 6c65 6020 616e 640a 2020 2020 2020 2020  le` and.        ",
            "+0000dcd0: 3a70 793a 6675 6e63 3a60 7e70 766c 6962  :py:func:`~pvlib",
            "+0000dce0: 2e74 656d 7065 7261 7475 7265 2e70 7673  .temperature.pvs",
            "+0000dcf0: 7973 745f 6365 6c6c 6020 666f 7220 6465  yst_cell` for de",
            "+0000dd00: 6669 6e69 7469 6f6e 732e 0a0a 2020 2020  finitions...    ",
            "+0000dd10: 6d6f 6475 6c65 5f68 6569 6768 7420 3a20  module_height : ",
            "+0000dd20: 666c 6f61 742c 206f 7074 696f 6e61 6c0a  float, optional.",
            "+0000dd30: 2020 2020 2020 2054 6865 2068 6569 6768         The heigh",
            "+0000dd40: 7420 6162 6f76 6520 6772 6f75 6e64 206f  t above ground o",
            "+0000dd50: 6620 7468 6520 6365 6e74 6572 206f 6620  f the center of ",
            "+0000dd60: 7468 6520 6d6f 6475 6c65 205b 6d5d 2e20  the module [m]. ",
            "+0000dd70: 5573 6564 2066 6f72 0a20 2020 2020 2020  Used for.       ",
            "+0000dd80: 7468 6520 4675 656e 7465 7320 6365 6c6c  the Fuentes cell",
            "+0000dd90: 2074 656d 7065 7261 7475 7265 206d 6f64   temperature mod",
            "+0000dda0: 656c 2e0a 2020 2020 2222 220a 2020 2020  el..    \"\"\".    ",
            "+0000ddb0: 6178 6973 5f74 696c 743a 2066 6c6f 6174  axis_tilt: float",
            "+0000ddc0: 203d 2030 2e30 0a20 2020 2061 7869 735f   = 0.0.    axis_",
            "+0000ddd0: 617a 696d 7574 683a 2066 6c6f 6174 203d  azimuth: float =",
            "+0000dde0: 2030 2e30 0a20 2020 206d 6178 5f61 6e67   0.0.    max_ang",
            "+0000ddf0: 6c65 3a20 556e 696f 6e5b 666c 6f61 742c  le: Union[float,",
            "+0000de00: 2074 7570 6c65 5d20 3d20 3930 2e30 0a20   tuple] = 90.0. ",
            "+0000de10: 2020 2062 6163 6b74 7261 636b 3a20 626f     backtrack: bo",
            "+0000de20: 6f6c 203d 2054 7275 650a 2020 2020 6763  ol = True.    gc",
            "+0000de30: 723a 2066 6c6f 6174 203d 2032 2e30 2f37  r: float = 2.0/7",
            "+0000de40: 2e30 0a20 2020 2063 726f 7373 5f61 7869  .0.    cross_axi",
            "+0000de50: 735f 7469 6c74 3a20 666c 6f61 7420 3d20  s_tilt: float = ",
            "+0000de60: 302e 300a 2020 2020 7261 636b 696e 675f  0.0.    racking_",
            "+0000de70: 6d6f 6465 6c3a 204f 7074 696f 6e61 6c5b  model: Optional[",
            "+0000de80: 7374 725d 203d 204e 6f6e 650a 2020 2020  str] = None.    ",
            "+0000de90: 6d6f 6475 6c65 5f68 6569 6768 743a 204f  module_height: O",
            "+0000dea0: 7074 696f 6e61 6c5b 666c 6f61 745d 203d  ptional[float] =",
            "+0000deb0: 204e 6f6e 650a 0a20 2020 2064 6566 2067   None..    def g",
            "+0000dec0: 6574 5f6f 7269 656e 7461 7469 6f6e 2873  et_orientation(s",
            "+0000ded0: 656c 662c 2073 6f6c 6172 5f7a 656e 6974  elf, solar_zenit",
            "+0000dee0: 682c 2073 6f6c 6172 5f61 7a69 6d75 7468  h, solar_azimuth",
            "+0000def0: 293a 0a20 2020 2020 2020 2023 206e 6f74  ):.        # not",
            "+0000df00: 6520 2d2d 2064 6f63 7374 7269 6e67 2069  e -- docstring i",
            "+0000df10: 7320 6175 746f 6d61 7469 6361 6c6c 7920  s automatically ",
            "+0000df20: 696e 6865 7269 7465 6420 6672 6f6d 2041  inherited from A",
            "+0000df30: 6273 7472 6163 744d 6f75 6e74 0a20 2020  bstractMount.   ",
            "+0000df40: 2020 2020 2066 726f 6d20 7076 6c69 6220       from pvlib ",
            "+0000df50: 696d 706f 7274 2074 7261 636b 696e 6720  import tracking ",
            "+0000df60: 2023 2061 766f 6964 2063 6972 6375 6c61   # avoid circula",
            "+0000df70: 7220 696d 706f 7274 2069 7373 7565 0a20  r import issue. ",
            "+0000df80: 2020 2020 2020 2074 7261 636b 696e 675f         tracking_",
            "+0000df90: 6461 7461 203d 2074 7261 636b 696e 672e  data = tracking.",
            "+0000dfa0: 7369 6e67 6c65 6178 6973 280a 2020 2020  singleaxis(.    ",
            "+0000dfb0: 2020 2020 2020 2020 736f 6c61 725f 7a65          solar_ze",
            "+0000dfc0: 6e69 7468 2c20 736f 6c61 725f 617a 696d  nith, solar_azim",
            "+0000dfd0: 7574 682c 0a20 2020 2020 2020 2020 2020  uth,.           ",
            "+0000dfe0: 2073 656c 662e 6178 6973 5f74 696c 742c   self.axis_tilt,",
            "+0000dff0: 2073 656c 662e 6178 6973 5f61 7a69 6d75   self.axis_azimu",
            "+0000e000: 7468 2c0a 2020 2020 2020 2020 2020 2020  th,.            ",
            "+0000e010: 7365 6c66 2e6d 6178 5f61 6e67 6c65 2c20  self.max_angle, ",
            "+0000e020: 7365 6c66 2e62 6163 6b74 7261 636b 2c0a  self.backtrack,.",
            "+0000e030: 2020 2020 2020 2020 2020 2020 7365 6c66              self",
            "+0000e040: 2e67 6372 2c20 7365 6c66 2e63 726f 7373  .gcr, self.cross",
            "+0000e050: 5f61 7869 735f 7469 6c74 0a20 2020 2020  _axis_tilt.     ",
            "+0000e060: 2020 2029 0a20 2020 2020 2020 2072 6574     ).        ret",
            "+0000e070: 7572 6e20 7472 6163 6b69 6e67 5f64 6174  urn tracking_dat",
            "+0000e080: 610a 0a0a 6465 6620 6361 6c63 7061 7261  a...def calcpara",
            "+0000e090: 6d73 5f64 6573 6f74 6f28 6566 6665 6374  ms_desoto(effect",
            "+0000e0a0: 6976 655f 6972 7261 6469 616e 6365 2c20  ive_irradiance, ",
            "+0000e0b0: 7465 6d70 5f63 656c 6c2c 0a20 2020 2020  temp_cell,.     ",
            "+0000e0c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000e0d0: 2061 6c70 6861 5f73 632c 2061 5f72 6566   alpha_sc, a_ref",
            "+0000e0e0: 2c20 495f 4c5f 7265 662c 2049 5f6f 5f72  , I_L_ref, I_o_r",
            "+0000e0f0: 6566 2c20 525f 7368 5f72 6566 2c20 525f  ef, R_sh_ref, R_",
            "+0000e100: 732c 0a20 2020 2020 2020 2020 2020 2020  s,.             ",
            "+0000e110: 2020 2020 2020 2020 2045 6752 6566 3d31           EgRef=1",
            "+0000e120: 2e31 3231 2c20 6445 6764 543d 2d30 2e30  .121, dEgdT=-0.0",
            "+0000e130: 3030 3236 3737 2c0a 2020 2020 2020 2020  002677,.        ",
            "+0000e140: 2020 2020 2020 2020 2020 2020 2020 6972                ir",
            "+0000e150: 7261 645f 7265 663d 3130 3030 2c20 7465  rad_ref=1000, te",
            "+0000e160: 6d70 5f72 6566 3d32 3529 3a0a 2020 2020  mp_ref=25):.    ",
            "+0000e170: 2727 270a 2020 2020 4361 6c63 756c 6174  '''.    Calculat",
            "+0000e180: 6573 2066 6976 6520 7061 7261 6d65 7465  es five paramete",
            "+0000e190: 7220 7661 6c75 6573 2066 6f72 2074 6865  r values for the",
            "+0000e1a0: 2073 696e 676c 6520 6469 6f64 6520 6571   single diode eq",
            "+0000e1b0: 7561 7469 6f6e 2061 740a 2020 2020 6566  uation at.    ef",
            "+0000e1c0: 6665 6374 6976 6520 6972 7261 6469 616e  fective irradian",
            "+0000e1d0: 6365 2061 6e64 2063 656c 6c20 7465 6d70  ce and cell temp",
            "+0000e1e0: 6572 6174 7572 6520 7573 696e 6720 7468  erature using th",
            "+0000e1f0: 6520 4465 2053 6f74 6f20 6574 2061 6c2e  e De Soto et al.",
            "+0000e200: 0a20 2020 206d 6f64 656c 2e20 5468 6520  .    model. The ",
            "+0000e210: 6669 7665 2076 616c 7565 7320 7265 7475  five values retu",
            "+0000e220: 726e 6564 2062 7920 6060 6361 6c63 7061  rned by ``calcpa",
            "+0000e230: 7261 6d73 5f64 6573 6f74 6f60 6020 6361  rams_desoto`` ca",
            "+0000e240: 6e20 6265 2075 7365 6420 6279 0a20 2020  n be used by.   ",
            "+0000e250: 2073 696e 676c 6564 696f 6465 2074 6f20   singlediode to ",
            "+0000e260: 6361 6c63 756c 6174 6520 616e 2049 5620  calculate an IV ",
            "+0000e270: 6375 7276 652e 0a0a 2020 2020 5468 6520  curve...    The ",
            "+0000e280: 6d6f 6465 6c20 6973 2064 6573 6372 6962  model is describ",
            "+0000e290: 6564 2069 6e20 5b31 5d5f 2e0a 0a20 2020  ed in [1]_...   ",
            "+0000e2a0: 2050 6172 616d 6574 6572 730a 2020 2020   Parameters.    ",
            "+0000e2b0: 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020 2065  ----------.    e",
            "+0000e2c0: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "+0000e2d0: 6e63 6520 3a20 6e75 6d65 7269 630a 2020  nce : numeric.  ",
            "+0000e2e0: 2020 2020 2020 5468 6520 6972 7261 6469        The irradi",
            "+0000e2f0: 616e 6365 2028 572f 6d32 2920 7468 6174  ance (W/m2) that",
            "+0000e300: 2069 7320 636f 6e76 6572 7465 6420 746f   is converted to",
            "+0000e310: 2070 686f 746f 6375 7272 656e 742e 0a0a   photocurrent...",
            "+0000e320: 2020 2020 7465 6d70 5f63 656c 6c20 3a20      temp_cell : ",
            "+0000e330: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "+0000e340: 5468 6520 6176 6572 6167 6520 6365 6c6c  The average cell",
            "+0000e350: 2074 656d 7065 7261 7475 7265 206f 6620   temperature of ",
            "+0000e360: 6365 6c6c 7320 7769 7468 696e 2061 206d  cells within a m",
            "+0000e370: 6f64 756c 6520 696e 2043 2e0a 0a20 2020  odule in C...   ",
            "+0000e380: 2061 6c70 6861 5f73 6320 3a20 666c 6f61   alpha_sc : floa",
            "+0000e390: 740a 2020 2020 2020 2020 5468 6520 7368  t.        The sh",
            "+0000e3a0: 6f72 742d 6369 7263 7569 7420 6375 7272  ort-circuit curr",
            "+0000e3b0: 656e 7420 7465 6d70 6572 6174 7572 6520  ent temperature ",
            "+0000e3c0: 636f 6566 6669 6369 656e 7420 6f66 2074  coefficient of t",
            "+0000e3d0: 6865 0a20 2020 2020 2020 206d 6f64 756c  he.        modul",
            "+0000e3e0: 6520 696e 2075 6e69 7473 206f 6620 412f  e in units of A/",
            "+0000e3f0: 432e 0a0a 2020 2020 615f 7265 6620 3a20  C...    a_ref : ",
            "+0000e400: 666c 6f61 740a 2020 2020 2020 2020 5468  float.        Th",
            "+0000e410: 6520 7072 6f64 7563 7420 6f66 2074 6865  e product of the",
            "+0000e420: 2075 7375 616c 2064 696f 6465 2069 6465   usual diode ide",
            "+0000e430: 616c 6974 7920 6661 6374 6f72 2028 6e2c  ality factor (n,",
            "+0000e440: 2075 6e69 746c 6573 7329 2c0a 2020 2020   unitless),.    ",
            "+0000e450: 2020 2020 6e75 6d62 6572 206f 6620 6365      number of ce",
            "+0000e460: 6c6c 7320 696e 2073 6572 6965 7320 284e  lls in series (N",
            "+0000e470: 7329 2c20 616e 6420 6365 6c6c 2074 6865  s), and cell the",
            "+0000e480: 726d 616c 2076 6f6c 7461 6765 2061 7420  rmal voltage at ",
            "+0000e490: 7265 6665 7265 6e63 650a 2020 2020 2020  reference.      ",
            "+0000e4a0: 2020 636f 6e64 6974 696f 6e73 2c20 696e    conditions, in",
            "+0000e4b0: 2075 6e69 7473 206f 6620 562e 0a0a 2020   units of V...  ",
            "+0000e4c0: 2020 495f 4c5f 7265 6620 3a20 666c 6f61    I_L_ref : floa",
            "+0000e4d0: 740a 2020 2020 2020 2020 5468 6520 6c69  t.        The li",
            "+0000e4e0: 6768 742d 6765 6e65 7261 7465 6420 6375  ght-generated cu",
            "+0000e4f0: 7272 656e 7420 286f 7220 7068 6f74 6f63  rrent (or photoc",
            "+0000e500: 7572 7265 6e74 2920 6174 2072 6566 6572  urrent) at refer",
            "+0000e510: 656e 6365 2063 6f6e 6469 7469 6f6e 732c  ence conditions,",
            "+0000e520: 0a20 2020 2020 2020 2069 6e20 616d 7065  .        in ampe",
            "+0000e530: 7265 732e 0a0a 2020 2020 495f 6f5f 7265  res...    I_o_re",
            "+0000e540: 6620 3a20 666c 6f61 740a 2020 2020 2020  f : float.      ",
            "+0000e550: 2020 5468 6520 6461 726b 206f 7220 6469    The dark or di",
            "+0000e560: 6f64 6520 7265 7665 7273 6520 7361 7475  ode reverse satu",
            "+0000e570: 7261 7469 6f6e 2063 7572 7265 6e74 2061  ration current a",
            "+0000e580: 7420 7265 6665 7265 6e63 6520 636f 6e64  t reference cond",
            "+0000e590: 6974 696f 6e73 2c0a 2020 2020 2020 2020  itions,.        ",
            "+0000e5a0: 696e 2061 6d70 6572 6573 2e0a 0a20 2020  in amperes...   ",
            "+0000e5b0: 2052 5f73 685f 7265 6620 3a20 666c 6f61   R_sh_ref : floa",
            "+0000e5c0: 740a 2020 2020 2020 2020 5468 6520 7368  t.        The sh",
            "+0000e5d0: 756e 7420 7265 7369 7374 616e 6365 2061  unt resistance a",
            "+0000e5e0: 7420 7265 6665 7265 6e63 6520 636f 6e64  t reference cond",
            "+0000e5f0: 6974 696f 6e73 2c20 696e 206f 686d 732e  itions, in ohms.",
            "+0000e600: 0a0a 2020 2020 525f 7320 3a20 666c 6f61  ..    R_s : floa",
            "+0000e610: 740a 2020 2020 2020 2020 5468 6520 7365  t.        The se",
            "+0000e620: 7269 6573 2072 6573 6973 7461 6e63 6520  ries resistance ",
            "+0000e630: 6174 2072 6566 6572 656e 6365 2063 6f6e  at reference con",
            "+0000e640: 6469 7469 6f6e 732c 2069 6e20 6f68 6d73  ditions, in ohms",
            "+0000e650: 2e0a 0a20 2020 2045 6752 6566 203a 2066  ...    EgRef : f",
            "+0000e660: 6c6f 6174 0a20 2020 2020 2020 2054 6865  loat.        The",
            "+0000e670: 2065 6e65 7267 7920 6261 6e64 6761 7020   energy bandgap ",
            "+0000e680: 6174 2072 6566 6572 656e 6365 2074 656d  at reference tem",
            "+0000e690: 7065 7261 7475 7265 2069 6e20 756e 6974  perature in unit",
            "+0000e6a0: 7320 6f66 2065 562e 0a20 2020 2020 2020  s of eV..       ",
            "+0000e6b0: 2031 2e31 3231 2065 5620 666f 7220 6372   1.121 eV for cr",
            "+0000e6c0: 7973 7461 6c6c 696e 6520 7369 6c69 636f  ystalline silico",
            "+0000e6d0: 6e2e 2045 6752 6566 206d 7573 7420 6265  n. EgRef must be",
            "+0000e6e0: 203e 302e 2020 466f 7220 7061 7261 6d65   >0.  For parame",
            "+0000e6f0: 7465 7273 0a20 2020 2020 2020 2066 726f  ters.        fro",
            "+0000e700: 6d20 7468 6520 5341 4d20 4345 4320 6d6f  m the SAM CEC mo",
            "+0000e710: 6475 6c65 2064 6174 6162 6173 652c 2045  dule database, E",
            "+0000e720: 6752 6566 3d31 2e31 3231 2069 7320 696d  gRef=1.121 is im",
            "+0000e730: 706c 6963 6974 2066 6f72 2061 6c6c 0a20  plicit for all. ",
            "+0000e740: 2020 2020 2020 2063 656c 6c20 7479 7065         cell type",
            "+0000e750: 7320 696e 2074 6865 2070 6172 616d 6574  s in the paramet",
            "+0000e760: 6572 2065 7374 696d 6174 696f 6e20 616c  er estimation al",
            "+0000e770: 676f 7269 7468 6d20 7573 6564 2062 7920  gorithm used by ",
            "+0000e780: 4e52 454c 2e0a 0a20 2020 2064 4567 6454  NREL...    dEgdT",
            "+0000e790: 203a 2066 6c6f 6174 0a20 2020 2020 2020   : float.       ",
            "+0000e7a0: 2054 6865 2074 656d 7065 7261 7475 7265   The temperature",
            "+0000e7b0: 2064 6570 656e 6465 6e63 6520 6f66 2074   dependence of t",
            "+0000e7c0: 6865 2065 6e65 7267 7920 6261 6e64 6761  he energy bandga",
            "+0000e7d0: 7020 6174 2072 6566 6572 656e 6365 0a20  p at reference. ",
            "+0000e7e0: 2020 2020 2020 2063 6f6e 6469 7469 6f6e         condition",
            "+0000e7f0: 7320 696e 2075 6e69 7473 206f 6620 312f  s in units of 1/",
            "+0000e800: 4b2e 204d 6179 2062 6520 6569 7468 6572  K. May be either",
            "+0000e810: 2061 2073 6361 6c61 7220 7661 6c75 650a   a scalar value.",
            "+0000e820: 2020 2020 2020 2020 2865 2e67 2e20 2d30          (e.g. -0",
            "+0000e830: 2e30 3030 3236 3737 2061 7320 696e 205b  .0002677 as in [",
            "+0000e840: 315d 5f29 206f 7220 6120 4461 7461 4672  1]_) or a DataFr",
            "+0000e850: 616d 6520 2874 6869 7320 6d61 7920 6265  ame (this may be",
            "+0000e860: 2075 7365 6675 6c20 6966 0a20 2020 2020   useful if.     ",
            "+0000e870: 2020 2064 4567 6454 2069 7320 6120 6d6f     dEgdT is a mo",
            "+0000e880: 6465 6c65 6420 6173 2061 2066 756e 6374  deled as a funct",
            "+0000e890: 696f 6e20 6f66 2074 656d 7065 7261 7475  ion of temperatu",
            "+0000e8a0: 7265 292e 2046 6f72 2070 6172 616d 6574  re). For paramet",
            "+0000e8b0: 6572 7320 6672 6f6d 0a20 2020 2020 2020  ers from.       ",
            "+0000e8c0: 2074 6865 2053 414d 2043 4543 206d 6f64   the SAM CEC mod",
            "+0000e8d0: 756c 6520 6461 7461 6261 7365 2c20 6445  ule database, dE",
            "+0000e8e0: 6764 543d 2d30 2e30 3030 3236 3737 2069  gdT=-0.0002677 i",
            "+0000e8f0: 7320 696d 706c 6963 6974 2066 6f72 2061  s implicit for a",
            "+0000e900: 6c6c 2063 656c 6c0a 2020 2020 2020 2020  ll cell.        ",
            "+0000e910: 7479 7065 7320 696e 2074 6865 2070 6172  types in the par",
            "+0000e920: 616d 6574 6572 2065 7374 696d 6174 696f  ameter estimatio",
            "+0000e930: 6e20 616c 676f 7269 7468 6d20 7573 6564  n algorithm used",
            "+0000e940: 2062 7920 4e52 454c 2e0a 0a20 2020 2069   by NREL...    i",
            "+0000e950: 7272 6164 5f72 6566 203a 2066 6c6f 6174  rrad_ref : float",
            "+0000e960: 2c20 6465 6661 756c 7420 3130 3030 0a20  , default 1000. ",
            "+0000e970: 2020 2020 2020 2052 6566 6572 656e 6365         Reference",
            "+0000e980: 2069 7272 6164 6961 6e63 6520 696e 2057   irradiance in W",
            "+0000e990: 2f6d 5e32 2e0a 0a20 2020 2074 656d 705f  /m^2...    temp_",
            "+0000e9a0: 7265 6620 3a20 666c 6f61 742c 2064 6566  ref : float, def",
            "+0000e9b0: 6175 6c74 2032 350a 2020 2020 2020 2020  ault 25.        ",
            "+0000e9c0: 5265 6665 7265 6e63 6520 6365 6c6c 2074  Reference cell t",
            "+0000e9d0: 656d 7065 7261 7475 7265 2069 6e20 432e  emperature in C.",
            "+0000e9e0: 0a0a 2020 2020 5265 7475 726e 730a 2020  ..    Returns.  ",
            "+0000e9f0: 2020 2d2d 2d2d 2d2d 2d0a 2020 2020 5475    -------.    Tu",
            "+0000ea00: 706c 6520 6f66 2074 6865 2066 6f6c 6c6f  ple of the follo",
            "+0000ea10: 7769 6e67 2072 6573 756c 7473 3a0a 0a20  wing results:.. ",
            "+0000ea20: 2020 2070 686f 746f 6375 7272 656e 7420     photocurrent ",
            "+0000ea30: 3a20 6e75 6d65 7269 630a 2020 2020 2020  : numeric.      ",
            "+0000ea40: 2020 4c69 6768 742d 6765 6e65 7261 7465    Light-generate",
            "+0000ea50: 6420 6375 7272 656e 7420 696e 2061 6d70  d current in amp",
            "+0000ea60: 6572 6573 0a0a 2020 2020 7361 7475 7261  eres..    satura",
            "+0000ea70: 7469 6f6e 5f63 7572 7265 6e74 203a 206e  tion_current : n",
            "+0000ea80: 756d 6572 6963 0a20 2020 2020 2020 2044  umeric.        D",
            "+0000ea90: 696f 6465 2073 6174 7572 6174 696f 6e20  iode saturation ",
            "+0000eaa0: 6375 7272 656e 7420 696e 2061 6d70 6572  current in amper",
            "+0000eab0: 6573 0a0a 2020 2020 7265 7369 7374 616e  es..    resistan",
            "+0000eac0: 6365 5f73 6572 6965 7320 3a20 6e75 6d65  ce_series : nume",
            "+0000ead0: 7269 630a 2020 2020 2020 2020 5365 7269  ric.        Seri",
            "+0000eae0: 6573 2072 6573 6973 7461 6e63 6520 696e  es resistance in",
            "+0000eaf0: 206f 686d 730a 0a20 2020 2072 6573 6973   ohms..    resis",
            "+0000eb00: 7461 6e63 655f 7368 756e 7420 3a20 6e75  tance_shunt : nu",
            "+0000eb10: 6d65 7269 630a 2020 2020 2020 2020 5368  meric.        Sh",
            "+0000eb20: 756e 7420 7265 7369 7374 616e 6365 2069  unt resistance i",
            "+0000eb30: 6e20 6f68 6d73 0a0a 2020 2020 6e4e 7356  n ohms..    nNsV",
            "+0000eb40: 7468 203a 206e 756d 6572 6963 0a20 2020  th : numeric.   ",
            "+0000eb50: 2020 2020 2054 6865 2070 726f 6475 6374       The product",
            "+0000eb60: 206f 6620 7468 6520 7573 7561 6c20 6469   of the usual di",
            "+0000eb70: 6f64 6520 6964 6561 6c69 7479 2066 6163  ode ideality fac",
            "+0000eb80: 746f 7220 286e 2c20 756e 6974 6c65 7373  tor (n, unitless",
            "+0000eb90: 292c 0a20 2020 2020 2020 206e 756d 6265  ),.        numbe",
            "+0000eba0: 7220 6f66 2063 656c 6c73 2069 6e20 7365  r of cells in se",
            "+0000ebb0: 7269 6573 2028 4e73 292c 2061 6e64 2063  ries (Ns), and c",
            "+0000ebc0: 656c 6c20 7468 6572 6d61 6c20 766f 6c74  ell thermal volt",
            "+0000ebd0: 6167 6520 6174 0a20 2020 2020 2020 2073  age at.        s",
            "+0000ebe0: 7065 6369 6669 6564 2065 6666 6563 7469  pecified effecti",
            "+0000ebf0: 7665 2069 7272 6164 6961 6e63 6520 616e  ve irradiance an",
            "+0000ec00: 6420 6365 6c6c 2074 656d 7065 7261 7475  d cell temperatu",
            "+0000ec10: 7265 2e0a 0a20 2020 2052 6566 6572 656e  re...    Referen",
            "+0000ec20: 6365 730a 2020 2020 2d2d 2d2d 2d2d 2d2d  ces.    --------",
            "+0000ec30: 2d2d 0a20 2020 202e 2e20 5b31 5d20 572e  --.    .. [1] W.",
            "+0000ec40: 2044 6520 536f 746f 2065 7420 616c 2e2c   De Soto et al.,",
            "+0000ec50: 2022 496d 7072 6f76 656d 656e 7420 616e   \"Improvement an",
            "+0000ec60: 6420 7661 6c69 6461 7469 6f6e 206f 6620  d validation of ",
            "+0000ec70: 6120 6d6f 6465 6c20 666f 720a 2020 2020  a model for.    ",
            "+0000ec80: 2020 2070 686f 746f 766f 6c74 6169 6320     photovoltaic ",
            "+0000ec90: 6172 7261 7920 7065 7266 6f72 6d61 6e63  array performanc",
            "+0000eca0: 6522 2c20 536f 6c61 7220 456e 6572 6779  e\", Solar Energy",
            "+0000ecb0: 2c20 766f 6c20 3830 2c20 7070 2e20 3738  , vol 80, pp. 78",
            "+0000ecc0: 2d38 382c 0a20 2020 2020 2020 3230 3036  -88,.       2006",
            "+0000ecd0: 2e0a 0a20 2020 202e 2e20 5b32 5d20 5379  ...    .. [2] Sy",
            "+0000ece0: 7374 656d 2041 6476 6973 6f72 204d 6f64  stem Advisor Mod",
            "+0000ecf0: 656c 2077 6562 2070 6167 652e 2068 7474  el web page. htt",
            "+0000ed00: 7073 3a2f 2f73 616d 2e6e 7265 6c2e 676f  ps://sam.nrel.go",
            "+0000ed10: 762e 0a0a 2020 2020 2e2e 205b 335d 2041  v...    .. [3] A",
            "+0000ed20: 2e20 446f 626f 732c 2022 416e 2049 6d70  . Dobos, \"An Imp",
            "+0000ed30: 726f 7665 6420 436f 6566 6669 6369 656e  roved Coefficien",
            "+0000ed40: 7420 4361 6c63 756c 6174 6f72 2066 6f72  t Calculator for",
            "+0000ed50: 2074 6865 2043 616c 6966 6f72 6e69 610a   the California.",
            "+0000ed60: 2020 2020 2020 2045 6e65 7267 7920 436f         Energy Co",
            "+0000ed70: 6d6d 6973 7369 6f6e 2036 2050 6172 616d  mmission 6 Param",
            "+0000ed80: 6574 6572 2050 686f 746f 766f 6c74 6169  eter Photovoltai",
            "+0000ed90: 6320 4d6f 6475 6c65 204d 6f64 656c 222c  c Module Model\",",
            "+0000eda0: 204a 6f75 726e 616c 206f 660a 2020 2020   Journal of.    ",
            "+0000edb0: 2020 2053 6f6c 6172 2045 6e65 7267 7920     Solar Energy ",
            "+0000edc0: 456e 6769 6e65 6572 696e 672c 2076 6f6c  Engineering, vol",
            "+0000edd0: 2031 3334 2c20 3230 3132 2e0a 0a20 2020   134, 2012...   ",
            "+0000ede0: 202e 2e20 5b34 5d20 4f2e 204d 6164 656c   .. [4] O. Madel",
            "+0000edf0: 756e 672c 2022 5365 6d69 636f 6e64 7563  ung, \"Semiconduc",
            "+0000ee00: 746f 7273 3a20 4461 7461 2048 616e 6462  tors: Data Handb",
            "+0000ee10: 6f6f 6b2c 2033 7264 2065 642e 2220 4953  ook, 3rd ed.\" IS",
            "+0000ee20: 424e 0a20 2020 2020 2020 332d 3534 302d  BN.       3-540-",
            "+0000ee30: 3430 3438 382d 300a 0a20 2020 2053 6565  40488-0..    See",
            "+0000ee40: 2041 6c73 6f0a 2020 2020 2d2d 2d2d 2d2d   Also.    ------",
            "+0000ee50: 2d2d 0a20 2020 2073 696e 676c 6564 696f  --.    singledio",
            "+0000ee60: 6465 0a20 2020 2072 6574 7269 6576 655f  de.    retrieve_",
            "+0000ee70: 7361 6d0a 0a20 2020 204e 6f74 6573 0a20  sam..    Notes. ",
            "+0000ee80: 2020 202d 2d2d 2d2d 0a20 2020 2049 6620     -----.    If ",
            "+0000ee90: 7468 6520 7265 6665 7265 6e63 6520 7061  the reference pa",
            "+0000eea0: 7261 6d65 7465 7273 2069 6e20 7468 6520  rameters in the ",
            "+0000eeb0: 4d6f 6475 6c65 5061 7261 6d65 7465 7273  ModuleParameters",
            "+0000eec0: 2073 7472 7563 7420 6172 6520 7265 6164   struct are read",
            "+0000eed0: 0a20 2020 2066 726f 6d20 6120 6461 7461  .    from a data",
            "+0000eee0: 6261 7365 206f 7220 6c69 6272 6172 7920  base or library ",
            "+0000eef0: 6f66 2070 6172 616d 6574 6572 7320 2865  of parameters (e",
            "+0000ef00: 2e67 2e20 5379 7374 656d 2041 6476 6973  .g. System Advis",
            "+0000ef10: 6f72 0a20 2020 204d 6f64 656c 292c 2069  or.    Model), i",
            "+0000ef20: 7420 6973 2069 6d70 6f72 7461 6e74 2074  t is important t",
            "+0000ef30: 6f20 7573 6520 7468 6520 7361 6d65 2045  o use the same E",
            "+0000ef40: 6752 6566 2061 6e64 2064 4567 6454 2076  gRef and dEgdT v",
            "+0000ef50: 616c 7565 7320 7468 6174 0a20 2020 2077  alues that.    w",
            "+0000ef60: 6572 6520 7573 6564 2074 6f20 6765 6e65  ere used to gene",
            "+0000ef70: 7261 7465 2074 6865 2072 6566 6572 656e  rate the referen",
            "+0000ef80: 6365 2070 6172 616d 6574 6572 732c 2072  ce parameters, r",
            "+0000ef90: 6567 6172 646c 6573 7320 6f66 2074 6865  egardless of the",
            "+0000efa0: 0a20 2020 2061 6374 7561 6c20 6261 6e64  .    actual band",
            "+0000efb0: 6761 7020 6368 6172 6163 7465 7269 7374  gap characterist",
            "+0000efc0: 6963 7320 6f66 2074 6865 2073 656d 6963  ics of the semic",
            "+0000efd0: 6f6e 6475 6374 6f72 2e20 466f 7220 6578  onductor. For ex",
            "+0000efe0: 616d 706c 652c 2069 6e0a 2020 2020 7468  ample, in.    th",
            "+0000eff0: 6520 6361 7365 206f 6620 7468 6520 5379  e case of the Sy",
            "+0000f000: 7374 656d 2041 6476 6973 6f72 204d 6f64  stem Advisor Mod",
            "+0000f010: 656c 206c 6962 7261 7279 2c20 6372 6561  el library, crea",
            "+0000f020: 7465 6420 6173 2064 6573 6372 6962 6564  ted as described",
            "+0000f030: 0a20 2020 2069 6e20 5b33 5d2c 2045 6752  .    in [3], EgR",
            "+0000f040: 6566 2061 6e64 2064 4567 6454 2066 6f72  ef and dEgdT for",
            "+0000f050: 2061 6c6c 206d 6f64 756c 6573 2077 6572   all modules wer",
            "+0000f060: 6520 312e 3132 3120 616e 6420 2d30 2e30  e 1.121 and -0.0",
            "+0000f070: 3030 3236 3737 2c0a 2020 2020 7265 7370  002677,.    resp",
            "+0000f080: 6563 7469 7665 6c79 2e0a 0a20 2020 2054  ectively...    T",
            "+0000f090: 6869 7320 7461 626c 6520 6f66 2072 6566  his table of ref",
            "+0000f0a0: 6572 656e 6365 2062 616e 6467 6170 2065  erence bandgap e",
            "+0000f0b0: 6e65 7267 6965 7320 2845 6752 6566 292c  nergies (EgRef),",
            "+0000f0c0: 2062 616e 6467 6170 2065 6e65 7267 790a   bandgap energy.",
            "+0000f0d0: 2020 2020 7465 6d70 6572 6174 7572 6520      temperature ",
            "+0000f0e0: 6465 7065 6e64 656e 6365 2028 6445 6764  dependence (dEgd",
            "+0000f0f0: 5429 2c20 616e 6420 2274 7970 6963 616c  T), and \"typical",
            "+0000f100: 2220 6169 726d 6173 7320 7265 7370 6f6e  \" airmass respon",
            "+0000f110: 7365 2028 4d29 0a20 2020 2069 7320 7072  se (M).    is pr",
            "+0000f120: 6f76 6964 6564 2070 7572 656c 7920 6173  ovided purely as",
            "+0000f130: 2072 6566 6572 656e 6365 2074 6f20 7468   reference to th",
            "+0000f140: 6f73 6520 7768 6f20 6d61 7920 6765 6e65  ose who may gene",
            "+0000f150: 7261 7465 2074 6865 6972 206f 776e 0a20  rate their own. ",
            "+0000f160: 2020 2072 6566 6572 656e 6365 206d 6f64     reference mod",
            "+0000f170: 756c 6520 7061 7261 6d65 7465 7273 2028  ule parameters (",
            "+0000f180: 615f 7265 662c 2049 4c5f 7265 662c 2049  a_ref, IL_ref, I",
            "+0000f190: 305f 7265 662c 2065 7463 2e29 2062 6173  0_ref, etc.) bas",
            "+0000f1a0: 6564 2075 706f 6e0a 2020 2020 7468 6520  ed upon.    the ",
            "+0000f1b0: 7661 7269 6f75 7320 5056 2073 656d 6963  various PV semic",
            "+0000f1c0: 6f6e 6475 6374 6f72 732e 2041 6761 696e  onductors. Again",
            "+0000f1d0: 2c20 7765 2073 7472 6573 7320 7468 6520  , we stress the ",
            "+0000f1e0: 696d 706f 7274 616e 6365 206f 660a 2020  importance of.  ",
            "+0000f1f0: 2020 7573 696e 6720 6964 656e 7469 6361    using identica",
            "+0000f200: 6c20 4567 5265 6620 616e 6420 6445 6764  l EgRef and dEgd",
            "+0000f210: 5420 7768 656e 2067 656e 6572 6174 696f  T when generatio",
            "+0000f220: 6e20 7265 6665 7265 6e63 6520 7061 7261  n reference para",
            "+0000f230: 6d65 7465 7273 0a20 2020 2061 6e64 206d  meters.    and m",
            "+0000f240: 6f64 6966 7969 6e67 2074 6865 2072 6566  odifying the ref",
            "+0000f250: 6572 656e 6365 2070 6172 616d 6574 6572  erence parameter",
            "+0000f260: 7320 2866 6f72 2069 7272 6164 6961 6e63  s (for irradianc",
            "+0000f270: 652c 2074 656d 7065 7261 7475 7265 2c0a  e, temperature,.",
            "+0000f280: 2020 2020 616e 6420 6169 726d 6173 7329      and airmass)",
            "+0000f290: 2070 6572 2044 6553 6f74 6f27 7320 6571   per DeSoto's eq",
            "+0000f2a0: 7561 7469 6f6e 732e 0a0a 2020 2020 2043  uations...     C",
            "+0000f2b0: 7279 7374 616c 6c69 6e65 2053 696c 6963  rystalline Silic",
            "+0000f2c0: 6f6e 2028 5369 293a 0a20 2020 2020 2020  on (Si):.       ",
            "+0000f2d0: 2020 2a20 4567 5265 6620 3d20 312e 3132    * EgRef = 1.12",
            "+0000f2e0: 310a 2020 2020 2020 2020 202a 2064 4567  1.         * dEg",
            "+0000f2f0: 6454 203d 202d 302e 3030 3032 3637 370a  dT = -0.0002677.",
            "+0000f300: 0a20 2020 2020 2020 2020 3e3e 3e20 4d20  .         >>> M ",
            "+0000f310: 3d20 6e70 2e70 6f6c 7976 616c 285b 2d31  = np.polyval([-1",
            "+0000f320: 2e32 3645 2d34 2c20 322e 3831 3645 2d33  .26E-4, 2.816E-3",
            "+0000f330: 2c20 2d30 2e30 3234 3435 392c 2030 2e30  , -0.024459, 0.0",
            "+0000f340: 3836 3235 372c 2030 2e39 3138 315d 2c0a  86257, 0.9181],.",
            "+0000f350: 2020 2020 2020 2020 202e 2e2e 2020 2020           ...    ",
            "+0000f360: 2020 2020 2020 2020 2020 2020 414d 6129              AMa)",
            "+0000f370: 2023 2064 6f63 7465 7374 3a20 2b53 4b49   # doctest: +SKI",
            "+0000f380: 500a 0a20 2020 2020 2020 2020 536f 7572  P..         Sour",
            "+0000f390: 6365 3a20 5b31 5d0a 0a20 2020 2020 4361  ce: [1]..     Ca",
            "+0000f3a0: 646d 6975 6d20 5465 6c6c 7572 6964 6520  dmium Telluride ",
            "+0000f3b0: 2843 6454 6529 3a0a 2020 2020 2020 2020  (CdTe):.        ",
            "+0000f3c0: 202a 2045 6752 6566 203d 2031 2e34 3735   * EgRef = 1.475",
            "+0000f3d0: 0a20 2020 2020 2020 2020 2a20 6445 6764  .         * dEgd",
            "+0000f3e0: 5420 3d20 2d30 2e30 3030 330a 0a20 2020  T = -0.0003..   ",
            "+0000f3f0: 2020 2020 2020 3e3e 3e20 4d20 3d20 6e70        >>> M = np",
            "+0000f400: 2e70 6f6c 7976 616c 285b 2d32 2e34 3645  .polyval([-2.46E",
            "+0000f410: 2d35 2c20 392e 3630 3745 2d34 2c20 2d30  -5, 9.607E-4, -0",
            "+0000f420: 2e30 3133 342c 2030 2e30 3731 362c 2030  .0134, 0.0716, 0",
            "+0000f430: 2e39 3139 365d 2c0a 2020 2020 2020 2020  .9196],.        ",
            "+0000f440: 202e 2e2e 2020 2020 2020 2020 2020 2020   ...            ",
            "+0000f450: 2020 2020 414d 6129 2023 2064 6f63 7465      AMa) # docte",
            "+0000f460: 7374 3a20 2b53 4b49 500a 0a20 2020 2020  st: +SKIP..     ",
            "+0000f470: 2020 2020 536f 7572 6365 3a20 5b34 5d0a      Source: [4].",
            "+0000f480: 0a20 2020 2020 436f 7070 6572 2049 6e64  .     Copper Ind",
            "+0000f490: 6975 6d20 6469 5365 6c65 6e69 6465 2028  ium diSelenide (",
            "+0000f4a0: 4349 5329 3a0a 2020 2020 2020 2020 202a  CIS):.         *",
            "+0000f4b0: 2045 6752 6566 203d 2031 2e30 3130 0a20   EgRef = 1.010. ",
            "+0000f4c0: 2020 2020 2020 2020 2a20 6445 6764 5420          * dEgdT ",
            "+0000f4d0: 3d20 2d30 2e30 3030 3131 0a0a 2020 2020  = -0.00011..    ",
            "+0000f4e0: 2020 2020 203e 3e3e 204d 203d 206e 702e       >>> M = np.",
            "+0000f4f0: 706f 6c79 7661 6c28 5b2d 332e 3734 452d  polyval([-3.74E-",
            "+0000f500: 352c 2030 2e30 3031 3235 2c20 2d30 2e30  5, 0.00125, -0.0",
            "+0000f510: 3134 3632 2c20 302e 3037 3138 2c20 302e  1462, 0.0718, 0.",
            "+0000f520: 3932 3130 5d2c 0a20 2020 2020 2020 2020  9210],.         ",
            "+0000f530: 2e2e 2e20 2020 2020 2020 2020 2020 2020  ...             ",
            "+0000f540: 2020 2041 4d61 2920 2320 646f 6374 6573     AMa) # doctes",
            "+0000f550: 743a 202b 534b 4950 0a0a 2020 2020 2020  t: +SKIP..      ",
            "+0000f560: 2020 2053 6f75 7263 653a 205b 345d 0a0a     Source: [4]..",
            "+0000f570: 2020 2020 2043 6f70 7065 7220 496e 6469       Copper Indi",
            "+0000f580: 756d 2047 616c 6c69 756d 2064 6953 656c  um Gallium diSel",
            "+0000f590: 656e 6964 6520 2843 4947 5329 3a0a 2020  enide (CIGS):.  ",
            "+0000f5a0: 2020 2020 2020 202a 2045 6752 6566 203d         * EgRef =",
            "+0000f5b0: 2031 2e31 350a 2020 2020 2020 2020 202a   1.15.         *",
            "+0000f5c0: 2064 4567 6454 203d 203f 3f3f 3f0a 0a20   dEgdT = ????.. ",
            "+0000f5d0: 2020 2020 2020 2020 3e3e 3e20 4d20 3d20          >>> M = ",
            "+0000f5e0: 6e70 2e70 6f6c 7976 616c 285b 2d39 2e30  np.polyval([-9.0",
            "+0000f5f0: 3745 2d35 2c20 302e 3030 3232 2c20 2d30  7E-5, 0.0022, -0",
            "+0000f600: 2e30 3230 322c 2030 2e30 3635 322c 2030  .0202, 0.0652, 0",
            "+0000f610: 2e39 3431 375d 2c0a 2020 2020 2020 2020  .9417],.        ",
            "+0000f620: 202e 2e2e 2020 2020 2020 2020 2020 2020   ...            ",
            "+0000f630: 2020 2020 414d 6129 2023 2064 6f63 7465      AMa) # docte",
            "+0000f640: 7374 3a20 2b53 4b49 500a 0a20 2020 2020  st: +SKIP..     ",
            "+0000f650: 2020 2020 536f 7572 6365 3a20 5769 6b69      Source: Wiki",
            "+0000f660: 7065 6469 610a 0a20 2020 2020 4761 6c6c  pedia..     Gall",
            "+0000f670: 6975 6d20 4172 7365 6e69 6465 2028 4761  ium Arsenide (Ga",
            "+0000f680: 4173 293a 0a20 2020 2020 2020 2020 2a20  As):.         * ",
            "+0000f690: 4567 5265 6620 3d20 312e 3432 340a 2020  EgRef = 1.424.  ",
            "+0000f6a0: 2020 2020 2020 202a 2064 4567 6454 203d         * dEgdT =",
            "+0000f6b0: 202d 302e 3030 3034 3333 0a20 2020 2020   -0.000433.     ",
            "+0000f6c0: 2020 2020 2a20 4d20 3d20 756e 6b6e 6f77      * M = unknow",
            "+0000f6d0: 6e0a 0a20 2020 2020 2020 2020 536f 7572  n..         Sour",
            "+0000f6e0: 6365 3a20 5b34 5d0a 2020 2020 2727 270a  ce: [4].    '''.",
            "+0000f6f0: 0a20 2020 2023 2042 6f6c 747a 6d61 6e6e  .    # Boltzmann",
            "+0000f700: 2063 6f6e 7374 616e 7420 696e 2065 562f   constant in eV/",
            "+0000f710: 4b2c 2038 2e36 3137 3333 3234 3738 652d  K, 8.617332478e-",
            "+0000f720: 3035 0a20 2020 206b 203d 2063 6f6e 7374  05.    k = const",
            "+0000f730: 616e 7473 2e76 616c 7565 2827 426f 6c74  ants.value('Bolt",
            "+0000f740: 7a6d 616e 6e20 636f 6e73 7461 6e74 2069  zmann constant i",
            "+0000f750: 6e20 6556 2f4b 2729 0a0a 2020 2020 2320  n eV/K')..    # ",
            "+0000f760: 7265 6665 7265 6e63 6520 7465 6d70 6572  reference temper",
            "+0000f770: 6174 7572 650a 2020 2020 5472 6566 5f4b  ature.    Tref_K",
            "+0000f780: 203d 2074 656d 705f 7265 6620 2b20 3237   = temp_ref + 27",
            "+0000f790: 332e 3135 0a20 2020 2054 6365 6c6c 5f4b  3.15.    Tcell_K",
            "+0000f7a0: 203d 2074 656d 705f 6365 6c6c 202b 2032   = temp_cell + 2",
            "+0000f7b0: 3733 2e31 350a 0a20 2020 2045 5f67 203d  73.15..    E_g =",
            "+0000f7c0: 2045 6752 6566 202a 2028 3120 2b20 6445   EgRef * (1 + dE",
            "+0000f7d0: 6764 542a 2854 6365 6c6c 5f4b 202d 2054  gdT*(Tcell_K - T",
            "+0000f7e0: 7265 665f 4b29 290a 0a20 2020 206e 4e73  ref_K))..    nNs",
            "+0000f7f0: 5674 6820 3d20 615f 7265 6620 2a20 2854  Vth = a_ref * (T",
            "+0000f800: 6365 6c6c 5f4b 202f 2054 7265 665f 4b29  cell_K / Tref_K)",
            "+0000f810: 0a0a 2020 2020 2320 496e 2074 6865 2065  ..    # In the e",
            "+0000f820: 7175 6174 696f 6e20 666f 7220 494c 2c20  quation for IL, ",
            "+0000f830: 7468 6520 7369 6e67 6c65 2066 6163 746f  the single facto",
            "+0000f840: 7220 6566 6665 6374 6976 655f 6972 7261  r effective_irra",
            "+0000f850: 6469 616e 6365 2069 730a 2020 2020 2320  diance is.    # ",
            "+0000f860: 7573 6564 2c20 696e 2070 6c61 6365 206f  used, in place o",
            "+0000f870: 6620 7468 6520 7072 6f64 7563 7420 532a  f the product S*",
            "+0000f880: 4d20 696e 205b 315d 2e20 6566 6665 6374  M in [1]. effect",
            "+0000f890: 6976 655f 6972 7261 6469 616e 6365 2069  ive_irradiance i",
            "+0000f8a0: 730a 2020 2020 2320 6571 7569 7661 6c65  s.    # equivale",
            "+0000f8b0: 6e74 2074 6f20 7468 6520 7072 6f64 7563  nt to the produc",
            "+0000f8c0: 7420 6f66 2053 2028 6972 7261 6469 616e  t of S (irradian",
            "+0000f8d0: 6365 2072 6561 6368 696e 6720 6120 6d6f  ce reaching a mo",
            "+0000f8e0: 6475 6c65 2773 2063 656c 6c73 2920 2a0a  dule's cells) *.",
            "+0000f8f0: 2020 2020 2320 4d20 2873 7065 6374 7261      # M (spectra",
            "+0000f900: 6c20 6164 6a75 7374 6d65 6e74 2066 6163  l adjustment fac",
            "+0000f910: 746f 7229 2061 7320 6465 7363 7269 6265  tor) as describe",
            "+0000f920: 6420 696e 205b 315d 2e0a 2020 2020 494c  d in [1]..    IL",
            "+0000f930: 203d 2065 6666 6563 7469 7665 5f69 7272   = effective_irr",
            "+0000f940: 6164 6961 6e63 6520 2f20 6972 7261 645f  adiance / irrad_",
            "+0000f950: 7265 6620 2a20 5c0a 2020 2020 2020 2020  ref * \\.        ",
            "+0000f960: 2849 5f4c 5f72 6566 202b 2061 6c70 6861  (I_L_ref + alpha",
            "+0000f970: 5f73 6320 2a20 2854 6365 6c6c 5f4b 202d  _sc * (Tcell_K -",
            "+0000f980: 2054 7265 665f 4b29 290a 2020 2020 4930   Tref_K)).    I0",
            "+0000f990: 203d 2028 495f 6f5f 7265 6620 2a20 2828   = (I_o_ref * ((",
            "+0000f9a0: 5463 656c 6c5f 4b20 2f20 5472 6566 5f4b  Tcell_K / Tref_K",
            "+0000f9b0: 2920 2a2a 2033 2920 2a0a 2020 2020 2020  ) ** 3) *.      ",
            "+0000f9c0: 2020 2020 286e 702e 6578 7028 4567 5265      (np.exp(EgRe",
            "+0000f9d0: 6620 2f20 286b 2a28 5472 6566 5f4b 2929  f / (k*(Tref_K))",
            "+0000f9e0: 202d 2028 455f 6720 2f20 286b 2a28 5463   - (E_g / (k*(Tc",
            "+0000f9f0: 656c 6c5f 4b29 2929 2929 290a 2020 2020  ell_K)))))).    ",
            "+0000fa00: 2320 4e6f 7465 2074 6861 7420 7468 6520  # Note that the ",
            "+0000fa10: 6571 7561 7469 6f6e 2066 6f72 2052 7368  equation for Rsh",
            "+0000fa20: 2064 6966 6665 7273 2066 726f 6d20 5b31   differs from [1",
            "+0000fa30: 5d2e 2049 6e20 5b31 5d20 5273 6820 6973  ]. In [1] Rsh is",
            "+0000fa40: 2067 6976 656e 2061 730a 2020 2020 2320   given as.    # ",
            "+0000fa50: 5273 6820 3d20 5273 685f 7265 6620 2a20  Rsh = Rsh_ref * ",
            "+0000fa60: 2853 5f72 6566 202f 2053 2920 7768 6572  (S_ref / S) wher",
            "+0000fa70: 6520 5320 6973 2062 726f 6164 6261 6e64  e S is broadband",
            "+0000fa80: 2069 7272 6164 6961 6e63 6520 7265 6163   irradiance reac",
            "+0000fa90: 6869 6e67 0a20 2020 2023 2074 6865 206d  hing.    # the m",
            "+0000faa0: 6f64 756c 6527 7320 6365 6c6c 732e 2049  odule's cells. I",
            "+0000fab0: 6620 6465 7369 7265 6420 7468 6973 206d  f desired this m",
            "+0000fac0: 6f64 656c 2062 6568 6176 696f 7220 6361  odel behavior ca",
            "+0000fad0: 6e20 6265 2064 7570 6c69 6361 7465 640a  n be duplicated.",
            "+0000fae0: 2020 2020 2320 6279 2061 7070 6c79 696e      # by applyin",
            "+0000faf0: 6720 7265 666c 6563 7469 6f6e 2061 6e64  g reflection and",
            "+0000fb00: 2073 6f69 6c69 6e67 206c 6f73 7365 7320   soiling losses ",
            "+0000fb10: 746f 2062 726f 6164 6261 6e64 2070 6c61  to broadband pla",
            "+0000fb20: 6e65 206f 6620 6172 7261 790a 2020 2020  ne of array.    ",
            "+0000fb30: 2320 6972 7261 6469 616e 6365 2061 6e64  # irradiance and",
            "+0000fb40: 206e 6f74 2061 7070 6c79 696e 6720 6120   not applying a ",
            "+0000fb50: 7370 6563 7472 616c 206c 6f73 7320 6d6f  spectral loss mo",
            "+0000fb60: 6469 6669 6572 2c20 692e 652e 2c0a 2020  difier, i.e.,.  ",
            "+0000fb70: 2020 2320 7370 6563 7472 616c 5f6d 6f64    # spectral_mod",
            "+0000fb80: 6966 6965 7220 3d20 312e 302e 0a20 2020  ifier = 1.0..   ",
            "+0000fb90: 2023 2075 7365 2065 7272 7374 6174 6520   # use errstate ",
            "+0000fba0: 746f 2073 696c 656e 6365 2064 6976 6964  to silence divid",
            "+0000fbb0: 6520 6279 2077 6172 6e69 6e67 0a20 2020  e by warning.   ",
            "+0000fbc0: 2077 6974 6820 6e70 2e65 7272 7374 6174   with np.errstat",
            "+0000fbd0: 6528 6469 7669 6465 3d27 6967 6e6f 7265  e(divide='ignore",
            "+0000fbe0: 2729 3a0a 2020 2020 2020 2020 5273 6820  '):.        Rsh ",
            "+0000fbf0: 3d20 525f 7368 5f72 6566 202a 2028 6972  = R_sh_ref * (ir",
            "+0000fc00: 7261 645f 7265 6620 2f20 6566 6665 6374  rad_ref / effect",
            "+0000fc10: 6976 655f 6972 7261 6469 616e 6365 290a  ive_irradiance).",
            "+0000fc20: 0a20 2020 2052 7320 3d20 525f 730a 0a20  .    Rs = R_s.. ",
            "+0000fc30: 2020 206e 756d 6572 6963 5f61 7267 7320     numeric_args ",
            "+0000fc40: 3d20 2865 6666 6563 7469 7665 5f69 7272  = (effective_irr",
            "+0000fc50: 6164 6961 6e63 652c 2074 656d 705f 6365  adiance, temp_ce",
            "+0000fc60: 6c6c 290a 2020 2020 2320 494c 3a20 7068  ll).    # IL: ph",
            "+0000fc70: 6f74 6f63 7572 7265 6e74 2c20 4930 3a20  otocurrent, I0: ",
            "+0000fc80: 7361 7475 7261 7469 6f6e 5f63 7572 7265  saturation_curre",
            "+0000fc90: 6e74 2c20 5273 3a20 7265 7369 7374 616e  nt, Rs: resistan",
            "+0000fca0: 6365 5f73 6572 6965 732c 0a20 2020 2023  ce_series,.    #",
            "+0000fcb0: 2052 7368 3a20 7265 7369 7374 616e 6365   Rsh: resistance",
            "+0000fcc0: 5f73 6875 6e74 0a20 2020 206f 7574 203d  _shunt.    out =",
            "+0000fcd0: 2028 494c 2c20 4930 2c20 5273 2c20 5273   (IL, I0, Rs, Rs",
            "+0000fce0: 682c 206e 4e73 5674 6829 0a0a 2020 2020  h, nNsVth)..    ",
            "+0000fcf0: 6966 2061 6c6c 286d 6170 286e 702e 6973  if all(map(np.is",
            "+0000fd00: 7363 616c 6172 2c20 6e75 6d65 7269 635f  scalar, numeric_",
            "+0000fd10: 6172 6773 2929 3a0a 2020 2020 2020 2020  args)):.        ",
            "+0000fd20: 7265 7475 726e 206f 7574 0a0a 2020 2020  return out..    ",
            "+0000fd30: 696e 6465 7820 3d20 746f 6f6c 732e 6765  index = tools.ge",
            "+0000fd40: 745f 7061 6e64 6173 5f69 6e64 6578 282a  t_pandas_index(*",
            "+0000fd50: 6e75 6d65 7269 635f 6172 6773 290a 0a20  numeric_args).. ",
            "+0000fd60: 2020 2069 6620 696e 6465 7820 6973 204e     if index is N",
            "+0000fd70: 6f6e 653a 0a20 2020 2020 2020 2072 6574  one:.        ret",
            "+0000fd80: 7572 6e20 6e70 2e62 726f 6164 6361 7374  urn np.broadcast",
            "+0000fd90: 5f61 7272 6179 7328 2a6f 7574 290a 0a20  _arrays(*out).. ",
            "+0000fda0: 2020 2072 6574 7572 6e20 7475 706c 6528     return tuple(",
            "+0000fdb0: 7064 2e53 6572 6965 7328 612c 2069 6e64  pd.Series(a, ind",
            "+0000fdc0: 6578 3d69 6e64 6578 292e 7265 6e61 6d65  ex=index).rename",
            "+0000fdd0: 284e 6f6e 6529 2066 6f72 2061 2069 6e20  (None) for a in ",
            "+0000fde0: 6f75 7429 0a0a 0a64 6566 2063 616c 6370  out)...def calcp",
            "+0000fdf0: 6172 616d 735f 6365 6328 6566 6665 6374  arams_cec(effect",
            "+0000fe00: 6976 655f 6972 7261 6469 616e 6365 2c20  ive_irradiance, ",
            "+0000fe10: 7465 6d70 5f63 656c 6c2c 0a20 2020 2020  temp_cell,.     ",
            "+0000fe20: 2020 2020 2020 2020 2020 2020 2020 616c                al",
            "+0000fe30: 7068 615f 7363 2c20 615f 7265 662c 2049  pha_sc, a_ref, I",
            "+0000fe40: 5f4c 5f72 6566 2c20 495f 6f5f 7265 662c  _L_ref, I_o_ref,",
            "+0000fe50: 2052 5f73 685f 7265 662c 2052 5f73 2c0a   R_sh_ref, R_s,.",
            "+0000fe60: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+0000fe70: 2020 2041 646a 7573 742c 2045 6752 6566     Adjust, EgRef",
            "+0000fe80: 3d31 2e31 3231 2c20 6445 6764 543d 2d30  =1.121, dEgdT=-0",
            "+0000fe90: 2e30 3030 3236 3737 2c0a 2020 2020 2020  .0002677,.      ",
            "+0000fea0: 2020 2020 2020 2020 2020 2020 2069 7272               irr",
            "+0000feb0: 6164 5f72 6566 3d31 3030 302c 2074 656d  ad_ref=1000, tem",
            "+0000fec0: 705f 7265 663d 3235 293a 0a20 2020 2027  p_ref=25):.    '",
            "+0000fed0: 2727 0a20 2020 2043 616c 6375 6c61 7465  ''.    Calculate",
            "+0000fee0: 7320 6669 7665 2070 6172 616d 6574 6572  s five parameter",
            "+0000fef0: 2076 616c 7565 7320 666f 7220 7468 6520   values for the ",
            "+0000ff00: 7369 6e67 6c65 2064 696f 6465 2065 7175  single diode equ",
            "+0000ff10: 6174 696f 6e20 6174 0a20 2020 2065 6666  ation at.    eff",
            "+0000ff20: 6563 7469 7665 2069 7272 6164 6961 6e63  ective irradianc",
            "+0000ff30: 6520 616e 6420 6365 6c6c 2074 656d 7065  e and cell tempe",
            "+0000ff40: 7261 7475 7265 2075 7369 6e67 2074 6865  rature using the",
            "+0000ff50: 2043 4543 0a20 2020 206d 6f64 656c 2e20   CEC.    model. ",
            "+0000ff60: 5468 6520 4345 4320 6d6f 6465 6c20 5b31  The CEC model [1",
            "+0000ff70: 5d5f 2064 6966 6665 7273 2066 726f 6d20  ]_ differs from ",
            "+0000ff80: 7468 6520 4465 2073 6f74 6f20 6574 2061  the De soto et a",
            "+0000ff90: 6c2e 0a20 2020 206d 6f64 656c 205b 335d  l..    model [3]",
            "+0000ffa0: 5f20 6279 2074 6865 2070 6172 616d 6574  _ by the paramet",
            "+0000ffb0: 6572 2041 646a 7573 742e 2054 6865 2066  er Adjust. The f",
            "+0000ffc0: 6976 6520 7661 6c75 6573 2072 6574 7572  ive values retur",
            "+0000ffd0: 6e65 6420 6279 0a20 2020 2063 616c 6370  ned by.    calcp",
            "+0000ffe0: 6172 616d 735f 6365 6320 6361 6e20 6265  arams_cec can be",
            "+0000fff0: 2075 7365 6420 6279 2073 696e 676c 6564   used by singled",
            "+00010000: 696f 6465 2074 6f20 6361 6c63 756c 6174  iode to calculat",
            "+00010010: 6520 616e 2049 5620 6375 7276 652e 0a0a  e an IV curve...",
            "+00010020: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "+00010030: 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020     ----------.  ",
            "+00010040: 2020 6566 6665 6374 6976 655f 6972 7261    effective_irra",
            "+00010050: 6469 616e 6365 203a 206e 756d 6572 6963  diance : numeric",
            "+00010060: 0a20 2020 2020 2020 2054 6865 2069 7272  .        The irr",
            "+00010070: 6164 6961 6e63 6520 2857 2f6d 3229 2074  adiance (W/m2) t",
            "+00010080: 6861 7420 6973 2063 6f6e 7665 7274 6564  hat is converted",
            "+00010090: 2074 6f20 7068 6f74 6f63 7572 7265 6e74   to photocurrent",
            "+000100a0: 2e0a 0a20 2020 2074 656d 705f 6365 6c6c  ...    temp_cell",
            "+000100b0: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "+000100c0: 2020 2054 6865 2061 7665 7261 6765 2063     The average c",
            "+000100d0: 656c 6c20 7465 6d70 6572 6174 7572 6520  ell temperature ",
            "+000100e0: 6f66 2063 656c 6c73 2077 6974 6869 6e20  of cells within ",
            "+000100f0: 6120 6d6f 6475 6c65 2069 6e20 432e 0a0a  a module in C...",
            "+00010100: 2020 2020 616c 7068 615f 7363 203a 2066      alpha_sc : f",
            "+00010110: 6c6f 6174 0a20 2020 2020 2020 2054 6865  loat.        The",
            "+00010120: 2073 686f 7274 2d63 6972 6375 6974 2063   short-circuit c",
            "+00010130: 7572 7265 6e74 2074 656d 7065 7261 7475  urrent temperatu",
            "+00010140: 7265 2063 6f65 6666 6963 6965 6e74 206f  re coefficient o",
            "+00010150: 6620 7468 650a 2020 2020 2020 2020 6d6f  f the.        mo",
            "+00010160: 6475 6c65 2069 6e20 756e 6974 7320 6f66  dule in units of",
            "+00010170: 2041 2f43 2e0a 0a20 2020 2061 5f72 6566   A/C...    a_ref",
            "+00010180: 203a 2066 6c6f 6174 0a20 2020 2020 2020   : float.       ",
            "+00010190: 2054 6865 2070 726f 6475 6374 206f 6620   The product of ",
            "+000101a0: 7468 6520 7573 7561 6c20 6469 6f64 6520  the usual diode ",
            "+000101b0: 6964 6561 6c69 7479 2066 6163 746f 7220  ideality factor ",
            "+000101c0: 286e 2c20 756e 6974 6c65 7373 292c 0a20  (n, unitless),. ",
            "+000101d0: 2020 2020 2020 206e 756d 6265 7220 6f66         number of",
            "+000101e0: 2063 656c 6c73 2069 6e20 7365 7269 6573   cells in series",
            "+000101f0: 2028 4e73 292c 2061 6e64 2063 656c 6c20   (Ns), and cell ",
            "+00010200: 7468 6572 6d61 6c20 766f 6c74 6167 6520  thermal voltage ",
            "+00010210: 6174 2072 6566 6572 656e 6365 0a20 2020  at reference.   ",
            "+00010220: 2020 2020 2063 6f6e 6469 7469 6f6e 732c       conditions,",
            "+00010230: 2069 6e20 756e 6974 7320 6f66 2056 2e0a   in units of V..",
            "+00010240: 0a20 2020 2049 5f4c 5f72 6566 203a 2066  .    I_L_ref : f",
            "+00010250: 6c6f 6174 0a20 2020 2020 2020 2054 6865  loat.        The",
            "+00010260: 206c 6967 6874 2d67 656e 6572 6174 6564   light-generated",
            "+00010270: 2063 7572 7265 6e74 2028 6f72 2070 686f   current (or pho",
            "+00010280: 746f 6375 7272 656e 7429 2061 7420 7265  tocurrent) at re",
            "+00010290: 6665 7265 6e63 6520 636f 6e64 6974 696f  ference conditio",
            "+000102a0: 6e73 2c0a 2020 2020 2020 2020 696e 2061  ns,.        in a",
            "+000102b0: 6d70 6572 6573 2e0a 0a20 2020 2049 5f6f  mperes...    I_o",
            "+000102c0: 5f72 6566 203a 2066 6c6f 6174 0a20 2020  _ref : float.   ",
            "+000102d0: 2020 2020 2054 6865 2064 6172 6b20 6f72       The dark or",
            "+000102e0: 2064 696f 6465 2072 6576 6572 7365 2073   diode reverse s",
            "+000102f0: 6174 7572 6174 696f 6e20 6375 7272 656e  aturation curren",
            "+00010300: 7420 6174 2072 6566 6572 656e 6365 2063  t at reference c",
            "+00010310: 6f6e 6469 7469 6f6e 732c 0a20 2020 2020  onditions,.     ",
            "+00010320: 2020 2069 6e20 616d 7065 7265 732e 0a0a     in amperes...",
            "+00010330: 2020 2020 525f 7368 5f72 6566 203a 2066      R_sh_ref : f",
            "+00010340: 6c6f 6174 0a20 2020 2020 2020 2054 6865  loat.        The",
            "+00010350: 2073 6875 6e74 2072 6573 6973 7461 6e63   shunt resistanc",
            "+00010360: 6520 6174 2072 6566 6572 656e 6365 2063  e at reference c",
            "+00010370: 6f6e 6469 7469 6f6e 732c 2069 6e20 6f68  onditions, in oh",
            "+00010380: 6d73 2e0a 0a20 2020 2052 5f73 203a 2066  ms...    R_s : f",
            "+00010390: 6c6f 6174 0a20 2020 2020 2020 2054 6865  loat.        The",
            "+000103a0: 2073 6572 6965 7320 7265 7369 7374 616e   series resistan",
            "+000103b0: 6365 2061 7420 7265 6665 7265 6e63 6520  ce at reference ",
            "+000103c0: 636f 6e64 6974 696f 6e73 2c20 696e 206f  conditions, in o",
            "+000103d0: 686d 732e 0a0a 2020 2020 4164 6a75 7374  hms...    Adjust",
            "+000103e0: 203a 2066 6c6f 6174 0a20 2020 2020 2020   : float.       ",
            "+000103f0: 2054 6865 2061 646a 7573 746d 656e 7420   The adjustment ",
            "+00010400: 746f 2074 6865 2074 656d 7065 7261 7475  to the temperatu",
            "+00010410: 7265 2063 6f65 6666 6963 6965 6e74 2066  re coefficient f",
            "+00010420: 6f72 2073 686f 7274 2063 6972 6375 6974  or short circuit",
            "+00010430: 0a20 2020 2020 2020 2063 7572 7265 6e74  .        current",
            "+00010440: 2c20 696e 2070 6572 6365 6e74 0a0a 2020  , in percent..  ",
            "+00010450: 2020 4567 5265 6620 3a20 666c 6f61 740a    EgRef : float.",
            "+00010460: 2020 2020 2020 2020 5468 6520 656e 6572          The ener",
            "+00010470: 6779 2062 616e 6467 6170 2061 7420 7265  gy bandgap at re",
            "+00010480: 6665 7265 6e63 6520 7465 6d70 6572 6174  ference temperat",
            "+00010490: 7572 6520 696e 2075 6e69 7473 206f 6620  ure in units of ",
            "+000104a0: 6556 2e0a 2020 2020 2020 2020 312e 3132  eV..        1.12",
            "+000104b0: 3120 6556 2066 6f72 2063 7279 7374 616c  1 eV for crystal",
            "+000104c0: 6c69 6e65 2073 696c 6963 6f6e 2e20 4567  line silicon. Eg",
            "+000104d0: 5265 6620 6d75 7374 2062 6520 3e30 2e20  Ref must be >0. ",
            "+000104e0: 2046 6f72 2070 6172 616d 6574 6572 730a   For parameters.",
            "+000104f0: 2020 2020 2020 2020 6672 6f6d 2074 6865          from the",
            "+00010500: 2053 414d 2043 4543 206d 6f64 756c 6520   SAM CEC module ",
            "+00010510: 6461 7461 6261 7365 2c20 4567 5265 663d  database, EgRef=",
            "+00010520: 312e 3132 3120 6973 2069 6d70 6c69 6369  1.121 is implici",
            "+00010530: 7420 666f 7220 616c 6c0a 2020 2020 2020  t for all.      ",
            "+00010540: 2020 6365 6c6c 2074 7970 6573 2069 6e20    cell types in ",
            "+00010550: 7468 6520 7061 7261 6d65 7465 7220 6573  the parameter es",
            "+00010560: 7469 6d61 7469 6f6e 2061 6c67 6f72 6974  timation algorit",
            "+00010570: 686d 2075 7365 6420 6279 204e 5245 4c2e  hm used by NREL.",
            "+00010580: 0a0a 2020 2020 6445 6764 5420 3a20 666c  ..    dEgdT : fl",
            "+00010590: 6f61 740a 2020 2020 2020 2020 5468 6520  oat.        The ",
            "+000105a0: 7465 6d70 6572 6174 7572 6520 6465 7065  temperature depe",
            "+000105b0: 6e64 656e 6365 206f 6620 7468 6520 656e  ndence of the en",
            "+000105c0: 6572 6779 2062 616e 6467 6170 2061 7420  ergy bandgap at ",
            "+000105d0: 7265 6665 7265 6e63 650a 2020 2020 2020  reference.      ",
            "+000105e0: 2020 636f 6e64 6974 696f 6e73 2069 6e20    conditions in ",
            "+000105f0: 756e 6974 7320 6f66 2031 2f4b 2e20 4d61  units of 1/K. Ma",
            "+00010600: 7920 6265 2065 6974 6865 7220 6120 7363  y be either a sc",
            "+00010610: 616c 6172 2076 616c 7565 0a20 2020 2020  alar value.     ",
            "+00010620: 2020 2028 652e 672e 202d 302e 3030 3032     (e.g. -0.0002",
            "+00010630: 3637 3720 6173 2069 6e20 5b33 5d29 206f  677 as in [3]) o",
            "+00010640: 7220 6120 4461 7461 4672 616d 6520 2874  r a DataFrame (t",
            "+00010650: 6869 7320 6d61 7920 6265 2075 7365 6675  his may be usefu",
            "+00010660: 6c20 6966 0a20 2020 2020 2020 2064 4567  l if.        dEg",
            "+00010670: 6454 2069 7320 6120 6d6f 6465 6c65 6420  dT is a modeled ",
            "+00010680: 6173 2061 2066 756e 6374 696f 6e20 6f66  as a function of",
            "+00010690: 2074 656d 7065 7261 7475 7265 292e 2046   temperature). F",
            "+000106a0: 6f72 2070 6172 616d 6574 6572 7320 6672  or parameters fr",
            "+000106b0: 6f6d 0a20 2020 2020 2020 2074 6865 2053  om.        the S",
            "+000106c0: 414d 2043 4543 206d 6f64 756c 6520 6461  AM CEC module da",
            "+000106d0: 7461 6261 7365 2c20 6445 6764 543d 2d30  tabase, dEgdT=-0",
            "+000106e0: 2e30 3030 3236 3737 2069 7320 696d 706c  .0002677 is impl",
            "+000106f0: 6963 6974 2066 6f72 2061 6c6c 2063 656c  icit for all cel",
            "+00010700: 6c0a 2020 2020 2020 2020 7479 7065 7320  l.        types ",
            "+00010710: 696e 2074 6865 2070 6172 616d 6574 6572  in the parameter",
            "+00010720: 2065 7374 696d 6174 696f 6e20 616c 676f   estimation algo",
            "+00010730: 7269 7468 6d20 7573 6564 2062 7920 4e52  rithm used by NR",
            "+00010740: 454c 2e0a 0a20 2020 2069 7272 6164 5f72  EL...    irrad_r",
            "+00010750: 6566 203a 2066 6c6f 6174 2c20 6465 6661  ef : float, defa",
            "+00010760: 756c 7420 3130 3030 0a20 2020 2020 2020  ult 1000.       ",
            "+00010770: 2052 6566 6572 656e 6365 2069 7272 6164   Reference irrad",
            "+00010780: 6961 6e63 6520 696e 2057 2f6d 5e32 2e0a  iance in W/m^2..",
            "+00010790: 0a20 2020 2074 656d 705f 7265 6620 3a20  .    temp_ref : ",
            "+000107a0: 666c 6f61 742c 2064 6566 6175 6c74 2032  float, default 2",
            "+000107b0: 350a 2020 2020 2020 2020 5265 6665 7265  5.        Refere",
            "+000107c0: 6e63 6520 6365 6c6c 2074 656d 7065 7261  nce cell tempera",
            "+000107d0: 7475 7265 2069 6e20 432e 0a0a 2020 2020  ture in C...    ",
            "+000107e0: 5265 7475 726e 730a 2020 2020 2d2d 2d2d  Returns.    ----",
            "+000107f0: 2d2d 2d0a 2020 2020 5475 706c 6520 6f66  ---.    Tuple of",
            "+00010800: 2074 6865 2066 6f6c 6c6f 7769 6e67 2072   the following r",
            "+00010810: 6573 756c 7473 3a0a 0a20 2020 2070 686f  esults:..    pho",
            "+00010820: 746f 6375 7272 656e 7420 3a20 6e75 6d65  tocurrent : nume",
            "+00010830: 7269 630a 2020 2020 2020 2020 4c69 6768  ric.        Ligh",
            "+00010840: 742d 6765 6e65 7261 7465 6420 6375 7272  t-generated curr",
            "+00010850: 656e 7420 696e 2061 6d70 6572 6573 0a0a  ent in amperes..",
            "+00010860: 2020 2020 7361 7475 7261 7469 6f6e 5f63      saturation_c",
            "+00010870: 7572 7265 6e74 203a 206e 756d 6572 6963  urrent : numeric",
            "+00010880: 0a20 2020 2020 2020 2044 696f 6465 2073  .        Diode s",
            "+00010890: 6174 7572 6174 696f 6e20 6375 7265 6e74  aturation curent",
            "+000108a0: 2069 6e20 616d 7065 7265 730a 0a20 2020   in amperes..   ",
            "+000108b0: 2072 6573 6973 7461 6e63 655f 7365 7269   resistance_seri",
            "+000108c0: 6573 203a 206e 756d 6572 6963 0a20 2020  es : numeric.   ",
            "+000108d0: 2020 2020 2053 6572 6965 7320 7265 7369       Series resi",
            "+000108e0: 7374 616e 6365 2069 6e20 6f68 6d73 0a0a  stance in ohms..",
            "+000108f0: 2020 2020 7265 7369 7374 616e 6365 5f73      resistance_s",
            "+00010900: 6875 6e74 203a 206e 756d 6572 6963 0a20  hunt : numeric. ",
            "+00010910: 2020 2020 2020 2053 6875 6e74 2072 6573         Shunt res",
            "+00010920: 6973 7461 6e63 6520 696e 206f 686d 730a  istance in ohms.",
            "+00010930: 0a20 2020 206e 4e73 5674 6820 3a20 6e75  .    nNsVth : nu",
            "+00010940: 6d65 7269 630a 2020 2020 2020 2020 5468  meric.        Th",
            "+00010950: 6520 7072 6f64 7563 7420 6f66 2074 6865  e product of the",
            "+00010960: 2075 7375 616c 2064 696f 6465 2069 6465   usual diode ide",
            "+00010970: 616c 6974 7920 6661 6374 6f72 2028 6e2c  ality factor (n,",
            "+00010980: 2075 6e69 746c 6573 7329 2c0a 2020 2020   unitless),.    ",
            "+00010990: 2020 2020 6e75 6d62 6572 206f 6620 6365      number of ce",
            "+000109a0: 6c6c 7320 696e 2073 6572 6965 7320 284e  lls in series (N",
            "+000109b0: 7329 2c20 616e 6420 6365 6c6c 2074 6865  s), and cell the",
            "+000109c0: 726d 616c 2076 6f6c 7461 6765 2061 740a  rmal voltage at.",
            "+000109d0: 2020 2020 2020 2020 7370 6563 6966 6965          specifie",
            "+000109e0: 6420 6566 6665 6374 6976 6520 6972 7261  d effective irra",
            "+000109f0: 6469 616e 6365 2061 6e64 2063 656c 6c20  diance and cell ",
            "+00010a00: 7465 6d70 6572 6174 7572 652e 0a0a 2020  temperature...  ",
            "+00010a10: 2020 5265 6665 7265 6e63 6573 0a20 2020    References.   ",
            "+00010a20: 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020   ----------.    ",
            "+00010a30: 2e2e 205b 315d 2041 2e20 446f 626f 732c  .. [1] A. Dobos,",
            "+00010a40: 2022 416e 2049 6d70 726f 7665 6420 436f   \"An Improved Co",
            "+00010a50: 6566 6669 6369 656e 7420 4361 6c63 756c  efficient Calcul",
            "+00010a60: 6174 6f72 2066 6f72 2074 6865 2043 616c  ator for the Cal",
            "+00010a70: 6966 6f72 6e69 610a 2020 2020 2020 2045  ifornia.       E",
            "+00010a80: 6e65 7267 7920 436f 6d6d 6973 7369 6f6e  nergy Commission",
            "+00010a90: 2036 2050 6172 616d 6574 6572 2050 686f   6 Parameter Pho",
            "+00010aa0: 746f 766f 6c74 6169 6320 4d6f 6475 6c65  tovoltaic Module",
            "+00010ab0: 204d 6f64 656c 222c 204a 6f75 726e 616c   Model\", Journal",
            "+00010ac0: 206f 660a 2020 2020 2020 2053 6f6c 6172   of.       Solar",
            "+00010ad0: 2045 6e65 7267 7920 456e 6769 6e65 6572   Energy Engineer",
            "+00010ae0: 696e 672c 2076 6f6c 2031 3334 2c20 3230  ing, vol 134, 20",
            "+00010af0: 3132 2e0a 0a20 2020 202e 2e20 5b32 5d20  12...    .. [2] ",
            "+00010b00: 5379 7374 656d 2041 6476 6973 6f72 204d  System Advisor M",
            "+00010b10: 6f64 656c 2077 6562 2070 6167 652e 2068  odel web page. h",
            "+00010b20: 7474 7073 3a2f 2f73 616d 2e6e 7265 6c2e  ttps://sam.nrel.",
            "+00010b30: 676f 762e 0a0a 2020 2020 2e2e 205b 335d  gov...    .. [3]",
            "+00010b40: 2057 2e20 4465 2053 6f74 6f20 6574 2061   W. De Soto et a",
            "+00010b50: 6c2e 2c20 2249 6d70 726f 7665 6d65 6e74  l., \"Improvement",
            "+00010b60: 2061 6e64 2076 616c 6964 6174 696f 6e20   and validation ",
            "+00010b70: 6f66 2061 206d 6f64 656c 2066 6f72 0a20  of a model for. ",
            "+00010b80: 2020 2020 2020 7068 6f74 6f76 6f6c 7461        photovolta",
            "+00010b90: 6963 2061 7272 6179 2070 6572 666f 726d  ic array perform",
            "+00010ba0: 616e 6365 222c 2053 6f6c 6172 2045 6e65  ance\", Solar Ene",
            "+00010bb0: 7267 792c 2076 6f6c 2038 302c 2070 702e  rgy, vol 80, pp.",
            "+00010bc0: 2037 382d 3838 2c0a 2020 2020 2020 2032   78-88,.       2",
            "+00010bd0: 3030 362e 0a0a 2020 2020 5365 6520 416c  006...    See Al",
            "+00010be0: 736f 0a20 2020 202d 2d2d 2d2d 2d2d 2d0a  so.    --------.",
            "+00010bf0: 2020 2020 6361 6c63 7061 7261 6d73 5f64      calcparams_d",
            "+00010c00: 6573 6f74 6f0a 2020 2020 7369 6e67 6c65  esoto.    single",
            "+00010c10: 6469 6f64 650a 2020 2020 7265 7472 6965  diode.    retrie",
            "+00010c20: 7665 5f73 616d 0a0a 2020 2020 2727 270a  ve_sam..    '''.",
            "+00010c30: 0a20 2020 2023 2070 6173 7320 6164 6a75  .    # pass adju",
            "+00010c40: 7374 6564 2074 656d 7065 7261 7475 7265  sted temperature",
            "+00010c50: 2063 6f65 6666 6963 6965 6e74 2074 6f20   coefficient to ",
            "+00010c60: 6465 736f 746f 0a20 2020 2072 6574 7572  desoto.    retur",
            "+00010c70: 6e20 6361 6c63 7061 7261 6d73 5f64 6573  n calcparams_des",
            "+00010c80: 6f74 6f28 6566 6665 6374 6976 655f 6972  oto(effective_ir",
            "+00010c90: 7261 6469 616e 6365 2c20 7465 6d70 5f63  radiance, temp_c",
            "+00010ca0: 656c 6c2c 0a20 2020 2020 2020 2020 2020  ell,.           ",
            "+00010cb0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00010cc0: 2020 616c 7068 615f 7363 2a28 312e 3020    alpha_sc*(1.0 ",
            "+00010cd0: 2d20 4164 6a75 7374 2f31 3030 292c 0a20  - Adjust/100),. ",
            "+00010ce0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00010cf0: 2020 2020 2020 2020 2020 2020 615f 7265              a_re",
            "+00010d00: 662c 2049 5f4c 5f72 6566 2c20 495f 6f5f  f, I_L_ref, I_o_",
            "+00010d10: 7265 662c 0a20 2020 2020 2020 2020 2020  ref,.           ",
            " 00010d20: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00010d30: 2020 2052 5f73 685f 6578 703d 352e 352c     R_sh_exp=5.5,",
            "+00010d30: 2020 525f 7368 5f72 6566 2c20 525f 732c    R_sh_ref, R_s,",
            " 00010d40: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00010d50: 2020 2020 2020 2045 6752 6566 3d31 2e31         EgRef=1.1",
            "-00010d60: 3231 2c0a 2020 2020 2020 2020 2020 2020  21,.            ",
            "-00010d70: 2020 2020 2020 2020 2020 6972 7261 645f            irrad_",
            "-00010d80: 7265 663d 3130 3030 2c20 7465 6d70 5f72  ref=1000, temp_r",
            "-00010d90: 6566 3d32 3529 3a0a 2020 2020 2727 270a  ef=25):.    '''.",
            "-00010da0: 2020 2020 4361 6c63 756c 6174 6573 2066      Calculates f",
            "-00010db0: 6976 6520 7061 7261 6d65 7465 7220 7661  ive parameter va",
            "-00010dc0: 6c75 6573 2066 6f72 2074 6865 2073 696e  lues for the sin",
            "-00010dd0: 676c 6520 6469 6f64 6520 6571 7561 7469  gle diode equati",
            "-00010de0: 6f6e 2061 740a 2020 2020 6566 6665 6374  on at.    effect",
            "-00010df0: 6976 6520 6972 7261 6469 616e 6365 2061  ive irradiance a",
            "-00010e00: 6e64 2063 656c 6c20 7465 6d70 6572 6174  nd cell temperat",
            "-00010e10: 7572 6520 7573 696e 6720 7468 6520 5056  ure using the PV",
            "-00010e20: 7379 7374 2076 360a 2020 2020 6d6f 6465  syst v6.    mode",
            "-00010e30: 6c2e 2020 5468 6520 5056 7379 7374 2076  l.  The PVsyst v",
            "-00010e40: 3620 6d6f 6465 6c20 6973 2064 6573 6372  6 model is descr",
            "-00010e50: 6962 6564 2069 6e20 5b31 5d5f 2c20 5b32  ibed in [1]_, [2",
            "-00010e60: 5d5f 2c20 5b33 5d5f 2e0a 2020 2020 5468  ]_, [3]_..    Th",
            "-00010e70: 6520 6669 7665 2076 616c 7565 7320 7265  e five values re",
            "-00010e80: 7475 726e 6564 2062 7920 6361 6c63 7061  turned by calcpa",
            "-00010e90: 7261 6d73 5f70 7673 7973 7420 6361 6e20  rams_pvsyst can ",
            "-00010ea0: 6265 2075 7365 6420 6279 2073 696e 676c  be used by singl",
            "-00010eb0: 6564 696f 6465 0a20 2020 2074 6f20 6361  ediode.    to ca",
            "-00010ec0: 6c63 756c 6174 6520 616e 2049 5620 6375  lculate an IV cu",
            "-00010ed0: 7276 652e 0a0a 2020 2020 5061 7261 6d65  rve...    Parame",
            "-00010ee0: 7465 7273 0a20 2020 202d 2d2d 2d2d 2d2d  ters.    -------",
            "-00010ef0: 2d2d 2d0a 2020 2020 6566 6665 6374 6976  ---.    effectiv",
            "-00010f00: 655f 6972 7261 6469 616e 6365 203a 206e  e_irradiance : n",
            "-00010f10: 756d 6572 6963 0a20 2020 2020 2020 2054  umeric.        T",
            "-00010f20: 6865 2069 7272 6164 6961 6e63 6520 2857  he irradiance (W",
            "-00010f30: 2f6d 3229 2074 6861 7420 6973 2063 6f6e  /m2) that is con",
            "-00010f40: 7665 7274 6564 2074 6f20 7068 6f74 6f63  verted to photoc",
            "-00010f50: 7572 7265 6e74 2e0a 0a20 2020 2074 656d  urrent...    tem",
            "-00010f60: 705f 6365 6c6c 203a 206e 756d 6572 6963  p_cell : numeric",
            "-00010f70: 0a20 2020 2020 2020 2054 6865 2061 7665  .        The ave",
            "-00010f80: 7261 6765 2063 656c 6c20 7465 6d70 6572  rage cell temper",
            "-00010f90: 6174 7572 6520 6f66 2063 656c 6c73 2077  ature of cells w",
            "-00010fa0: 6974 6869 6e20 6120 6d6f 6475 6c65 2069  ithin a module i",
            "-00010fb0: 6e20 432e 0a0a 2020 2020 616c 7068 615f  n C...    alpha_",
            "-00010fc0: 7363 203a 2066 6c6f 6174 0a20 2020 2020  sc : float.     ",
            "-00010fd0: 2020 2054 6865 2073 686f 7274 2d63 6972     The short-cir",
            "-00010fe0: 6375 6974 2063 7572 7265 6e74 2074 656d  cuit current tem",
            "-00010ff0: 7065 7261 7475 7265 2063 6f65 6666 6963  perature coeffic",
            "-00011000: 6965 6e74 206f 6620 7468 650a 2020 2020  ient of the.    ",
            "-00011010: 2020 2020 6d6f 6475 6c65 2069 6e20 756e      module in un",
            "-00011020: 6974 7320 6f66 2041 2f43 2e0a 0a20 2020  its of A/C...   ",
            "-00011030: 2067 616d 6d61 5f72 6566 203a 2066 6c6f   gamma_ref : flo",
            "-00011040: 6174 0a20 2020 2020 2020 2054 6865 2064  at.        The d",
            "-00011050: 696f 6465 2069 6465 616c 6974 7920 6661  iode ideality fa",
            "-00011060: 6374 6f72 0a0a 2020 2020 6d75 5f67 616d  ctor..    mu_gam",
            "-00011070: 6d61 203a 2066 6c6f 6174 0a20 2020 2020  ma : float.     ",
            "-00011080: 2020 2054 6865 2074 656d 7065 7261 7475     The temperatu",
            "-00011090: 7265 2063 6f65 6666 6963 6965 6e74 2066  re coefficient f",
            "-000110a0: 6f72 2074 6865 2064 696f 6465 2069 6465  or the diode ide",
            "-000110b0: 616c 6974 7920 6661 6374 6f72 2c20 312f  ality factor, 1/",
            "-000110c0: 4b0a 0a20 2020 2049 5f4c 5f72 6566 203a  K..    I_L_ref :",
            "-000110d0: 2066 6c6f 6174 0a20 2020 2020 2020 2054   float.        T",
            "-000110e0: 6865 206c 6967 6874 2d67 656e 6572 6174  he light-generat",
            "-000110f0: 6564 2063 7572 7265 6e74 2028 6f72 2070  ed current (or p",
            "-00011100: 686f 746f 6375 7272 656e 7429 2061 7420  hotocurrent) at ",
            "-00011110: 7265 6665 7265 6e63 6520 636f 6e64 6974  reference condit",
            "-00011120: 696f 6e73 2c0a 2020 2020 2020 2020 696e  ions,.        in",
            "-00011130: 2061 6d70 6572 6573 2e0a 0a20 2020 2049   amperes...    I",
            "-00011140: 5f6f 5f72 6566 203a 2066 6c6f 6174 0a20  _o_ref : float. ",
            "-00011150: 2020 2020 2020 2054 6865 2064 6172 6b20         The dark ",
            "-00011160: 6f72 2064 696f 6465 2072 6576 6572 7365  or diode reverse",
            "-00011170: 2073 6174 7572 6174 696f 6e20 6375 7272   saturation curr",
            "-00011180: 656e 7420 6174 2072 6566 6572 656e 6365  ent at reference",
            "-00011190: 2063 6f6e 6469 7469 6f6e 732c 0a20 2020   conditions,.   ",
            "-000111a0: 2020 2020 2069 6e20 616d 7065 7265 732e       in amperes.",
            "-000111b0: 0a0a 2020 2020 525f 7368 5f72 6566 203a  ..    R_sh_ref :",
            "-000111c0: 2066 6c6f 6174 0a20 2020 2020 2020 2054   float.        T",
            "-000111d0: 6865 2073 6875 6e74 2072 6573 6973 7461  he shunt resista",
            "-000111e0: 6e63 6520 6174 2072 6566 6572 656e 6365  nce at reference",
            "-000111f0: 2063 6f6e 6469 7469 6f6e 732c 2069 6e20   conditions, in ",
            "-00011200: 6f68 6d73 2e0a 0a20 2020 2052 5f73 685f  ohms...    R_sh_",
            "-00011210: 3020 3a20 666c 6f61 740a 2020 2020 2020  0 : float.      ",
            "-00011220: 2020 5468 6520 7368 756e 7420 7265 7369    The shunt resi",
            "-00011230: 7374 616e 6365 2061 7420 7a65 726f 2069  stance at zero i",
            "-00011240: 7272 6164 6961 6e63 6520 636f 6e64 6974  rradiance condit",
            "-00011250: 696f 6e73 2c20 696e 206f 686d 732e 0a0a  ions, in ohms...",
            "-00011260: 2020 2020 525f 7320 3a20 666c 6f61 740a      R_s : float.",
            "-00011270: 2020 2020 2020 2020 5468 6520 7365 7269          The seri",
            "-00011280: 6573 2072 6573 6973 7461 6e63 6520 6174  es resistance at",
            "-00011290: 2072 6566 6572 656e 6365 2063 6f6e 6469   reference condi",
            "-000112a0: 7469 6f6e 732c 2069 6e20 6f68 6d73 2e0a  tions, in ohms..",
            "-000112b0: 0a20 2020 2063 656c 6c73 5f69 6e5f 7365  .    cells_in_se",
            "-000112c0: 7269 6573 203a 2069 6e74 6567 6572 0a20  ries : integer. ",
            "-000112d0: 2020 2020 2020 2054 6865 206e 756d 6265         The numbe",
            "-000112e0: 7220 6f66 2063 656c 6c73 2063 6f6e 6e65  r of cells conne",
            "-000112f0: 6374 6564 2069 6e20 7365 7269 6573 2e0a  cted in series..",
            "-00011300: 0a20 2020 2052 5f73 685f 6578 7020 3a20  .    R_sh_exp : ",
            "-00011310: 666c 6f61 740a 2020 2020 2020 2020 5468  float.        Th",
            "-00011320: 6520 6578 706f 6e65 6e74 2069 6e20 7468  e exponent in th",
            "-00011330: 6520 6571 7561 7469 6f6e 2066 6f72 2073  e equation for s",
            "-00011340: 6875 6e74 2072 6573 6973 7461 6e63 652c  hunt resistance,",
            "-00011350: 2075 6e69 746c 6573 732e 2044 6566 6175   unitless. Defau",
            "-00011360: 6c74 730a 2020 2020 2020 2020 746f 2035  lts.        to 5",
            "-00011370: 2e35 2e0a 0a20 2020 2045 6752 6566 203a  .5...    EgRef :",
            "-00011380: 2066 6c6f 6174 0a20 2020 2020 2020 2054   float.        T",
            "-00011390: 6865 2065 6e65 7267 7920 6261 6e64 6761  he energy bandga",
            "-000113a0: 7020 6174 2072 6566 6572 656e 6365 2074  p at reference t",
            "-000113b0: 656d 7065 7261 7475 7265 2069 6e20 756e  emperature in un",
            "-000113c0: 6974 7320 6f66 2065 562e 0a20 2020 2020  its of eV..     ",
            "-000113d0: 2020 2031 2e31 3231 2065 5620 666f 7220     1.121 eV for ",
            "-000113e0: 6372 7973 7461 6c6c 696e 6520 7369 6c69  crystalline sili",
            "-000113f0: 636f 6e2e 2045 6752 6566 206d 7573 7420  con. EgRef must ",
            "-00011400: 6265 203e 302e 0a0a 2020 2020 6972 7261  be >0...    irra",
            "-00011410: 645f 7265 6620 3a20 666c 6f61 742c 2064  d_ref : float, d",
            "-00011420: 6566 6175 6c74 2031 3030 300a 2020 2020  efault 1000.    ",
            "-00011430: 2020 2020 5265 6665 7265 6e63 6520 6972      Reference ir",
            "-00011440: 7261 6469 616e 6365 2069 6e20 572f 6d5e  radiance in W/m^",
            "-00011450: 322e 0a0a 2020 2020 7465 6d70 5f72 6566  2...    temp_ref",
            "-00011460: 203a 2066 6c6f 6174 2c20 6465 6661 756c   : float, defaul",
            "-00011470: 7420 3235 0a20 2020 2020 2020 2052 6566  t 25.        Ref",
            "-00011480: 6572 656e 6365 2063 656c 6c20 7465 6d70  erence cell temp",
            "-00011490: 6572 6174 7572 6520 696e 2043 2e0a 0a20  erature in C... ",
            "-000114a0: 2020 2052 6574 7572 6e73 0a20 2020 202d     Returns.    -",
            "-000114b0: 2d2d 2d2d 2d2d 0a20 2020 2054 7570 6c65  ------.    Tuple",
            "-000114c0: 206f 6620 7468 6520 666f 6c6c 6f77 696e   of the followin",
            "-000114d0: 6720 7265 7375 6c74 733a 0a0a 2020 2020  g results:..    ",
            "-000114e0: 7068 6f74 6f63 7572 7265 6e74 203a 206e  photocurrent : n",
            "-000114f0: 756d 6572 6963 0a20 2020 2020 2020 204c  umeric.        L",
            "-00011500: 6967 6874 2d67 656e 6572 6174 6564 2063  ight-generated c",
            "-00011510: 7572 7265 6e74 2069 6e20 616d 7065 7265  urrent in ampere",
            "-00011520: 730a 0a20 2020 2073 6174 7572 6174 696f  s..    saturatio",
            "-00011530: 6e5f 6375 7272 656e 7420 3a20 6e75 6d65  n_current : nume",
            "-00011540: 7269 630a 2020 2020 2020 2020 4469 6f64  ric.        Diod",
            "-00011550: 6520 7361 7475 7261 7469 6f6e 2063 7572  e saturation cur",
            "-00011560: 7265 6e74 2069 6e20 616d 7065 7265 730a  rent in amperes.",
            "-00011570: 0a20 2020 2072 6573 6973 7461 6e63 655f  .    resistance_",
            "-00011580: 7365 7269 6573 203a 206e 756d 6572 6963  series : numeric",
            "-00011590: 0a20 2020 2020 2020 2053 6572 6965 7320  .        Series ",
            "-000115a0: 7265 7369 7374 616e 6365 2069 6e20 6f68  resistance in oh",
            "-000115b0: 6d73 0a0a 2020 2020 7265 7369 7374 616e  ms..    resistan",
            "-000115c0: 6365 5f73 6875 6e74 203a 206e 756d 6572  ce_shunt : numer",
            "-000115d0: 6963 0a20 2020 2020 2020 2053 6875 6e74  ic.        Shunt",
            "-000115e0: 2072 6573 6973 7461 6e63 6520 696e 206f   resistance in o",
            "-000115f0: 686d 730a 0a20 2020 206e 4e73 5674 6820  hms..    nNsVth ",
            "-00011600: 3a20 6e75 6d65 7269 630a 2020 2020 2020  : numeric.      ",
            "-00011610: 2020 5468 6520 7072 6f64 7563 7420 6f66    The product of",
            "-00011620: 2074 6865 2075 7375 616c 2064 696f 6465   the usual diode",
            "-00011630: 2069 6465 616c 6974 7920 6661 6374 6f72   ideality factor",
            "-00011640: 2028 6e2c 2075 6e69 746c 6573 7329 2c0a   (n, unitless),.",
            "-00011650: 2020 2020 2020 2020 6e75 6d62 6572 206f          number o",
            "-00011660: 6620 6365 6c6c 7320 696e 2073 6572 6965  f cells in serie",
            "-00011670: 7320 284e 7329 2c20 616e 6420 6365 6c6c  s (Ns), and cell",
            "-00011680: 2074 6865 726d 616c 2076 6f6c 7461 6765   thermal voltage",
            "-00011690: 2061 740a 2020 2020 2020 2020 7370 6563   at.        spec",
            "-000116a0: 6966 6965 6420 6566 6665 6374 6976 6520  ified effective ",
            "-000116b0: 6972 7261 6469 616e 6365 2061 6e64 2063  irradiance and c",
            "-000116c0: 656c 6c20 7465 6d70 6572 6174 7572 652e  ell temperature.",
            "-000116d0: 0a0a 2020 2020 5265 6665 7265 6e63 6573  ..    References",
            "-000116e0: 0a20 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a  .    ----------.",
            "-000116f0: 2020 2020 2e2e 205b 315d 204b 2e20 5361      .. [1] K. Sa",
            "-00011700: 7565 722c 2054 2e20 526f 6573 736c 6572  uer, T. Roessler",
            "-00011710: 2c20 432e 2057 2e20 4861 6e73 656e 2c20  , C. W. Hansen, ",
            "-00011720: 4d6f 6465 6c69 6e67 2074 6865 2049 7272  Modeling the Irr",
            "-00011730: 6164 6961 6e63 6520 616e 640a 2020 2020  adiance and.    ",
            "-00011740: 2020 2054 656d 7065 7261 7475 7265 2044     Temperature D",
            "-00011750: 6570 656e 6465 6e63 6520 6f66 2050 686f  ependence of Pho",
            "-00011760: 746f 766f 6c74 6169 6320 4d6f 6475 6c65  tovoltaic Module",
            "-00011770: 7320 696e 2050 5673 7973 742c 0a20 2020  s in PVsyst,.   ",
            "-00011780: 2020 2020 4945 4545 204a 6f75 726e 616c      IEEE Journal",
            "-00011790: 206f 6620 5068 6f74 6f76 6f6c 7461 6963   of Photovoltaic",
            "-000117a0: 7320 7635 2831 292c 204a 616e 7561 7279  s v5(1), January",
            "-000117b0: 2032 3031 352e 0a0a 2020 2020 2e2e 205b   2015...    .. [",
            "-000117c0: 325d 2041 2e20 4d65 726d 6f75 642c 2050  2] A. Mermoud, P",
            "-000117d0: 5620 6d6f 6475 6c65 7320 6d6f 6465 6c6c  V modules modell",
            "-000117e0: 696e 672c 2050 7265 7365 6e74 6174 696f  ing, Presentatio",
            "-000117f0: 6e20 6174 2074 6865 2032 6e64 2050 560a  n at the 2nd PV.",
            "-00011800: 2020 2020 2020 2050 6572 666f 726d 616e         Performan",
            "-00011810: 6365 204d 6f64 656c 696e 6720 576f 726b  ce Modeling Work",
            "-00011820: 7368 6f70 2c20 5361 6e74 6120 436c 6172  shop, Santa Clar",
            "-00011830: 612c 2043 412c 204d 6179 2032 3031 330a  a, CA, May 2013.",
            "-00011840: 0a20 2020 202e 2e20 5b33 5d20 412e 204d  .    .. [3] A. M",
            "-00011850: 6572 6d6f 7564 2c20 542e 204c 656a 6575  ermoud, T. Lejeu",
            "-00011860: 6e65 2c20 5065 7266 6f72 6d61 6e63 6520  ne, Performance ",
            "-00011870: 4173 7365 7373 6d65 6e74 206f 6620 6120  Assessment of a ",
            "-00011880: 5369 6d75 6c61 7469 6f6e 204d 6f64 656c  Simulation Model",
            "-00011890: 0a20 2020 2020 2020 666f 7220 5056 206d  .       for PV m",
            "-000118a0: 6f64 756c 6573 206f 6620 616e 7920 6176  odules of any av",
            "-000118b0: 6169 6c61 626c 6520 7465 6368 6e6f 6c6f  ailable technolo",
            "-000118c0: 6779 2c20 3235 7468 2045 7572 6f70 6561  gy, 25th Europea",
            "-000118d0: 6e20 5068 6f74 6f76 6f6c 7461 6963 0a20  n Photovoltaic. ",
            "-000118e0: 2020 2020 2020 536f 6c61 7220 456e 6572        Solar Ener",
            "-000118f0: 6779 2043 6f6e 6665 7265 6e63 652c 2056  gy Conference, V",
            "-00011900: 616c 656e 6369 612c 2053 7061 696e 2c20  alencia, Spain, ",
            "-00011910: 5365 7074 2e20 3230 3130 0a0a 2020 2020  Sept. 2010..    ",
            "-00011920: 5365 6520 416c 736f 0a20 2020 202d 2d2d  See Also.    ---",
            "-00011930: 2d2d 2d2d 2d0a 2020 2020 6361 6c63 7061  -----.    calcpa",
            "-00011940: 7261 6d73 5f64 6573 6f74 6f0a 2020 2020  rams_desoto.    ",
            "-00011950: 7369 6e67 6c65 6469 6f64 650a 0a20 2020  singlediode..   ",
            "-00011960: 2027 2727 0a0a 2020 2020 2320 426f 6c74   '''..    # Bolt",
            "-00011970: 7a6d 616e 6e20 636f 6e73 7461 6e74 2069  zmann constant i",
            "-00011980: 6e20 4a2f 4b0a 2020 2020 6b20 3d20 636f  n J/K.    k = co",
            "-00011990: 6e73 7461 6e74 732e 6b0a 0a20 2020 2023  nstants.k..    #",
            "-000119a0: 2065 6c65 6d65 6e74 6172 7920 6368 6172   elementary char",
            "-000119b0: 6765 2069 6e20 636f 756c 6f6d 620a 2020  ge in coulomb.  ",
            "-000119c0: 2020 7120 3d20 636f 6e73 7461 6e74 732e    q = constants.",
            "-000119d0: 650a 0a20 2020 2023 2072 6566 6572 656e  e..    # referen",
            "-000119e0: 6365 2074 656d 7065 7261 7475 7265 0a20  ce temperature. ",
            "-000119f0: 2020 2054 7265 665f 4b20 3d20 7465 6d70     Tref_K = temp",
            "-00011a00: 5f72 6566 202b 2032 3733 2e31 350a 2020  _ref + 273.15.  ",
            "-00011a10: 2020 5463 656c 6c5f 4b20 3d20 7465 6d70    Tcell_K = temp",
            "-00011a20: 5f63 656c 6c20 2b20 3237 332e 3135 0a0a  _cell + 273.15..",
            "-00011a30: 2020 2020 6761 6d6d 6120 3d20 6761 6d6d      gamma = gamm",
            "-00011a40: 615f 7265 6620 2b20 6d75 5f67 616d 6d61  a_ref + mu_gamma",
            "-00011a50: 202a 2028 5463 656c 6c5f 4b20 2d20 5472   * (Tcell_K - Tr",
            "-00011a60: 6566 5f4b 290a 2020 2020 6e4e 7356 7468  ef_K).    nNsVth",
            "-00011a70: 203d 2067 616d 6d61 202a 206b 202f 2071   = gamma * k / q",
            "-00011a80: 202a 2063 656c 6c73 5f69 6e5f 7365 7269   * cells_in_seri",
            "-00011a90: 6573 202a 2054 6365 6c6c 5f4b 0a0a 2020  es * Tcell_K..  ",
            "-00011aa0: 2020 494c 203d 2065 6666 6563 7469 7665    IL = effective",
            "-00011ab0: 5f69 7272 6164 6961 6e63 6520 2f20 6972  _irradiance / ir",
            "-00011ac0: 7261 645f 7265 6620 2a20 5c0a 2020 2020  rad_ref * \\.    ",
            "-00011ad0: 2020 2020 2849 5f4c 5f72 6566 202b 2061      (I_L_ref + a",
            "-00011ae0: 6c70 6861 5f73 6320 2a20 2854 6365 6c6c  lpha_sc * (Tcell",
            "-00011af0: 5f4b 202d 2054 7265 665f 4b29 290a 0a20  _K - Tref_K)).. ",
            "-00011b00: 2020 2049 3020 3d20 495f 6f5f 7265 6620     I0 = I_o_ref ",
            "-00011b10: 2a20 2828 5463 656c 6c5f 4b20 2f20 5472  * ((Tcell_K / Tr",
            "-00011b20: 6566 5f4b 2920 2a2a 2033 2920 2a20 5c0a  ef_K) ** 3) * \\.",
            "-00011b30: 2020 2020 2020 2020 286e 702e 6578 7028          (np.exp(",
            "-00011b40: 2871 202a 2045 6752 6566 2920 2f20 286b  (q * EgRef) / (k",
            "-00011b50: 202a 2067 616d 6d61 2920 2a20 2831 202f   * gamma) * (1 /",
            "-00011b60: 2054 7265 665f 4b20 2d20 3120 2f20 5463   Tref_K - 1 / Tc",
            "-00011b70: 656c 6c5f 4b29 2929 0a0a 2020 2020 5273  ell_K)))..    Rs",
            "-00011b80: 685f 746d 7020 3d20 5c0a 2020 2020 2020  h_tmp = \\.      ",
            "-00011b90: 2020 2852 5f73 685f 7265 6620 2d20 525f    (R_sh_ref - R_",
            "-00011ba0: 7368 5f30 202a 206e 702e 6578 7028 2d52  sh_0 * np.exp(-R",
            "-00011bb0: 5f73 685f 6578 7029 2920 2f20 2831 2e30  _sh_exp)) / (1.0",
            "-00011bc0: 202d 206e 702e 6578 7028 2d52 5f73 685f   - np.exp(-R_sh_",
            "-00011bd0: 6578 7029 290a 2020 2020 5273 685f 6261  exp)).    Rsh_ba",
            "-00011be0: 7365 203d 206e 702e 6d61 7869 6d75 6d28  se = np.maximum(",
            "-00011bf0: 302e 302c 2052 7368 5f74 6d70 290a 0a20  0.0, Rsh_tmp).. ",
            "-00011c00: 2020 2052 7368 203d 2052 7368 5f62 6173     Rsh = Rsh_bas",
            "-00011c10: 6520 2b20 2852 5f73 685f 3020 2d20 5273  e + (R_sh_0 - Rs",
            "-00011c20: 685f 6261 7365 2920 2a20 5c0a 2020 2020  h_base) * \\.    ",
            "-00011c30: 2020 2020 6e70 2e65 7870 282d 525f 7368      np.exp(-R_sh",
            "-00011c40: 5f65 7870 202a 2065 6666 6563 7469 7665  _exp * effective",
            "-00011c50: 5f69 7272 6164 6961 6e63 6520 2f20 6972  _irradiance / ir",
            "-00011c60: 7261 645f 7265 6629 0a0a 2020 2020 5273  rad_ref)..    Rs",
            "-00011c70: 203d 2052 5f73 0a0a 2020 2020 6e75 6d65   = R_s..    nume",
            "-00011c80: 7269 635f 6172 6773 203d 2028 6566 6665  ric_args = (effe",
            "-00011c90: 6374 6976 655f 6972 7261 6469 616e 6365  ctive_irradiance",
            "-00011ca0: 2c20 7465 6d70 5f63 656c 6c29 0a20 2020  , temp_cell).   ",
            "-00011cb0: 2023 2049 4c3a 2070 686f 746f 6375 7272   # IL: photocurr",
            "-00011cc0: 656e 742c 2049 303a 2073 6174 7572 6174  ent, I0: saturat",
            "-00011cd0: 696f 6e5f 6375 7272 656e 742c 2052 733a  ion_current, Rs:",
            "-00011ce0: 2072 6573 6973 7461 6e63 655f 7365 7269   resistance_seri",
            "-00011cf0: 6573 2c0a 2020 2020 2320 5273 683a 2072  es,.    # Rsh: r",
            "-00011d00: 6573 6973 7461 6e63 655f 7368 756e 740a  esistance_shunt.",
            "-00011d10: 2020 2020 6f75 7420 3d20 2849 4c2c 2049      out = (IL, I",
            "-00011d20: 302c 2052 732c 2052 7368 2c20 6e4e 7356  0, Rs, Rsh, nNsV",
            "-00011d30: 7468 290a 0a20 2020 2069 6620 616c 6c28  th)..    if all(",
            "-00011d40: 6d61 7028 6e70 2e69 7373 6361 6c61 722c  map(np.isscalar,",
            "-00011d50: 206e 756d 6572 6963 5f61 7267 7329 293a   numeric_args)):",
            "-00011d60: 0a20 2020 2020 2020 2072 6574 7572 6e20  .        return ",
            "-00011d70: 6f75 740a 0a20 2020 2069 6e64 6578 203d  out..    index =",
            "-00011d80: 2074 6f6f 6c73 2e67 6574 5f70 616e 6461   tools.get_panda",
            "-00011d90: 735f 696e 6465 7828 2a6e 756d 6572 6963  s_index(*numeric",
            "-00011da0: 5f61 7267 7329 0a0a 2020 2020 6966 2069  _args)..    if i",
            "-00011db0: 6e64 6578 2069 7320 4e6f 6e65 3a0a 2020  ndex is None:.  ",
            "-00011dc0: 2020 2020 2020 7265 7475 726e 206e 702e        return np.",
            "-00011dd0: 6272 6f61 6463 6173 745f 6172 7261 7973  broadcast_arrays",
            "-00011de0: 282a 6f75 7429 0a0a 2020 2020 7265 7475  (*out)..    retu",
            "-00011df0: 726e 2074 7570 6c65 2870 642e 5365 7269  rn tuple(pd.Seri",
            "-00011e00: 6573 2861 2c20 696e 6465 783d 696e 6465  es(a, index=inde",
            "-00011e10: 7829 2e72 656e 616d 6528 4e6f 6e65 2920  x).rename(None) ",
            "-00011e20: 666f 7220 6120 696e 206f 7574 290a 0a0a  for a in out)...",
            "-00011e30: 6465 6620 7265 7472 6965 7665 5f73 616d  def retrieve_sam",
            "-00011e40: 286e 616d 653d 4e6f 6e65 2c20 7061 7468  (name=None, path",
            "-00011e50: 3d4e 6f6e 6529 3a0a 2020 2020 2222 220a  =None):.    \"\"\".",
            "-00011e60: 2020 2020 5265 7472 6965 7665 206c 6174      Retrieve lat",
            "-00011e70: 6573 7420 6d6f 6475 6c65 2061 6e64 2069  est module and i",
            "-00011e80: 6e76 6572 7465 7220 696e 666f 2066 726f  nverter info fro",
            "-00011e90: 6d20 6120 6669 6c65 2062 756e 646c 6564  m a file bundled",
            "-00011ea0: 2077 6974 6820 7076 6c69 622c 0a20 2020   with pvlib,.   ",
            "-00011eb0: 2061 2070 6174 6820 6f72 2061 6e20 5552   a path or an UR",
            "-00011ec0: 4c20 286c 696b 6520 5341 4d27 7320 7765  L (like SAM's we",
            "-00011ed0: 6273 6974 6529 2e0a 0a20 2020 2054 6869  bsite)...    Thi",
            "-00011ee0: 7320 6675 6e63 7469 6f6e 2077 696c 6c20  s function will ",
            "-00011ef0: 7265 7472 6965 7665 2065 6974 6865 723a  retrieve either:",
            "-00011f00: 0a0a 2020 2020 2a20 4345 4320 6d6f 6475  ..    * CEC modu",
            "-00011f10: 6c65 2064 6174 6162 6173 650a 2020 2020  le database.    ",
            "-00011f20: 2a20 5361 6e64 6961 204d 6f64 756c 6520  * Sandia Module ",
            "-00011f30: 6461 7461 6261 7365 0a20 2020 202a 2043  database.    * C",
            "-00011f40: 4543 2049 6e76 6572 7465 7220 6461 7461  EC Inverter data",
            "-00011f50: 6261 7365 0a20 2020 202a 2041 6e74 6f6e  base.    * Anton",
            "-00011f60: 2044 7269 6573 7365 2049 6e76 6572 7465   Driesse Inverte",
            "-00011f70: 7220 6461 7461 6261 7365 0a0a 2020 2020  r database..    ",
            "-00011f80: 616e 6420 7265 7475 726e 2069 7420 6173  and return it as",
            "-00011f90: 2061 2070 616e 6461 7320 4461 7461 4672   a pandas DataFr",
            "-00011fa0: 616d 652e 0a0a 2020 2020 2e2e 206e 6f74  ame...    .. not",
            "-00011fb0: 653a 3a0a 2020 2020 2020 2020 4f6e 6c79  e::.        Only",
            "-00011fc0: 2070 726f 7669 6465 206f 6e65 206f 6620   provide one of ",
            "-00011fd0: 6060 6e61 6d65 6060 206f 7220 6060 7061  ``name`` or ``pa",
            "-00011fe0: 7468 6060 2e0a 0a20 2020 2050 6172 616d  th``...    Param",
            "-00011ff0: 6574 6572 730a 2020 2020 2d2d 2d2d 2d2d  eters.    ------",
            "-00012000: 2d2d 2d2d 0a20 2020 206e 616d 6520 3a20  ----.    name : ",
            "-00012010: 7374 7269 6e67 2c20 6f70 7469 6f6e 616c  string, optional",
            "-00012020: 0a20 2020 2020 2020 2055 7365 206f 6e65  .        Use one",
            "-00012030: 206f 6620 7468 6520 666f 6c6c 6f77 696e   of the followin",
            "-00012040: 6720 7374 7269 6e67 7320 746f 2072 6574  g strings to ret",
            "-00012050: 7269 6576 6520 6120 6461 7461 6261 7365  rieve a database",
            "-00012060: 2062 756e 646c 6564 2077 6974 680a 2020   bundled with.  ",
            "-00012070: 2020 2020 2020 7076 6c69 623a 0a0a 2020        pvlib:..  ",
            "-00012080: 2020 2020 2020 2a20 6060 2743 4543 4d6f        * ``'CECMo",
            "-00012090: 6427 6060 202d 2072 6574 7572 6e73 2074  d'`` - returns t",
            "-000120a0: 6865 2043 4543 206d 6f64 756c 6520 6461  he CEC module da",
            "-000120b0: 7461 6261 7365 0a20 2020 2020 2020 202a  tabase.        *",
            "-000120c0: 2060 6027 4345 4349 6e76 6572 7465 7227   ``'CECInverter'",
            "-000120d0: 6060 202d 2072 6574 7572 6e73 2074 6865  `` - returns the",
            "-000120e0: 2043 4543 2049 6e76 6572 7465 7220 6461   CEC Inverter da",
            "-000120f0: 7461 6261 7365 0a20 2020 2020 2020 202a  tabase.        *",
            "-00012100: 2060 6027 5361 6e64 6961 496e 7665 7274   ``'SandiaInvert",
            "-00012110: 6572 2760 6020 2d20 7265 7475 726e 7320  er'`` - returns ",
            "-00012120: 7468 6520 4345 4320 496e 7665 7274 6572  the CEC Inverter",
            "-00012130: 2064 6174 6162 6173 650a 2020 2020 2020   database.      ",
            "-00012140: 2020 2020 2843 4543 2069 7320 6f6e 6c79      (CEC is only",
            "-00012150: 2063 7572 7265 6e74 2069 6e76 6572 7465   current inverte",
            "-00012160: 7220 6462 2061 7661 696c 6162 6c65 3b20  r db available; ",
            "-00012170: 7461 6720 6b65 7074 2066 6f72 0a20 2020  tag kept for.   ",
            "-00012180: 2020 2020 2020 2062 6163 6b77 6172 6473         backwards",
            "-00012190: 2063 6f6d 7061 7469 6269 6c69 7479 290a   compatibility).",
            "-000121a0: 2020 2020 2020 2020 2a20 6060 2753 616e          * ``'San",
            "-000121b0: 6469 614d 6f64 2760 6020 2d20 7265 7475  diaMod'`` - retu",
            "-000121c0: 726e 7320 7468 6520 5361 6e64 6961 204d  rns the Sandia M",
            "-000121d0: 6f64 756c 6520 6461 7461 6261 7365 0a20  odule database. ",
            "-000121e0: 2020 2020 2020 202a 2060 6027 4144 5249         * ``'ADRI",
            "-000121f0: 6e76 6572 7465 7227 6060 202d 2072 6574  nverter'`` - ret",
            "-00012200: 7572 6e73 2074 6865 2041 4452 2049 6e76  urns the ADR Inv",
            "-00012210: 6572 7465 7220 6461 7461 6261 7365 0a0a  erter database..",
            "-00012220: 2020 2020 7061 7468 203a 2073 7472 696e      path : strin",
            "-00012230: 672c 206f 7074 696f 6e61 6c0a 2020 2020  g, optional.    ",
            "-00012240: 2020 2020 5061 7468 2074 6f20 6120 4353      Path to a CS",
            "-00012250: 5620 6669 6c65 206f 7220 6120 5552 4c2e  V file or a URL.",
            "-00012260: 0a0a 2020 2020 5265 7475 726e 730a 2020  ..    Returns.  ",
            "-00012270: 2020 2d2d 2d2d 2d2d 2d0a 2020 2020 4461    -------.    Da",
            "-00012280: 7461 4672 616d 650a 2020 2020 2020 2020  taFrame.        ",
            "-00012290: 4120 4461 7461 4672 616d 6520 636f 6e74  A DataFrame cont",
            "-000122a0: 6169 6e69 6e67 2061 6c6c 2074 6865 2065  aining all the e",
            "-000122b0: 6c65 6d65 6e74 7320 6f66 2074 6865 2064  lements of the d",
            "-000122c0: 6573 6972 6564 2064 6174 6162 6173 652e  esired database.",
            "-000122d0: 0a20 2020 2020 2020 2045 6163 6820 636f  .        Each co",
            "-000122e0: 6c75 6d6e 2072 6570 7265 7365 6e74 7320  lumn represents ",
            "-000122f0: 6120 6d6f 6475 6c65 206f 7220 696e 7665  a module or inve",
            "-00012300: 7274 6572 2c20 616e 6420 6120 7370 6563  rter, and a spec",
            "-00012310: 6966 6963 0a20 2020 2020 2020 2064 6174  ific.        dat",
            "-00012320: 6173 6574 2063 616e 2062 6520 7265 7472  aset can be retr",
            "-00012330: 6965 7665 6420 6279 2074 6865 2063 6f6d  ieved by the com",
            "-00012340: 6d61 6e64 0a0a 2020 2020 5261 6973 6573  mand..    Raises",
            "-00012350: 0a20 2020 202d 2d2d 2d2d 2d0a 2020 2020  .    ------.    ",
            "-00012360: 5661 6c75 6545 7272 6f72 0a20 2020 2020  ValueError.     ",
            "-00012370: 2020 2049 6620 6e6f 2060 606e 616d 6560     If no ``name`",
            "-00012380: 6020 6f72 2060 6070 6174 6860 6020 6973  ` or ``path`` is",
            "-00012390: 2070 726f 7669 6465 642e 0a20 2020 2056   provided..    V",
            "-000123a0: 616c 7565 4572 726f 720a 2020 2020 2020  alueError.      ",
            "-000123b0: 2020 4966 2062 6f74 6820 6060 6e61 6d65    If both ``name",
            "-000123c0: 6060 2061 6e64 2060 6070 6174 6860 6020  `` and ``path`` ",
            "-000123d0: 6172 6520 7072 6f76 6964 6564 2e0a 2020  are provided..  ",
            "-000123e0: 2020 4b65 7945 7272 6f72 0a20 2020 2020    KeyError.     ",
            "-000123f0: 2020 2049 6620 7468 6520 7072 6f76 6964     If the provid",
            "-00012400: 6564 2060 606e 616d 6560 6020 6973 206e  ed ``name`` is n",
            "-00012410: 6f74 2061 2076 616c 6964 2064 6174 6162  ot a valid datab",
            "-00012420: 6173 6520 6e61 6d65 2e0a 0a20 2020 204e  ase name...    N",
            "-00012430: 6f74 6573 0a20 2020 202d 2d2d 2d2d 0a20  otes.    -----. ",
            "-00012440: 2020 2046 696c 6573 2061 7661 696c 6162     Files availab",
            "-00012450: 6c65 2061 740a 2020 2020 2020 2020 6874  le at.        ht",
            "-00012460: 7470 733a 2f2f 6769 7468 7562 2e63 6f6d  tps://github.com",
            "-00012470: 2f4e 5245 4c2f 5341 4d2f 7472 6565 2f64  /NREL/SAM/tree/d",
            "-00012480: 6576 656c 6f70 2f64 6570 6c6f 792f 6c69  evelop/deploy/li",
            "-00012490: 6272 6172 6965 730a 0a20 2020 2045 7861  braries..    Exa",
            "-000124a0: 6d70 6c65 730a 2020 2020 2d2d 2d2d 2d2d  mples.    ------",
            "-000124b0: 2d2d 0a20 2020 2055 7369 6e67 2061 2064  --.    Using a d",
            "-000124c0: 6174 6162 6173 6520 6275 6e64 6c65 6420  atabase bundled ",
            "-000124d0: 7769 7468 2070 766c 6962 3a0a 0a20 2020  with pvlib:..   ",
            "-000124e0: 203e 3e3e 2066 726f 6d20 7076 6c69 6220   >>> from pvlib ",
            "-000124f0: 696d 706f 7274 2070 7673 7973 7465 6d0a  import pvsystem.",
            "-00012500: 2020 2020 3e3e 3e20 696e 7664 6220 3d20      >>> invdb = ",
            "-00012510: 7076 7379 7374 656d 2e72 6574 7269 6576  pvsystem.retriev",
            "-00012520: 655f 7361 6d28 6e61 6d65 3d27 4345 4349  e_sam(name='CECI",
            "-00012530: 6e76 6572 7465 7227 290a 2020 2020 3e3e  nverter').    >>",
            "-00012540: 3e20 696e 7665 7274 6572 203d 2069 6e76  > inverter = inv",
            "-00012550: 6462 2e41 455f 536f 6c61 725f 456e 6572  db.AE_Solar_Ener",
            "-00012560: 6779 5f5f 4145 365f 305f 5f32 3737 565f  gy__AE6_0__277V_",
            "-00012570: 0a20 2020 203e 3e3e 2069 6e76 6572 7465  .    >>> inverte",
            "-00012580: 720a 2020 2020 5661 6320 2020 2020 2020  r.    Vac       ",
            "-00012590: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000125a0: 2020 2032 3737 0a20 2020 2050 736f 2020     277.    Pso  ",
            "-000125b0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000125c0: 2020 3336 2e31 3937 3537 350a 2020 2020    36.197575.    ",
            "-000125d0: 5061 636f 2020 2020 2020 2020 2020 2020  Paco            ",
            "-000125e0: 2020 2020 2020 2020 2020 3630 3030 2e30            6000.0",
            "-000125f0: 0a20 2020 2050 6463 6f20 2020 2020 2020  .    Pdco       ",
            "-00012600: 2020 2020 2020 2020 2020 3631 3538 2e37            6158.7",
            "-00012610: 3436 3039 340a 2020 2020 5664 636f 2020  46094.    Vdco  ",
            "-00012620: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00012630: 2020 2020 2033 3630 2e30 0a20 2020 2043       360.0.    C",
            "-00012640: 3020 2020 2020 2020 2020 2020 2020 2020  0               ",
            "-00012650: 2020 2020 2020 2d30 2e30 3030 3030 320a        -0.000002.",
            "-00012660: 2020 2020 4331 2020 2020 2020 2020 2020      C1          ",
            "-00012670: 2020 2020 2020 2020 2020 202d 302e 3030             -0.00",
            "-00012680: 3030 3236 0a20 2020 2043 3220 2020 2020  0026.    C2     ",
            "-00012690: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000126a0: 2d30 2e30 3031 3235 330a 2020 2020 4333  -0.001253.    C3",
            "-000126b0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000126c0: 2020 2020 2020 2030 2e30 3030 3231 0a20         0.00021. ",
            "-000126d0: 2020 2050 6e74 2020 2020 2020 2020 2020     Pnt          ",
            "-000126e0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000126f0: 312e 380a 2020 2020 5664 636d 6178 2020  1.8.    Vdcmax  ",
            "-00012700: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00012710: 2020 2034 3530 2e30 0a20 2020 2049 6463     450.0.    Idc",
            "-00012720: 6d61 7820 2020 2020 2020 2020 2020 2020  max             ",
            "-00012730: 2020 2020 3137 2e31 3037 3632 380a 2020      17.107628.  ",
            "-00012740: 2020 4d70 7074 5f6c 6f77 2020 2020 2020    Mppt_low      ",
            "-00012750: 2020 2020 2020 2020 2020 2020 2031 3030               100",
            "-00012760: 2e30 0a20 2020 204d 7070 745f 6869 6768  .0.    Mppt_high",
            "-00012770: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00012780: 2020 3435 302e 300a 2020 2020 4345 435f    450.0.    CEC_",
            "-00012790: 4461 7465 2020 2020 2020 2020 2020 2020  Date            ",
            "-000127a0: 2020 2020 2020 2020 204e 614e 0a20 2020           NaN.   ",
            "-000127b0: 2043 4543 5f54 7970 6520 2020 2020 5574   CEC_Type     Ut",
            "-000127c0: 696c 6974 7920 496e 7465 7261 6374 6976  ility Interactiv",
            "-000127d0: 650a 2020 2020 4e61 6d65 3a20 4145 5f53  e.    Name: AE_S",
            "-000127e0: 6f6c 6172 5f45 6e65 7267 795f 5f41 4536  olar_Energy__AE6",
            "-000127f0: 5f30 5f5f 3237 3756 5f2c 2064 7479 7065  _0__277V_, dtype",
            "-00012800: 3a20 6f62 6a65 6374 0a0a 2020 2020 5573  : object..    Us",
            "-00012810: 696e 6720 6120 7265 6d6f 7465 2064 6174  ing a remote dat",
            "-00012820: 6162 6173 652c 2076 6961 2055 524c 3a0a  abase, via URL:.",
            "-00012830: 0a20 2020 203e 3e3e 2075 726c 203d 2022  .    >>> url = \"",
            "-00012840: 6874 7470 733a 2f2f 7261 772e 6769 7468  https://raw.gith",
            "-00012850: 7562 7573 6572 636f 6e74 656e 742e 636f  ubusercontent.co",
            "-00012860: 6d2f 4e52 454c 2f53 414d 2f72 6566 732f  m/NREL/SAM/refs/",
            "-00012870: 6865 6164 732f 6465 7665 6c6f 702f 6465  heads/develop/de",
            "-00012880: 706c 6f79 2f6c 6962 7261 7269 6573 2f43  ploy/libraries/C",
            "-00012890: 4543 2532 3049 6e76 6572 7465 7273 2e63  EC%20Inverters.c",
            "-000128a0: 7376 220a 2020 2020 3e3e 3e20 696e 765f  sv\".    >>> inv_",
            "-000128b0: 6462 203d 2070 7673 7973 7465 6d2e 7265  db = pvsystem.re",
            "-000128c0: 7472 6965 7665 5f73 616d 2870 6174 683d  trieve_sam(path=",
            "-000128d0: 7572 6c29 0a20 2020 203e 3e3e 2069 6e76  url).    >>> inv",
            "-000128e0: 5f64 622e 6b65 7973 2829 0a20 2020 2049  _db.keys().    I",
            "-000128f0: 6e64 6578 285b 2741 4242 5f5f 5056 495f  ndex(['ABB__PVI_",
            "-00012900: 335f 305f 4f55 5444 5f53 5f55 535f 415f  3_0_OUTD_S_US_A_",
            "-00012910: 5f32 3038 565f 272c 2027 4142 425f 5f50  _208V_', 'ABB__P",
            "-00012920: 5649 5f33 5f30 5f4f 5554 445f 535f 5553  VI_3_0_OUTD_S_US",
            "-00012930: 5f41 5f5f 3234 3056 5f27 2c20 2e2e 2e5d  _A__240V_', ...]",
            "-00012940: 2c0a 2020 2020 2020 2020 2020 6474 7970  ,.          dtyp",
            "-00012950: 653d 276f 626a 6563 7427 2c20 6c65 6e67  e='object', leng",
            "-00012960: 7468 3d2e 2e2e 290a 2020 2020 2222 2220  th=...).    \"\"\" ",
            "-00012970: 2023 206e 6f71 613a 2045 3530 310a 2020   # noqa: E501.  ",
            "-00012980: 2020 2320 6572 726f 723a 2070 6174 6820    # error: path ",
            "-00012990: 7761 7320 7072 6576 696f 7573 6c79 2073  was previously s",
            "-000129a0: 696c 656e 746c 7920 6967 6e6f 7265 6420  ilently ignored ",
            "-000129b0: 6966 206e 616d 6520 7761 7320 6769 7665  if name was give",
            "-000129c0: 6e20 4748 2332 3031 380a 2020 2020 6966  n GH#2018.    if",
            "-000129d0: 206e 616d 6520 6973 206e 6f74 204e 6f6e   name is not Non",
            "-000129e0: 6520 616e 6420 7061 7468 2069 7320 6e6f  e and path is no",
            "-000129f0: 7420 4e6f 6e65 3a0a 2020 2020 2020 2020  t None:.        ",
            "-00012a00: 7261 6973 6520 5661 6c75 6545 7272 6f72  raise ValueError",
            "-00012a10: 2822 506c 6561 7365 2070 726f 7669 6465  (\"Please provide",
            "-00012a20: 2065 6974 6865 7220 276e 616d 6527 206f   either 'name' o",
            "-00012a30: 7220 2770 6174 6827 2c20 6e6f 7420 626f  r 'path', not bo",
            "-00012a40: 7468 2e22 290a 2020 2020 656c 6966 206e  th.\").    elif n",
            "-00012a50: 616d 6520 6973 204e 6f6e 6520 616e 6420  ame is None and ",
            "-00012a60: 7061 7468 2069 7320 4e6f 6e65 3a0a 2020  path is None:.  ",
            "-00012a70: 2020 2020 2020 7261 6973 6520 5661 6c75        raise Valu",
            "-00012a80: 6545 7272 6f72 2822 506c 6561 7365 2070  eError(\"Please p",
            "-00012a90: 726f 7669 6465 2065 6974 6865 7220 276e  rovide either 'n",
            "-00012aa0: 616d 6527 206f 7220 2770 6174 6827 2e22  ame' or 'path'.\"",
            "-00012ab0: 290a 2020 2020 656c 6966 206e 616d 6520  ).    elif name ",
            "-00012ac0: 6973 206e 6f74 204e 6f6e 653a 0a20 2020  is not None:.   ",
            "-00012ad0: 2020 2020 2069 6e74 6572 6e61 6c5f 6462       internal_db",
            "-00012ae0: 7320 3d20 7b0a 2020 2020 2020 2020 2020  s = {.          ",
            "-00012af0: 2020 2263 6563 6d6f 6422 3a20 2273 616d    \"cecmod\": \"sam",
            "-00012b00: 2d6c 6962 7261 7279 2d63 6563 2d6d 6f64  -library-cec-mod",
            "-00012b10: 756c 6573 2d32 3031 392d 3033 2d30 352e  ules-2019-03-05.",
            "-00012b20: 6373 7622 2c0a 2020 2020 2020 2020 2020  csv\",.          ",
            "-00012b30: 2020 2273 616e 6469 616d 6f64 223a 2022    \"sandiamod\": \"",
            "-00012b40: 7361 6d2d 6c69 6272 6172 792d 7361 6e64  sam-library-sand",
            "-00012b50: 6961 2d6d 6f64 756c 6573 2d32 3031 352d  ia-modules-2015-",
            "-00012b60: 362d 3330 2e63 7376 222c 0a20 2020 2020  6-30.csv\",.     ",
            "-00012b70: 2020 2020 2020 2022 6164 7269 6e76 6572         \"adrinver",
            "-00012b80: 7465 7222 3a20 2261 6472 2d6c 6962 7261  ter\": \"adr-libra",
            "-00012b90: 7279 2d63 6563 2d69 6e76 6572 7465 7273  ry-cec-inverters",
            "-00012ba0: 2d32 3031 392d 3033 2d30 352e 6373 7622  -2019-03-05.csv\"",
            "-00012bb0: 2c0a 2020 2020 2020 2020 2020 2020 2320  ,.            # ",
            "-00012bc0: 426f 7468 2027 6365 6369 6e76 6572 7465  Both 'cecinverte",
            "-00012bd0: 7227 2061 6e64 2027 7361 6e64 6961 696e  r' and 'sandiain",
            "-00012be0: 7665 7274 6572 272c 2070 6f69 6e74 2074  verter', point t",
            "-00012bf0: 6f20 7361 6d65 2064 6174 6162 6173 650a  o same database.",
            "-00012c00: 2020 2020 2020 2020 2020 2020 2320 746f              # to",
            "-00012c10: 2070 726f 7669 6465 2066 6f72 206f 6c64   provide for old",
            "-00012c20: 2063 6f64 652c 2077 6869 6c65 2061 6c69   code, while ali",
            "-00012c30: 676e 696e 6720 7769 7468 2063 7572 7265  gning with curre",
            "-00012c40: 6e74 2065 7870 6563 7461 7469 6f6e 730a  nt expectations.",
            "-00012c50: 2020 2020 2020 2020 2020 2020 2263 6563              \"cec",
            "-00012c60: 696e 7665 7274 6572 223a 2022 7361 6d2d  inverter\": \"sam-",
            "-00012c70: 6c69 6272 6172 792d 6365 632d 696e 7665  library-cec-inve",
            "-00012c80: 7274 6572 732d 3230 3139 2d30 332d 3035  rters-2019-03-05",
            "-00012c90: 2e63 7376 222c 0a20 2020 2020 2020 2020  .csv\",.         ",
            "-00012ca0: 2020 2022 7361 6e64 6961 696e 7665 7274     \"sandiainvert",
            "-00012cb0: 6572 223a 2022 7361 6d2d 6c69 6272 6172  er\": \"sam-librar",
            "-00012cc0: 792d 6365 632d 696e 7665 7274 6572 732d  y-cec-inverters-",
            "-00012cd0: 3230 3139 2d30 332d 3035 2e63 7376 222c  2019-03-05.csv\",",
            "-00012ce0: 0a20 2020 2020 2020 207d 0a20 2020 2020  .        }.     ",
            "-00012cf0: 2020 2074 7279 3a0a 2020 2020 2020 2020     try:.        ",
            "-00012d00: 2020 2020 6373 7664 6174 615f 7061 7468      csvdata_path",
            "-00012d10: 203d 2050 6174 6828 5f5f 6669 6c65 5f5f   = Path(__file__",
            "-00012d20: 292e 7061 7265 6e74 2e6a 6f69 6e70 6174  ).parent.joinpat",
            "-00012d30: 6828 0a20 2020 2020 2020 2020 2020 2020  h(.             ",
            "-00012d40: 2020 2022 6461 7461 222c 2069 6e74 6572     \"data\", inter",
            "-00012d50: 6e61 6c5f 6462 735b 6e61 6d65 2e6c 6f77  nal_dbs[name.low",
            "-00012d60: 6572 2829 5d0a 2020 2020 2020 2020 2020  er()].          ",
            "-00012d70: 2020 290a 2020 2020 2020 2020 6578 6365    ).        exce",
            "-00012d80: 7074 204b 6579 4572 726f 723a 0a20 2020  pt KeyError:.   ",
            "-00012d90: 2020 2020 2020 2020 2072 6169 7365 204b           raise K",
            "-00012da0: 6579 4572 726f 7228 0a20 2020 2020 2020  eyError(.       ",
            "-00012db0: 2020 2020 2020 2020 2066 2249 6e76 616c           f\"Inval",
            "-00012dc0: 6964 206e 616d 6520 7b6e 616d 657d 2e20  id name {name}. ",
            "-00012dd0: 220a 2020 2020 2020 2020 2020 2020 2020  \".              ",
            "-00012de0: 2020 2b20 6622 5072 6f76 6964 6520 6f6e    + f\"Provide on",
            "-00012df0: 6520 6f66 207b 6c69 7374 2869 6e74 6572  e of {list(inter",
            "-00012e00: 6e61 6c5f 6462 732e 6b65 7973 2829 297d  nal_dbs.keys())}",
            "-00012e10: 2e22 0a20 2020 2020 2020 2020 2020 2029  .\".            )",
            "-00012e20: 2066 726f 6d20 4e6f 6e65 0a20 2020 2065   from None.    e",
            "-00012e30: 6c73 653a 2020 2320 7061 7468 2069 7320  lse:  # path is ",
            "-00012e40: 6e6f 7420 4e6f 6e65 0a20 2020 2020 2020  not None.       ",
            "-00012e50: 2069 6620 7061 7468 2e6c 6f77 6572 2829   if path.lower()",
            "-00012e60: 2e73 7461 7274 7377 6974 6828 2268 7474  .startswith(\"htt",
            "-00012e70: 7022 293a 2020 2320 5552 4c20 6368 6563  p\"):  # URL chec",
            "-00012e80: 6b20 6973 206e 6f74 2063 6173 652d 7365  k is not case-se",
            "-00012e90: 6e73 6974 6976 650a 2020 2020 2020 2020  nsitive.        ",
            "-00012ea0: 2020 2020 7265 7370 6f6e 7365 203d 2075      response = u",
            "-00012eb0: 726c 6f70 656e 2870 6174 6829 2020 2320  rlopen(path)  # ",
            "-00012ec0: 5552 4c20 6973 2063 6173 652d 7365 6e73  URL is case-sens",
            "-00012ed0: 6974 6976 650a 2020 2020 2020 2020 2020  itive.          ",
            "-00012ee0: 2020 6373 7664 6174 615f 7061 7468 203d    csvdata_path =",
            "-00012ef0: 2069 6f2e 5374 7269 6e67 494f 2872 6573   io.StringIO(res",
            "-00012f00: 706f 6e73 652e 7265 6164 2829 2e64 6563  ponse.read().dec",
            "-00012f10: 6f64 6528 6572 726f 7273 3d22 6967 6e6f  ode(errors=\"igno",
            "-00012f20: 7265 2229 290a 2020 2020 2020 2020 656c  re\")).        el",
            "-00012f30: 7365 3a0a 2020 2020 2020 2020 2020 2020  se:.            ",
            "-00012f40: 6373 7664 6174 615f 7061 7468 203d 2070  csvdata_path = p",
            "-00012f50: 6174 680a 2020 2020 7265 7475 726e 205f  ath.    return _",
            "-00012f60: 7061 7273 655f 7261 775f 7361 6d5f 6466  parse_raw_sam_df",
            "-00012f70: 2863 7376 6461 7461 5f70 6174 6829 0a0a  (csvdata_path)..",
            "-00012f80: 0a64 6566 205f 6e6f 726d 616c 697a 655f  .def _normalize_",
            "-00012f90: 7361 6d5f 7072 6f64 7563 745f 6e61 6d65  sam_product_name",
            "-00012fa0: 7328 6e61 6d65 7329 3a0a 2020 2020 2727  s(names):.    ''",
            "-00012fb0: 270a 2020 2020 5265 706c 6163 6520 7370  '.    Replace sp",
            "-00012fc0: 6563 6961 6c20 6368 6172 6163 7465 7273  ecial characters",
            "-00012fd0: 2077 6974 6869 6e20 7468 6520 7072 6f64   within the prod",
            "-00012fe0: 7563 7420 6e61 6d65 7320 746f 206d 616b  uct names to mak",
            "-00012ff0: 6520 7468 656d 206d 6f72 650a 2020 2020  e them more.    ",
            "-00013000: 7375 6974 6162 6c65 2066 6f72 2075 7365  suitable for use",
            "-00013010: 2061 7320 4461 7461 6672 616d 6520 636f   as Dataframe co",
            "-00013020: 6c75 6d6e 206e 616d 6573 2e0a 2020 2020  lumn names..    ",
            "-00013030: 2727 270a 2020 2020 2320 436f 6e74 7269  '''.    # Contri",
            "-00013040: 6275 7465 6420 6279 2041 6e74 6f6e 2044  buted by Anton D",
            "-00013050: 7269 6573 7365 2028 4061 6472 6965 7373  riesse (@adriess",
            "-00013060: 6529 2c20 5056 2050 6572 666f 726d 616e  e), PV Performan",
            "-00013070: 6365 204c 6162 732e 204a 756c 792c 2032  ce Labs. July, 2",
            "-00013080: 3031 390a 0a20 2020 2069 6d70 6f72 7420  019..    import ",
            "-00013090: 7761 726e 696e 6773 0a0a 2020 2020 4241  warnings..    BA",
            "-000130a0: 445f 4348 4152 5320 3d20 2720 2d2e 2829  D_CHARS = ' -.()",
            "-000130b0: 5b5d 3a2b 2f22 2c27 0a20 2020 2047 4f4f  []:+/\",'.    GOO",
            "-000130c0: 445f 4348 4152 5320 3d20 275f 5f5f 5f5f  D_CHARS = '_____",
            "-000130d0: 5f5f 5f5f 5f5f 5f27 0a0a 2020 2020 6d61  _______'..    ma",
            "-000130e0: 7070 696e 6720 3d20 7374 722e 6d61 6b65  pping = str.make",
            "-000130f0: 7472 616e 7328 4241 445f 4348 4152 532c  trans(BAD_CHARS,",
            "-00013100: 2047 4f4f 445f 4348 4152 5329 0a20 2020   GOOD_CHARS).   ",
            "-00013110: 206e 616d 6573 203d 2070 642e 5365 7269   names = pd.Seri",
            "-00013120: 6573 2864 6174 613d 6e61 6d65 7329 0a20  es(data=names). ",
            "-00013130: 2020 206e 6f72 6d5f 6e61 6d65 7320 3d20     norm_names = ",
            "-00013140: 6e61 6d65 732e 7374 722e 7472 616e 736c  names.str.transl",
            "-00013150: 6174 6528 6d61 7070 696e 6729 0a0a 2020  ate(mapping)..  ",
            "-00013160: 2020 6e5f 6475 706c 6963 6174 6573 203d    n_duplicates =",
            "-00013170: 206e 616d 6573 2e64 7570 6c69 6361 7465   names.duplicate",
            "-00013180: 6428 292e 7375 6d28 290a 2020 2020 6966  d().sum().    if",
            "-00013190: 206e 5f64 7570 6c69 6361 7465 7320 3e20   n_duplicates > ",
            "-000131a0: 303a 0a20 2020 2020 2020 2077 6172 6e69  0:.        warni",
            "-000131b0: 6e67 732e 7761 726e 2827 4f72 6967 696e  ngs.warn('Origin",
            "-000131c0: 616c 206e 616d 6573 2063 6f6e 7461 696e  al names contain",
            "-000131d0: 2025 6420 6475 706c 6963 6174 6528 7329   %d duplicate(s)",
            "-000131e0: 2e27 2025 206e 5f64 7570 6c69 6361 7465  .' % n_duplicate",
            "-000131f0: 7329 0a0a 2020 2020 6e5f 6475 706c 6963  s)..    n_duplic",
            "-00013200: 6174 6573 203d 206e 6f72 6d5f 6e61 6d65  ates = norm_name",
            "-00013210: 732e 6475 706c 6963 6174 6564 2829 2e73  s.duplicated().s",
            "-00013220: 756d 2829 0a20 2020 2069 6620 6e5f 6475  um().    if n_du",
            "-00013230: 706c 6963 6174 6573 203e 2030 3a0a 2020  plicates > 0:.  ",
            "-00013240: 2020 2020 2020 7761 726e 696e 6773 2e77        warnings.w",
            "-00013250: 6172 6e28 0a20 2020 2020 2020 2020 2020  arn(.           ",
            "-00013260: 2027 4e6f 726d 616c 697a 6564 206e 616d   'Normalized nam",
            "-00013270: 6573 2063 6f6e 7461 696e 2025 6420 6475  es contain %d du",
            "-00013280: 706c 6963 6174 6528 7329 2e27 2025 206e  plicate(s).' % n",
            "-00013290: 5f64 7570 6c69 6361 7465 7329 0a0a 2020  _duplicates)..  ",
            "-000132a0: 2020 7265 7475 726e 206e 6f72 6d5f 6e61    return norm_na",
            "-000132b0: 6d65 732e 7661 6c75 6573 0a0a 0a64 6566  mes.values...def",
            "-000132c0: 205f 7061 7273 655f 7261 775f 7361 6d5f   _parse_raw_sam_",
            "-000132d0: 6466 2863 7376 6461 7461 293a 0a0a 2020  df(csvdata):..  ",
            "-000132e0: 2020 6466 203d 2070 642e 7265 6164 5f63    df = pd.read_c",
            "-000132f0: 7376 2863 7376 6461 7461 2c20 696e 6465  sv(csvdata, inde",
            "-00013300: 785f 636f 6c3d 302c 2073 6b69 7072 6f77  x_col=0, skiprow",
            "-00013310: 733d 5b31 2c20 325d 290a 0a20 2020 2064  s=[1, 2])..    d",
            "-00013320: 662e 636f 6c75 6d6e 7320 3d20 6466 2e63  f.columns = df.c",
            "-00013330: 6f6c 756d 6e73 2e73 7472 2e72 6570 6c61  olumns.str.repla",
            "-00013340: 6365 2827 2027 2c20 275f 2729 0a20 2020  ce(' ', '_').   ",
            "-00013350: 2064 662e 696e 6465 7820 3d20 5f6e 6f72   df.index = _nor",
            "-00013360: 6d61 6c69 7a65 5f73 616d 5f70 726f 6475  malize_sam_produ",
            "-00013370: 6374 5f6e 616d 6573 2864 662e 696e 6465  ct_names(df.inde",
            "-00013380: 7829 0a20 2020 2064 6620 3d20 6466 2e74  x).    df = df.t",
            "-00013390: 7261 6e73 706f 7365 2829 0a0a 2020 2020  ranspose()..    ",
            "-000133a0: 6966 2027 4144 5243 6f65 6666 6963 6965  if 'ADRCoefficie",
            "-000133b0: 6e74 7327 2069 6e20 6466 2e69 6e64 6578  nts' in df.index",
            "-000133c0: 3a0a 2020 2020 2020 2020 6164 5f63 6520  :.        ad_ce ",
            "-000133d0: 3d20 2741 4452 436f 6566 6669 6369 656e  = 'ADRCoefficien",
            "-000133e0: 7473 270a 2020 2020 2020 2020 2320 666f  ts'.        # fo",
            "-000133f0: 7220 6561 6368 2069 6e76 6572 7465 722c  r each inverter,",
            "-00013400: 2070 6172 7365 7320 6120 7374 7269 6e67   parses a string",
            "-00013410: 206f 6620 636f 6566 6669 6369 656e 7473   of coefficients",
            "-00013420: 206c 696b 650a 2020 2020 2020 2020 2320   like.        # ",
            "-00013430: 2720 312e 3333 2c20 322e 3131 2c20 332e  ' 1.33, 2.11, 3.",
            "-00013440: 3132 2720 696e 746f 2061 206c 6973 7420  12' into a list ",
            "-00013450: 636f 6e74 6169 6e69 6e67 2066 6c6f 6174  containing float",
            "-00013460: 733a 0a20 2020 2020 2020 2023 205b 312e  s:.        # [1.",
            "-00013470: 3333 2c20 322e 3131 2c20 332e 3132 5d0a  33, 2.11, 3.12].",
            "-00013480: 2020 2020 2020 2020 6466 2e6c 6f63 5b61          df.loc[a",
            "-00013490: 645f 6365 5d20 3d20 6466 2e6c 6f63 5b61  d_ce] = df.loc[a",
            "-000134a0: 645f 6365 5d2e 6d61 7028 6c61 6d62 6461  d_ce].map(lambda",
            "-000134b0: 2078 3a20 6c69 7374 280a 2020 2020 2020   x: list(.      ",
            "-000134c0: 2020 2020 2020 6d61 7028 666c 6f61 742c        map(float,",
            "-000134d0: 2078 2e73 7472 6970 2827 205b 5d27 292e   x.strip(' []').",
            "-000134e0: 7370 6c69 7428 2929 2929 0a0a 2020 2020  split())))..    ",
            "-000134f0: 7265 7475 726e 2064 660a 0a0a 6465 6620  return df...def ",
            "-00013500: 7361 706d 2865 6666 6563 7469 7665 5f69  sapm(effective_i",
            "-00013510: 7272 6164 6961 6e63 652c 2074 656d 705f  rradiance, temp_",
            "-00013520: 6365 6c6c 2c20 6d6f 6475 6c65 293a 0a20  cell, module):. ",
            "-00013530: 2020 2027 2727 0a20 2020 2054 6865 2053     '''.    The S",
            "-00013540: 616e 6469 6120 5056 2041 7272 6179 2050  andia PV Array P",
            "-00013550: 6572 666f 726d 616e 6365 204d 6f64 656c  erformance Model",
            "-00013560: 2028 5341 504d 2920 6765 6e65 7261 7465   (SAPM) generate",
            "-00013570: 7320 3520 706f 696e 7473 206f 6e20 610a  s 5 points on a.",
            "-00013580: 2020 2020 5056 206d 6f64 756c 6527 7320      PV module's ",
            "-00013590: 492d 5620 6375 7276 6520 2856 6f63 2c20  I-V curve (Voc, ",
            "-000135a0: 4973 632c 2049 782c 2049 7878 2c20 566d  Isc, Ix, Ixx, Vm",
            "-000135b0: 702f 496d 7029 2061 6363 6f72 6469 6e67  p/Imp) according",
            "-000135c0: 2074 6f0a 2020 2020 5341 4e44 3230 3034   to.    SAND2004",
            "-000135d0: 2d33 3533 352e 2041 7373 756d 6573 2061  -3535. Assumes a",
            "-000135e0: 2072 6566 6572 656e 6365 2063 656c 6c20   reference cell ",
            "-000135f0: 7465 6d70 6572 6174 7572 6520 6f66 2032  temperature of 2",
            "-00013600: 3520 432e 0a0a 2020 2020 5061 7261 6d65  5 C...    Parame",
            "-00013610: 7465 7273 0a20 2020 202d 2d2d 2d2d 2d2d  ters.    -------",
            "-00013620: 2d2d 2d0a 2020 2020 6566 6665 6374 6976  ---.    effectiv",
            "-00013630: 655f 6972 7261 6469 616e 6365 203a 206e  e_irradiance : n",
            "-00013640: 756d 6572 6963 0a20 2020 2020 2020 2049  umeric.        I",
            "-00013650: 7272 6164 6961 6e63 6520 7265 6163 6869  rradiance reachi",
            "-00013660: 6e67 2074 6865 206d 6f64 756c 6527 7320  ng the module's ",
            "-00013670: 6365 6c6c 732c 2061 6674 6572 2072 6566  cells, after ref",
            "-00013680: 6c65 6374 696f 6e73 2061 6e64 0a20 2020  lections and.   ",
            "-00013690: 2020 2020 2061 646a 7573 746d 656e 7420       adjustment ",
            "-000136a0: 666f 7220 7370 6563 7472 756d 2e20 5b57  for spectrum. [W",
            "-000136b0: 2f6d 325d 0a0a 2020 2020 7465 6d70 5f63  /m2]..    temp_c",
            "-000136c0: 656c 6c20 3a20 6e75 6d65 7269 630a 2020  ell : numeric.  ",
            "-000136d0: 2020 2020 2020 4365 6c6c 2074 656d 7065        Cell tempe",
            "-000136e0: 7261 7475 7265 205b 435d 2e0a 0a20 2020  rature [C]...   ",
            "-000136f0: 206d 6f64 756c 6520 3a20 6469 6374 2d6c   module : dict-l",
            "-00013700: 696b 650a 2020 2020 2020 2020 4120 6469  ike.        A di",
            "-00013710: 6374 206f 7220 5365 7269 6573 2064 6566  ct or Series def",
            "-00013720: 696e 696e 6720 7468 6520 5341 504d 2070  ining the SAPM p",
            "-00013730: 6172 616d 6574 6572 732e 2053 6565 2074  arameters. See t",
            "-00013740: 6865 206e 6f74 6573 2073 6563 7469 6f6e  he notes section",
            "-00013750: 0a20 2020 2020 2020 2066 6f72 206d 6f72  .        for mor",
            "-00013760: 6520 6465 7461 696c 732e 0a0a 2020 2020  e details...    ",
            "-00013770: 5265 7475 726e 730a 2020 2020 2d2d 2d2d  Returns.    ----",
            "-00013780: 2d2d 2d0a 2020 2020 4120 4461 7461 4672  ---.    A DataFr",
            "-00013790: 616d 6520 7769 7468 2074 6865 2063 6f6c  ame with the col",
            "-000137a0: 756d 6e73 3a0a 0a20 2020 2020 2020 202a  umns:..        *",
            "-000137b0: 2069 5f73 6320 3a20 5368 6f72 742d 6369   i_sc : Short-ci",
            "-000137c0: 7263 7569 7420 6375 7272 656e 7420 2841  rcuit current (A",
            "-000137d0: 290a 2020 2020 2020 2020 2a20 695f 6d70  ).        * i_mp",
            "-000137e0: 203a 2043 7572 7265 6e74 2061 7420 7468   : Current at th",
            "-000137f0: 6520 6d61 7869 6d75 6d2d 706f 7765 7220  e maximum-power ",
            "-00013800: 706f 696e 7420 2841 290a 2020 2020 2020  point (A).      ",
            "-00013810: 2020 2a20 765f 6f63 203a 204f 7065 6e2d    * v_oc : Open-",
            "-00013820: 6369 7263 7569 7420 766f 6c74 6167 6520  circuit voltage ",
            "-00013830: 2856 290a 2020 2020 2020 2020 2a20 765f  (V).        * v_",
            "-00013840: 6d70 203a 2056 6f6c 7461 6765 2061 7420  mp : Voltage at ",
            "-00013850: 6d61 7869 6d75 6d2d 706f 7765 7220 706f  maximum-power po",
            "-00013860: 696e 7420 2856 290a 2020 2020 2020 2020  int (V).        ",
            "-00013870: 2a20 705f 6d70 203a 2050 6f77 6572 2061  * p_mp : Power a",
            "-00013880: 7420 6d61 7869 6d75 6d2d 706f 7765 7220  t maximum-power ",
            "-00013890: 706f 696e 7420 2857 290a 2020 2020 2020  point (W).      ",
            "-000138a0: 2020 2a20 695f 7820 3a20 4375 7272 656e    * i_x : Curren",
            "-000138b0: 7420 6174 206d 6f64 756c 6520 5620 3d20  t at module V = ",
            "-000138c0: 302e 3556 6f63 2c20 6465 6669 6e65 7320  0.5Voc, defines ",
            "-000138d0: 3474 6820 706f 696e 7420 6f6e 2049 2d56  4th point on I-V",
            "-000138e0: 0a20 2020 2020 2020 2020 2063 7572 7665  .          curve",
            "-000138f0: 2066 6f72 206d 6f64 656c 696e 6720 6375   for modeling cu",
            "-00013900: 7276 6520 7368 6170 650a 2020 2020 2020  rve shape.      ",
            "-00013910: 2020 2a20 695f 7878 203a 2043 7572 7265    * i_xx : Curre",
            "-00013920: 6e74 2061 7420 6d6f 6475 6c65 2056 203d  nt at module V =",
            "-00013930: 2030 2e35 2856 6f63 2b56 6d70 292c 2064   0.5(Voc+Vmp), d",
            "-00013940: 6566 696e 6573 2035 7468 2070 6f69 6e74  efines 5th point",
            "-00013950: 206f 6e0a 2020 2020 2020 2020 2020 492d   on.          I-",
            "-00013960: 5620 6375 7276 6520 666f 7220 6d6f 6465  V curve for mode",
            "-00013970: 6c69 6e67 2063 7572 7665 2073 6861 7065  ling curve shape",
            "-00013980: 0a0a 2020 2020 4e6f 7465 730a 2020 2020  ..    Notes.    ",
            "-00013990: 2d2d 2d2d 2d0a 2020 2020 5468 6520 5341  -----.    The SA",
            "-000139a0: 504d 2070 6172 616d 6574 6572 7320 7768  PM parameters wh",
            "-000139b0: 6963 6820 6172 6520 7265 7175 6972 6564  ich are required",
            "-000139c0: 2069 6e20 6060 6d6f 6475 6c65 6060 2061   in ``module`` a",
            "-000139d0: 7265 0a20 2020 206c 6973 7465 6420 696e  re.    listed in",
            "-000139e0: 2074 6865 2066 6f6c 6c6f 7769 6e67 2074   the following t",
            "-000139f0: 6162 6c65 2e0a 0a20 2020 2054 6865 2053  able...    The S",
            "-00013a00: 616e 6469 6120 6d6f 6475 6c65 2064 6174  andia module dat",
            "-00013a10: 6162 6173 6520 636f 6e74 6169 6e73 2070  abase contains p",
            "-00013a20: 6172 616d 6574 6572 2076 616c 7565 7320  arameter values ",
            "-00013a30: 666f 7220 6120 6c69 6d69 7465 6420 7365  for a limited se",
            "-00013a40: 740a 2020 2020 6f66 206d 6f64 756c 6573  t.    of modules",
            "-00013a50: 2e20 5468 6520 4345 4320 6d6f 6475 6c65  . The CEC module",
            "-00013a60: 2064 6174 6162 6173 6520 646f 6573 206e   database does n",
            "-00013a70: 6f74 2063 6f6e 7461 696e 2074 6865 7365  ot contain these",
            "-00013a80: 2070 6172 616d 6574 6572 732e 0a20 2020   parameters..   ",
            "-00013a90: 2042 6f74 6820 6461 7461 6261 7365 7320   Both databases ",
            "-00013aa0: 6361 6e20 6265 2061 6363 6573 7365 6420  can be accessed ",
            "-00013ab0: 7573 696e 6720 3a70 793a 6675 6e63 3a60  using :py:func:`",
            "-00013ac0: 7265 7472 6965 7665 5f73 616d 602e 0a0a  retrieve_sam`...",
            "-00013ad0: 2020 2020 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d      ============",
            "-00013ae0: 3d3d 3d3d 2020 203d 3d3d 3d3d 3d3d 3d3d  ====   =========",
            "-00013af0: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "-00013b00: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "-00013b10: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d0a  ===============.",
            "-00013b20: 2020 2020 4b65 7920 2020 2020 2020 2020      Key         ",
            "-00013b30: 2020 2020 2020 2044 6573 6372 6970 7469         Descripti",
            "-00013b40: 6f6e 0a20 2020 203d 3d3d 3d3d 3d3d 3d3d  on.    =========",
            "-00013b50: 3d3d 3d3d 3d3d 3d20 2020 3d3d 3d3d 3d3d  =======   ======",
            "-00013b60: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "-00013b70: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "-00013b80: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "-00013b90: 3d3d 0a20 2020 2041 302d 4134 2020 2020  ==.    A0-A4    ",
            "-00013ba0: 2020 2020 2020 2020 2020 5468 6520 6169            The ai",
            "-00013bb0: 726d 6173 7320 636f 6566 6669 6369 656e  rmass coefficien",
            "-00013bc0: 7473 2075 7365 6420 696e 2063 616c 6375  ts used in calcu",
            "-00013bd0: 6c61 7469 6e67 0a20 2020 2020 2020 2020  lating.         ",
            "-00013be0: 2020 2020 2020 2020 2020 2020 2020 6566                ef",
            "-00013bf0: 6665 6374 6976 6520 6972 7261 6469 616e  fective irradian",
            "-00013c00: 6365 0a20 2020 2042 302d 4235 2020 2020  ce.    B0-B5    ",
            "-00013c10: 2020 2020 2020 2020 2020 5468 6520 616e            The an",
            "-00013c20: 676c 6520 6f66 2069 6e63 6964 656e 6365  gle of incidence",
            "-00013c30: 2063 6f65 6666 6963 6965 6e74 7320 7573   coefficients us",
            "-00013c40: 6564 2069 6e20 6361 6c63 756c 6174 696e  ed in calculatin",
            "-00013c50: 670a 2020 2020 2020 2020 2020 2020 2020  g.              ",
            "-00013c60: 2020 2020 2020 2020 2065 6666 6563 7469           effecti",
            "-00013c70: 7665 2069 7272 6164 6961 6e63 650a 2020  ve irradiance.  ",
            "-00013c80: 2020 4330 2d43 3720 2020 2020 2020 2020    C0-C7         ",
            "-00013c90: 2020 2020 2054 6865 2065 6d70 6972 6963       The empiric",
            "-00013ca0: 616c 6c79 2064 6574 6572 6d69 6e65 6420  ally determined ",
            "-00013cb0: 636f 6566 6669 6369 656e 7473 2072 656c  coefficients rel",
            "-00013cc0: 6174 696e 670a 2020 2020 2020 2020 2020  ating.          ",
            "-00013cd0: 2020 2020 2020 2020 2020 2020 2049 6d70               Imp",
            "-00013ce0: 2c20 566d 702c 2049 782c 2061 6e64 2049  , Vmp, Ix, and I",
            "-00013cf0: 7878 2074 6f20 6566 6665 6374 6976 6520  xx to effective ",
            "-00013d00: 6972 7261 6469 616e 6365 0a20 2020 2049  irradiance.    I",
            "-00013d10: 7363 6f20 2020 2020 2020 2020 2020 2020  sco             ",
            "-00013d20: 2020 5368 6f72 7420 6369 7263 7569 7420    Short circuit ",
            "-00013d30: 6375 7272 656e 7420 6174 2072 6566 6572  current at refer",
            "-00013d40: 656e 6365 2063 6f6e 6469 7469 6f6e 2028  ence condition (",
            "-00013d50: 616d 7073 290a 2020 2020 496d 706f 2020  amps).    Impo  ",
            "-00013d60: 2020 2020 2020 2020 2020 2020 204d 6178               Max",
            "-00013d70: 696d 756d 2070 6f77 6572 2063 7572 7265  imum power curre",
            "-00013d80: 6e74 2061 7420 7265 6665 7265 6e63 6520  nt at reference ",
            "-00013d90: 636f 6e64 6974 696f 6e20 2861 6d70 7329  condition (amps)",
            "-00013da0: 0a20 2020 2056 6f63 6f20 2020 2020 2020  .    Voco       ",
            "-00013db0: 2020 2020 2020 2020 4f70 656e 2063 6972          Open cir",
            "-00013dc0: 6375 6974 2076 6f6c 7461 6765 2061 7420  cuit voltage at ",
            "-00013dd0: 7265 6665 7265 6e63 6520 636f 6e64 6974  reference condit",
            "-00013de0: 696f 6e20 2861 6d70 7329 0a20 2020 2056  ion (amps).    V",
            "-00013df0: 6d70 6f20 2020 2020 2020 2020 2020 2020  mpo             ",
            "-00013e00: 2020 4d61 7869 6d75 6d20 706f 7765 7220    Maximum power ",
            "-00013e10: 766f 6c74 6167 6520 6174 2072 6566 6572  voltage at refer",
            "-00013e20: 656e 6365 2063 6f6e 6469 7469 6f6e 2028  ence condition (",
            "-00013e30: 616d 7073 290a 2020 2020 4169 7363 2020  amps).    Aisc  ",
            "-00013e40: 2020 2020 2020 2020 2020 2020 2053 686f               Sho",
            "-00013e50: 7274 2063 6972 6375 6974 2063 7572 7265  rt circuit curre",
            "-00013e60: 6e74 2074 656d 7065 7261 7475 7265 2063  nt temperature c",
            "-00013e70: 6f65 6666 6963 6965 6e74 2061 740a 2020  oefficient at.  ",
            "-00013e80: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00013e90: 2020 2020 2072 6566 6572 656e 6365 2063       reference c",
            "-00013ea0: 6f6e 6469 7469 6f6e 2028 312f 4329 0a20  ondition (1/C). ",
            "-00013eb0: 2020 2041 696d 7020 2020 2020 2020 2020     Aimp         ",
            "-00013ec0: 2020 2020 2020 4d61 7869 6d75 6d20 706f        Maximum po",
            "-00013ed0: 7765 7220 6375 7272 656e 7420 7465 6d70  wer current temp",
            "-00013ee0: 6572 6174 7572 6520 636f 6566 6669 6369  erature coeffici",
            "-00013ef0: 656e 7420 6174 0a20 2020 2020 2020 2020  ent at.         ",
            "-00013f00: 2020 2020 2020 2020 2020 2020 2020 7265                re",
            "-00013f10: 6665 7265 6e63 6520 636f 6e64 6974 696f  ference conditio",
            "-00013f20: 6e20 2831 2f43 290a 2020 2020 4276 6f63  n (1/C).    Bvoc",
            "-00013f30: 6f20 2020 2020 2020 2020 2020 2020 204f  o              O",
            "-00013f40: 7065 6e20 6369 7263 7569 7420 766f 6c74  pen circuit volt",
            "-00013f50: 6167 6520 7465 6d70 6572 6174 7572 6520  age temperature ",
            "-00013f60: 636f 6566 6669 6369 656e 7420 6174 0a20  coefficient at. ",
            "-00013f70: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00013f80: 2020 2020 2020 7265 6665 7265 6e63 6520        reference ",
            "-00013f90: 636f 6e64 6974 696f 6e20 2856 2f43 290a  condition (V/C).",
            "-00013fa0: 2020 2020 4d62 766f 6320 2020 2020 2020      Mbvoc       ",
            "-00013fb0: 2020 2020 2020 2043 6f65 6666 6963 6965         Coefficie",
            "-00013fc0: 6e74 2070 726f 7669 6469 6e67 2074 6865  nt providing the",
            "-00013fd0: 2069 7272 6164 6961 6e63 6520 6465 7065   irradiance depe",
            "-00013fe0: 6e64 656e 6365 2066 6f72 2074 6865 0a20  ndence for the. ",
            "-00013ff0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00014000: 2020 2020 2020 4265 7461 566f 6320 7465        BetaVoc te",
            "-00014010: 6d70 6572 6174 7572 6520 636f 6566 6669  mperature coeffi",
            "-00014020: 6369 656e 7420 6174 2072 6566 6572 656e  cient at referen",
            "-00014030: 6365 2069 7272 6164 6961 6e63 650a 2020  ce irradiance.  ",
            "-00014040: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00014050: 2020 2020 2028 562f 4329 0a20 2020 2042       (V/C).    B",
            "-00014060: 766d 706f 2020 2020 2020 2020 2020 2020  vmpo            ",
            "-00014070: 2020 4d61 7869 6d75 6d20 706f 7765 7220    Maximum power ",
            "-00014080: 766f 6c74 6167 6520 7465 6d70 6572 6174  voltage temperat",
            "-00014090: 7572 6520 636f 6566 6669 6369 656e 7420  ure coefficient ",
            "-000140a0: 6174 0a20 2020 2020 2020 2020 2020 2020  at.             ",
            "-000140b0: 2020 2020 2020 2020 2020 7265 6665 7265            refere",
            "-000140c0: 6e63 6520 636f 6e64 6974 696f 6e0a 2020  nce condition.  ",
            "-000140d0: 2020 4d62 766d 7020 2020 2020 2020 2020    Mbvmp         ",
            "-000140e0: 2020 2020 2043 6f65 6666 6963 6965 6e74       Coefficient",
            "-000140f0: 2070 726f 7669 6469 6e67 2074 6865 2069   providing the i",
            "-00014100: 7272 6164 6961 6e63 6520 6465 7065 6e64  rradiance depend",
            "-00014110: 656e 6365 2066 6f72 2074 6865 0a20 2020  ence for the.   ",
            "-00014120: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00014130: 2020 2020 4265 7461 566d 7020 7465 6d70      BetaVmp temp",
            "-00014140: 6572 6174 7572 6520 636f 6566 6669 6369  erature coeffici",
            "-00014150: 656e 7420 6174 2072 6566 6572 656e 6365  ent at reference",
            "-00014160: 2069 7272 6164 6961 6e63 650a 2020 2020   irradiance.    ",
            "-00014170: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00014180: 2020 2028 562f 4329 0a20 2020 204e 2020     (V/C).    N  ",
            "-00014190: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000141a0: 456d 7069 7269 6361 6c6c 7920 6465 7465  Empirically dete",
            "-000141b0: 726d 696e 6564 2022 6469 6f64 6520 6661  rmined \"diode fa",
            "-000141c0: 6374 6f72 2220 2864 696d 656e 7369 6f6e  ctor\" (dimension",
            "-000141d0: 6c65 7373 290a 2020 2020 4365 6c6c 735f  less).    Cells_",
            "-000141e0: 696e 5f53 6572 6965 7320 2020 204e 756d  in_Series    Num",
            "-000141f0: 6265 7220 6f66 2063 656c 6c73 2069 6e20  ber of cells in ",
            "-00014200: 7365 7269 6573 2069 6e20 6120 6d6f 6475  series in a modu",
            "-00014210: 6c65 2773 2063 656c 6c20 7374 7269 6e67  le's cell string",
            "-00014220: 2873 290a 2020 2020 4958 4f20 2020 2020  (s).    IXO     ",
            "-00014230: 2020 2020 2020 2020 2020 2049 7820 6174             Ix at",
            "-00014240: 2072 6566 6572 656e 6365 2063 6f6e 6469   reference condi",
            "-00014250: 7469 6f6e 730a 2020 2020 4958 584f 2020  tions.    IXXO  ",
            "-00014260: 2020 2020 2020 2020 2020 2020 2049 7878               Ixx",
            "-00014270: 2061 7420 7265 6665 7265 6e63 6520 636f   at reference co",
            "-00014280: 6e64 6974 696f 6e73 0a20 2020 2046 4420  nditions.    FD ",
            "-00014290: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-000142a0: 4672 6163 7469 6f6e 206f 6620 6469 6666  Fraction of diff",
            "-000142b0: 7573 6520 6972 7261 6469 616e 6365 2075  use irradiance u",
            "-000142c0: 7365 6420 6279 206d 6f64 756c 650a 2020  sed by module.  ",
            "-000142d0: 2020 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d    ==============",
            "-000142e0: 3d3d 2020 203d 3d3d 3d3d 3d3d 3d3d 3d3d  ==   ===========",
            "-000142f0: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "-00014300: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "-00014310: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d0a 0a20  =============.. ",
            "-00014320: 2020 2052 6566 6572 656e 6365 730a 2020     References.  ",
            "-00014330: 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020    ----------.   ",
            "-00014340: 202e 2e20 5b31 5d20 4b69 6e67 2c20 442e   .. [1] King, D.",
            "-00014350: 2065 7420 616c 2c20 3230 3034 2c20 2253   et al, 2004, \"S",
            "-00014360: 616e 6469 6120 5068 6f74 6f76 6f6c 7461  andia Photovolta",
            "-00014370: 6963 2041 7272 6179 2050 6572 666f 726d  ic Array Perform",
            "-00014380: 616e 6365 0a20 2020 2020 2020 4d6f 6465  ance.       Mode",
            "-00014390: 6c22 2c20 5341 4e44 2052 6570 6f72 7420  l\", SAND Report ",
            "-000143a0: 3335 3335 2c20 5361 6e64 6961 204e 6174  3535, Sandia Nat",
            "-000143b0: 696f 6e61 6c20 4c61 626f 7261 746f 7269  ional Laboratori",
            "-000143c0: 6573 2c20 416c 6275 7175 6572 7175 652c  es, Albuquerque,",
            "-000143d0: 0a20 2020 2020 2020 4e4d 2e0a 0a20 2020  .       NM...   ",
            "-000143e0: 2053 6565 2041 6c73 6f0a 2020 2020 2d2d   See Also.    --",
            "-000143f0: 2d2d 2d2d 2d2d 0a20 2020 2072 6574 7269  ------.    retri",
            "-00014400: 6576 655f 7361 6d0a 2020 2020 7076 6c69  eve_sam.    pvli",
            "-00014410: 622e 7465 6d70 6572 6174 7572 652e 7361  b.temperature.sa",
            "-00014420: 706d 5f63 656c 6c0a 2020 2020 7076 6c69  pm_cell.    pvli",
            "-00014430: 622e 7465 6d70 6572 6174 7572 652e 7361  b.temperature.sa",
            "-00014440: 706d 5f6d 6f64 756c 650a 2020 2020 2727  pm_module.    ''",
            "-00014450: 270a 0a20 2020 2023 2054 4f44 4f3a 2073  '..    # TODO: s",
            "-00014460: 6f6d 6564 6179 2c20 6368 616e 6765 2074  omeday, change t",
            "-00014470: 656d 705f 7265 6620 616e 6420 6972 7261  emp_ref and irra",
            "-00014480: 645f 7265 6620 746f 2072 6566 6572 656e  d_ref to referen",
            "-00014490: 6365 5f74 656d 7065 7261 7475 7265 2061  ce_temperature a",
            "-000144a0: 6e64 0a20 2020 2023 2072 6566 6572 656e  nd.    # referen",
            "-000144b0: 6365 5f69 7272 6164 6961 6e63 6520 616e  ce_irradiance an",
            "-000144c0: 6420 6578 706f 7365 0a20 2020 2074 656d  d expose.    tem",
            "-000144d0: 705f 7265 6620 3d20 3235 0a20 2020 2069  p_ref = 25.    i",
            "-000144e0: 7272 6164 5f72 6566 203d 2031 3030 300a  rrad_ref = 1000.",
            "-000144f0: 0a20 2020 2071 203d 2063 6f6e 7374 616e  .    q = constan",
            "-00014500: 7473 2e65 2020 2320 456c 656d 656e 7461  ts.e  # Elementa",
            "-00014510: 7279 2063 6861 7267 6520 696e 2075 6e69  ry charge in uni",
            "-00014520: 7473 206f 6620 636f 756c 6f6d 6273 0a20  ts of coulombs. ",
            "-00014530: 2020 206b 6220 3d20 636f 6e73 7461 6e74     kb = constant",
            "-00014540: 732e 6b20 2023 2042 6f6c 747a 6d61 6e6e  s.k  # Boltzmann",
            "-00014550: 2773 2063 6f6e 7374 616e 7420 696e 2075  's constant in u",
            "-00014560: 6e69 7473 206f 6620 4a2f 4b0a 0a20 2020  nits of J/K..   ",
            "-00014570: 2023 2061 766f 6964 2070 726f 626c 656d   # avoid problem",
            "-00014580: 2077 6974 6820 696e 7465 6765 7220 696e   with integer in",
            "-00014590: 7075 740a 2020 2020 4565 203d 206e 702e  put.    Ee = np.",
            "-000145a0: 6172 7261 7928 6566 6665 6374 6976 655f  array(effective_",
            "-000145b0: 6972 7261 6469 616e 6365 2c20 6474 7970  irradiance, dtyp",
            "-000145c0: 653d 2766 6c6f 6174 3634 2729 202f 2069  e='float64') / i",
            "-000145d0: 7272 6164 5f72 6566 0a0a 2020 2020 2320  rrad_ref..    # ",
            "-000145e0: 7365 7420 7570 206d 6173 6b69 6e67 2066  set up masking f",
            "-000145f0: 6f72 2030 2c20 706f 7369 7469 7665 2c20  or 0, positive, ",
            "-00014600: 616e 6420 6e61 6e20 696e 7075 7473 0a20  and nan inputs. ",
            "-00014610: 2020 2045 655f 6774 5f30 203d 206e 702e     Ee_gt_0 = np.",
            "-00014620: 6675 6c6c 5f6c 696b 6528 4565 2c20 4661  full_like(Ee, Fa",
            "-00014630: 6c73 652c 2064 7479 7065 3d27 626f 6f6c  lse, dtype='bool",
            "-00014640: 2729 0a20 2020 2045 655f 6571 5f30 203d  ').    Ee_eq_0 =",
            "-00014650: 206e 702e 6675 6c6c 5f6c 696b 6528 4565   np.full_like(Ee",
            "-00014660: 2c20 4661 6c73 652c 2064 7479 7065 3d27  , False, dtype='",
            "-00014670: 626f 6f6c 2729 0a20 2020 206e 6f74 6e61  bool').    notna",
            "-00014680: 6e20 3d20 7e6e 702e 6973 6e61 6e28 4565  n = ~np.isnan(Ee",
            "-00014690: 290a 2020 2020 6e70 2e67 7265 6174 6572  ).    np.greater",
            "-000146a0: 2845 652c 2030 2c20 7768 6572 653d 6e6f  (Ee, 0, where=no",
            "-000146b0: 746e 616e 2c20 6f75 743d 4565 5f67 745f  tnan, out=Ee_gt_",
            "-000146c0: 3029 0a20 2020 206e 702e 6571 7561 6c28  0).    np.equal(",
            "-000146d0: 4565 2c20 302c 2077 6865 7265 3d6e 6f74  Ee, 0, where=not",
            "-000146e0: 6e61 6e2c 206f 7574 3d45 655f 6571 5f30  nan, out=Ee_eq_0",
            "-000146f0: 290a 0a20 2020 2042 766d 706f 203d 206d  )..    Bvmpo = m",
            "-00014700: 6f64 756c 655b 2742 766d 706f 275d 202b  odule['Bvmpo'] +",
            "-00014710: 206d 6f64 756c 655b 274d 6276 6d70 275d   module['Mbvmp']",
            "-00014720: 2a28 3120 2d20 4565 290a 2020 2020 4276  *(1 - Ee).    Bv",
            "-00014730: 6f63 6f20 3d20 6d6f 6475 6c65 5b27 4276  oco = module['Bv",
            "-00014740: 6f63 6f27 5d20 2b20 6d6f 6475 6c65 5b27  oco'] + module['",
            "-00014750: 4d62 766f 6327 5d2a 2831 202d 2045 6529  Mbvoc']*(1 - Ee)",
            "-00014760: 0a20 2020 2064 656c 7461 203d 206d 6f64  .    delta = mod",
            "-00014770: 756c 655b 274e 275d 202a 206b 6220 2a20  ule['N'] * kb * ",
            "-00014780: 2874 656d 705f 6365 6c6c 202b 2032 3733  (temp_cell + 273",
            "-00014790: 2e31 3529 202f 2071 0a0a 2020 2020 2320  .15) / q..    # ",
            "-000147a0: 6176 6f69 6420 7265 7065 6174 6564 2063  avoid repeated c",
            "-000147b0: 6f6d 7075 7461 7469 6f6e 0a20 2020 206c  omputation.    l",
            "-000147c0: 6f67 4565 203d 206e 702e 6675 6c6c 5f6c  ogEe = np.full_l",
            "-000147d0: 696b 6528 4565 2c20 6e70 2e6e 616e 290a  ike(Ee, np.nan).",
            "-000147e0: 2020 2020 6e70 2e6c 6f67 2845 652c 2077      np.log(Ee, w",
            "-000147f0: 6865 7265 3d45 655f 6774 5f30 2c20 6f75  here=Ee_gt_0, ou",
            "-00014800: 743d 6c6f 6745 6529 0a20 2020 206c 6f67  t=logEe).    log",
            "-00014810: 4565 203d 206e 702e 7768 6572 6528 4565  Ee = np.where(Ee",
            "-00014820: 5f65 715f 302c 202d 6e70 2e69 6e66 2c20  _eq_0, -np.inf, ",
            "-00014830: 6c6f 6745 6529 0a20 2020 2023 2061 766f  logEe).    # avo",
            "-00014840: 6964 2072 6570 6561 7465 6420 5f5f 6765  id repeated __ge",
            "-00014850: 7469 7465 6d5f 5f0a 2020 2020 6365 6c6c  titem__.    cell",
            "-00014860: 735f 696e 5f73 6572 6965 7320 3d20 6d6f  s_in_series = mo",
            "-00014870: 6475 6c65 5b27 4365 6c6c 735f 696e 5f53  dule['Cells_in_S",
            "-00014880: 6572 6965 7327 5d0a 0a20 2020 206f 7574  eries']..    out",
            "-00014890: 203d 204f 7264 6572 6564 4469 6374 2829   = OrderedDict()",
            "-000148a0: 0a0a 2020 2020 6f75 745b 2769 5f73 6327  ..    out['i_sc'",
            "-000148b0: 5d20 3d20 280a 2020 2020 2020 2020 6d6f  ] = (.        mo",
            "-000148c0: 6475 6c65 5b27 4973 636f 275d 202a 2045  dule['Isco'] * E",
            "-000148d0: 6520 2a20 2831 202b 206d 6f64 756c 655b  e * (1 + module[",
            "-000148e0: 2741 6973 6327 5d2a 2874 656d 705f 6365  'Aisc']*(temp_ce",
            "-000148f0: 6c6c 202d 2074 656d 705f 7265 6629 2929  ll - temp_ref)))",
            "-00014900: 0a0a 2020 2020 6f75 745b 2769 5f6d 7027  ..    out['i_mp'",
            "-00014910: 5d20 3d20 280a 2020 2020 2020 2020 6d6f  ] = (.        mo",
            "-00014920: 6475 6c65 5b27 496d 706f 275d 202a 2028  dule['Impo'] * (",
            "-00014930: 6d6f 6475 6c65 5b27 4330 275d 2a45 6520  module['C0']*Ee ",
            "-00014940: 2b20 6d6f 6475 6c65 5b27 4331 275d 2a28  + module['C1']*(",
            "-00014950: 4565 2a2a 3229 2920 2a0a 2020 2020 2020  Ee**2)) *.      ",
            "-00014960: 2020 2831 202b 206d 6f64 756c 655b 2741    (1 + module['A",
            "-00014970: 696d 7027 5d2a 2874 656d 705f 6365 6c6c  imp']*(temp_cell",
            "-00014980: 202d 2074 656d 705f 7265 6629 2929 0a0a   - temp_ref)))..",
            "-00014990: 2020 2020 6f75 745b 2776 5f6f 6327 5d20      out['v_oc'] ",
            "-000149a0: 3d20 6e70 2e6d 6178 696d 756d 2830 2c20  = np.maximum(0, ",
            "-000149b0: 280a 2020 2020 2020 2020 6d6f 6475 6c65  (.        module",
            "-000149c0: 5b27 566f 636f 275d 202b 2063 656c 6c73  ['Voco'] + cells",
            "-000149d0: 5f69 6e5f 7365 7269 6573 202a 2064 656c  _in_series * del",
            "-000149e0: 7461 202a 206c 6f67 4565 202b 0a20 2020  ta * logEe +.   ",
            "-000149f0: 2020 2020 2042 766f 636f 2a28 7465 6d70       Bvoco*(temp",
            "-00014a00: 5f63 656c 6c20 2d20 7465 6d70 5f72 6566  _cell - temp_ref",
            "-00014a10: 2929 290a 0a20 2020 206f 7574 5b27 765f  )))..    out['v_",
            "-00014a20: 6d70 275d 203d 206e 702e 6d61 7869 6d75  mp'] = np.maximu",
            "-00014a30: 6d28 302c 2028 0a20 2020 2020 2020 206d  m(0, (.        m",
            "-00014a40: 6f64 756c 655b 2756 6d70 6f27 5d20 2b0a  odule['Vmpo'] +.",
            "-00014a50: 2020 2020 2020 2020 6d6f 6475 6c65 5b27          module['",
            "-00014a60: 4332 275d 202a 2063 656c 6c73 5f69 6e5f  C2'] * cells_in_",
            "-00014a70: 7365 7269 6573 202a 2064 656c 7461 202a  series * delta *",
            "-00014a80: 206c 6f67 4565 202b 0a20 2020 2020 2020   logEe +.       ",
            "-00014a90: 206d 6f64 756c 655b 2743 3327 5d20 2a20   module['C3'] * ",
            "-00014aa0: 6365 6c6c 735f 696e 5f73 6572 6965 7320  cells_in_series ",
            "-00014ab0: 2a20 2828 6465 6c74 6120 2a20 6c6f 6745  * ((delta * logE",
            "-00014ac0: 6529 202a 2a20 3229 202b 0a20 2020 2020  e) ** 2) +.     ",
            "-00014ad0: 2020 2042 766d 706f 2a28 7465 6d70 5f63     Bvmpo*(temp_c",
            "-00014ae0: 656c 6c20 2d20 7465 6d70 5f72 6566 2929  ell - temp_ref))",
            "-00014af0: 290a 0a20 2020 206f 7574 5b27 705f 6d70  )..    out['p_mp",
            "-00014b00: 275d 203d 206f 7574 5b27 695f 6d70 275d  '] = out['i_mp']",
            "-00014b10: 202a 206f 7574 5b27 765f 6d70 275d 0a0a   * out['v_mp']..",
            "-00014b20: 2020 2020 6f75 745b 2769 5f78 275d 203d      out['i_x'] =",
            "-00014b30: 2028 0a20 2020 2020 2020 206d 6f64 756c   (.        modul",
            "-00014b40: 655b 2749 584f 275d 202a 2028 6d6f 6475  e['IXO'] * (modu",
            "-00014b50: 6c65 5b27 4334 275d 2a45 6520 2b20 6d6f  le['C4']*Ee + mo",
            "-00014b60: 6475 6c65 5b27 4335 275d 2a28 4565 2a2a  dule['C5']*(Ee**",
            "-00014b70: 3229 2920 2a0a 2020 2020 2020 2020 2831  2)) *.        (1",
            "-00014b80: 202b 206d 6f64 756c 655b 2741 6973 6327   + module['Aisc'",
            "-00014b90: 5d2a 2874 656d 705f 6365 6c6c 202d 2074  ]*(temp_cell - t",
            "-00014ba0: 656d 705f 7265 6629 2929 0a0a 2020 2020  emp_ref)))..    ",
            "-00014bb0: 6f75 745b 2769 5f78 7827 5d20 3d20 280a  out['i_xx'] = (.",
            "-00014bc0: 2020 2020 2020 2020 6d6f 6475 6c65 5b27          module['",
            "-00014bd0: 4958 584f 275d 202a 2028 6d6f 6475 6c65  IXXO'] * (module",
            "-00014be0: 5b27 4336 275d 2a45 6520 2b20 6d6f 6475  ['C6']*Ee + modu",
            "-00014bf0: 6c65 5b27 4337 275d 2a28 4565 2a2a 3229  le['C7']*(Ee**2)",
            "-00014c00: 2920 2a0a 2020 2020 2020 2020 2831 202b  ) *.        (1 +",
            "-00014c10: 206d 6f64 756c 655b 2741 696d 7027 5d2a   module['Aimp']*",
            "-00014c20: 2874 656d 705f 6365 6c6c 202d 2074 656d  (temp_cell - tem",
            "-00014c30: 705f 7265 6629 2929 0a0a 2020 2020 6966  p_ref)))..    if",
            "-00014c40: 2069 7369 6e73 7461 6e63 6528 6f75 745b   isinstance(out[",
            "-00014c50: 2769 5f73 6327 5d2c 2070 642e 5365 7269  'i_sc'], pd.Seri",
            "-00014c60: 6573 293a 0a20 2020 2020 2020 206f 7574  es):.        out",
            "-00014c70: 203d 2070 642e 4461 7461 4672 616d 6528   = pd.DataFrame(",
            "-00014c80: 6f75 7429 0a0a 2020 2020 7265 7475 726e  out)..    return",
            "-00014c90: 206f 7574 0a0a 0a64 6566 2073 6170 6d5f   out...def sapm_",
            "-00014ca0: 6566 6665 6374 6976 655f 6972 7261 6469  effective_irradi",
            "-00014cb0: 616e 6365 2870 6f61 5f64 6972 6563 742c  ance(poa_direct,",
            "-00014cc0: 2070 6f61 5f64 6966 6675 7365 2c20 6169   poa_diffuse, ai",
            "-00014cd0: 726d 6173 735f 6162 736f 6c75 7465 2c20  rmass_absolute, ",
            "-00014ce0: 616f 692c 0a20 2020 2020 2020 2020 2020  aoi,.           ",
            "-00014cf0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00014d00: 2020 206d 6f64 756c 6529 3a0a 2020 2020     module):.    ",
            "-00014d10: 7222 2222 0a20 2020 2043 616c 6375 6c61  r\"\"\".    Calcula",
            "-00014d20: 7465 7320 7468 6520 5341 504d 2065 6666  tes the SAPM eff",
            "-00014d30: 6563 7469 7665 2069 7272 6164 6961 6e63  ective irradianc",
            "-00014d40: 6520 7573 696e 6720 7468 6520 5341 504d  e using the SAPM",
            "-00014d50: 2073 7065 6374 7261 6c0a 2020 2020 6c6f   spectral.    lo",
            "-00014d60: 7373 2061 6e64 2053 4150 4d20 616e 676c  ss and SAPM angl",
            "-00014d70: 6520 6f66 2069 6e63 6964 656e 6365 206c  e of incidence l",
            "-00014d80: 6f73 7320 6675 6e63 7469 6f6e 732e 0a0a  oss functions...",
            "-00014d90: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "-00014da0: 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020     ----------.  ",
            "-00014db0: 2020 706f 615f 6469 7265 6374 203a 206e    poa_direct : n",
            "-00014dc0: 756d 6572 6963 0a20 2020 2020 2020 2054  umeric.        T",
            "-00014dd0: 6865 2064 6972 6563 7420 6972 7261 6469  he direct irradi",
            "-00014de0: 616e 6365 2069 6e63 6964 656e 7420 7570  ance incident up",
            "-00014df0: 6f6e 2074 6865 206d 6f64 756c 652e 205b  on the module. [",
            "-00014e00: 572f 6d32 5d0a 0a20 2020 2070 6f61 5f64  W/m2]..    poa_d",
            "-00014e10: 6966 6675 7365 203a 206e 756d 6572 6963  iffuse : numeric",
            "-00014e20: 0a20 2020 2020 2020 2054 6865 2064 6966  .        The dif",
            "-00014e30: 6675 7365 2069 7272 6164 6961 6e63 6520  fuse irradiance ",
            "-00014e40: 696e 6369 6465 6e74 206f 6e20 6d6f 6475  incident on modu",
            "-00014e50: 6c65 2e20 205b 572f 6d32 5d0a 0a20 2020  le.  [W/m2]..   ",
            "-00014e60: 2061 6972 6d61 7373 5f61 6273 6f6c 7574   airmass_absolut",
            "-00014e70: 6520 3a20 6e75 6d65 7269 630a 2020 2020  e : numeric.    ",
            "-00014e80: 2020 2020 4162 736f 6c75 7465 2061 6972      Absolute air",
            "-00014e90: 6d61 7373 2e20 5b75 6e69 746c 6573 735d  mass. [unitless]",
            "-00014ea0: 0a0a 2020 2020 616f 6920 3a20 6e75 6d65  ..    aoi : nume",
            "-00014eb0: 7269 630a 2020 2020 2020 2020 416e 676c  ric.        Angl",
            "-00014ec0: 6520 6f66 2069 6e63 6964 656e 6365 2e20  e of incidence. ",
            "-00014ed0: 5b64 6567 7265 6573 5d0a 0a20 2020 206d  [degrees]..    m",
            "-00014ee0: 6f64 756c 6520 3a20 6469 6374 2d6c 696b  odule : dict-lik",
            "-00014ef0: 650a 2020 2020 2020 2020 4120 6469 6374  e.        A dict",
            "-00014f00: 2c20 5365 7269 6573 2c20 6f72 2044 6174  , Series, or Dat",
            "-00014f10: 6146 7261 6d65 2064 6566 696e 696e 6720  aFrame defining ",
            "-00014f20: 7468 6520 5341 504d 2070 6572 666f 726d  the SAPM perform",
            "-00014f30: 616e 6365 0a20 2020 2020 2020 2070 6172  ance.        par",
            "-00014f40: 616d 6574 6572 732e 2053 6565 2074 6865  ameters. See the",
            "-00014f50: 203a 7079 3a66 756e 633a 6073 6170 6d60   :py:func:`sapm`",
            "-00014f60: 206e 6f74 6573 2073 6563 7469 6f6e 2066   notes section f",
            "-00014f70: 6f72 206d 6f72 650a 2020 2020 2020 2020  or more.        ",
            "-00014f80: 6465 7461 696c 732e 0a0a 2020 2020 5265  details...    Re",
            "-00014f90: 7475 726e 730a 2020 2020 2d2d 2d2d 2d2d  turns.    ------",
            "-00014fa0: 2d0a 2020 2020 6566 6665 6374 6976 655f  -.    effective_",
            "-00014fb0: 6972 7261 6469 616e 6365 203a 206e 756d  irradiance : num",
            "-00014fc0: 6572 6963 0a20 2020 2020 2020 2045 6666  eric.        Eff",
            "-00014fd0: 6563 7469 7665 2069 7272 6164 6961 6e63  ective irradianc",
            "-00014fe0: 6520 6163 636f 756e 7469 6e67 2066 6f72  e accounting for",
            "-00014ff0: 2072 6566 6c65 6374 696f 6e73 2061 6e64   reflections and",
            "-00015000: 2073 7065 6374 7261 6c20 636f 6e74 656e   spectral conten",
            "-00015010: 742e 0a20 2020 2020 2020 205b 572f 6d32  t..        [W/m2",
            "-00015020: 5d0a 0a20 2020 204e 6f74 6573 0a20 2020  ]..    Notes.   ",
            "-00015030: 202d 2d2d 2d2d 0a20 2020 2054 6865 2053   -----.    The S",
            "-00015040: 4150 4d20 6d6f 6465 6c20 666f 7220 6566  APM model for ef",
            "-00015050: 6665 6374 6976 6520 6972 7261 6469 616e  fective irradian",
            "-00015060: 6365 205b 315d 5f20 7472 616e 736c 6174  ce [1]_ translat",
            "-00015070: 6573 2062 726f 6164 6261 6e64 2064 6972  es broadband dir",
            "-00015080: 6563 740a 2020 2020 616e 6420 6469 6666  ect.    and diff",
            "-00015090: 7573 6520 6972 7261 6469 616e 6365 206f  use irradiance o",
            "-000150a0: 6e20 7468 6520 706c 616e 6520 6f66 2061  n the plane of a",
            "-000150b0: 7272 6179 2074 6f20 7468 6520 6972 7261  rray to the irra",
            "-000150c0: 6469 616e 6365 2061 6273 6f72 6265 6420  diance absorbed ",
            "-000150d0: 6279 0a20 2020 2061 206d 6f64 756c 6527  by.    a module'",
            "-000150e0: 7320 6365 6c6c 732e 0a0a 2020 2020 5468  s cells...    Th",
            "-000150f0: 6520 6d6f 6465 6c20 6973 0a0a 2020 2020  e model is..    ",
            "-00015100: 2e2e 206d 6174 683a 3a0a 0a20 2020 2020  .. math::..     ",
            "-00015110: 2020 2045 6520 3d20 665f 3128 414d 5f61     Ee = f_1(AM_a",
            "-00015120: 2920 2845 5f62 2066 5f32 2841 4f49 2920  ) (E_b f_2(AOI) ",
            "-00015130: 2b20 665f 6420 455f 6429 0a0a 2020 2020  + f_d E_d)..    ",
            "-00015140: 7768 6572 6520 3a6d 6174 683a 6045 6560  where :math:`Ee`",
            "-00015150: 2069 7320 6566 6665 6374 6976 6520 6972   is effective ir",
            "-00015160: 7261 6469 616e 6365 2028 572f 6d32 292c  radiance (W/m2),",
            "-00015170: 203a 6d61 7468 3a60 665f 3160 2069 7320   :math:`f_1` is ",
            "-00015180: 6120 666f 7572 7468 0a20 2020 2064 6567  a fourth.    deg",
            "-00015190: 7265 6520 706f 6c79 6e6f 6d69 616c 2069  ree polynomial i",
            "-000151a0: 6e20 6169 7220 6d61 7373 203a 6d61 7468  n air mass :math",
            "-000151b0: 3a60 414d 5f61 602c 203a 6d61 7468 3a60  :`AM_a`, :math:`",
            "-000151c0: 455f 6260 2069 7320 6265 616d 2028 6469  E_b` is beam (di",
            "-000151d0: 7265 6374 290a 2020 2020 6972 7261 6469  rect).    irradi",
            "-000151e0: 616e 6365 206f 6e20 7468 6520 706c 616e  ance on the plan",
            "-000151f0: 6520 6f66 2061 7272 6179 2c20 3a6d 6174  e of array, :mat",
            "-00015200: 683a 6045 5f64 6020 6973 2064 6966 6675  h:`E_d` is diffu",
            "-00015210: 7365 2069 7272 6164 6961 6e63 6520 6f6e  se irradiance on",
            "-00015220: 2074 6865 0a20 2020 2070 6c61 6e65 206f   the.    plane o",
            "-00015230: 6620 6172 7261 792c 203a 6d61 7468 3a60  f array, :math:`",
            "-00015240: 665f 3260 2069 7320 6120 6669 6674 6820  f_2` is a fifth ",
            "-00015250: 6465 6772 6565 2070 6f6c 796e 6f6d 6961  degree polynomia",
            "-00015260: 6c20 696e 2074 6865 2061 6e67 6c65 206f  l in the angle o",
            "-00015270: 660a 2020 2020 696e 6369 6465 6e63 6520  f.    incidence ",
            "-00015280: 3a6d 6174 683a 6041 4f49 602c 2061 6e64  :math:`AOI`, and",
            "-00015290: 203a 6d61 7468 3a60 665f 6460 2069 7320   :math:`f_d` is ",
            "-000152a0: 7468 6520 6672 6163 7469 6f6e 206f 6620  the fraction of ",
            "-000152b0: 6469 6666 7573 650a 2020 2020 6972 7261  diffuse.    irra",
            "-000152c0: 6469 616e 6365 206f 6e20 7468 6520 706c  diance on the pl",
            "-000152d0: 616e 6520 6f66 2061 7272 6179 2074 6861  ane of array tha",
            "-000152e0: 7420 6973 206e 6f74 2072 6566 6c65 6374  t is not reflect",
            "-000152f0: 6564 2061 7761 792e 0a0a 2020 2020 5265  ed away...    Re",
            "-00015300: 6665 7265 6e63 6573 0a20 2020 202d 2d2d  ferences.    ---",
            "-00015310: 2d2d 2d2d 2d2d 2d0a 2020 2020 2e2e 205b  -------.    .. [",
            "-00015320: 315d 2044 2e20 4b69 6e67 2065 7420 616c  1] D. King et al",
            "-00015330: 2c20 2253 616e 6469 6120 5068 6f74 6f76  , \"Sandia Photov",
            "-00015340: 6f6c 7461 6963 2041 7272 6179 2050 6572  oltaic Array Per",
            "-00015350: 666f 726d 616e 6365 204d 6f64 656c 222c  formance Model\",",
            "-00015360: 0a20 2020 2020 2020 5341 4e44 3230 3034  .       SAND2004",
            "-00015370: 2d33 3533 352c 2053 616e 6469 6120 4e61  -3535, Sandia Na",
            "-00015380: 7469 6f6e 616c 204c 6162 6f72 6174 6f72  tional Laborator",
            "-00015390: 6965 732c 2041 6c62 7571 7565 7271 7565  ies, Albuquerque",
            "-000153a0: 2c20 4e4d 0a0a 2020 2020 5365 6520 616c  , NM..    See al",
            "-000153b0: 736f 0a20 2020 202d 2d2d 2d2d 2d2d 2d0a  so.    --------.",
            "-000153c0: 2020 2020 7076 6c69 622e 6961 6d2e 7361      pvlib.iam.sa",
            "-000153d0: 706d 0a20 2020 2070 766c 6962 2e73 7065  pm.    pvlib.spe",
            "-000153e0: 6374 7275 6d2e 7370 6563 7472 616c 5f66  ctrum.spectral_f",
            "-000153f0: 6163 746f 725f 7361 706d 0a20 2020 2070  actor_sapm.    p",
            "-00015400: 766c 6962 2e70 7673 7973 7465 6d2e 7361  vlib.pvsystem.sa",
            "-00015410: 706d 0a20 2020 2022 2222 0a0a 2020 2020  pm.    \"\"\"..    ",
            "-00015420: 4631 203d 2073 7065 6374 7275 6d2e 7370  F1 = spectrum.sp",
            "-00015430: 6563 7472 616c 5f66 6163 746f 725f 7361  ectral_factor_sa",
            "-00015440: 706d 2861 6972 6d61 7373 5f61 6273 6f6c  pm(airmass_absol",
            "-00015450: 7574 652c 206d 6f64 756c 6529 0a20 2020  ute, module).   ",
            "-00015460: 2046 3220 3d20 6961 6d2e 7361 706d 2861   F2 = iam.sapm(a",
            "-00015470: 6f69 2c20 6d6f 6475 6c65 290a 0a20 2020  oi, module)..   ",
            "-00015480: 2045 6520 3d20 4631 202a 2028 706f 615f   Ee = F1 * (poa_",
            "-00015490: 6469 7265 6374 202a 2046 3220 2b20 6d6f  direct * F2 + mo",
            "-000154a0: 6475 6c65 5b27 4644 275d 202a 2070 6f61  dule['FD'] * poa",
            "-000154b0: 5f64 6966 6675 7365 290a 0a20 2020 2072  _diffuse)..    r",
            "-000154c0: 6574 7572 6e20 4565 0a0a 0a64 6566 2073  eturn Ee...def s",
            "-000154d0: 696e 676c 6564 696f 6465 2870 686f 746f  inglediode(photo",
            "-000154e0: 6375 7272 656e 742c 2073 6174 7572 6174  current, saturat",
            "-000154f0: 696f 6e5f 6375 7272 656e 742c 2072 6573  ion_current, res",
            "-00015500: 6973 7461 6e63 655f 7365 7269 6573 2c0a  istance_series,.",
            "-00015510: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-00015520: 7265 7369 7374 616e 6365 5f73 6875 6e74  resistance_shunt",
            "-00015530: 2c20 6e4e 7356 7468 2c20 6d65 7468 6f64  , nNsVth, method",
            "-00015540: 3d27 6c61 6d62 6572 7477 2729 3a0a 2020  ='lambertw'):.  ",
            "-00015550: 2020 7222 2222 0a20 2020 2053 6f6c 7665    r\"\"\".    Solve",
            "-00015560: 2074 6865 2073 696e 676c 6520 6469 6f64   the single diod",
            "-00015570: 6520 6571 7561 7469 6f6e 2074 6f20 6f62  e equation to ob",
            "-00015580: 7461 696e 2061 2070 686f 746f 766f 6c74  tain a photovolt",
            "-00015590: 6169 6320 4956 2063 7572 7665 2e0a 0a20  aic IV curve... ",
            "-000155a0: 2020 2053 6f6c 7665 7320 7468 6520 7369     Solves the si",
            "-000155b0: 6e67 6c65 2064 696f 6465 2065 7175 6174  ngle diode equat",
            "-000155c0: 696f 6e20 5b31 5d5f 0a0a 2020 2020 2e2e  ion [1]_..    ..",
            "-000155d0: 206d 6174 683a 3a0a 0a20 2020 2020 2020   math::..       ",
            "-000155e0: 2049 203d 2049 5f4c 202d 0a20 2020 2020   I = I_L -.     ",
            "-000155f0: 2020 2020 2020 2049 5f30 205c 6c65 6674         I_0 \\left",
            "-00015600: 5b0a 2020 2020 2020 2020 2020 2020 2020  [.              ",
            "-00015610: 2020 5c65 7870 205c 6c65 6674 285c 6672    \\exp \\left(\\fr",
            "-00015620: 6163 7b56 2b49 2052 5f73 7d7b 6e20 4e5f  ac{V+I R_s}{n N_",
            "-00015630: 7320 565f 7b74 687d 7d20 5c72 6967 6874  s V_{th}} \\right",
            "-00015640: 292d 310a 2020 2020 2020 2020 2020 2020  )-1.            ",
            "-00015650: 5c72 6967 6874 5d20 2d0a 2020 2020 2020  \\right] -.      ",
            "-00015660: 2020 2020 2020 5c66 7261 637b 5620 2b20        \\frac{V + ",
            "-00015670: 4920 525f 737d 7b52 5f7b 7368 7d7d 0a0a  I R_s}{R_{sh}}..",
            "-00015680: 2020 2020 666f 7220 3a6d 6174 683a 6049      for :math:`I",
            "-00015690: 6020 616e 6420 3a6d 6174 683a 6056 6020  ` and :math:`V` ",
            "-000156a0: 7768 656e 2067 6976 656e 203a 6d61 7468  when given :math",
            "-000156b0: 3a60 495f 4c2c 2049 5f30 2c20 525f 732c  :`I_L, I_0, R_s,",
            "-000156c0: 2052 5f7b 7368 7d2c 6020 616e 640a 2020   R_{sh},` and.  ",
            "-000156d0: 2020 3a6d 6174 683a 606e 204e 5f73 2056    :math:`n N_s V",
            "-000156e0: 5f7b 7468 7d60 2077 6869 6368 2061 7265  _{th}` which are",
            "-000156f0: 2064 6573 6372 6962 6564 206c 6174 6572   described later",
            "-00015700: 2e20 5468 6520 6669 7665 2070 6f69 6e74  . The five point",
            "-00015710: 7320 6f6e 2074 6865 2049 2d56 0a20 2020  s on the I-V.   ",
            "-00015720: 2063 7572 7665 2073 7065 6369 6669 6564   curve specified",
            "-00015730: 2069 6e20 5b33 5d5f 2061 7265 2072 6574   in [3]_ are ret",
            "-00015740: 7572 6e65 642e 2049 6620 3a6d 6174 683a  urned. If :math:",
            "-00015750: 6049 5f4c 2c20 495f 302c 2052 5f73 2c20  `I_L, I_0, R_s, ",
            "-00015760: 525f 7b73 687d 2c60 2061 6e64 0a20 2020  R_{sh},` and.   ",
            "-00015770: 203a 6d61 7468 3a60 6e20 4e5f 7320 565f   :math:`n N_s V_",
            "-00015780: 7b74 687d 6020 6172 6520 616c 6c20 7363  {th}` are all sc",
            "-00015790: 616c 6172 732c 2061 2073 696e 676c 6520  alars, a single ",
            "-000157a0: 6375 7276 6520 6973 2072 6574 7572 6e65  curve is returne",
            "-000157b0: 642e 2049 6620 616e 790a 2020 2020 6172  d. If any.    ar",
            "-000157c0: 6520 6172 7261 792d 6c69 6b65 2028 6f66  e array-like (of",
            "-000157d0: 2074 6865 2073 616d 6520 6c65 6e67 7468   the same length",
            "-000157e0: 292c 206d 756c 7469 706c 6520 4956 2063  ), multiple IV c",
            "-000157f0: 7572 7665 7320 6172 6520 6361 6c63 756c  urves are calcul",
            "-00015800: 6174 6564 2e0a 0a20 2020 2054 6865 2069  ated...    The i",
            "-00015810: 6e70 7574 2070 6172 616d 6574 6572 7320  nput parameters ",
            "-00015820: 6361 6e20 6265 2063 616c 6375 6c61 7465  can be calculate",
            "-00015830: 6420 6672 6f6d 206d 6574 656f 726f 6c6f  d from meteorolo",
            "-00015840: 6769 6361 6c20 6461 7461 2075 7369 6e67  gical data using",
            "-00015850: 2061 0a20 2020 2066 756e 6374 696f 6e20   a.    function ",
            "-00015860: 666f 7220 6120 7369 6e67 6c65 2064 696f  for a single dio",
            "-00015870: 6465 206d 6f64 656c 2c20 652e 672e 2c0a  de model, e.g.,.",
            "-00015880: 2020 2020 3a70 793a 6675 6e63 3a60 7e70      :py:func:`~p",
            "-00015890: 766c 6962 2e70 7673 7973 7465 6d2e 6361  vlib.pvsystem.ca",
            "-000158a0: 6c63 7061 7261 6d73 5f64 6573 6f74 6f60  lcparams_desoto`",
            "-000158b0: 2e0a 0a20 2020 2050 6172 616d 6574 6572  ...    Parameter",
            "-000158c0: 730a 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d  s.    ----------",
            "-000158d0: 0a20 2020 2070 686f 746f 6375 7272 656e  .    photocurren",
            "-000158e0: 7420 3a20 6e75 6d65 7269 630a 2020 2020  t : numeric.    ",
            "-000158f0: 2020 2020 4c69 6768 742d 6765 6e65 7261      Light-genera",
            "-00015900: 7465 6420 6375 7272 656e 7420 3a6d 6174  ted current :mat",
            "-00015910: 683a 6049 5f4c 6020 2870 686f 746f 6375  h:`I_L` (photocu",
            "-00015920: 7272 656e 7429 0a20 2020 2020 2020 2060  rrent).        `",
            "-00015930: 6030 203c 3d20 7068 6f74 6f63 7572 7265  `0 <= photocurre",
            "-00015940: 6e74 6060 2e20 5b41 5d0a 0a20 2020 2073  nt``. [A]..    s",
            "-00015950: 6174 7572 6174 696f 6e5f 6375 7272 656e  aturation_curren",
            "-00015960: 7420 3a20 6e75 6d65 7269 630a 2020 2020  t : numeric.    ",
            "-00015970: 2020 2020 4469 6f64 6520 7361 7475 7261      Diode satura",
            "-00015980: 7469 6f6e 203a 6d61 7468 3a60 495f 3060  tion :math:`I_0`",
            "-00015990: 2063 7572 7265 6e74 2075 6e64 6572 2064   current under d",
            "-000159a0: 6573 6972 6564 2049 5620 6375 7276 650a  esired IV curve.",
            "-000159b0: 2020 2020 2020 2020 636f 6e64 6974 696f          conditio",
            "-000159c0: 6e73 2e20 6060 3020 3c20 7361 7475 7261  ns. ``0 < satura",
            "-000159d0: 7469 6f6e 5f63 7572 7265 6e74 6060 2e20  tion_current``. ",
            "-000159e0: 5b41 5d0a 0a20 2020 2072 6573 6973 7461  [A]..    resista",
            "-000159f0: 6e63 655f 7365 7269 6573 203a 206e 756d  nce_series : num",
            "-00015a00: 6572 6963 0a20 2020 2020 2020 2053 6572  eric.        Ser",
            "-00015a10: 6965 7320 7265 7369 7374 616e 6365 203a  ies resistance :",
            "-00015a20: 6d61 7468 3a60 525f 7360 2075 6e64 6572  math:`R_s` under",
            "-00015a30: 2064 6573 6972 6564 2049 5620 6375 7276   desired IV curv",
            "-00015a40: 6520 636f 6e64 6974 696f 6e73 2e0a 2020  e conditions..  ",
            "-00015a50: 2020 2020 2020 6060 3020 3c3d 2072 6573        ``0 <= res",
            "-00015a60: 6973 7461 6e63 655f 7365 7269 6573 203c  istance_series <",
            "-00015a70: 206e 756d 7079 2e69 6e66 6060 2e20 205b   numpy.inf``.  [",
            "-00015a80: 6f68 6d5d 0a0a 2020 2020 7265 7369 7374  ohm]..    resist",
            "-00015a90: 616e 6365 5f73 6875 6e74 203a 206e 756d  ance_shunt : num",
            "-00015aa0: 6572 6963 0a20 2020 2020 2020 2053 6875  eric.        Shu",
            "-00015ab0: 6e74 2072 6573 6973 7461 6e63 6520 3a6d  nt resistance :m",
            "-00015ac0: 6174 683a 6052 5f7b 7368 7d60 2075 6e64  ath:`R_{sh}` und",
            "-00015ad0: 6572 2064 6573 6972 6564 2049 5620 6375  er desired IV cu",
            "-00015ae0: 7276 6520 636f 6e64 6974 696f 6e73 2e0a  rve conditions..",
            "-00015af0: 2020 2020 2020 2020 6060 3020 3c20 7265          ``0 < re",
            "-00015b00: 7369 7374 616e 6365 5f73 6875 6e74 203c  sistance_shunt <",
            "-00015b10: 3d20 6e75 6d70 792e 696e 6660 602e 2020  = numpy.inf``.  ",
            "-00015b20: 5b6f 686d 5d0a 0a20 2020 206e 4e73 5674  [ohm]..    nNsVt",
            "-00015b30: 6820 3a20 6e75 6d65 7269 630a 2020 2020  h : numeric.    ",
            "-00015b40: 2020 2020 5468 6520 7072 6f64 7563 7420      The product ",
            "-00015b50: 6f66 2074 6872 6565 2063 6f6d 706f 6e65  of three compone",
            "-00015b60: 6e74 733a 2031 2920 7468 6520 7573 7561  nts: 1) the usua",
            "-00015b70: 6c20 6469 6f64 6520 6964 6561 6c69 7479  l diode ideality",
            "-00015b80: 2066 6163 746f 720a 2020 2020 2020 2020   factor.        ",
            "-00015b90: 3a6d 6174 683a 606e 602c 2032 2920 7468  :math:`n`, 2) th",
            "-00015ba0: 6520 6e75 6d62 6572 206f 6620 6365 6c6c  e number of cell",
            "-00015bb0: 7320 696e 2073 6572 6965 7320 3a6d 6174  s in series :mat",
            "-00015bc0: 683a 604e 5f73 602c 2061 6e64 2033 290a  h:`N_s`, and 3).",
            "-00015bd0: 2020 2020 2020 2020 7468 6520 6365 6c6c          the cell",
            "-00015be0: 2074 6865 726d 616c 2076 6f6c 7461 6765   thermal voltage",
            "-00015bf0: 0a20 2020 2020 2020 203a 6d61 7468 3a60  .        :math:`",
            "-00015c00: 565f 7b74 687d 602e 2054 6865 2074 6865  V_{th}`. The the",
            "-00015c10: 726d 616c 2076 6f6c 7461 6765 206f 6620  rmal voltage of ",
            "-00015c20: 7468 6520 6365 6c6c 2028 696e 2076 6f6c  the cell (in vol",
            "-00015c30: 7473 2920 6d61 7920 6265 0a20 2020 2020  ts) may be.     ",
            "-00015c40: 2020 2063 616c 6375 6c61 7465 6420 6173     calculated as",
            "-00015c50: 203a 6d61 7468 3a60 6b5f 4220 545f 6320   :math:`k_B T_c ",
            "-00015c60: 2f20 7160 2c20 7768 6572 6520 3a6d 6174  / q`, where :mat",
            "-00015c70: 683a 606b 5f42 6020 6973 0a20 2020 2020  h:`k_B` is.     ",
            "-00015c80: 2020 2042 6f6c 747a 6d61 6e6e 2773 2063     Boltzmann's c",
            "-00015c90: 6f6e 7374 616e 7420 284a 2f4b 292c 203a  onstant (J/K), :",
            "-00015ca0: 6d61 7468 3a60 545f 6360 2069 7320 7468  math:`T_c` is th",
            "-00015cb0: 6520 7465 6d70 6572 6174 7572 6520 6f66  e temperature of",
            "-00015cc0: 2074 6865 2070 2d6e 0a20 2020 2020 2020   the p-n.       ",
            "-00015cd0: 206a 756e 6374 696f 6e20 696e 204b 656c   junction in Kel",
            "-00015ce0: 7669 6e2c 2061 6e64 203a 6d61 7468 3a60  vin, and :math:`",
            "-00015cf0: 7160 2069 7320 7468 6520 6368 6172 6765  q` is the charge",
            "-00015d00: 206f 6620 616e 2065 6c65 6374 726f 6e0a   of an electron.",
            "-00015d10: 2020 2020 2020 2020 2863 6f75 6c6f 6d62          (coulomb",
            "-00015d20: 7329 2e20 6060 3020 3c20 6e4e 7356 7468  s). ``0 < nNsVth",
            "-00015d30: 6060 2e20 205b 565d 0a0a 2020 2020 6d65  ``.  [V]..    me",
            "-00015d40: 7468 6f64 203a 2073 7472 2c20 6465 6661  thod : str, defa",
            "-00015d50: 756c 7420 276c 616d 6265 7274 7727 0a20  ult 'lambertw'. ",
            "-00015d60: 2020 2020 2020 2044 6574 6572 6d69 6e65         Determine",
            "-00015d70: 7320 7468 6520 6d65 7468 6f64 2075 7365  s the method use",
            "-00015d80: 6420 746f 2063 616c 6375 6c61 7465 2070  d to calculate p",
            "-00015d90: 6f69 6e74 7320 6f6e 2074 6865 2049 5620  oints on the IV ",
            "-00015da0: 6375 7276 652e 2054 6865 0a20 2020 2020  curve. The.     ",
            "-00015db0: 2020 206f 7074 696f 6e73 2061 7265 2060     options are `",
            "-00015dc0: 6027 6c61 6d62 6572 7477 2760 602c 2060  `'lambertw'``, `",
            "-00015dd0: 6027 6e65 7774 6f6e 2760 602c 206f 7220  `'newton'``, or ",
            "-00015de0: 6060 2762 7265 6e74 7127 6060 2e0a 0a20  ``'brentq'``... ",
            "-00015df0: 2020 2052 6574 7572 6e73 0a20 2020 202d     Returns.    -",
            "-00015e00: 2d2d 2d2d 2d2d 0a20 2020 2064 6963 7420  ------.    dict ",
            "-00015e10: 6f72 2070 616e 6461 732e 4461 7461 4672  or pandas.DataFr",
            "-00015e20: 616d 650a 2020 2020 2020 2020 5468 6520  ame.        The ",
            "-00015e30: 7265 7475 726e 6564 2064 6963 742d 6c69  returned dict-li",
            "-00015e40: 6b65 206f 626a 6563 7420 616c 7761 7973  ke object always",
            "-00015e50: 2063 6f6e 7461 696e 7320 7468 6520 6b65   contains the ke",
            "-00015e60: 7973 2f63 6f6c 756d 6e73 3a0a 0a20 2020  ys/columns:..   ",
            "-00015e70: 2020 2020 202a 2069 5f73 6320 2d20 7368       * i_sc - sh",
            "-00015e80: 6f72 7420 6369 7263 7569 7420 6375 7272  ort circuit curr",
            "-00015e90: 656e 7420 696e 2061 6d70 6572 6573 2e0a  ent in amperes..",
            "-00015ea0: 2020 2020 2020 2020 2a20 765f 6f63 202d          * v_oc -",
            "-00015eb0: 206f 7065 6e20 6369 7263 7569 7420 766f   open circuit vo",
            "-00015ec0: 6c74 6167 6520 696e 2076 6f6c 7473 2e0a  ltage in volts..",
            "-00015ed0: 2020 2020 2020 2020 2a20 695f 6d70 202d          * i_mp -",
            "-00015ee0: 2063 7572 7265 6e74 2061 7420 6d61 7869   current at maxi",
            "-00015ef0: 6d75 6d20 706f 7765 7220 706f 696e 7420  mum power point ",
            "-00015f00: 696e 2061 6d70 6572 6573 2e0a 2020 2020  in amperes..    ",
            "-00015f10: 2020 2020 2a20 765f 6d70 202d 2076 6f6c      * v_mp - vol",
            "-00015f20: 7461 6765 2061 7420 6d61 7869 6d75 6d20  tage at maximum ",
            "-00015f30: 706f 7765 7220 706f 696e 7420 696e 2076  power point in v",
            "-00015f40: 6f6c 7473 2e0a 2020 2020 2020 2020 2a20  olts..        * ",
            "-00015f50: 705f 6d70 202d 2070 6f77 6572 2061 7420  p_mp - power at ",
            "-00015f60: 6d61 7869 6d75 6d20 706f 7765 7220 706f  maximum power po",
            "-00015f70: 696e 7420 696e 2077 6174 7473 2e0a 2020  int in watts..  ",
            "-00015f80: 2020 2020 2020 2a20 695f 7820 2d20 6375        * i_x - cu",
            "-00015f90: 7272 656e 742c 2069 6e20 616d 7065 7265  rrent, in ampere",
            "-00015fa0: 732c 2061 7420 6060 7620 3d20 302e 352a  s, at ``v = 0.5*",
            "-00015fb0: 765f 6f63 6060 2e0a 2020 2020 2020 2020  v_oc``..        ",
            "-00015fc0: 2a20 695f 7878 202d 2063 7572 7265 6e74  * i_xx - current",
            "-00015fd0: 2c20 696e 2061 6d70 6572 6573 2c20 6174  , in amperes, at",
            "-00015fe0: 2060 6076 203d 2030 2e35 2a28 765f 6f63   ``v = 0.5*(v_oc",
            "-00015ff0: 2b76 5f6d 7029 6060 2e0a 0a20 2020 2020  +v_mp)``...     ",
            "-00016000: 2020 2041 2064 6963 7420 6973 2072 6574     A dict is ret",
            "-00016010: 7572 6e65 6420 7768 656e 2074 6865 2069  urned when the i",
            "-00016020: 6e70 7574 2070 6172 616d 6574 6572 7320  nput parameters ",
            "-00016030: 6172 6520 7363 616c 6172 732e 0a0a 2020  are scalars...  ",
            "-00016040: 2020 5365 6520 616c 736f 0a20 2020 202d    See also.    -",
            "-00016050: 2d2d 2d2d 2d2d 2d0a 2020 2020 6361 6c63  -------.    calc",
            "-00016060: 7061 7261 6d73 5f64 6573 6f74 6f0a 2020  params_desoto.  ",
            "-00016070: 2020 6361 6c63 7061 7261 6d73 5f63 6563    calcparams_cec",
            "-00016080: 0a20 2020 2063 616c 6370 6172 616d 735f  .    calcparams_",
            "-00016090: 7076 7379 7374 0a20 2020 2073 6170 6d0a  pvsyst.    sapm.",
            "-000160a0: 2020 2020 7076 6c69 622e 7369 6e67 6c65      pvlib.single",
            "-000160b0: 6469 6f64 652e 6269 7368 6f70 3838 0a0a  diode.bishop88..",
            "-000160c0: 2020 2020 4e6f 7465 730a 2020 2020 2d2d      Notes.    --",
            "-000160d0: 2d2d 2d0a 2020 2020 4966 2074 6865 206d  ---.    If the m",
            "-000160e0: 6574 686f 6420 6973 2060 6027 6c61 6d62  ethod is ``'lamb",
            "-000160f0: 6572 7477 2760 6020 7468 656e 2074 6865  ertw'`` then the",
            "-00016100: 2073 6f6c 7574 696f 6e20 656d 706c 6f79   solution employ",
            "-00016110: 6564 2074 6f20 736f 6c76 6520 7468 650a  ed to solve the.",
            "-00016120: 2020 2020 696d 706c 6963 6974 2064 696f      implicit dio",
            "-00016130: 6465 2065 7175 6174 696f 6e20 7574 696c  de equation util",
            "-00016140: 697a 6573 2074 6865 204c 616d 6265 7274  izes the Lambert",
            "-00016150: 2057 2066 756e 6374 696f 6e20 746f 206f   W function to o",
            "-00016160: 6274 6169 6e20 616e 0a20 2020 2065 7870  btain an.    exp",
            "-00016170: 6c69 6369 7420 6675 6e63 7469 6f6e 206f  licit function o",
            "-00016180: 6620 3a6d 6174 683a 6056 3d66 2849 2960  f :math:`V=f(I)`",
            "-00016190: 2061 6e64 203a 6d61 7468 3a60 493d 6628   and :math:`I=f(",
            "-000161a0: 5629 6020 6173 2073 686f 776e 2069 6e20  V)` as shown in ",
            "-000161b0: 5b32 5d5f 2e0a 0a20 2020 2049 6620 7468  [2]_...    If th",
            "-000161c0: 6520 6d65 7468 6f64 2069 7320 6060 276e  e method is ``'n",
            "-000161d0: 6577 746f 6e27 6060 2074 6865 6e20 7468  ewton'`` then th",
            "-000161e0: 6520 726f 6f74 2d66 696e 6469 6e67 204e  e root-finding N",
            "-000161f0: 6577 746f 6e2d 5261 7068 736f 6e20 6d65  ewton-Raphson me",
            "-00016200: 7468 6f64 0a20 2020 2069 7320 7573 6564  thod.    is used",
            "-00016210: 2e20 4974 2073 686f 756c 6420 6265 2073  . It should be s",
            "-00016220: 6166 6520 666f 7220 7765 6c6c 2062 6568  afe for well beh",
            "-00016230: 6176 6564 2049 562d 6375 7276 6573 2c20  aved IV-curves, ",
            "-00016240: 6275 7420 7468 6520 6060 2762 7265 6e74  but the ``'brent",
            "-00016250: 7127 6060 0a20 2020 206d 6574 686f 6420  q'``.    method ",
            "-00016260: 6973 2072 6563 6f6d 6d65 6e64 6564 2066  is recommended f",
            "-00016270: 6f72 2072 656c 6961 6269 6c69 7479 2e0a  or reliability..",
            "-00016280: 0a20 2020 2049 6620 7468 6520 6d65 7468  .    If the meth",
            "-00016290: 6f64 2069 7320 6060 2762 7265 6e74 7127  od is ``'brentq'",
            "-000162a0: 6060 2074 6865 6e20 4272 656e 7427 7320  `` then Brent's ",
            "-000162b0: 6269 7365 6374 696f 6e20 7365 6172 6368  bisection search",
            "-000162c0: 206d 6574 686f 6420 6973 2075 7365 640a   method is used.",
            "-000162d0: 2020 2020 7468 6174 2067 7561 7261 6e74      that guarant",
            "-000162e0: 6565 7320 636f 6e76 6572 6765 6e63 6520  ees convergence ",
            "-000162f0: 6279 2062 6f75 6e64 696e 6720 7468 6520  by bounding the ",
            "-00016300: 766f 6c74 6167 6520 6265 7477 6565 6e20  voltage between ",
            "-00016310: 7a65 726f 2061 6e64 0a20 2020 206f 7065  zero and.    ope",
            "-00016320: 6e2d 6369 7263 7569 742e 0a0a 2020 2020  n-circuit...    ",
            "-00016330: 5265 6665 7265 6e63 6573 0a20 2020 202d  References.    -",
            "-00016340: 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020 2e2e  ---------.    ..",
            "-00016350: 205b 315d 2053 2e52 2e20 5765 6e68 616d   [1] S.R. Wenham",
            "-00016360: 2c20 4d2e 412e 2047 7265 656e 2c20 4d2e  , M.A. Green, M.",
            "-00016370: 452e 2057 6174 742c 2022 4170 706c 6965  E. Watt, \"Applie",
            "-00016380: 6420 5068 6f74 6f76 6f6c 7461 6963 7322  d Photovoltaics\"",
            "-00016390: 2049 5342 4e0a 2020 2020 2020 2030 2038   ISBN.       0 8",
            "-000163a0: 3637 3538 2039 3039 2034 0a0a 2020 2020  6758 909 4..    ",
            "-000163b0: 2e2e 205b 325d 2041 2e20 4a61 696e 2c20  .. [2] A. Jain, ",
            "-000163c0: 412e 204b 6170 6f6f 722c 2022 4578 6163  A. Kapoor, \"Exac",
            "-000163d0: 7420 616e 616c 7974 6963 616c 2073 6f6c  t analytical sol",
            "-000163e0: 7574 696f 6e73 206f 6620 7468 650a 2020  utions of the.  ",
            "-000163f0: 2020 2020 2070 6172 616d 6574 6572 7320       parameters ",
            "-00016400: 6f66 2072 6561 6c20 736f 6c61 7220 6365  of real solar ce",
            "-00016410: 6c6c 7320 7573 696e 6720 4c61 6d62 6572  lls using Lamber",
            "-00016420: 7420 572d 6675 6e63 7469 6f6e 222c 2053  t W-function\", S",
            "-00016430: 6f6c 6172 0a20 2020 2020 2020 456e 6572  olar.       Ener",
            "-00016440: 6779 204d 6174 6572 6961 6c73 2061 6e64  gy Materials and",
            "-00016450: 2053 6f6c 6172 2043 656c 6c73 2c20 3831   Solar Cells, 81",
            "-00016460: 2028 3230 3034 2920 3236 392d 3237 372e   (2004) 269-277.",
            "-00016470: 0a0a 2020 2020 2e2e 205b 335d 2044 2e20  ..    .. [3] D. ",
            "-00016480: 4b69 6e67 2065 7420 616c 2c20 2253 616e  King et al, \"San",
            "-00016490: 6469 6120 5068 6f74 6f76 6f6c 7461 6963  dia Photovoltaic",
            "-000164a0: 2041 7272 6179 2050 6572 666f 726d 616e   Array Performan",
            "-000164b0: 6365 204d 6f64 656c 222c 0a20 2020 2020  ce Model\",.     ",
            "-000164c0: 2020 5341 4e44 3230 3034 2d33 3533 352c    SAND2004-3535,",
            "-000164d0: 2053 616e 6469 6120 4e61 7469 6f6e 616c   Sandia National",
            "-000164e0: 204c 6162 6f72 6174 6f72 6965 732c 2041   Laboratories, A",
            "-000164f0: 6c62 7571 7565 7271 7565 2c20 4e4d 0a0a  lbuquerque, NM..",
            "-00016500: 2020 2020 2e2e 205b 345d 2022 436f 6d70      .. [4] \"Comp",
            "-00016510: 7574 6572 2073 696d 756c 6174 696f 6e20  uter simulation ",
            "-00016520: 6f66 2074 6865 2065 6666 6563 7473 206f  of the effects o",
            "-00016530: 6620 656c 6563 7472 6963 616c 206d 6973  f electrical mis",
            "-00016540: 6d61 7463 6865 7320 696e 0a20 2020 2020  matches in.     ",
            "-00016550: 2020 7068 6f74 6f76 6f6c 7461 6963 2063    photovoltaic c",
            "-00016560: 656c 6c20 696e 7465 7263 6f6e 6e65 6374  ell interconnect",
            "-00016570: 696f 6e20 6369 7263 7569 7473 2220 4a57  ion circuits\" JW",
            "-00016580: 2042 6973 686f 702c 2053 6f6c 6172 2043   Bishop, Solar C",
            "-00016590: 656c 6c20 2831 3938 3829 0a20 2020 2020  ell (1988).     ",
            "-000165a0: 2020 6874 7470 733a 2f2f 646f 692e 6f72    https://doi.or",
            "-000165b0: 672f 3130 2e31 3031 362f 3033 3739 2d36  g/10.1016/0379-6",
            "-000165c0: 3738 3728 3838 2939 3030 3539 2d32 0a20  787(88)90059-2. ",
            "-000165d0: 2020 2022 2222 0a20 2020 2061 7267 7320     \"\"\".    args ",
            "-000165e0: 3d20 2870 686f 746f 6375 7272 656e 742c  = (photocurrent,",
            "-000165f0: 2073 6174 7572 6174 696f 6e5f 6375 7272   saturation_curr",
            "-00016600: 656e 742c 2072 6573 6973 7461 6e63 655f  ent, resistance_",
            "-00016610: 7365 7269 6573 2c0a 2020 2020 2020 2020  series,.        ",
            "-00016620: 2020 2020 7265 7369 7374 616e 6365 5f73      resistance_s",
            "-00016630: 6875 6e74 2c20 6e4e 7356 7468 2920 2023  hunt, nNsVth)  #",
            "-00016640: 2063 6f6c 6c65 6374 2061 7267 730a 2020   collect args.  ",
            "-00016650: 2020 2320 4361 6c63 756c 6174 6520 706f    # Calculate po",
            "-00016660: 696e 7473 206f 6e20 7468 6520 4956 2063  ints on the IV c",
            "-00016670: 7572 7665 2075 7369 6e67 2074 6865 204c  urve using the L",
            "-00016680: 616d 6265 7274 5720 736f 6c75 7469 6f6e  ambertW solution",
            "-00016690: 2074 6f20 7468 650a 2020 2020 2320 7369   to the.    # si",
            "-000166a0: 6e67 6c65 2064 696f 6465 2065 7175 6174  ngle diode equat",
            "-000166b0: 696f 6e0a 2020 2020 6966 206d 6574 686f  ion.    if metho",
            "-000166c0: 642e 6c6f 7765 7228 2920 3d3d 2027 6c61  d.lower() == 'la",
            "-000166d0: 6d62 6572 7477 273a 0a20 2020 2020 2020  mbertw':.       ",
            "-000166e0: 206f 7574 203d 205f 7369 6e67 6c65 6469   out = _singledi",
            "-000166f0: 6f64 652e 5f6c 616d 6265 7274 7728 2a61  ode._lambertw(*a",
            "-00016700: 7267 7329 0a20 2020 2020 2020 2070 6f69  rgs).        poi",
            "-00016710: 6e74 7320 3d20 6f75 745b 3a37 5d0a 2020  nts = out[:7].  ",
            "-00016720: 2020 656c 7365 3a0a 2020 2020 2020 2020    else:.        ",
            "-00016730: 2320 4361 6c63 756c 6174 6520 706f 696e  # Calculate poin",
            "-00016740: 7473 206f 6e20 7468 6520 4956 2063 7572  ts on the IV cur",
            "-00016750: 7665 2075 7369 6e67 2065 6974 6865 7220  ve using either ",
            "-00016760: 276e 6577 746f 6e27 206f 7220 2762 7265  'newton' or 'bre",
            "-00016770: 6e74 7127 0a20 2020 2020 2020 2023 206d  ntq'.        # m",
            "-00016780: 6574 686f 6473 2e20 566f 6c74 6167 6573  ethods. Voltages",
            "-00016790: 2061 7265 2064 6574 6572 6d69 6e65 6420   are determined ",
            "-000167a0: 6279 2066 6972 7374 2073 6f6c 7669 6e67  by first solving",
            "-000167b0: 2074 6865 2073 696e 676c 6520 6469 6f64   the single diod",
            "-000167c0: 650a 2020 2020 2020 2020 2320 6571 7561  e.        # equa",
            "-000167d0: 7469 6f6e 2066 6f72 2074 6865 2064 696f  tion for the dio",
            "-000167e0: 6465 2076 6f6c 7461 6765 2056 5f64 2074  de voltage V_d t",
            "-000167f0: 6865 6e20 6261 636b 696e 6720 6f75 7420  hen backing out ",
            "-00016800: 766f 6c74 6167 650a 2020 2020 2020 2020  voltage.        ",
            "-00016810: 765f 6f63 203d 205f 7369 6e67 6c65 6469  v_oc = _singledi",
            "-00016820: 6f64 652e 6269 7368 6f70 3838 5f76 5f66  ode.bishop88_v_f",
            "-00016830: 726f 6d5f 6928 0a20 2020 2020 2020 2020  rom_i(.         ",
            "-00016840: 2020 2030 2e30 2c20 2a61 7267 732c 206d     0.0, *args, m",
            "-00016850: 6574 686f 643d 6d65 7468 6f64 2e6c 6f77  ethod=method.low",
            "-00016860: 6572 2829 0a20 2020 2020 2020 2029 0a20  er().        ). ",
            "-00016870: 2020 2020 2020 2069 5f6d 702c 2076 5f6d         i_mp, v_m",
            "-00016880: 702c 2070 5f6d 7020 3d20 5f73 696e 676c  p, p_mp = _singl",
            "-00016890: 6564 696f 6465 2e62 6973 686f 7038 385f  ediode.bishop88_",
            "-000168a0: 6d70 7028 0a20 2020 2020 2020 2020 2020  mpp(.           ",
            "-000168b0: 202a 6172 6773 2c20 6d65 7468 6f64 3d6d   *args, method=m",
            "-000168c0: 6574 686f 642e 6c6f 7765 7228 290a 2020  ethod.lower().  ",
            "-000168d0: 2020 2020 2020 290a 2020 2020 2020 2020        ).        ",
            "-000168e0: 695f 7363 203d 205f 7369 6e67 6c65 6469  i_sc = _singledi",
            "-000168f0: 6f64 652e 6269 7368 6f70 3838 5f69 5f66  ode.bishop88_i_f",
            "-00016900: 726f 6d5f 7628 0a20 2020 2020 2020 2020  rom_v(.         ",
            "-00016910: 2020 2030 2e30 2c20 2a61 7267 732c 206d     0.0, *args, m",
            "-00016920: 6574 686f 643d 6d65 7468 6f64 2e6c 6f77  ethod=method.low",
            "-00016930: 6572 2829 0a20 2020 2020 2020 2029 0a20  er().        ). ",
            "-00016940: 2020 2020 2020 2069 5f78 203d 205f 7369         i_x = _si",
            "-00016950: 6e67 6c65 6469 6f64 652e 6269 7368 6f70  nglediode.bishop",
            "-00016960: 3838 5f69 5f66 726f 6d5f 7628 0a20 2020  88_i_from_v(.   ",
            "-00016970: 2020 2020 2020 2020 2076 5f6f 6320 2f20           v_oc / ",
            "-00016980: 322e 302c 202a 6172 6773 2c20 6d65 7468  2.0, *args, meth",
            "-00016990: 6f64 3d6d 6574 686f 642e 6c6f 7765 7228  od=method.lower(",
            "-000169a0: 290a 2020 2020 2020 2020 290a 2020 2020  ).        ).    ",
            "-000169b0: 2020 2020 695f 7878 203d 205f 7369 6e67      i_xx = _sing",
            "-000169c0: 6c65 6469 6f64 652e 6269 7368 6f70 3838  lediode.bishop88",
            "-000169d0: 5f69 5f66 726f 6d5f 7628 0a20 2020 2020  _i_from_v(.     ",
            "-000169e0: 2020 2020 2020 2028 765f 6f63 202b 2076         (v_oc + v",
            "-000169f0: 5f6d 7029 202f 2032 2e30 2c20 2a61 7267  _mp) / 2.0, *arg",
            "-00016a00: 732c 206d 6574 686f 643d 6d65 7468 6f64  s, method=method",
            "-00016a10: 2e6c 6f77 6572 2829 0a20 2020 2020 2020  .lower().       ",
            "-00016a20: 2029 0a20 2020 2020 2020 2070 6f69 6e74   ).        point",
            "-00016a30: 7320 3d20 695f 7363 2c20 765f 6f63 2c20  s = i_sc, v_oc, ",
            "-00016a40: 695f 6d70 2c20 765f 6d70 2c20 705f 6d70  i_mp, v_mp, p_mp",
            "-00016a50: 2c20 695f 782c 2069 5f78 780a 0a20 2020  , i_x, i_xx..   ",
            "-00016a60: 2063 6f6c 756d 6e73 203d 2028 2769 5f73   columns = ('i_s",
            "-00016a70: 6327 2c20 2776 5f6f 6327 2c20 2769 5f6d  c', 'v_oc', 'i_m",
            "-00016a80: 7027 2c20 2776 5f6d 7027 2c20 2770 5f6d  p', 'v_mp', 'p_m",
            "-00016a90: 7027 2c20 2769 5f78 272c 2027 695f 7878  p', 'i_x', 'i_xx",
            "-00016aa0: 2729 0a0a 2020 2020 6966 2061 6c6c 286d  ')..    if all(m",
            "-00016ab0: 6170 286e 702e 6973 7363 616c 6172 2c20  ap(np.isscalar, ",
            "-00016ac0: 6172 6773 2929 3a0a 2020 2020 2020 2020  args)):.        ",
            "-00016ad0: 6f75 7420 3d20 7b63 3a20 7020 666f 7220  out = {c: p for ",
            "-00016ae0: 632c 2070 2069 6e20 7a69 7028 636f 6c75  c, p in zip(colu",
            "-00016af0: 6d6e 732c 2070 6f69 6e74 7329 7d0a 2020  mns, points)}.  ",
            "-00016b00: 2020 2020 2020 7265 7475 726e 206f 7574        return out",
            "-00016b10: 0a0a 2020 2020 706f 696e 7473 203d 206e  ..    points = n",
            "-00016b20: 702e 6174 6c65 6173 745f 3164 282a 706f  p.atleast_1d(*po",
            "-00016b30: 696e 7473 2920 2023 2063 6f6e 7665 7274  ints)  # convert",
            "-00016b40: 2073 6361 6c61 7273 2074 6f20 3164 2d61   scalars to 1d-a",
            "-00016b50: 7272 6179 730a 2020 2020 706f 696e 7473  rrays.    points",
            "-00016b60: 203d 206e 702e 7673 7461 636b 2870 6f69   = np.vstack(poi",
            "-00016b70: 6e74 7329 2e54 2020 2320 636f 6c6c 6563  nts).T  # collec",
            "-00016b80: 7420 726f 7773 2069 6e74 6f20 4461 7461  t rows into Data",
            "-00016b90: 4672 616d 6520 636f 6c75 6d6e 730a 0a20  Frame columns.. ",
            "-00016ba0: 2020 2023 2073 6176 6520 7468 6520 6669     # save the fi",
            "-00016bb0: 7273 7420 6176 6169 6c61 626c 6520 7064  rst available pd",
            "-00016bc0: 2e53 6572 6965 7320 696e 6465 782c 206f  .Series index, o",
            "-00016bd0: 7468 6572 7769 7365 2073 6574 2074 6f20  therwise set to ",
            "-00016be0: 4e6f 6e65 0a20 2020 2069 6e64 6578 203d  None.    index =",
            "-00016bf0: 206e 6578 7428 2861 2e69 6e64 6578 2066   next((a.index f",
            "-00016c00: 6f72 2061 2069 6e20 6172 6773 2069 6620  or a in args if ",
            "-00016c10: 6973 696e 7374 616e 6365 2861 2c20 7064  isinstance(a, pd",
            "-00016c20: 2e53 6572 6965 7329 292c 204e 6f6e 6529  .Series)), None)",
            "-00016c30: 0a0a 2020 2020 6f75 7420 3d20 7064 2e44  ..    out = pd.D",
            "-00016c40: 6174 6146 7261 6d65 2870 6f69 6e74 732c  ataFrame(points,",
            "-00016c50: 2063 6f6c 756d 6e73 3d63 6f6c 756d 6e73   columns=columns",
            "-00016c60: 2c20 696e 6465 783d 696e 6465 7829 0a0a  , index=index)..",
            "-00016c70: 2020 2020 7265 7475 726e 206f 7574 0a0a      return out..",
            "-00016c80: 0a64 6566 206d 6178 5f70 6f77 6572 5f70  .def max_power_p",
            "-00016c90: 6f69 6e74 2870 686f 746f 6375 7272 656e  oint(photocurren",
            "-00016ca0: 742c 2073 6174 7572 6174 696f 6e5f 6375  t, saturation_cu",
            "-00016cb0: 7272 656e 742c 2072 6573 6973 7461 6e63  rrent, resistanc",
            "-00016cc0: 655f 7365 7269 6573 2c0a 2020 2020 2020  e_series,.      ",
            "-00016cd0: 2020 2020 2020 2020 2020 2020 2020 7265                re",
            "-00016ce0: 7369 7374 616e 6365 5f73 6875 6e74 2c20  sistance_shunt, ",
            "-00016cf0: 6e4e 7356 7468 2c20 6432 6d75 7461 753d  nNsVth, d2mutau=",
            "-00016d00: 302c 204e 7356 6269 3d6e 702e 696e 662c  0, NsVbi=np.inf,",
            "-00016d10: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "-00016d20: 2020 2020 206d 6574 686f 643d 2762 7265       method='bre",
            "-00016d30: 6e74 7127 293a 0a20 2020 2022 2222 0a20  ntq'):.    \"\"\". ",
            "-00016d40: 2020 2047 6976 656e 2074 6865 2073 696e     Given the sin",
            "-00016d50: 676c 6520 6469 6f64 6520 6571 7561 7469  gle diode equati",
            "-00016d60: 6f6e 2063 6f65 6666 6963 6965 6e74 732c  on coefficients,",
            "-00016d70: 2063 616c 6375 6c61 7465 7320 7468 6520   calculates the ",
            "-00016d80: 6d61 7869 6d75 6d20 706f 7765 720a 2020  maximum power.  ",
            "-00016d90: 2020 706f 696e 7420 284d 5050 292e 0a0a    point (MPP)...",
            "-00016da0: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "-00016db0: 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020     ----------.  ",
            "-00016dc0: 2020 7068 6f74 6f63 7572 7265 6e74 203a    photocurrent :",
            "-00016dd0: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "-00016de0: 2070 686f 746f 2d67 656e 6572 6174 6564   photo-generated",
            "-00016df0: 2063 7572 7265 6e74 205b 415d 0a20 2020   current [A].   ",
            "-00016e00: 2073 6174 7572 6174 696f 6e5f 6375 7272   saturation_curr",
            "-00016e10: 656e 7420 3a20 6e75 6d65 7269 630a 2020  ent : numeric.  ",
            "-00016e20: 2020 2020 2020 6469 6f64 6520 7265 7665        diode reve",
            "-00016e30: 7273 6520 7361 7475 7261 7469 6f6e 2063  rse saturation c",
            "-00016e40: 7572 7265 6e74 205b 415d 0a20 2020 2072  urrent [A].    r",
            "-00016e50: 6573 6973 7461 6e63 655f 7365 7269 6573  esistance_series",
            "-00016e60: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "-00016e70: 2020 2073 6572 6965 7320 7265 7369 7461     series resita",
            "-00016e80: 6e63 6520 5b6f 686d 735d 0a20 2020 2072  nce [ohms].    r",
            "-00016e90: 6573 6973 7461 6e63 655f 7368 756e 7420  esistance_shunt ",
            "-00016ea0: 3a20 6e75 6d65 7269 630a 2020 2020 2020  : numeric.      ",
            "-00016eb0: 2020 7368 756e 7420 7265 7369 7461 6e63    shunt resitanc",
            "-00016ec0: 6520 5b6f 686d 735d 0a20 2020 206e 4e73  e [ohms].    nNs",
            "-00016ed0: 5674 6820 3a20 6e75 6d65 7269 630a 2020  Vth : numeric.  ",
            "-00016ee0: 2020 2020 2020 7072 6f64 7563 7420 6f66        product of",
            "-00016ef0: 2074 6865 726d 616c 2076 6f6c 7461 6765   thermal voltage",
            "-00016f00: 2060 6056 7468 6060 205b 565d 2c20 6469   ``Vth`` [V], di",
            "-00016f10: 6f64 6520 6964 6561 6c69 7479 2066 6163  ode ideality fac",
            "-00016f20: 746f 7220 6060 6e60 602c 0a20 2020 2020  tor ``n``,.     ",
            "-00016f30: 2020 2061 6e64 206e 756d 6265 7220 6f66     and number of",
            "-00016f40: 2073 6572 6963 6573 2063 656c 6c73 2060   serices cells `",
            "-00016f50: 604e 7360 600a 2020 2020 6432 6d75 7461  `Ns``.    d2muta",
            "-00016f60: 7520 3a20 6e75 6d65 7269 632c 2064 6566  u : numeric, def",
            "-00016f70: 6175 6c74 2030 0a20 2020 2020 2020 2050  ault 0.        P",
            "-00016f80: 5673 7973 7420 7061 7261 6d65 7465 7220  Vsyst parameter ",
            "-00016f90: 666f 7220 6361 646d 6975 6d2d 7465 6c6c  for cadmium-tell",
            "-00016fa0: 7572 6964 6520 2843 6454 6529 2061 6e64  uride (CdTe) and",
            "-00016fb0: 2061 6d6f 7270 686f 7573 2d73 696c 6963   amorphous-silic",
            "-00016fc0: 6f6e 0a20 2020 2020 2020 2028 612d 5369  on.        (a-Si",
            "-00016fd0: 2920 6d6f 6475 6c65 7320 7468 6174 2061  ) modules that a",
            "-00016fe0: 6363 6f75 6e74 7320 666f 7220 7265 636f  ccounts for reco",
            "-00016ff0: 6d62 696e 6174 696f 6e20 6375 7272 656e  mbination curren",
            "-00017000: 7420 696e 2074 6865 0a20 2020 2020 2020  t in the.       ",
            "-00017010: 2069 6e74 7269 6e73 6963 206c 6179 6572   intrinsic layer",
            "-00017020: 2e20 5468 6520 7661 6c75 6520 6973 2074  . The value is t",
            "-00017030: 6865 2072 6174 696f 206f 6620 696e 7472  he ratio of intr",
            "-00017040: 696e 7369 6320 6c61 7965 7220 7468 6963  insic layer thic",
            "-00017050: 6b6e 6573 730a 2020 2020 2020 2020 7371  kness.        sq",
            "-00017060: 7561 7265 6420 3a6d 6174 683a 6064 5e32  uared :math:`d^2",
            "-00017070: 6020 746f 2074 6865 2064 6966 6675 7369  ` to the diffusi",
            "-00017080: 6f6e 206c 656e 6774 6820 6f66 2063 6861  on length of cha",
            "-00017090: 7267 6520 6361 7272 6965 7273 0a20 2020  rge carriers.   ",
            "-000170a0: 2020 2020 203a 6d61 7468 3a60 5c5c 6d75       :math:`\\\\mu",
            "-000170b0: 205c 5c74 6175 602e 205b 565d 0a20 2020   \\\\tau`. [V].   ",
            "-000170c0: 204e 7356 6269 203a 206e 756d 6572 6963   NsVbi : numeric",
            "-000170d0: 2c20 6465 6661 756c 7420 6e70 2e69 6e66  , default np.inf",
            "-000170e0: 0a20 2020 2020 2020 2050 5673 7973 7420  .        PVsyst ",
            "-000170f0: 7061 7261 6d65 7465 7220 666f 7220 6361  parameter for ca",
            "-00017100: 646d 6975 6d2d 7465 6c6c 7572 6964 6520  dmium-telluride ",
            "-00017110: 2843 6454 6529 2061 6e64 2061 6d6f 7270  (CdTe) and amorp",
            "-00017120: 686f 7573 2d73 696c 6963 6f6e 0a20 2020  hous-silicon.   ",
            "-00017130: 2020 2020 2028 612d 5369 2920 6d6f 6475       (a-Si) modu",
            "-00017140: 6c65 7320 7468 6174 2069 7320 7468 6520  les that is the ",
            "-00017150: 7072 6f64 7563 7420 6f66 2074 6865 2050  product of the P",
            "-00017160: 5620 6d6f 6475 6c65 206e 756d 6265 7220  V module number ",
            "-00017170: 6f66 2073 6572 6965 730a 2020 2020 2020  of series.      ",
            "-00017180: 2020 6365 6c6c 7320 6060 4e73 6060 2061    cells ``Ns`` a",
            "-00017190: 6e64 2074 6865 2062 7569 6c74 696e 2076  nd the builtin v",
            "-000171a0: 6f6c 7461 6765 2060 6056 6269 6060 206f  oltage ``Vbi`` o",
            "-000171b0: 6620 7468 6520 696e 7472 696e 7369 6320  f the intrinsic ",
            "-000171c0: 6c61 7965 722e 0a20 2020 2020 2020 205b  layer..        [",
            "-000171d0: 565d 2e0a 2020 2020 6d65 7468 6f64 203a  V]..    method :",
            "-000171e0: 2073 7472 0a20 2020 2020 2020 2065 6974   str.        eit",
            "-000171f0: 6865 7220 6060 276e 6577 746f 6e27 6060  her ``'newton'``",
            "-00017200: 206f 7220 6060 2762 7265 6e74 7127 6060   or ``'brentq'``",
            "-00017210: 0a0a 2020 2020 5265 7475 726e 730a 2020  ..    Returns.  ",
            "-00017220: 2020 2d2d 2d2d 2d2d 2d0a 2020 2020 4f72    -------.    Or",
            "-00017230: 6465 7265 6444 6963 7420 6f72 2070 616e  deredDict or pan",
            "-00017240: 6461 732e 4461 7461 4672 616d 650a 2020  das.DataFrame.  ",
            "-00017250: 2020 2020 2020 6060 2869 5f6d 702c 2076        ``(i_mp, v",
            "-00017260: 5f6d 702c 2070 5f6d 7029 6060 0a0a 2020  _mp, p_mp)``..  ",
            "-00017270: 2020 4e6f 7465 730a 2020 2020 2d2d 2d2d    Notes.    ----",
            "-00017280: 2d0a 2020 2020 5573 6520 7468 6973 2066  -.    Use this f",
            "-00017290: 756e 6374 696f 6e20 7768 656e 2079 6f75  unction when you",
            "-000172a0: 206f 6e6c 7920 7761 6e74 2074 6f20 6669   only want to fi",
            "-000172b0: 6e64 2074 6865 206d 6178 696d 756d 2070  nd the maximum p",
            "-000172c0: 6f77 6572 2070 6f69 6e74 2e20 5573 650a  ower point. Use.",
            "-000172d0: 2020 2020 3a66 756e 633a 6073 696e 676c      :func:`singl",
            "-000172e0: 6564 696f 6465 6020 7768 656e 2079 6f75  ediode` when you",
            "-000172f0: 206e 6565 6420 746f 2066 696e 6420 6164   need to find ad",
            "-00017300: 6469 7469 6f6e 616c 2070 6f69 6e74 7320  ditional points ",
            "-00017310: 6f6e 2074 6865 2049 560a 2020 2020 6375  on the IV.    cu",
            "-00017320: 7276 652e 2054 6869 7320 6675 6e63 7469  rve. This functi",
            "-00017330: 6f6e 2075 7365 7320 4272 656e 7427 7320  on uses Brent's ",
            "-00017340: 6d65 7468 6f64 2062 7920 6465 6661 756c  method by defaul",
            "-00017350: 7420 6265 6361 7573 6520 6974 2069 730a  t because it is.",
            "-00017360: 2020 2020 6775 6172 616e 7465 6564 2074      guaranteed t",
            "-00017370: 6f20 636f 6e76 6572 6765 2e0a 2020 2020  o converge..    ",
            "-00017380: 2222 220a 2020 2020 695f 6d70 2c20 765f  \"\"\".    i_mp, v_",
            "-00017390: 6d70 2c20 705f 6d70 203d 205f 7369 6e67  mp, p_mp = _sing",
            "-000173a0: 6c65 6469 6f64 652e 6269 7368 6f70 3838  lediode.bishop88",
            "-000173b0: 5f6d 7070 280a 2020 2020 2020 2020 7068  _mpp(.        ph",
            "-000173c0: 6f74 6f63 7572 7265 6e74 2c20 7361 7475  otocurrent, satu",
            "-000173d0: 7261 7469 6f6e 5f63 7572 7265 6e74 2c20  ration_current, ",
            "-000173e0: 7265 7369 7374 616e 6365 5f73 6572 6965  resistance_serie",
            "-000173f0: 732c 0a20 2020 2020 2020 2072 6573 6973  s,.        resis",
            "-00017400: 7461 6e63 655f 7368 756e 742c 206e 4e73  tance_shunt, nNs",
            "-00017410: 5674 682c 2064 326d 7574 6175 2c20 4e73  Vth, d2mutau, Ns",
            "-00017420: 5662 692c 206d 6574 686f 643d 6d65 7468  Vbi, method=meth",
            "-00017430: 6f64 2e6c 6f77 6572 2829 0a20 2020 2029  od.lower().    )",
            "-00017440: 0a20 2020 2069 6620 6973 696e 7374 616e  .    if isinstan",
            "-00017450: 6365 2870 686f 746f 6375 7272 656e 742c  ce(photocurrent,",
            "-00017460: 2070 642e 5365 7269 6573 293a 0a20 2020   pd.Series):.   ",
            "-00017470: 2020 2020 2069 7670 203d 207b 2769 5f6d       ivp = {'i_m",
            "-00017480: 7027 3a20 695f 6d70 2c20 2776 5f6d 7027  p': i_mp, 'v_mp'",
            "-00017490: 3a20 765f 6d70 2c20 2770 5f6d 7027 3a20  : v_mp, 'p_mp': ",
            "-000174a0: 705f 6d70 7d0a 2020 2020 2020 2020 6f75  p_mp}.        ou",
            "-000174b0: 7420 3d20 7064 2e44 6174 6146 7261 6d65  t = pd.DataFrame",
            "-000174c0: 2869 7670 2c20 696e 6465 783d 7068 6f74  (ivp, index=phot",
            "-000174d0: 6f63 7572 7265 6e74 2e69 6e64 6578 290a  ocurrent.index).",
            "-000174e0: 2020 2020 656c 7365 3a0a 2020 2020 2020      else:.      ",
            "-000174f0: 2020 6f75 7420 3d20 4f72 6465 7265 6444    out = OrderedD",
            "-00017500: 6963 7428 290a 2020 2020 2020 2020 6f75  ict().        ou",
            "-00017510: 745b 2769 5f6d 7027 5d20 3d20 695f 6d70  t['i_mp'] = i_mp",
            "-00017520: 0a20 2020 2020 2020 206f 7574 5b27 765f  .        out['v_",
            "-00017530: 6d70 275d 203d 2076 5f6d 700a 2020 2020  mp'] = v_mp.    ",
            "-00017540: 2020 2020 6f75 745b 2770 5f6d 7027 5d20      out['p_mp'] ",
            "-00017550: 3d20 705f 6d70 0a20 2020 2072 6574 7572  = p_mp.    retur",
            "-00017560: 6e20 6f75 740a 0a0a 6465 6620 765f 6672  n out...def v_fr",
            "-00017570: 6f6d 5f69 2863 7572 7265 6e74 2c20 7068  om_i(current, ph",
            "-00017580: 6f74 6f63 7572 7265 6e74 2c20 7361 7475  otocurrent, satu",
            "-00017590: 7261 7469 6f6e 5f63 7572 7265 6e74 2c20  ration_current, ",
            "-000175a0: 7265 7369 7374 616e 6365 5f73 6572 6965  resistance_serie",
            "-000175b0: 732c 0a20 2020 2020 2020 2020 2020 2020  s,.             ",
            "-000175c0: 7265 7369 7374 616e 6365 5f73 6875 6e74  resistance_shunt",
            "-000175d0: 2c20 6e4e 7356 7468 2c20 6d65 7468 6f64  , nNsVth, method",
            "-000175e0: 3d27 6c61 6d62 6572 7477 2729 3a0a 2020  ='lambertw'):.  ",
            "-000175f0: 2020 2727 270a 2020 2020 4465 7669 6365    '''.    Device",
            "-00017600: 2076 6f6c 7461 6765 2061 7420 7468 6520   voltage at the ",
            "-00017610: 6769 7665 6e20 6465 7669 6365 2063 7572  given device cur",
            "-00017620: 7265 6e74 2066 6f72 2074 6865 2073 696e  rent for the sin",
            "-00017630: 676c 6520 6469 6f64 6520 6d6f 6465 6c2e  gle diode model.",
            "-00017640: 0a0a 2020 2020 5573 6573 2074 6865 2073  ..    Uses the s",
            "-00017650: 696e 676c 6520 6469 6f64 6520 6d6f 6465  ingle diode mode",
            "-00017660: 6c20 2853 444d 2920 6173 2064 6573 6372  l (SDM) as descr",
            "-00017670: 6962 6564 2069 6e2c 2065 2e67 2e2c 0a20  ibed in, e.g.,. ",
            "-00017680: 2020 204a 6169 6e20 616e 6420 4b61 706f     Jain and Kapo",
            "-00017690: 6f72 2032 3030 3420 5b31 5d5f 2e0a 2020  or 2004 [1]_..  ",
            "-000176a0: 2020 5468 6520 736f 6c75 7469 6f6e 2069    The solution i",
            "-000176b0: 7320 7065 7220 4571 2033 206f 6620 5b31  s per Eq 3 of [1",
            "-000176c0: 5d5f 2065 7863 6570 7420 7768 656e 2072  ]_ except when r",
            "-000176d0: 6573 6973 7461 6e63 655f 7368 756e 743d  esistance_shunt=",
            "-000176e0: 6e75 6d70 792e 696e 662c 0a20 2020 2069  numpy.inf,.    i",
            "-000176f0: 6e20 7768 6963 6820 6361 7365 2074 6865  n which case the",
            "-00017700: 2065 7870 6c69 6374 2073 6f6c 7574 696f   explict solutio",
            "-00017710: 6e20 666f 7220 766f 6c74 6167 6520 6973  n for voltage is",
            "-00017720: 2075 7365 642e 0a20 2020 2049 6465 616c   used..    Ideal",
            "-00017730: 2064 6576 6963 6520 7061 7261 6d65 7465   device paramete",
            "-00017740: 7273 2061 7265 2073 7065 6369 6669 6564  rs are specified",
            "-00017750: 2062 7920 7265 7369 7374 616e 6365 5f73   by resistance_s",
            "-00017760: 6875 6e74 3d6e 702e 696e 6620 616e 640a  hunt=np.inf and.",
            "-00017770: 2020 2020 7265 7369 7374 616e 6365 5f73      resistance_s",
            "-00017780: 6572 6965 733d 302e 0a20 2020 2049 6e70  eries=0..    Inp",
            "-00017790: 7574 7320 746f 2074 6869 7320 6675 6e63  uts to this func",
            "-000177a0: 7469 6f6e 2063 616e 2069 6e63 6c75 6465  tion can include",
            "-000177b0: 2073 6361 6c61 7273 2061 6e64 2070 616e   scalars and pan",
            "-000177c0: 6461 732e 5365 7269 6573 2c20 6275 7420  das.Series, but ",
            "-000177d0: 6974 2069 730a 2020 2020 7468 6520 6361  it is.    the ca",
            "-000177e0: 6c6c 6572 2773 2072 6573 706f 6e73 6962  ller's responsib",
            "-000177f0: 696c 6974 7920 746f 2065 6e73 7572 6520  ility to ensure ",
            "-00017800: 7468 6174 2074 6865 2061 7267 756d 656e  that the argumen",
            "-00017810: 7473 2061 7265 2061 6c6c 2066 6c6f 6174  ts are all float",
            "-00017820: 3634 0a20 2020 2061 6e64 2077 6974 6869  64.    and withi",
            "-00017830: 6e20 7468 6520 7072 6f70 6572 2072 616e  n the proper ran",
            "-00017840: 6765 732e 0a0a 2020 2020 2e2e 2076 6572  ges...    .. ver",
            "-00017850: 7369 6f6e 6368 616e 6765 643a 3a20 302e  sionchanged:: 0.",
            "-00017860: 3130 2e30 0a20 2020 2020 2020 5468 6520  10.0.       The ",
            "-00017870: 6675 6e63 7469 6f6e 2773 2061 7267 756d  function's argum",
            "-00017880: 656e 7473 2068 6176 6520 6265 656e 2072  ents have been r",
            "-00017890: 656f 7264 6572 6564 2e0a 0a20 2020 2050  eordered...    P",
            "-000178a0: 6172 616d 6574 6572 730a 2020 2020 2d2d  arameters.    --",
            "-000178b0: 2d2d 2d2d 2d2d 2d2d 0a20 2020 2063 7572  --------.    cur",
            "-000178c0: 7265 6e74 203a 206e 756d 6572 6963 0a20  rent : numeric. ",
            "-000178d0: 2020 2020 2020 2054 6865 2063 7572 7265         The curre",
            "-000178e0: 6e74 2069 6e20 616d 7065 7265 7320 756e  nt in amperes un",
            "-000178f0: 6465 7220 6465 7369 7265 6420 4956 2063  der desired IV c",
            "-00017900: 7572 7665 2063 6f6e 6469 7469 6f6e 732e  urve conditions.",
            "-00017910: 0a0a 2020 2020 7068 6f74 6f63 7572 7265  ..    photocurre",
            "-00017920: 6e74 203a 206e 756d 6572 6963 0a20 2020  nt : numeric.   ",
            "-00017930: 2020 2020 204c 6967 6874 2d67 656e 6572       Light-gener",
            "-00017940: 6174 6564 2063 7572 7265 6e74 2028 7068  ated current (ph",
            "-00017950: 6f74 6f63 7572 7265 6e74 2920 696e 2061  otocurrent) in a",
            "-00017960: 6d70 6572 6573 2075 6e64 6572 2064 6573  mperes under des",
            "-00017970: 6972 6564 0a20 2020 2020 2020 2049 5620  ired.        IV ",
            "-00017980: 6375 7276 6520 636f 6e64 6974 696f 6e73  curve conditions",
            "-00017990: 2e20 4f66 7465 6e20 6162 6272 6576 6961  . Often abbrevia",
            "-000179a0: 7465 6420 6060 495f 4c60 602e 0a20 2020  ted ``I_L``..   ",
            "-000179b0: 2020 2020 2030 203c 3d20 7068 6f74 6f63       0 <= photoc",
            "-000179c0: 7572 7265 6e74 0a0a 2020 2020 7361 7475  urrent..    satu",
            "-000179d0: 7261 7469 6f6e 5f63 7572 7265 6e74 203a  ration_current :",
            "-000179e0: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "-000179f0: 2044 696f 6465 2073 6174 7572 6174 696f   Diode saturatio",
            "-00017a00: 6e20 6375 7272 656e 7420 696e 2061 6d70  n current in amp",
            "-00017a10: 6572 6573 2075 6e64 6572 2064 6573 6972  eres under desir",
            "-00017a20: 6564 2049 5620 6375 7276 650a 2020 2020  ed IV curve.    ",
            "-00017a30: 2020 2020 636f 6e64 6974 696f 6e73 2e20      conditions. ",
            "-00017a40: 4f66 7465 6e20 6162 6272 6576 6961 7465  Often abbreviate",
            "-00017a50: 6420 6060 495f 3060 602e 0a20 2020 2020  d ``I_0``..     ",
            "-00017a60: 2020 2030 203c 2073 6174 7572 6174 696f     0 < saturatio",
            "-00017a70: 6e5f 6375 7272 656e 740a 0a20 2020 2072  n_current..    r",
            "-00017a80: 6573 6973 7461 6e63 655f 7365 7269 6573  esistance_series",
            "-00017a90: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "-00017aa0: 2020 2053 6572 6965 7320 7265 7369 7374     Series resist",
            "-00017ab0: 616e 6365 2069 6e20 6f68 6d73 2075 6e64  ance in ohms und",
            "-00017ac0: 6572 2064 6573 6972 6564 2049 5620 6375  er desired IV cu",
            "-00017ad0: 7276 6520 636f 6e64 6974 696f 6e73 2e0a  rve conditions..",
            "-00017ae0: 2020 2020 2020 2020 4f66 7465 6e20 6162          Often ab",
            "-00017af0: 6272 6576 6961 7465 6420 6060 5273 6060  breviated ``Rs``",
            "-00017b00: 2e0a 2020 2020 2020 2020 3020 3c3d 2072  ..        0 <= r",
            "-00017b10: 6573 6973 7461 6e63 655f 7365 7269 6573  esistance_series",
            "-00017b20: 203c 206e 756d 7079 2e69 6e66 0a0a 2020   < numpy.inf..  ",
            "-00017b30: 2020 7265 7369 7374 616e 6365 5f73 6875    resistance_shu",
            "-00017b40: 6e74 203a 206e 756d 6572 6963 0a20 2020  nt : numeric.   ",
            "-00017b50: 2020 2020 2053 6875 6e74 2072 6573 6973       Shunt resis",
            "-00017b60: 7461 6e63 6520 696e 206f 686d 7320 756e  tance in ohms un",
            "-00017b70: 6465 7220 6465 7369 7265 6420 4956 2063  der desired IV c",
            "-00017b80: 7572 7665 2063 6f6e 6469 7469 6f6e 732e  urve conditions.",
            "-00017b90: 0a20 2020 2020 2020 204f 6674 656e 2061  .        Often a",
            "-00017ba0: 6262 7265 7669 6174 6564 2060 6052 7368  bbreviated ``Rsh",
            "-00017bb0: 6060 2e0a 2020 2020 2020 2020 3020 3c20  ``..        0 < ",
            "-00017bc0: 7265 7369 7374 616e 6365 5f73 6875 6e74  resistance_shunt",
            "-00017bd0: 203c 3d20 6e75 6d70 792e 696e 660a 0a20   <= numpy.inf.. ",
            "-00017be0: 2020 206e 4e73 5674 6820 3a20 6e75 6d65     nNsVth : nume",
            "-00017bf0: 7269 630a 2020 2020 2020 2020 5468 6520  ric.        The ",
            "-00017c00: 7072 6f64 7563 7420 6f66 2074 6872 6565  product of three",
            "-00017c10: 2063 6f6d 706f 6e65 6e74 732e 2031 2920   components. 1) ",
            "-00017c20: 5468 6520 7573 7561 6c20 6469 6f64 6520  The usual diode ",
            "-00017c30: 6964 6561 6c20 6661 6374 6f72 0a20 2020  ideal factor.   ",
            "-00017c40: 2020 2020 2028 6e29 2c20 3229 2074 6865       (n), 2) the",
            "-00017c50: 206e 756d 6265 7220 6f66 2063 656c 6c73   number of cells",
            "-00017c60: 2069 6e20 7365 7269 6573 2028 4e73 292c   in series (Ns),",
            "-00017c70: 2061 6e64 2033 2920 7468 6520 6365 6c6c   and 3) the cell",
            "-00017c80: 0a20 2020 2020 2020 2074 6865 726d 616c  .        thermal",
            "-00017c90: 2076 6f6c 7461 6765 2075 6e64 6572 2074   voltage under t",
            "-00017ca0: 6865 2064 6573 6972 6564 2049 5620 6375  he desired IV cu",
            "-00017cb0: 7276 6520 636f 6e64 6974 696f 6e73 2028  rve conditions (",
            "-00017cc0: 5674 6829 2e20 5468 650a 2020 2020 2020  Vth). The.      ",
            "-00017cd0: 2020 7468 6572 6d61 6c20 766f 6c74 6167    thermal voltag",
            "-00017ce0: 6520 6f66 2074 6865 2063 656c 6c20 2869  e of the cell (i",
            "-00017cf0: 6e20 766f 6c74 7329 206d 6179 2062 6520  n volts) may be ",
            "-00017d00: 6361 6c63 756c 6174 6564 2061 730a 2020  calculated as.  ",
            "-00017d10: 2020 2020 2020 6060 6b2a 7465 6d70 5f63        ``k*temp_c",
            "-00017d20: 656c 6c2f 7160 602c 2077 6865 7265 206b  ell/q``, where k",
            "-00017d30: 2069 7320 426f 6c74 7a6d 616e 6e27 7320   is Boltzmann's ",
            "-00017d40: 636f 6e73 7461 6e74 2028 4a2f 4b29 2c0a  constant (J/K),.",
            "-00017d50: 2020 2020 2020 2020 7465 6d70 5f63 656c          temp_cel",
            "-00017d60: 6c20 6973 2074 6865 2074 656d 7065 7261  l is the tempera",
            "-00017d70: 7475 7265 206f 6620 7468 6520 702d 6e20  ture of the p-n ",
            "-00017d80: 6a75 6e63 7469 6f6e 2069 6e20 4b65 6c76  junction in Kelv",
            "-00017d90: 696e 2c20 616e 640a 2020 2020 2020 2020  in, and.        ",
            "-00017da0: 7120 6973 2074 6865 2063 6861 7267 6520  q is the charge ",
            "-00017db0: 6f66 2061 6e20 656c 6563 7472 6f6e 2028  of an electron (",
            "-00017dc0: 636f 756c 6f6d 6273 292e 0a20 2020 2020  coulombs)..     ",
            "-00017dd0: 2020 2030 203c 206e 4e73 5674 680a 0a20     0 < nNsVth.. ",
            "-00017de0: 2020 206d 6574 686f 6420 3a20 7374 720a     method : str.",
            "-00017df0: 2020 2020 2020 2020 4d65 7468 6f64 2074          Method t",
            "-00017e00: 6f20 7573 653a 2060 6027 6c61 6d62 6572  o use: ``'lamber",
            "-00017e10: 7477 2760 602c 2060 6027 6e65 7774 6f6e  tw'``, ``'newton",
            "-00017e20: 2760 602c 206f 7220 6060 2762 7265 6e74  '``, or ``'brent",
            "-00017e30: 7127 6060 2e20 2a4e 6f74 652a 3a0a 2020  q'``. *Note*:.  ",
            "-00017e40: 2020 2020 2020 6060 2762 7265 6e74 7127        ``'brentq'",
            "-00017e50: 6060 2069 7320 6c69 6d69 7465 6420 746f  `` is limited to",
            "-00017e60: 2031 7374 2071 7561 6472 616e 7420 6f6e   1st quadrant on",
            "-00017e70: 6c79 2e0a 0a20 2020 2052 6574 7572 6e73  ly...    Returns",
            "-00017e80: 0a20 2020 202d 2d2d 2d2d 2d2d 0a20 2020  .    -------.   ",
            "-00017e90: 2063 7572 7265 6e74 203a 206e 702e 6e64   current : np.nd",
            "-00017ea0: 6172 7261 7920 6f72 2073 6361 6c61 720a  array or scalar.",
            "-00017eb0: 0a20 2020 2052 6566 6572 656e 6365 730a  .    References.",
            "-00017ec0: 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20      ----------. ",
            "-00017ed0: 2020 202e 2e20 5b31 5d20 412e 204a 6169     .. [1] A. Jai",
            "-00017ee0: 6e2c 2041 2e20 4b61 706f 6f72 2c20 2245  n, A. Kapoor, \"E",
            "-00017ef0: 7861 6374 2061 6e61 6c79 7469 6361 6c20  xact analytical ",
            "-00017f00: 736f 6c75 7469 6f6e 7320 6f66 2074 6865  solutions of the",
            "-00017f10: 0a20 2020 2020 2020 7061 7261 6d65 7465  .       paramete",
            "-00017f20: 7273 206f 6620 7265 616c 2073 6f6c 6172  rs of real solar",
            "-00017f30: 2063 656c 6c73 2075 7369 6e67 204c 616d   cells using Lam",
            "-00017f40: 6265 7274 2057 2d66 756e 6374 696f 6e22  bert W-function\"",
            "-00017f50: 2c20 536f 6c61 720a 2020 2020 2020 2045  , Solar.       E",
            "-00017f60: 6e65 7267 7920 4d61 7465 7269 616c 7320  nergy Materials ",
            "-00017f70: 616e 6420 536f 6c61 7220 4365 6c6c 732c  and Solar Cells,",
            "-00017f80: 2038 3120 2832 3030 3429 2032 3639 2d32   81 (2004) 269-2",
            "-00017f90: 3737 2e0a 2020 2020 2727 270a 2020 2020  77..    '''.    ",
            "-00017fa0: 6172 6773 203d 2028 6375 7272 656e 742c  args = (current,",
            "-00017fb0: 2070 686f 746f 6375 7272 656e 742c 2073   photocurrent, s",
            "-00017fc0: 6174 7572 6174 696f 6e5f 6375 7272 656e  aturation_curren",
            "-00017fd0: 742c 0a20 2020 2020 2020 2020 2020 2072  t,.            r",
            "-00017fe0: 6573 6973 7461 6e63 655f 7365 7269 6573  esistance_series",
            "-00017ff0: 2c20 7265 7369 7374 616e 6365 5f73 6875  , resistance_shu",
            "-00018000: 6e74 2c20 6e4e 7356 7468 290a 2020 2020  nt, nNsVth).    ",
            "-00018010: 6966 206d 6574 686f 642e 6c6f 7765 7228  if method.lower(",
            "-00018020: 2920 3d3d 2027 6c61 6d62 6572 7477 273a  ) == 'lambertw':",
            "-00018030: 0a20 2020 2020 2020 2072 6574 7572 6e20  .        return ",
            "-00018040: 5f73 696e 676c 6564 696f 6465 2e5f 6c61  _singlediode._la",
            "-00018050: 6d62 6572 7477 5f76 5f66 726f 6d5f 6928  mbertw_v_from_i(",
            "-00018060: 2a61 7267 7329 0a20 2020 2065 6c73 653a  *args).    else:",
            "-00018070: 0a20 2020 2020 2020 2023 2043 616c 6375  .        # Calcu",
            "-00018080: 6c61 7465 2070 6f69 6e74 7320 6f6e 2074  late points on t",
            "-00018090: 6865 2049 5620 6375 7276 6520 7573 696e  he IV curve usin",
            "-000180a0: 6720 6569 7468 6572 2027 6e65 7774 6f6e  g either 'newton",
            "-000180b0: 2720 6f72 2027 6272 656e 7471 270a 2020  ' or 'brentq'.  ",
            "-000180c0: 2020 2020 2020 2320 6d65 7468 6f64 732e        # methods.",
            "-000180d0: 2056 6f6c 7461 6765 7320 6172 6520 6465   Voltages are de",
            "-000180e0: 7465 726d 696e 6564 2062 7920 6669 7273  termined by firs",
            "-000180f0: 7420 736f 6c76 696e 6720 7468 6520 7369  t solving the si",
            "-00018100: 6e67 6c65 2064 696f 6465 0a20 2020 2020  ngle diode.     ",
            "-00018110: 2020 2023 2065 7175 6174 696f 6e20 666f     # equation fo",
            "-00018120: 7220 7468 6520 6469 6f64 6520 766f 6c74  r the diode volt",
            "-00018130: 6167 6520 565f 6420 7468 656e 2062 6163  age V_d then bac",
            "-00018140: 6b69 6e67 206f 7574 2076 6f6c 7461 6765  king out voltage",
            "-00018150: 0a20 2020 2020 2020 2056 203d 205f 7369  .        V = _si",
            "-00018160: 6e67 6c65 6469 6f64 652e 6269 7368 6f70  nglediode.bishop",
            "-00018170: 3838 5f76 5f66 726f 6d5f 6928 2a61 7267  88_v_from_i(*arg",
            "-00018180: 732c 206d 6574 686f 643d 6d65 7468 6f64  s, method=method",
            "-00018190: 2e6c 6f77 6572 2829 290a 2020 2020 2020  .lower()).      ",
            "-000181a0: 2020 6966 2061 6c6c 286d 6170 286e 702e    if all(map(np.",
            "-000181b0: 6973 7363 616c 6172 2c20 6172 6773 2929  isscalar, args))",
            "-000181c0: 3a0a 2020 2020 2020 2020 2020 2020 7265  :.            re",
            "-000181d0: 7475 726e 2056 0a20 2020 2020 2020 2073  turn V.        s",
            "-000181e0: 6861 7065 203d 205f 7369 6e67 6c65 6469  hape = _singledi",
            "-000181f0: 6f64 652e 5f73 6861 7065 5f6f 665f 6d61  ode._shape_of_ma",
            "-00018200: 785f 7369 7a65 282a 6172 6773 290a 2020  x_size(*args).  ",
            "-00018210: 2020 2020 2020 7265 7475 726e 206e 702e        return np.",
            "-00018220: 6272 6f61 6463 6173 745f 746f 2856 2c20  broadcast_to(V, ",
            "-00018230: 7368 6170 6529 0a0a 0a64 6566 2069 5f66  shape)...def i_f",
            "-00018240: 726f 6d5f 7628 766f 6c74 6167 652c 2070  rom_v(voltage, p",
            "-00018250: 686f 746f 6375 7272 656e 742c 2073 6174  hotocurrent, sat",
            "-00018260: 7572 6174 696f 6e5f 6375 7272 656e 742c  uration_current,",
            "-00018270: 2072 6573 6973 7461 6e63 655f 7365 7269   resistance_seri",
            "-00018280: 6573 2c0a 2020 2020 2020 2020 2020 2020  es,.            ",
            "-00018290: 2072 6573 6973 7461 6e63 655f 7368 756e   resistance_shun",
            "-000182a0: 742c 206e 4e73 5674 682c 206d 6574 686f  t, nNsVth, metho",
            "-000182b0: 643d 276c 616d 6265 7274 7727 293a 0a20  d='lambertw'):. ",
            "-000182c0: 2020 2027 2727 0a20 2020 2044 6576 6963     '''.    Devic",
            "-000182d0: 6520 6375 7272 656e 7420 6174 2074 6865  e current at the",
            "-000182e0: 2067 6976 656e 2064 6576 6963 6520 766f   given device vo",
            "-000182f0: 6c74 6167 6520 666f 7220 7468 6520 7369  ltage for the si",
            "-00018300: 6e67 6c65 2064 696f 6465 206d 6f64 656c  ngle diode model",
            "-00018310: 2e0a 0a20 2020 2055 7365 7320 7468 6520  ...    Uses the ",
            "-00018320: 7369 6e67 6c65 2064 696f 6465 206d 6f64  single diode mod",
            "-00018330: 656c 2028 5344 4d29 2061 7320 6465 7363  el (SDM) as desc",
            "-00018340: 7269 6265 6420 696e 2c20 652e 672e 2c0a  ribed in, e.g.,.",
            "-00018350: 2020 2020 4a61 696e 2061 6e64 204b 6170      Jain and Kap",
            "-00018360: 6f6f 7220 3230 3034 205b 315d 5f2e 0a20  oor 2004 [1]_.. ",
            "-00018370: 2020 2054 6865 2073 6f6c 7574 696f 6e20     The solution ",
            "-00018380: 6973 2070 6572 2045 7120 3220 6f66 205b  is per Eq 2 of [",
            "-00018390: 315d 2065 7863 6570 7420 7768 656e 2072  1] except when r",
            "-000183a0: 6573 6973 7461 6e63 655f 7365 7269 6573  esistance_series",
            "-000183b0: 3d30 2c0a 2020 2020 696e 2077 6869 6368  =0,.    in which",
            "-000183c0: 2063 6173 6520 7468 6520 6578 706c 6963   case the explic",
            "-000183d0: 7420 736f 6c75 7469 6f6e 2066 6f72 2063  t solution for c",
            "-000183e0: 7572 7265 6e74 2069 7320 7573 6564 2e0a  urrent is used..",
            "-000183f0: 2020 2020 4964 6561 6c20 6465 7669 6365      Ideal device",
            "-00018400: 2070 6172 616d 6574 6572 7320 6172 6520   parameters are ",
            "-00018410: 7370 6563 6966 6965 6420 6279 2072 6573  specified by res",
            "-00018420: 6973 7461 6e63 655f 7368 756e 743d 6e70  istance_shunt=np",
            "-00018430: 2e69 6e66 2061 6e64 0a20 2020 2072 6573  .inf and.    res",
            "-00018440: 6973 7461 6e63 655f 7365 7269 6573 3d30  istance_series=0",
            "-00018450: 2e0a 2020 2020 496e 7075 7473 2074 6f20  ..    Inputs to ",
            "-00018460: 7468 6973 2066 756e 6374 696f 6e20 6361  this function ca",
            "-00018470: 6e20 696e 636c 7564 6520 7363 616c 6172  n include scalar",
            "-00018480: 7320 616e 6420 7061 6e64 6173 2e53 6572  s and pandas.Ser",
            "-00018490: 6965 732c 2062 7574 2069 7420 6973 0a20  ies, but it is. ",
            "-000184a0: 2020 2074 6865 2063 616c 6c65 7227 7320     the caller's ",
            "-000184b0: 7265 7370 6f6e 7369 6269 6c69 7479 2074  responsibility t",
            "-000184c0: 6f20 656e 7375 7265 2074 6861 7420 7468  o ensure that th",
            "-000184d0: 6520 6172 6775 6d65 6e74 7320 6172 6520  e arguments are ",
            "-000184e0: 616c 6c20 666c 6f61 7436 340a 2020 2020  all float64.    ",
            "-000184f0: 616e 6420 7769 7468 696e 2074 6865 2070  and within the p",
            "-00018500: 726f 7065 7220 7261 6e67 6573 2e0a 0a20  roper ranges... ",
            "-00018510: 2020 202e 2e20 7665 7273 696f 6e63 6861     .. versioncha",
            "-00018520: 6e67 6564 3a3a 2030 2e31 302e 300a 2020  nged:: 0.10.0.  ",
            "-00018530: 2020 2020 2054 6865 2066 756e 6374 696f       The functio",
            "-00018540: 6e27 7320 6172 6775 6d65 6e74 7320 6861  n's arguments ha",
            "-00018550: 7665 2062 6565 6e20 7265 6f72 6465 7265  ve been reordere",
            "-00018560: 642e 0a0a 2020 2020 5061 7261 6d65 7465  d...    Paramete",
            "-00018570: 7273 0a20 2020 202d 2d2d 2d2d 2d2d 2d2d  rs.    ---------",
            "-00018580: 2d0a 2020 2020 766f 6c74 6167 6520 3a20  -.    voltage : ",
            "-00018590: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "-000185a0: 5468 6520 766f 6c74 6167 6520 696e 2056  The voltage in V",
            "-000185b0: 6f6c 7473 2075 6e64 6572 2064 6573 6972  olts under desir",
            "-000185c0: 6564 2049 5620 6375 7276 6520 636f 6e64  ed IV curve cond",
            "-000185d0: 6974 696f 6e73 2e0a 0a20 2020 2070 686f  itions...    pho",
            "-000185e0: 746f 6375 7272 656e 7420 3a20 6e75 6d65  tocurrent : nume",
            "-000185f0: 7269 630a 2020 2020 2020 2020 4c69 6768  ric.        Ligh",
            "-00018600: 742d 6765 6e65 7261 7465 6420 6375 7272  t-generated curr",
            "-00018610: 656e 7420 2870 686f 746f 6375 7272 656e  ent (photocurren",
            "-00018620: 7429 2069 6e20 616d 7065 7265 7320 756e  t) in amperes un",
            "-00018630: 6465 7220 6465 7369 7265 640a 2020 2020  der desired.    ",
            "-00018640: 2020 2020 4956 2063 7572 7665 2063 6f6e      IV curve con",
            "-00018650: 6469 7469 6f6e 732e 204f 6674 656e 2061  ditions. Often a",
            "-00018660: 6262 7265 7669 6174 6564 2060 6049 5f4c  bbreviated ``I_L",
            "-00018670: 6060 2e0a 2020 2020 2020 2020 3020 3c3d  ``..        0 <=",
            "-00018680: 2070 686f 746f 6375 7272 656e 740a 0a20   photocurrent.. ",
            "-00018690: 2020 2073 6174 7572 6174 696f 6e5f 6375     saturation_cu",
            "-000186a0: 7272 656e 7420 3a20 6e75 6d65 7269 630a  rrent : numeric.",
            "-000186b0: 2020 2020 2020 2020 4469 6f64 6520 7361          Diode sa",
            "-000186c0: 7475 7261 7469 6f6e 2063 7572 7265 6e74  turation current",
            "-000186d0: 2069 6e20 616d 7065 7265 7320 756e 6465   in amperes unde",
            "-000186e0: 7220 6465 7369 7265 6420 4956 2063 7572  r desired IV cur",
            "-000186f0: 7665 0a20 2020 2020 2020 2063 6f6e 6469  ve.        condi",
            "-00018700: 7469 6f6e 732e 204f 6674 656e 2061 6262  tions. Often abb",
            "-00018710: 7265 7669 6174 6564 2060 6049 5f30 6060  reviated ``I_0``",
            "-00018720: 2e0a 2020 2020 2020 2020 3020 3c20 7361  ..        0 < sa",
            "-00018730: 7475 7261 7469 6f6e 5f63 7572 7265 6e74  turation_current",
            "-00018740: 0a0a 2020 2020 7265 7369 7374 616e 6365  ..    resistance",
            "-00018750: 5f73 6572 6965 7320 3a20 6e75 6d65 7269  _series : numeri",
            "-00018760: 630a 2020 2020 2020 2020 5365 7269 6573  c.        Series",
            "-00018770: 2072 6573 6973 7461 6e63 6520 696e 206f   resistance in o",
            "-00018780: 686d 7320 756e 6465 7220 6465 7369 7265  hms under desire",
            "-00018790: 6420 4956 2063 7572 7665 2063 6f6e 6469  d IV curve condi",
            "-000187a0: 7469 6f6e 732e 0a20 2020 2020 2020 204f  tions..        O",
            "-000187b0: 6674 656e 2061 6262 7265 7669 6174 6564  ften abbreviated",
            "-000187c0: 2060 6052 7360 602e 0a20 2020 2020 2020   ``Rs``..       ",
            "-000187d0: 2030 203c 3d20 7265 7369 7374 616e 6365   0 <= resistance",
            "-000187e0: 5f73 6572 6965 7320 3c20 6e75 6d70 792e  _series < numpy.",
            "-000187f0: 696e 660a 0a20 2020 2072 6573 6973 7461  inf..    resista",
            "-00018800: 6e63 655f 7368 756e 7420 3a20 6e75 6d65  nce_shunt : nume",
            "-00018810: 7269 630a 2020 2020 2020 2020 5368 756e  ric.        Shun",
            "-00018820: 7420 7265 7369 7374 616e 6365 2069 6e20  t resistance in ",
            "-00018830: 6f68 6d73 2075 6e64 6572 2064 6573 6972  ohms under desir",
            "-00018840: 6564 2049 5620 6375 7276 6520 636f 6e64  ed IV curve cond",
            "-00018850: 6974 696f 6e73 2e0a 2020 2020 2020 2020  itions..        ",
            "-00018860: 4f66 7465 6e20 6162 6272 6576 6961 7465  Often abbreviate",
            "-00018870: 6420 6060 5273 6860 602e 0a20 2020 2020  d ``Rsh``..     ",
            "-00018880: 2020 2030 203c 2072 6573 6973 7461 6e63     0 < resistanc",
            "-00018890: 655f 7368 756e 7420 3c3d 206e 756d 7079  e_shunt <= numpy",
            "-000188a0: 2e69 6e66 0a0a 2020 2020 6e4e 7356 7468  .inf..    nNsVth",
            "-000188b0: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "-000188c0: 2020 2054 6865 2070 726f 6475 6374 206f     The product o",
            "-000188d0: 6620 7468 7265 6520 636f 6d70 6f6e 656e  f three componen",
            "-000188e0: 7473 2e20 3129 2054 6865 2075 7375 616c  ts. 1) The usual",
            "-000188f0: 2064 696f 6465 2069 6465 616c 2066 6163   diode ideal fac",
            "-00018900: 746f 720a 2020 2020 2020 2020 286e 292c  tor.        (n),",
            "-00018910: 2032 2920 7468 6520 6e75 6d62 6572 206f   2) the number o",
            "-00018920: 6620 6365 6c6c 7320 696e 2073 6572 6965  f cells in serie",
            "-00018930: 7320 284e 7329 2c20 616e 6420 3329 2074  s (Ns), and 3) t",
            "-00018940: 6865 2063 656c 6c0a 2020 2020 2020 2020  he cell.        ",
            "-00018950: 7468 6572 6d61 6c20 766f 6c74 6167 6520  thermal voltage ",
            "-00018960: 756e 6465 7220 7468 6520 6465 7369 7265  under the desire",
            "-00018970: 6420 4956 2063 7572 7665 2063 6f6e 6469  d IV curve condi",
            "-00018980: 7469 6f6e 7320 2856 7468 292e 2054 6865  tions (Vth). The",
            "-00018990: 0a20 2020 2020 2020 2074 6865 726d 616c  .        thermal",
            "-000189a0: 2076 6f6c 7461 6765 206f 6620 7468 6520   voltage of the ",
            "-000189b0: 6365 6c6c 2028 696e 2076 6f6c 7473 2920  cell (in volts) ",
            "-000189c0: 6d61 7920 6265 2063 616c 6375 6c61 7465  may be calculate",
            "-000189d0: 6420 6173 0a20 2020 2020 2020 2060 606b  d as.        ``k",
            "-000189e0: 2a74 656d 705f 6365 6c6c 2f71 6060 2c20  *temp_cell/q``, ",
            "-000189f0: 7768 6572 6520 6b20 6973 2042 6f6c 747a  where k is Boltz",
            "-00018a00: 6d61 6e6e 2773 2063 6f6e 7374 616e 7420  mann's constant ",
            "-00018a10: 284a 2f4b 292c 0a20 2020 2020 2020 2074  (J/K),.        t",
            "-00018a20: 656d 705f 6365 6c6c 2069 7320 7468 6520  emp_cell is the ",
            "-00018a30: 7465 6d70 6572 6174 7572 6520 6f66 2074  temperature of t",
            "-00018a40: 6865 2070 2d6e 206a 756e 6374 696f 6e20  he p-n junction ",
            "-00018a50: 696e 204b 656c 7669 6e2c 2061 6e64 0a20  in Kelvin, and. ",
            "-00018a60: 2020 2020 2020 2071 2069 7320 7468 6520         q is the ",
            "-00018a70: 6368 6172 6765 206f 6620 616e 2065 6c65  charge of an ele",
            "-00018a80: 6374 726f 6e20 2863 6f75 6c6f 6d62 7329  ctron (coulombs)",
            "-00018a90: 2e0a 2020 2020 2020 2020 3020 3c20 6e4e  ..        0 < nN",
            "-00018aa0: 7356 7468 0a0a 2020 2020 6d65 7468 6f64  sVth..    method",
            "-00018ab0: 203a 2073 7472 0a20 2020 2020 2020 204d   : str.        M",
            "-00018ac0: 6574 686f 6420 746f 2075 7365 3a20 6060  ethod to use: ``",
            "-00018ad0: 276c 616d 6265 7274 7727 6060 2c20 6060  'lambertw'``, ``",
            "-00018ae0: 276e 6577 746f 6e27 6060 2c20 6f72 2060  'newton'``, or `",
            "-00018af0: 6027 6272 656e 7471 2760 602e 202a 4e6f  `'brentq'``. *No",
            "-00018b00: 7465 2a3a 0a20 2020 2020 2020 2060 6027  te*:.        ``'",
            "-00018b10: 6272 656e 7471 2760 6020 6973 206c 696d  brentq'`` is lim",
            "-00018b20: 6974 6564 2074 6f20 3173 7420 7175 6164  ited to 1st quad",
            "-00018b30: 7261 6e74 206f 6e6c 792e 0a0a 2020 2020  rant only...    ",
            "-00018b40: 5265 7475 726e 730a 2020 2020 2d2d 2d2d  Returns.    ----",
            "-00018b50: 2d2d 2d0a 2020 2020 6375 7272 656e 7420  ---.    current ",
            "-00018b60: 3a20 6e70 2e6e 6461 7272 6179 206f 7220  : np.ndarray or ",
            "-00018b70: 7363 616c 6172 0a0a 2020 2020 5265 6665  scalar..    Refe",
            "-00018b80: 7265 6e63 6573 0a20 2020 202d 2d2d 2d2d  rences.    -----",
            "-00018b90: 2d2d 2d2d 2d0a 2020 2020 2e2e 205b 315d  -----.    .. [1]",
            "-00018ba0: 2041 2e20 4a61 696e 2c20 412e 204b 6170   A. Jain, A. Kap",
            "-00018bb0: 6f6f 722c 2022 4578 6163 7420 616e 616c  oor, \"Exact anal",
            "-00018bc0: 7974 6963 616c 2073 6f6c 7574 696f 6e73  ytical solutions",
            "-00018bd0: 206f 6620 7468 650a 2020 2020 2020 2070   of the.       p",
            "-00018be0: 6172 616d 6574 6572 7320 6f66 2072 6561  arameters of rea",
            "-00018bf0: 6c20 736f 6c61 7220 6365 6c6c 7320 7573  l solar cells us",
            "-00018c00: 696e 6720 4c61 6d62 6572 7420 572d 6675  ing Lambert W-fu",
            "-00018c10: 6e63 7469 6f6e 222c 2053 6f6c 6172 0a20  nction\", Solar. ",
            "-00018c20: 2020 2020 2020 456e 6572 6779 204d 6174        Energy Mat",
            "-00018c30: 6572 6961 6c73 2061 6e64 2053 6f6c 6172  erials and Solar",
            "-00018c40: 2043 656c 6c73 2c20 3831 2028 3230 3034   Cells, 81 (2004",
            "-00018c50: 2920 3236 392d 3237 372e 0a20 2020 2027  ) 269-277..    '",
            "-00018c60: 2727 0a20 2020 2061 7267 7320 3d20 2876  ''.    args = (v",
            "-00018c70: 6f6c 7461 6765 2c20 7068 6f74 6f63 7572  oltage, photocur",
            "-00018c80: 7265 6e74 2c20 7361 7475 7261 7469 6f6e  rent, saturation",
            "-00018c90: 5f63 7572 7265 6e74 2c0a 2020 2020 2020  _current,.      ",
            "-00018ca0: 2020 2020 2020 7265 7369 7374 616e 6365        resistance",
            "-00018cb0: 5f73 6572 6965 732c 2072 6573 6973 7461  _series, resista",
            "-00018cc0: 6e63 655f 7368 756e 742c 206e 4e73 5674  nce_shunt, nNsVt",
            "-00018cd0: 6829 0a20 2020 2069 6620 6d65 7468 6f64  h).    if method",
            "-00018ce0: 2e6c 6f77 6572 2829 203d 3d20 276c 616d  .lower() == 'lam",
            "-00018cf0: 6265 7274 7727 3a0a 2020 2020 2020 2020  bertw':.        ",
            "-00018d00: 7265 7475 726e 205f 7369 6e67 6c65 6469  return _singledi",
            "-00018d10: 6f64 652e 5f6c 616d 6265 7274 775f 695f  ode._lambertw_i_",
            "-00018d20: 6672 6f6d 5f76 282a 6172 6773 290a 2020  from_v(*args).  ",
            "-00018d30: 2020 656c 7365 3a0a 2020 2020 2020 2020    else:.        ",
            "-00018d40: 2320 4361 6c63 756c 6174 6520 706f 696e  # Calculate poin",
            "-00018d50: 7473 206f 6e20 7468 6520 4956 2063 7572  ts on the IV cur",
            "-00018d60: 7665 2075 7369 6e67 2065 6974 6865 7220  ve using either ",
            "-00018d70: 276e 6577 746f 6e27 206f 7220 2762 7265  'newton' or 'bre",
            "-00018d80: 6e74 7127 0a20 2020 2020 2020 2023 206d  ntq'.        # m",
            "-00018d90: 6574 686f 6473 2e20 566f 6c74 6167 6573  ethods. Voltages",
            "-00018da0: 2061 7265 2064 6574 6572 6d69 6e65 6420   are determined ",
            "-00018db0: 6279 2066 6972 7374 2073 6f6c 7669 6e67  by first solving",
            "-00018dc0: 2074 6865 2073 696e 676c 6520 6469 6f64   the single diod",
            "-00018dd0: 650a 2020 2020 2020 2020 2320 6571 7561  e.        # equa",
            "-00018de0: 7469 6f6e 2066 6f72 2074 6865 2064 696f  tion for the dio",
            "-00018df0: 6465 2076 6f6c 7461 6765 2056 5f64 2074  de voltage V_d t",
            "-00018e00: 6865 6e20 6261 636b 696e 6720 6f75 7420  hen backing out ",
            "-00018e10: 766f 6c74 6167 650a 2020 2020 2020 2020  voltage.        ",
            "-00018e20: 6375 7272 656e 7420 3d20 5f73 696e 676c  current = _singl",
            "-00018e30: 6564 696f 6465 2e62 6973 686f 7038 385f  ediode.bishop88_",
            "-00018e40: 695f 6672 6f6d 5f76 282a 6172 6773 2c20  i_from_v(*args, ",
            "-00018e50: 6d65 7468 6f64 3d6d 6574 686f 642e 6c6f  method=method.lo",
            "-00018e60: 7765 7228 2929 0a20 2020 2020 2020 2069  wer()).        i",
            "-00018e70: 6620 616c 6c28 6d61 7028 6e70 2e69 7373  f all(map(np.iss",
            "-00018e80: 6361 6c61 722c 2061 7267 7329 293a 0a20  calar, args)):. ",
            "-00018e90: 2020 2020 2020 2020 2020 2072 6574 7572             retur",
            "-00018ea0: 6e20 6375 7272 656e 740a 2020 2020 2020  n current.      ",
            "-00018eb0: 2020 7368 6170 6520 3d20 5f73 696e 676c    shape = _singl",
            "-00018ec0: 6564 696f 6465 2e5f 7368 6170 655f 6f66  ediode._shape_of",
            "-00018ed0: 5f6d 6178 5f73 697a 6528 2a61 7267 7329  _max_size(*args)",
            "-00018ee0: 0a20 2020 2020 2020 2072 6574 7572 6e20  .        return ",
            "-00018ef0: 6e70 2e62 726f 6164 6361 7374 5f74 6f28  np.broadcast_to(",
            "-00018f00: 6375 7272 656e 742c 2073 6861 7065 290a  current, shape).",
            "-00018f10: 0a0a 6465 6620 7363 616c 655f 766f 6c74  ..def scale_volt",
            "-00018f20: 6167 655f 6375 7272 656e 745f 706f 7765  age_current_powe",
            "-00018f30: 7228 6461 7461 2c20 766f 6c74 6167 653d  r(data, voltage=",
            "-00018f40: 312c 2063 7572 7265 6e74 3d31 293a 0a20  1, current=1):. ",
            "-00018f50: 2020 2022 2222 0a20 2020 2053 6361 6c65     \"\"\".    Scale",
            "-00018f60: 7320 7468 6520 766f 6c74 6167 652c 2063  s the voltage, c",
            "-00018f70: 7572 7265 6e74 2c20 616e 6420 706f 7765  urrent, and powe",
            "-00018f80: 7220 696e 2064 6174 6120 6279 2074 6865  r in data by the",
            "-00018f90: 2076 6f6c 7461 6765 0a20 2020 2061 6e64   voltage.    and",
            "-00018fa0: 2063 7572 7265 6e74 2066 6163 746f 7273   current factors",
            "-00018fb0: 2e0a 0a20 2020 2050 6172 616d 6574 6572  ...    Parameter",
            "-00018fc0: 730a 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d  s.    ----------",
            "-00018fd0: 0a20 2020 2064 6174 613a 2044 6174 6146  .    data: DataF",
            "-00018fe0: 7261 6d65 0a20 2020 2020 2020 204d 6179  rame.        May",
            "-00018ff0: 2063 6f6e 7461 696e 2063 6f6c 756d 6e73   contain columns",
            "-00019000: 2060 2776 5f6d 7027 2c20 2776 5f6f 6327   `'v_mp', 'v_oc'",
            "-00019010: 2c20 2769 5f6d 7027 202c 2769 5f78 272c  , 'i_mp' ,'i_x',",
            "-00019020: 2027 695f 7878 272c 0a20 2020 2020 2020   'i_xx',.       ",
            "-00019030: 2027 695f 7363 272c 2027 705f 6d70 2760   'i_sc', 'p_mp'`",
            "-00019040: 2e0a 2020 2020 766f 6c74 6167 653a 206e  ..    voltage: n",
            "-00019050: 756d 6572 6963 2c20 6465 6661 756c 7420  umeric, default ",
            "-00019060: 310a 2020 2020 2020 2020 5468 6520 616d  1.        The am",
            "-00019070: 6f75 6e74 2062 7920 7768 6963 6820 746f  ount by which to",
            "-00019080: 206d 756c 7469 706c 7920 7468 6520 766f   multiply the vo",
            "-00019090: 6c74 6167 6573 2e0a 2020 2020 6375 7272  ltages..    curr",
            "-000190a0: 656e 743a 206e 756d 6572 6963 2c20 6465  ent: numeric, de",
            "-000190b0: 6661 756c 7420 310a 2020 2020 2020 2020  fault 1.        ",
            "-000190c0: 5468 6520 616d 6f75 6e74 2062 7920 7768  The amount by wh",
            "-000190d0: 6963 6820 746f 206d 756c 7469 706c 7920  ich to multiply ",
            "-000190e0: 7468 6520 6375 7272 656e 7473 2e0a 0a20  the currents... ",
            "-000190f0: 2020 2052 6574 7572 6e73 0a20 2020 202d     Returns.    -",
            "-00019100: 2d2d 2d2d 2d2d 0a20 2020 2073 6361 6c65  ------.    scale",
            "-00019110: 645f 6461 7461 3a20 4461 7461 4672 616d  d_data: DataFram",
            "-00019120: 650a 2020 2020 2020 2020 4120 7363 616c  e.        A scal",
            "-00019130: 6564 2063 6f70 7920 6f66 2074 6865 2069  ed copy of the i",
            "-00019140: 6e70 7574 2064 6174 612e 0a20 2020 2020  nput data..     ",
            "-00019150: 2020 2060 2770 5f6d 7027 6020 6973 2073     `'p_mp'` is s",
            "-00019160: 6361 6c65 6420 6279 2060 766f 6c74 6167  caled by `voltag",
            "-00019170: 6520 2a20 6375 7272 656e 7460 2e0a 2020  e * current`..  ",
            "-00019180: 2020 2222 220a 0a20 2020 2023 2061 7320    \"\"\"..    # as ",
            "-00019190: 7772 6974 7465 6e2c 206f 6e6c 7920 776f  written, only wo",
            "-000191a0: 726b 7320 7769 7468 2061 2044 6174 6146  rks with a DataF",
            "-000191b0: 7261 6d65 0a20 2020 2023 2063 6f75 6c64  rame.    # could",
            "-000191c0: 206d 616b 6520 6974 2077 6f72 6b20 7769   make it work wi",
            "-000191d0: 7468 2061 2064 6963 742c 2062 7574 2069  th a dict, but i",
            "-000191e0: 7420 776f 756c 6420 6265 206d 6f72 6520  t would be more ",
            "-000191f0: 7665 7262 6f73 650a 2020 2020 766f 6c74  verbose.    volt",
            "-00019200: 6167 655f 6b65 7973 203d 205b 2776 5f6d  age_keys = ['v_m",
            "-00019210: 7027 2c20 2776 5f6f 6327 5d0a 2020 2020  p', 'v_oc'].    ",
            "-00019220: 6375 7272 656e 745f 6b65 7973 203d 205b  current_keys = [",
            "-00019230: 2769 5f6d 7027 2c20 2769 5f78 272c 2027  'i_mp', 'i_x', '",
            "-00019240: 695f 7878 272c 2027 695f 7363 275d 0a20  i_xx', 'i_sc']. ",
            "-00019250: 2020 2070 6f77 6572 5f6b 6579 7320 3d20     power_keys = ",
            "-00019260: 5b27 705f 6d70 275d 0a20 2020 2076 6f6c  ['p_mp'].    vol",
            "-00019270: 7461 6765 5f64 6620 3d20 6461 7461 2e66  tage_df = data.f",
            "-00019280: 696c 7465 7228 766f 6c74 6167 655f 6b65  ilter(voltage_ke",
            "-00019290: 7973 2c20 6178 6973 3d31 2920 2a20 766f  ys, axis=1) * vo",
            "-000192a0: 6c74 6167 650a 2020 2020 6375 7272 656e  ltage.    curren",
            "-000192b0: 745f 6466 203d 2064 6174 612e 6669 6c74  t_df = data.filt",
            "-000192c0: 6572 2863 7572 7265 6e74 5f6b 6579 732c  er(current_keys,",
            "-000192d0: 2061 7869 733d 3129 202a 2063 7572 7265   axis=1) * curre",
            "-000192e0: 6e74 0a20 2020 2070 6f77 6572 5f64 6620  nt.    power_df ",
            "-000192f0: 3d20 6461 7461 2e66 696c 7465 7228 706f  = data.filter(po",
            "-00019300: 7765 725f 6b65 7973 2c20 6178 6973 3d31  wer_keys, axis=1",
            "-00019310: 2920 2a20 766f 6c74 6167 6520 2a20 6375  ) * voltage * cu",
            "-00019320: 7272 656e 740a 2020 2020 6466 203d 2070  rrent.    df = p",
            "-00019330: 642e 636f 6e63 6174 285b 766f 6c74 6167  d.concat([voltag",
            "-00019340: 655f 6466 2c20 6375 7272 656e 745f 6466  e_df, current_df",
            "-00019350: 2c20 706f 7765 725f 6466 5d2c 2061 7869  , power_df], axi",
            "-00019360: 733d 3129 0a20 2020 2064 665f 736f 7274  s=1).    df_sort",
            "-00019370: 6564 203d 2064 665b 6461 7461 2e63 6f6c  ed = df[data.col",
            "-00019380: 756d 6e73 5d20 2023 2072 6574 6169 6e20  umns]  # retain ",
            "-00019390: 6f72 6967 696e 616c 2063 6f6c 756d 6e20  original column ",
            "-000193a0: 6f72 6465 720a 2020 2020 7265 7475 726e  order.    return",
            "-000193b0: 2064 665f 736f 7274 6564 0a0a 0a64 6566   df_sorted...def",
            "-000193c0: 2070 7677 6174 7473 5f64 6328 675f 706f   pvwatts_dc(g_po",
            "-000193d0: 615f 6566 6665 6374 6976 652c 2074 656d  a_effective, tem",
            "-000193e0: 705f 6365 6c6c 2c20 7064 6330 2c20 6761  p_cell, pdc0, ga",
            "-000193f0: 6d6d 615f 7064 632c 2074 656d 705f 7265  mma_pdc, temp_re",
            "-00019400: 663d 3235 2e29 3a0a 2020 2020 7222 2222  f=25.):.    r\"\"\"",
            "-00019410: 0a20 2020 2049 6d70 6c65 6d65 6e74 7320  .    Implements ",
            "-00019420: 4e52 454c 2773 2050 5657 6174 7473 2044  NREL's PVWatts D",
            "-00019430: 4320 706f 7765 7220 6d6f 6465 6c2e 2054  C power model. T",
            "-00019440: 6865 2050 5657 6174 7473 2044 4320 6d6f  he PVWatts DC mo",
            "-00019450: 6465 6c20 5b31 5d5f 2069 733a 0a0a 2020  del [1]_ is:..  ",
            "-00019460: 2020 2e2e 206d 6174 683a 3a0a 0a20 2020    .. math::..   ",
            "-00019470: 2020 2020 2050 5f7b 6463 7d20 3d20 5c66       P_{dc} = \\f",
            "-00019480: 7261 637b 475f 7b70 6f61 2065 6666 7d7d  rac{G_{poa eff}}",
            "-00019490: 7b31 3030 307d 2050 5f7b 6463 307d 2028  {1000} P_{dc0} (",
            "-000194a0: 2031 202b 205c 6761 6d6d 615f 7b70 6463   1 + \\gamma_{pdc",
            "-000194b0: 7d20 2854 5f7b 6365 6c6c 7d20 2d20 545f  } (T_{cell} - T_",
            "-000194c0: 7b72 6566 7d29 290a 0a20 2020 204e 6f74  {ref}))..    Not",
            "-000194d0: 6520 7468 6174 2060 6070 6463 3060 6020  e that ``pdc0`` ",
            "-000194e0: 6973 2061 6c73 6f20 7573 6564 2061 7320  is also used as ",
            "-000194f0: 6120 7379 6d62 6f6c 2069 6e0a 2020 2020  a symbol in.    ",
            "-00019500: 3a70 793a 6675 6e63 3a60 7076 6c69 622e  :py:func:`pvlib.",
            "-00019510: 696e 7665 7274 6572 2e70 7677 6174 7473  inverter.pvwatts",
            "-00019520: 602e 2060 6070 6463 3060 6020 696e 2074  `. ``pdc0`` in t",
            "-00019530: 6869 7320 6675 6e63 7469 6f6e 2072 6566  his function ref",
            "-00019540: 6572 7320 746f 2074 6865 2044 430a 2020  ers to the DC.  ",
            "-00019550: 2020 706f 7765 7220 6f66 2074 6865 206d    power of the m",
            "-00019560: 6f64 756c 6573 2061 7420 7265 6665 7265  odules at refere",
            "-00019570: 6e63 6520 636f 6e64 6974 696f 6e73 2e20  nce conditions. ",
            "-00019580: 6060 7064 6330 6060 2069 6e0a 2020 2020  ``pdc0`` in.    ",
            "-00019590: 3a70 793a 6675 6e63 3a60 7076 6c69 622e  :py:func:`pvlib.",
            "-000195a0: 696e 7665 7274 6572 2e70 7677 6174 7473  inverter.pvwatts",
            "-000195b0: 6020 7265 6665 7273 2074 6f20 7468 6520  ` refers to the ",
            "-000195c0: 4443 2070 6f77 6572 2069 6e70 7574 206c  DC power input l",
            "-000195d0: 696d 6974 206f 660a 2020 2020 7468 6520  imit of.    the ",
            "-000195e0: 696e 7665 7274 6572 2e0a 0a20 2020 2050  inverter...    P",
            "-000195f0: 6172 616d 6574 6572 730a 2020 2020 2d2d  arameters.    --",
            "-00019600: 2d2d 2d2d 2d2d 2d2d 0a20 2020 2067 5f70  --------.    g_p",
            "-00019610: 6f61 5f65 6666 6563 7469 7665 3a20 6e75  oa_effective: nu",
            "-00019620: 6d65 7269 630a 2020 2020 2020 2020 4972  meric.        Ir",
            "-00019630: 7261 6469 616e 6365 2074 7261 6e73 6d69  radiance transmi",
            "-00019640: 7474 6564 2074 6f20 7468 6520 5056 2063  tted to the PV c",
            "-00019650: 656c 6c73 2e20 546f 2062 650a 2020 2020  ells. To be.    ",
            "-00019660: 2020 2020 6675 6c6c 7920 636f 6e73 6973      fully consis",
            "-00019670: 7465 6e74 2077 6974 6820 5056 5761 7474  tent with PVWatt",
            "-00019680: 732c 2074 6865 2075 7365 7220 6d75 7374  s, the user must",
            "-00019690: 2068 6176 6520 616c 7265 6164 790a 2020   have already.  ",
            "-000196a0: 2020 2020 2020 6170 706c 6965 6420 616e        applied an",
            "-000196b0: 676c 6520 6f66 2069 6e63 6964 656e 6365  gle of incidence",
            "-000196c0: 206c 6f73 7365 732c 2062 7574 206e 6f74   losses, but not",
            "-000196d0: 2073 6f69 6c69 6e67 2c20 7370 6563 7472   soiling, spectr",
            "-000196e0: 616c 2c0a 2020 2020 2020 2020 6574 632e  al,.        etc.",
            "-000196f0: 205b 572f 6d5e 325d 0a20 2020 2074 656d   [W/m^2].    tem",
            "-00019700: 705f 6365 6c6c 3a20 6e75 6d65 7269 630a  p_cell: numeric.",
            "-00019710: 2020 2020 2020 2020 4365 6c6c 2074 656d          Cell tem",
            "-00019720: 7065 7261 7475 7265 205b 435d 2e0a 2020  perature [C]..  ",
            "-00019730: 2020 7064 6330 3a20 6e75 6d65 7269 630a    pdc0: numeric.",
            "-00019740: 2020 2020 2020 2020 506f 7765 7220 6f66          Power of",
            "-00019750: 2074 6865 206d 6f64 756c 6573 2061 7420   the modules at ",
            "-00019760: 3130 3030 2057 2f6d 5e32 2061 6e64 2063  1000 W/m^2 and c",
            "-00019770: 656c 6c20 7265 6665 7265 6e63 6520 7465  ell reference te",
            "-00019780: 6d70 6572 6174 7572 652e 205b 575d 0a20  mperature. [W]. ",
            "-00019790: 2020 2067 616d 6d61 5f70 6463 3a20 6e75     gamma_pdc: nu",
            "-000197a0: 6d65 7269 630a 2020 2020 2020 2020 5468  meric.        Th",
            "-000197b0: 6520 7465 6d70 6572 6174 7572 6520 636f  e temperature co",
            "-000197c0: 6566 6669 6369 656e 7420 6f66 2070 6f77  efficient of pow",
            "-000197d0: 6572 2e20 5479 7069 6361 6c6c 7920 2d30  er. Typically -0",
            "-000197e0: 2e30 3032 2074 6f0a 2020 2020 2020 2020  .002 to.        ",
            "-000197f0: 2d30 2e30 3035 2070 6572 2064 6567 7265  -0.005 per degre",
            "-00019800: 6520 432e 205b 312f 435d 0a20 2020 2074  e C. [1/C].    t",
            "-00019810: 656d 705f 7265 663a 206e 756d 6572 6963  emp_ref: numeric",
            "-00019820: 2c20 6465 6661 756c 7420 3235 2e30 0a20  , default 25.0. ",
            "-00019830: 2020 2020 2020 2043 656c 6c20 7265 6665         Cell refe",
            "-00019840: 7265 6e63 6520 7465 6d70 6572 6174 7572  rence temperatur",
            "-00019850: 652e 2050 5657 6174 7473 2064 6566 696e  e. PVWatts defin",
            "-00019860: 6573 2069 7420 746f 2062 6520 3235 2043  es it to be 25 C",
            "-00019870: 2061 6e64 0a20 2020 2020 2020 2069 7320   and.        is ",
            "-00019880: 696e 636c 7564 6564 2068 6572 6520 666f  included here fo",
            "-00019890: 7220 666c 6578 6962 696c 6974 792e 205b  r flexibility. [",
            "-000198a0: 435d 0a0a 2020 2020 5265 7475 726e 730a  C]..    Returns.",
            "-000198b0: 2020 2020 2d2d 2d2d 2d2d 2d0a 2020 2020      -------.    ",
            "-000198c0: 7064 633a 206e 756d 6572 6963 0a20 2020  pdc: numeric.   ",
            "-000198d0: 2020 2020 2044 4320 706f 7765 722e 205b       DC power. [",
            "-000198e0: 575d 0a0a 2020 2020 5265 6665 7265 6e63  W]..    Referenc",
            "-000198f0: 6573 0a20 2020 202d 2d2d 2d2d 2d2d 2d2d  es.    ---------",
            "-00019900: 2d0a 2020 2020 2e2e 205b 315d 2041 2e20  -.    .. [1] A. ",
            "-00019910: 502e 2044 6f62 6f73 2c20 2250 5657 6174  P. Dobos, \"PVWat",
            "-00019920: 7473 2056 6572 7369 6f6e 2035 204d 616e  ts Version 5 Man",
            "-00019930: 7561 6c22 0a20 2020 2020 2020 2020 2020  ual\".           ",
            "-00019940: 6874 7470 3a2f 2f70 7677 6174 7473 2e6e  http://pvwatts.n",
            "-00019950: 7265 6c2e 676f 762f 646f 776e 6c6f 6164  rel.gov/download",
            "-00019960: 732f 7076 7761 7474 7376 352e 7064 660a  s/pvwattsv5.pdf.",
            "-00019970: 2020 2020 2020 2020 2020 2028 3230 3134             (2014",
            "-00019980: 292e 0a20 2020 2022 2222 2020 2320 6e6f  )..    \"\"\"  # no",
            "-00019990: 7161 3a20 4535 3031 0a0a 2020 2020 7064  qa: E501..    pd",
            "-000199a0: 6320 3d20 2867 5f70 6f61 5f65 6666 6563  c = (g_poa_effec",
            "-000199b0: 7469 7665 202a 2030 2e30 3031 202a 2070  tive * 0.001 * p",
            "-000199c0: 6463 3020 2a0a 2020 2020 2020 2020 2020  dc0 *.          ",
            "-000199d0: 2028 3120 2b20 6761 6d6d 615f 7064 6320   (1 + gamma_pdc ",
            "-000199e0: 2a20 2874 656d 705f 6365 6c6c 202d 2074  * (temp_cell - t",
            "-000199f0: 656d 705f 7265 6629 2929 0a0a 2020 2020  emp_ref)))..    ",
            "-00019a00: 7265 7475 726e 2070 6463 0a0a 0a64 6566  return pdc...def",
            "-00019a10: 2070 7677 6174 7473 5f6c 6f73 7365 7328   pvwatts_losses(",
            "-00019a20: 736f 696c 696e 673d 322c 2073 6861 6469  soiling=2, shadi",
            "-00019a30: 6e67 3d33 2c20 736e 6f77 3d30 2c20 6d69  ng=3, snow=0, mi",
            "-00019a40: 736d 6174 6368 3d32 2c20 7769 7269 6e67  smatch=2, wiring",
            "-00019a50: 3d32 2c0a 2020 2020 2020 2020 2020 2020  =2,.            ",
            "-00019a60: 2020 2020 2020 2063 6f6e 6e65 6374 696f         connectio",
            "-00019a70: 6e73 3d30 2e35 2c20 6c69 643d 312e 352c  ns=0.5, lid=1.5,",
            "-00019a80: 206e 616d 6570 6c61 7465 5f72 6174 696e   nameplate_ratin",
            "-00019a90: 673d 312c 2061 6765 3d30 2c0a 2020 2020  g=1, age=0,.    ",
            "-00019aa0: 2020 2020 2020 2020 2020 2020 2020 2061                 a",
            "-00019ab0: 7661 696c 6162 696c 6974 793d 3329 3a0a  vailability=3):.",
            "-00019ac0: 2020 2020 7222 2222 0a20 2020 2049 6d70      r\"\"\".    Imp",
            "-00019ad0: 6c65 6d65 6e74 7320 4e52 454c 2773 2050  lements NREL's P",
            "-00019ae0: 5657 6174 7473 2073 7973 7465 6d20 6c6f  VWatts system lo",
            "-00019af0: 7373 206d 6f64 656c 2e0a 2020 2020 5468  ss model..    Th",
            "-00019b00: 6520 5056 5761 7474 7320 6c6f 7373 206d  e PVWatts loss m",
            "-00019b10: 6f64 656c 205b 315d 5f20 6973 3a0a 0a20  odel [1]_ is:.. ",
            "-00019b20: 2020 202e 2e20 6d61 7468 3a3a 0a0a 2020     .. math::..  ",
            "-00019b30: 2020 2020 2020 4c5f 7b74 6f74 616c 7d28        L_{total}(",
            "-00019b40: 5c25 2920 3d20 3130 3020 5b20 3120 2d20  \\%) = 100 [ 1 - ",
            "-00019b50: 5c50 695f 6920 2820 3120 2d20 5c66 7261  \\Pi_i ( 1 - \\fra",
            "-00019b60: 637b 4c5f 697d 7b31 3030 7d20 2920 5d0a  c{L_i}{100} ) ].",
            "-00019b70: 0a20 2020 2041 6c6c 2070 6172 616d 6574  .    All paramet",
            "-00019b80: 6572 7320 6d75 7374 2062 6520 696e 2075  ers must be in u",
            "-00019b90: 6e69 7473 206f 6620 252e 2050 6172 616d  nits of %. Param",
            "-00019ba0: 6574 6572 7320 6d61 7920 6265 0a20 2020  eters may be.   ",
            "-00019bb0: 2061 7272 6179 2d6c 696b 652c 2074 686f   array-like, tho",
            "-00019bc0: 7567 6820 616c 6c20 6172 7261 7920 7369  ugh all array si",
            "-00019bd0: 7a65 7320 6d75 7374 206d 6174 6368 2e0a  zes must match..",
            "-00019be0: 0a20 2020 2050 6172 616d 6574 6572 730a  .    Parameters.",
            "-00019bf0: 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20      ----------. ",
            "-00019c00: 2020 2073 6f69 6c69 6e67 3a20 6e75 6d65     soiling: nume",
            "-00019c10: 7269 632c 2064 6566 6175 6c74 2032 0a20  ric, default 2. ",
            "-00019c20: 2020 2073 6861 6469 6e67 3a20 6e75 6d65     shading: nume",
            "-00019c30: 7269 632c 2064 6566 6175 6c74 2033 0a20  ric, default 3. ",
            "-00019c40: 2020 2073 6e6f 773a 206e 756d 6572 6963     snow: numeric",
            "-00019c50: 2c20 6465 6661 756c 7420 300a 2020 2020  , default 0.    ",
            "-00019c60: 6d69 736d 6174 6368 3a20 6e75 6d65 7269  mismatch: numeri",
            "-00019c70: 632c 2064 6566 6175 6c74 2032 0a20 2020  c, default 2.   ",
            "-00019c80: 2077 6972 696e 673a 206e 756d 6572 6963   wiring: numeric",
            "-00019c90: 2c20 6465 6661 756c 7420 320a 2020 2020  , default 2.    ",
            "-00019ca0: 636f 6e6e 6563 7469 6f6e 733a 206e 756d  connections: num",
            "-00019cb0: 6572 6963 2c20 6465 6661 756c 7420 302e  eric, default 0.",
            "-00019cc0: 350a 2020 2020 6c69 643a 206e 756d 6572  5.    lid: numer",
            "-00019cd0: 6963 2c20 6465 6661 756c 7420 312e 350a  ic, default 1.5.",
            "-00019ce0: 2020 2020 2020 2020 4c69 6768 7420 696e          Light in",
            "-00019cf0: 6475 6365 6420 6465 6772 6164 6174 696f  duced degradatio",
            "-00019d00: 6e0a 2020 2020 6e61 6d65 706c 6174 655f  n.    nameplate_",
            "-00019d10: 7261 7469 6e67 3a20 6e75 6d65 7269 632c  rating: numeric,",
            "-00019d20: 2064 6566 6175 6c74 2031 0a20 2020 2061   default 1.    a",
            "-00019d30: 6765 3a20 6e75 6d65 7269 632c 2064 6566  ge: numeric, def",
            "-00019d40: 6175 6c74 2030 0a20 2020 2061 7661 696c  ault 0.    avail",
            "-00019d50: 6162 696c 6974 793a 206e 756d 6572 6963  ability: numeric",
            "-00019d60: 2c20 6465 6661 756c 7420 330a 0a20 2020  , default 3..   ",
            "-00019d70: 2052 6574 7572 6e73 0a20 2020 202d 2d2d   Returns.    ---",
            "-00019d80: 2d2d 2d2d 0a20 2020 206c 6f73 7365 733a  ----.    losses:",
            "-00019d90: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "-00019da0: 2053 7973 7465 6d20 6c6f 7373 6573 2069   System losses i",
            "-00019db0: 6e20 756e 6974 7320 6f66 2025 2e0a 0a20  n units of %... ",
            "-00019dc0: 2020 2052 6566 6572 656e 6365 730a 2020     References.  ",
            "-00019dd0: 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020    ----------.   ",
            "-00019de0: 202e 2e20 5b31 5d20 412e 2050 2e20 446f   .. [1] A. P. Do",
            "-00019df0: 626f 732c 2022 5056 5761 7474 7320 5665  bos, \"PVWatts Ve",
            "-00019e00: 7273 696f 6e20 3520 4d61 6e75 616c 220a  rsion 5 Manual\".",
            "-00019e10: 2020 2020 2020 2020 2020 2068 7474 703a             http:",
            "-00019e20: 2f2f 7076 7761 7474 732e 6e72 656c 2e67  //pvwatts.nrel.g",
            "-00019e30: 6f76 2f64 6f77 6e6c 6f61 6473 2f70 7677  ov/downloads/pvw",
            "-00019e40: 6174 7473 7635 2e70 6466 0a20 2020 2020  attsv5.pdf.     ",
            "-00019e50: 2020 2020 2020 2832 3031 3429 2e0a 2020        (2014)..  ",
            "-00019e60: 2020 2222 220a 0a20 2020 2070 6172 616d    \"\"\"..    param",
            "-00019e70: 7320 3d20 5b73 6f69 6c69 6e67 2c20 7368  s = [soiling, sh",
            "-00019e80: 6164 696e 672c 2073 6e6f 772c 206d 6973  ading, snow, mis",
            "-00019e90: 6d61 7463 682c 2077 6972 696e 672c 2063  match, wiring, c",
            "-00019ea0: 6f6e 6e65 6374 696f 6e73 2c20 6c69 642c  onnections, lid,",
            "-00019eb0: 0a20 2020 2020 2020 2020 2020 2020 206e  .              n",
            "-00019ec0: 616d 6570 6c61 7465 5f72 6174 696e 672c  ameplate_rating,",
            "-00019ed0: 2061 6765 2c20 6176 6169 6c61 6269 6c69   age, availabili",
            "-00019ee0: 7479 5d0a 0a20 2020 2023 206d 616e 7561  ty]..    # manua",
            "-00019ef0: 6c6c 7920 6c6f 6f70 696e 6720 6f76 6572  lly looping over",
            "-00019f00: 2070 6172 616d 7320 616c 6c6f 7773 2066   params allows f",
            "-00019f10: 6f72 206e 756d 7079 2f70 616e 6461 7320  or numpy/pandas ",
            "-00019f20: 746f 2068 616e 646c 6520 616e 790a 2020  to handle any.  ",
            "-00019f30: 2020 2320 6172 7261 792d 6c69 6b65 2062    # array-like b",
            "-00019f40: 726f 6164 6361 7374 696e 6720 7468 6174  roadcasting that",
            "-00019f50: 206d 6967 6874 2062 6520 6e65 6365 7373   might be necess",
            "-00019f60: 6172 792e 0a20 2020 2070 6572 6620 3d20  ary..    perf = ",
            "-00019f70: 310a 2020 2020 666f 7220 7061 7261 6d20  1.    for param ",
            "-00019f80: 696e 2070 6172 616d 733a 0a20 2020 2020  in params:.     ",
            "-00019f90: 2020 2070 6572 6620 2a3d 2031 202d 2070     perf *= 1 - p",
            "-00019fa0: 6172 616d 2f31 3030 0a0a 2020 2020 6c6f  aram/100..    lo",
            "-00019fb0: 7373 6573 203d 2028 3120 2d20 7065 7266  sses = (1 - perf",
            "-00019fc0: 2920 2a20 3130 302e 0a0a 2020 2020 7265  ) * 100...    re",
            "-00019fd0: 7475 726e 206c 6f73 7365 730a 0a0a 6465  turn losses...de",
            "-00019fe0: 6620 6463 5f6f 686d 735f 6672 6f6d 5f70  f dc_ohms_from_p",
            "-00019ff0: 6572 6365 6e74 2876 6d70 5f72 6566 2c20  ercent(vmp_ref, ",
            "-0001a000: 696d 705f 7265 662c 2064 635f 6f68 6d69  imp_ref, dc_ohmi",
            "-0001a010: 635f 7065 7263 656e 742c 0a20 2020 2020  c_percent,.     ",
            "-0001a020: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0001a030: 2020 2020 6d6f 6475 6c65 735f 7065 725f      modules_per_",
            "-0001a040: 7374 7269 6e67 3d31 2c0a 2020 2020 2020  string=1,.      ",
            "-0001a050: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "-0001a060: 2020 2073 7472 696e 6773 3d31 293a 0a20     strings=1):. ",
            "-0001a070: 2020 2072 2222 220a 2020 2020 4361 6c63     r\"\"\".    Calc",
            "-0001a080: 756c 6174 6520 7468 6520 6571 7569 7661  ulate the equiva",
            "-0001a090: 6c65 6e74 2072 6573 6973 7461 6e63 6520  lent resistance ",
            "-0001a0a0: 6f66 2074 6865 2063 6f6e 6475 6374 6f72  of the conductor",
            "-0001a0b0: 7320 6672 6f6d 2074 6865 2070 6572 6365  s from the perce",
            "-0001a0c0: 6e74 0a20 2020 206f 686d 6963 206c 6f73  nt.    ohmic los",
            "-0001a0d0: 7320 6f66 2061 6e20 6172 7261 7920 6174  s of an array at",
            "-0001a0e0: 2072 6566 6572 656e 6365 2063 6f6e 6469   reference condi",
            "-0001a0f0: 7469 6f6e 732e 0a0a 2020 2020 5061 7261  tions...    Para",
            "-0001a100: 6d65 7465 7273 0a20 2020 202d 2d2d 2d2d  meters.    -----",
            "-0001a110: 2d2d 2d2d 2d0a 2020 2020 766d 705f 7265  -----.    vmp_re",
            "-0001a120: 663a 206e 756d 6572 6963 0a20 2020 2020  f: numeric.     ",
            "-0001a130: 2020 204d 6178 696d 756d 2070 6f77 6572     Maximum power",
            "-0001a140: 2076 6f6c 7461 6765 206f 6620 6f6e 6520   voltage of one ",
            "-0001a150: 6d6f 6475 6c65 2061 7420 7265 6665 7265  module at refere",
            "-0001a160: 6e63 6520 636f 6e64 6974 696f 6e73 2e20  nce conditions. ",
            "-0001a170: 5b56 5d0a 2020 2020 696d 705f 7265 663a  [V].    imp_ref:",
            "-0001a180: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "-0001a190: 204d 6178 696d 756d 2070 6f77 6572 2063   Maximum power c",
            "-0001a1a0: 7572 7265 6e74 206f 6620 6f6e 6520 6d6f  urrent of one mo",
            "-0001a1b0: 6475 6c65 2061 7420 7265 6665 7265 6e63  dule at referenc",
            "-0001a1c0: 6520 636f 6e64 6974 696f 6e73 2e20 5b41  e conditions. [A",
            "-0001a1d0: 5d0a 2020 2020 6463 5f6f 686d 6963 5f70  ].    dc_ohmic_p",
            "-0001a1e0: 6572 6365 6e74 3a20 6e75 6d65 7269 630a  ercent: numeric.",
            "-0001a1f0: 2020 2020 2020 2020 4172 7261 7920 4443          Array DC",
            "-0001a200: 2070 6f77 6572 206c 6f73 7320 6173 2061   power loss as a",
            "-0001a210: 2070 6572 6365 6e74 206f 6620 4443 2070   percent of DC p",
            "-0001a220: 6f77 6572 206c 6f73 7320 6174 2072 6566  ower loss at ref",
            "-0001a230: 6572 656e 6365 0a20 2020 2020 2020 2063  erence.        c",
            "-0001a240: 6f6e 6469 7469 6f6e 732e 2049 6e20 7065  onditions. In pe",
            "-0001a250: 7263 656e 742c 2065 2e67 2e20 312e 3525  rcent, e.g. 1.5%",
            "-0001a260: 206c 6f73 7320 6973 2069 6e70 7574 2061   loss is input a",
            "-0001a270: 7320 312e 352e 0a20 2020 206d 6f64 756c  s 1.5..    modul",
            "-0001a280: 6573 5f70 6572 5f73 7472 696e 673a 2069  es_per_string: i",
            "-0001a290: 6e74 2c20 6465 6661 756c 7420 310a 2020  nt, default 1.  ",
            "-0001a2a0: 2020 2020 2020 4e75 6d62 6572 206f 6620        Number of ",
            "-0001a2b0: 7365 7269 6573 2d63 6f6e 6e65 6374 6564  series-connected",
            "-0001a2c0: 206d 6f64 756c 6573 2070 6572 2073 7472   modules per str",
            "-0001a2d0: 696e 6720 696e 2074 6865 2061 7272 6179  ing in the array",
            "-0001a2e0: 2e0a 2020 2020 7374 7269 6e67 733a 2069  ..    strings: i",
            "-0001a2f0: 6e74 2c20 6465 6661 756c 7420 310a 2020  nt, default 1.  ",
            "-0001a300: 2020 2020 2020 4e75 6d62 6572 206f 6620        Number of ",
            "-0001a310: 7061 7261 6c6c 656c 2073 7472 696e 6773  parallel strings",
            "-0001a320: 2069 6e20 7468 6520 6172 7261 792e 0a0a   in the array...",
            "-0001a330: 2020 2020 5265 7475 726e 730a 2020 2020      Returns.    ",
            "-0001a340: 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020 2052  ----------.    R",
            "-0001a350: 773a 206e 756d 6572 6963 0a20 2020 2020  w: numeric.     ",
            "-0001a360: 2020 2045 7175 6976 616c 656e 7420 7265     Equivalent re",
            "-0001a370: 7369 7374 616e 6365 2e20 5b6f 686d 5d0a  sistance. [ohm].",
            "-0001a380: 0a20 2020 2053 6565 2041 6c73 6f0a 2020  .    See Also.  ",
            "-0001a390: 2020 2d2d 2d2d 2d2d 2d2d 0a20 2020 2070    --------.    p",
            "-0001a3a0: 766c 6962 2e70 7673 7973 7465 6d2e 6463  vlib.pvsystem.dc",
            "-0001a3b0: 5f6f 686d 6963 5f6c 6f73 7365 730a 0a20  _ohmic_losses.. ",
            "-0001a3c0: 2020 204e 6f74 6573 0a20 2020 202d 2d2d     Notes.    ---",
            "-0001a3d0: 2d2d 0a20 2020 2045 7175 6976 616c 656e  --.    Equivalen",
            "-0001a3e0: 7420 7265 7369 7374 616e 6365 2069 7320  t resistance is ",
            "-0001a3f0: 6361 6c63 756c 6174 6564 2061 733a 0a0a  calculated as:..",
            "-0001a400: 2020 2020 2e2e 206d 6174 683a 3a0a 0a20      .. math::.. ",
            "-0001a410: 2020 2020 2020 2052 5f77 203d 205c 6c65         R_w = \\le",
            "-0001a420: 6674 285c 6672 6163 7b4c 5f7b 7374 637d  ft(\\frac{L_{stc}",
            "-0001a430: 7d7b 3130 307d 5c72 6967 6874 2920 5c74  }{100}\\right) \\t",
            "-0001a440: 696d 6573 205c 6c65 6674 285c 6672 6163  imes \\left(\\frac",
            "-0001a450: 7b0a 2020 2020 2020 2020 565f 7b61 7272  {.        V_{arr",
            "-0001a460: 6179 7d7d 7b49 5f7b 6172 7261 797d 7d5c  ay}}{I_{array}}\\",
            "-0001a470: 7269 6768 7429 0a0a 2020 2020 3a6d 6174  right)..    :mat",
            "-0001a480: 683a 6052 5f77 6020 6973 2074 6865 2065  h:`R_w` is the e",
            "-0001a490: 7175 6976 616c 656e 7420 7265 7369 7374  quivalent resist",
            "-0001a4a0: 616e 6365 2069 6e20 6f68 6d73 2e0a 2020  ance in ohms..  ",
            "-0001a4b0: 2020 3a6d 6174 683a 6056 5f7b 6172 7261    :math:`V_{arra",
            "-0001a4c0: 797d 6020 6973 2074 6865 2061 7272 6179  y}` is the array",
            "-0001a4d0: 2076 6f6c 7461 6765 2c20 6571 7561 6c20   voltage, equal ",
            "-0001a4e0: 746f 2060 6076 6d70 5f72 6566 6060 2074  to ``vmp_ref`` t",
            "-0001a4f0: 696d 6573 0a20 2020 2060 606d 6f64 756c  imes.    ``modul",
            "-0001a500: 6573 5f70 6572 5f73 7472 696e 6760 602e  es_per_string``.",
            "-0001a510: 0a20 2020 203a 6d61 7468 3a60 495f 7b61  .    :math:`I_{a",
            "-0001a520: 7272 6179 7d60 2069 7320 7468 6520 6172  rray}` is the ar",
            "-0001a530: 7261 7920 6375 7272 656e 742c 2065 7175  ray current, equ",
            "-0001a540: 616c 2074 6f20 6060 696d 705f 7265 6660  al to ``imp_ref`",
            "-0001a550: 6020 7469 6d65 730a 2020 2020 6060 7374  ` times.    ``st",
            "-0001a560: 7269 6e67 7360 602e 0a20 2020 203a 6d61  rings``..    :ma",
            "-0001a570: 7468 3a60 4c5f 7b73 7463 7d60 2069 7320  th:`L_{stc}` is ",
            "-0001a580: 7468 6520 696e 7075 7420 4443 206c 6f73  the input DC los",
            "-0001a590: 7320 7065 7263 656e 7420 6174 2072 6566  s percent at ref",
            "-0001a5a0: 6572 656e 6365 2063 6f6e 6469 7469 6f6e  erence condition",
            "-0001a5b0: 732e 0a0a 2020 2020 2222 220a 2020 2020  s...    \"\"\".    ",
            "-0001a5c0: 766d 7020 3d20 6d6f 6475 6c65 735f 7065  vmp = modules_pe",
            "-0001a5d0: 725f 7374 7269 6e67 202a 2076 6d70 5f72  r_string * vmp_r",
            "-0001a5e0: 6566 0a0a 2020 2020 696d 7020 3d20 7374  ef..    imp = st",
            "-0001a5f0: 7269 6e67 7320 2a20 696d 705f 7265 660a  rings * imp_ref.",
            "-0001a600: 0a20 2020 2052 7720 3d20 2864 635f 6f68  .    Rw = (dc_oh",
            "-0001a610: 6d69 635f 7065 7263 656e 7420 2f20 3130  mic_percent / 10",
            "-0001a620: 3029 202a 2028 766d 7020 2f20 696d 7029  0) * (vmp / imp)",
            "-0001a630: 0a0a 2020 2020 7265 7475 726e 2052 770a  ..    return Rw.",
            "-0001a640: 0a0a 6465 6620 6463 5f6f 686d 6963 5f6c  ..def dc_ohmic_l",
            "-0001a650: 6f73 7365 7328 7265 7369 7374 616e 6365  osses(resistance",
            "-0001a660: 2c20 6375 7272 656e 7429 3a0a 2020 2020  , current):.    ",
            "-0001a670: 7222 2222 0a20 2020 2052 6574 7572 6e73  r\"\"\".    Returns",
            "-0001a680: 206f 686d 6963 206c 6f73 7365 7320 696e   ohmic losses in",
            "-0001a690: 2075 6e69 7473 206f 6620 706f 7765 7220   units of power ",
            "-0001a6a0: 6672 6f6d 2074 6865 2065 7175 6976 616c  from the equival",
            "-0001a6b0: 656e 740a 2020 2020 7265 7369 7374 616e  ent.    resistan",
            "-0001a6c0: 6365 206f 6620 7468 6520 7769 7265 7320  ce of the wires ",
            "-0001a6d0: 616e 6420 7468 6520 6f70 6572 6174 696e  and the operatin",
            "-0001a6e0: 6720 6375 7272 656e 742e 0a0a 2020 2020  g current...    ",
            "-0001a6f0: 5061 7261 6d65 7465 7273 0a20 2020 202d  Parameters.    -",
            "-0001a700: 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020 7265  ---------.    re",
            "-0001a710: 7369 7374 616e 6365 3a20 6e75 6d65 7269  sistance: numeri",
            "-0001a720: 630a 2020 2020 2020 2020 4571 7569 7661  c.        Equiva",
            "-0001a730: 6c65 6e74 2072 6573 6973 7461 6e63 6520  lent resistance ",
            "-0001a740: 6f66 2077 6972 6573 2e20 5b6f 686d 5d0a  of wires. [ohm].",
            "-0001a750: 2020 2020 6375 7272 656e 743a 206e 756d      current: num",
            "-0001a760: 6572 6963 2c20 666c 6f61 7420 6f72 2061  eric, float or a",
            "-0001a770: 7272 6179 2d6c 696b 650a 2020 2020 2020  rray-like.      ",
            "-0001a780: 2020 4f70 6572 6174 696e 6720 6375 7272    Operating curr",
            "-0001a790: 656e 742e 205b 415d 0a0a 2020 2020 5265  ent. [A]..    Re",
            "-0001a7a0: 7475 726e 730a 2020 2020 2d2d 2d2d 2d2d  turns.    ------",
            "-0001a7b0: 2d2d 2d2d 0a20 2020 206c 6f73 733a 206e  ----.    loss: n",
            "-0001a7c0: 756d 6572 6963 0a20 2020 2020 2020 2050  umeric.        P",
            "-0001a7d0: 6f77 6572 206c 6f73 732e 205b 575d 0a0a  ower loss. [W]..",
            "-0001a7e0: 2020 2020 5365 6520 416c 736f 0a20 2020      See Also.   ",
            "-0001a7f0: 202d 2d2d 2d2d 2d2d 2d0a 2020 2020 7076   --------.    pv",
            "-0001a800: 6c69 622e 7076 7379 7374 656d 2e64 635f  lib.pvsystem.dc_",
            "-0001a810: 6f68 6d73 5f66 726f 6d5f 7065 7263 656e  ohms_from_percen",
            "-0001a820: 740a 0a20 2020 204e 6f74 6573 0a20 2020  t..    Notes.   ",
            "-0001a830: 202d 2d2d 2d2d 0a20 2020 204f 686d 6963   -----.    Ohmic",
            "-0001a840: 2028 616c 736f 2074 6572 6d65 6420 6a6f   (also termed jo",
            "-0001a850: 756c 6520 6f72 2068 6561 7429 206c 6f73  ule or heat) los",
            "-0001a860: 7320 6973 2074 6865 2070 6f77 6572 206c  s is the power l",
            "-0001a870: 6f73 7420 6475 6520 746f 2063 7572 7265  ost due to curre",
            "-0001a880: 6e74 0a20 2020 2066 6c6f 7769 6e67 2074  nt.    flowing t",
            "-0001a890: 6872 6f75 6768 2061 2063 6f6e 6475 6374  hrough a conduct",
            "-0001a8a0: 6f72 2e20 4f68 6d69 6320 6c6f 7373 2c20  or. Ohmic loss, ",
            "-0001a8b0: 3a6d 6174 683a 604c 602c 2069 7320 636f  :math:`L`, is co",
            "-0001a8c0: 6d70 7574 6564 2061 730a 0a20 2020 202e  mputed as..    .",
            "-0001a8d0: 2e20 6d61 7468 3a3a 0a0a 2020 2020 2020  . math::..      ",
            "-0001a8e0: 2020 4c20 3d20 495e 3220 5c74 696d 6573    L = I^2 \\times",
            "-0001a8f0: 2052 0a0a 2020 2020 7768 6572 6520 3a6d   R..    where :m",
            "-0001a900: 6174 683a 6049 6020 6973 2074 6865 2063  ath:`I` is the c",
            "-0001a910: 7572 7265 6e74 2028 4129 2061 6e64 203a  urrent (A) and :",
            "-0001a920: 6d61 7468 3a60 5260 2069 7320 7468 6520  math:`R` is the ",
            "-0001a930: 7265 7369 7374 616e 6365 206f 6620 7468  resistance of th",
            "-0001a940: 650a 2020 2020 636f 6e64 7563 746f 7220  e.    conductor ",
            "-0001a950: 286f 686d 7329 2e0a 2020 2020 2222 220a  (ohms)..    \"\"\".",
            "-0001a960: 2020 2020 7265 7475 726e 2072 6573 6973      return resis",
            "-0001a970: 7461 6e63 6520 2a20 6375 7272 656e 7420  tance * current ",
            "-0001a980: 2a20 6375 7272 656e 740a 0a0a 6465 6620  * current...def ",
            "-0001a990: 636f 6d62 696e 655f 6c6f 7373 5f66 6163  combine_loss_fac",
            "-0001a9a0: 746f 7273 2869 6e64 6578 2c20 2a6c 6f73  tors(index, *los",
            "-0001a9b0: 7365 732c 2066 696c 6c5f 6d65 7468 6f64  ses, fill_method",
            "-0001a9c0: 3d27 6666 696c 6c27 293a 0a20 2020 2072  ='ffill'):.    r",
            "-0001a9d0: 2222 220a 2020 2020 436f 6d62 696e 6573  \"\"\".    Combines",
            "-0001a9e0: 2053 6572 6965 7320 6c6f 7373 2066 7261   Series loss fra",
            "-0001a9f0: 6374 696f 6e73 2077 6869 6c65 2073 6574  ctions while set",
            "-0001aa00: 7469 6e67 2061 2063 6f6d 6d6f 6e20 696e  ting a common in",
            "-0001aa10: 6465 782e 0a0a 2020 2020 5468 6520 7365  dex...    The se",
            "-0001aa20: 7061 7261 7465 206c 6f73 7365 7320 6172  parate losses ar",
            "-0001aa30: 6520 636f 6d70 6f75 6e64 6564 2075 7369  e compounded usi",
            "-0001aa40: 6e67 2074 6865 2066 6f6c 6c6f 7769 6e67  ng the following",
            "-0001aa50: 2065 7175 6174 696f 6e3a 0a0a 2020 2020   equation:..    ",
            "-0001aa60: 2e2e 206d 6174 683a 3a0a 0a20 2020 2020  .. math::..     ",
            "-0001aa70: 2020 204c 5f7b 746f 7461 6c7d 203d 2031     L_{total} = 1",
            "-0001aa80: 202d 205b 2031 202d 205c 5069 5f69 2028   - [ 1 - \\Pi_i (",
            "-0001aa90: 2031 202d 204c 5f69 2029 205d 0a0a 2020   1 - L_i ) ]..  ",
            "-0001aaa0: 2020 3a6d 6174 683a 604c 5f7b 746f 7461    :math:`L_{tota",
            "-0001aab0: 6c7d 6020 6973 2074 6865 2074 6f74 616c  l}` is the total",
            "-0001aac0: 206c 6f73 7320 7265 7475 726e 6564 0a20   loss returned. ",
            "-0001aad0: 2020 203a 6d61 7468 3a60 4c5f 6960 2069     :math:`L_i` i",
            "-0001aae0: 7320 6561 6368 2069 6e64 6976 6964 7561  s each individua",
            "-0001aaf0: 6c20 6c6f 7373 2066 6163 746f 7220 696e  l loss factor in",
            "-0001ab00: 7075 740a 0a20 2020 204e 6f74 6520 7468  put..    Note th",
            "-0001ab10: 6520 6c6f 7373 6573 206d 7573 7420 6561  e losses must ea",
            "-0001ab20: 6368 2062 6520 6120 7365 7269 6573 2077  ch be a series w",
            "-0001ab30: 6974 6820 6120 4461 7465 7469 6d65 496e  ith a DatetimeIn",
            "-0001ab40: 6465 782e 0a20 2020 2041 6c6c 206c 6f73  dex..    All los",
            "-0001ab50: 7365 7320 7769 6c6c 2062 6520 7265 7361  ses will be resa",
            "-0001ab60: 6d70 6c65 6420 746f 206d 6174 6368 2074  mpled to match t",
            "-0001ab70: 6865 2069 6e64 6578 2070 6172 616d 6574  he index paramet",
            "-0001ab80: 6572 2075 7369 6e67 0a20 2020 2074 6865  er using.    the",
            "-0001ab90: 2066 696c 6c20 6d65 7468 6f64 2073 7065   fill method spe",
            "-0001aba0: 6369 6669 6564 2028 6465 6661 756c 7473  cified (defaults",
            "-0001abb0: 2074 6f20 2266 696c 6c20 666f 7277 6172   to \"fill forwar",
            "-0001abc0: 6422 292e 0a0a 2020 2020 5061 7261 6d65  d\")...    Parame",
            "-0001abd0: 7465 7273 0a20 2020 202d 2d2d 2d2d 2d2d  ters.    -------",
            "-0001abe0: 2d2d 2d0a 2020 2020 696e 6465 7820 3a20  ---.    index : ",
            "-0001abf0: 4461 7465 7469 6d65 496e 6465 780a 2020  DatetimeIndex.  ",
            "-0001ac00: 2020 2020 2020 5468 6520 696e 6465 7820        The index ",
            "-0001ac10: 6f66 2074 6865 2072 6574 7572 6e65 6420  of the returned ",
            "-0001ac20: 6c6f 7373 2066 6163 746f 7273 0a0a 2020  loss factors..  ",
            "-0001ac30: 2020 2a6c 6f73 7365 7320 3a20 5365 7269    *losses : Seri",
            "-0001ac40: 6573 0a20 2020 2020 2020 204f 6e65 206f  es.        One o",
            "-0001ac50: 7220 6d6f 7265 2053 6572 6965 7320 6f66  r more Series of",
            "-0001ac60: 2066 7261 6374 696f 6e73 2074 6f20 6265   fractions to be",
            "-0001ac70: 2063 6f6d 706f 756e 6465 640a 0a20 2020   compounded..   ",
            "-0001ac80: 2066 696c 6c5f 6d65 7468 6f64 203a 207b   fill_method : {",
            "-0001ac90: 2766 6669 6c6c 272c 2027 6266 696c 6c27  'ffill', 'bfill'",
            "-0001aca0: 2c20 276e 6561 7265 7374 277d 2c20 6465  , 'nearest'}, de",
            "-0001acb0: 6661 756c 7420 2766 6669 6c6c 270a 2020  fault 'ffill'.  ",
            "-0001acc0: 2020 2020 2020 4d65 7468 6f64 2074 6f20        Method to ",
            "-0001acd0: 7573 6520 666f 7220 6669 6c6c 696e 6720  use for filling ",
            "-0001ace0: 686f 6c65 7320 696e 2072 6569 6e64 6578  holes in reindex",
            "-0001acf0: 6564 2044 6174 6146 7261 6d65 0a0a 2020  ed DataFrame..  ",
            "-0001ad00: 2020 5265 7475 726e 730a 2020 2020 2d2d    Returns.    --",
            "-0001ad10: 2d2d 2d2d 2d0a 2020 2020 5365 7269 6573  -----.    Series",
            "-0001ad20: 0a20 2020 2020 2020 2046 7261 6374 696f  .        Fractio",
            "-0001ad30: 6e73 2072 6573 756c 7469 6e67 2066 726f  ns resulting fro",
            "-0001ad40: 6d20 7468 6520 636f 6d62 696e 6174 696f  m the combinatio",
            "-0001ad50: 6e20 6f66 2065 6163 6820 6c6f 7373 2066  n of each loss f",
            "-0001ad60: 6163 746f 720a 2020 2020 2222 220a 2020  actor.    \"\"\".  ",
            "-0001ad70: 2020 636f 6d62 696e 6564 5f66 6163 746f    combined_facto",
            "-0001ad80: 7220 3d20 310a 0a20 2020 2066 6f72 206c  r = 1..    for l",
            "-0001ad90: 6f73 7320 696e 206c 6f73 7365 733a 0a20  oss in losses:. ",
            "-0001ada0: 2020 2020 2020 206c 6f73 7320 3d20 6c6f         loss = lo",
            "-0001adb0: 7373 2e72 6569 6e64 6578 2869 6e64 6578  ss.reindex(index",
            "-0001adc0: 2c20 6d65 7468 6f64 3d66 696c 6c5f 6d65  , method=fill_me",
            "-0001add0: 7468 6f64 290a 2020 2020 2020 2020 636f  thod).        co",
            "-0001ade0: 6d62 696e 6564 5f66 6163 746f 7220 2a3d  mbined_factor *=",
            "-0001adf0: 2028 3120 2d20 6c6f 7373 290a 0a20 2020   (1 - loss)..   ",
            "-0001ae00: 2072 6574 7572 6e20 3120 2d20 636f 6d62   return 1 - comb",
            "-0001ae10: 696e 6564 5f66 6163 746f 720a            ined_factor.",
            "+00010d50: 2020 2020 2020 2020 2020 2020 2020 4567                Eg",
            "+00010d60: 5265 663d 4567 5265 662c 2064 4567 6454  Ref=EgRef, dEgdT",
            "+00010d70: 3d64 4567 6454 2c0a 2020 2020 2020 2020  =dEgdT,.        ",
            "+00010d80: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00010d90: 2020 2020 2069 7272 6164 5f72 6566 3d69       irrad_ref=i",
            "+00010da0: 7272 6164 5f72 6566 2c20 7465 6d70 5f72  rrad_ref, temp_r",
            "+00010db0: 6566 3d74 656d 705f 7265 6629 0a0a 0a64  ef=temp_ref)...d",
            "+00010dc0: 6566 2063 616c 6370 6172 616d 735f 7076  ef calcparams_pv",
            "+00010dd0: 7379 7374 2865 6666 6563 7469 7665 5f69  syst(effective_i",
            "+00010de0: 7272 6164 6961 6e63 652c 2074 656d 705f  rradiance, temp_",
            "+00010df0: 6365 6c6c 2c0a 2020 2020 2020 2020 2020  cell,.          ",
            "+00010e00: 2020 2020 2020 2020 2020 2020 616c 7068              alph",
            "+00010e10: 615f 7363 2c20 6761 6d6d 615f 7265 662c  a_sc, gamma_ref,",
            "+00010e20: 206d 755f 6761 6d6d 612c 0a20 2020 2020   mu_gamma,.     ",
            "+00010e30: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00010e40: 2049 5f4c 5f72 6566 2c20 495f 6f5f 7265   I_L_ref, I_o_re",
            "+00010e50: 662c 0a20 2020 2020 2020 2020 2020 2020  f,.             ",
            "+00010e60: 2020 2020 2020 2020 2052 5f73 685f 7265           R_sh_re",
            "+00010e70: 662c 2052 5f73 685f 302c 2052 5f73 2c0a  f, R_sh_0, R_s,.",
            "+00010e80: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00010e90: 2020 2020 2020 6365 6c6c 735f 696e 5f73        cells_in_s",
            "+00010ea0: 6572 6965 732c 0a20 2020 2020 2020 2020  eries,.         ",
            "+00010eb0: 2020 2020 2020 2020 2020 2020 2052 5f73               R_s",
            "+00010ec0: 685f 6578 703d 352e 352c 0a20 2020 2020  h_exp=5.5,.     ",
            "+00010ed0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00010ee0: 2045 6752 6566 3d31 2e31 3231 2c0a 2020   EgRef=1.121,.  ",
            "+00010ef0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00010f00: 2020 2020 6972 7261 645f 7265 663d 3130      irrad_ref=10",
            "+00010f10: 3030 2c20 7465 6d70 5f72 6566 3d32 3529  00, temp_ref=25)",
            "+00010f20: 3a0a 2020 2020 2727 270a 2020 2020 4361  :.    '''.    Ca",
            "+00010f30: 6c63 756c 6174 6573 2066 6976 6520 7061  lculates five pa",
            "+00010f40: 7261 6d65 7465 7220 7661 6c75 6573 2066  rameter values f",
            "+00010f50: 6f72 2074 6865 2073 696e 676c 6520 6469  or the single di",
            "+00010f60: 6f64 6520 6571 7561 7469 6f6e 2061 740a  ode equation at.",
            "+00010f70: 2020 2020 6566 6665 6374 6976 6520 6972      effective ir",
            "+00010f80: 7261 6469 616e 6365 2061 6e64 2063 656c  radiance and cel",
            "+00010f90: 6c20 7465 6d70 6572 6174 7572 6520 7573  l temperature us",
            "+00010fa0: 696e 6720 7468 6520 5056 7379 7374 2076  ing the PVsyst v",
            "+00010fb0: 360a 2020 2020 6d6f 6465 6c2e 2020 5468  6.    model.  Th",
            "+00010fc0: 6520 5056 7379 7374 2076 3620 6d6f 6465  e PVsyst v6 mode",
            "+00010fd0: 6c20 6973 2064 6573 6372 6962 6564 2069  l is described i",
            "+00010fe0: 6e20 5b31 5d5f 2c20 5b32 5d5f 2c20 5b33  n [1]_, [2]_, [3",
            "+00010ff0: 5d5f 2e0a 2020 2020 5468 6520 6669 7665  ]_..    The five",
            "+00011000: 2076 616c 7565 7320 7265 7475 726e 6564   values returned",
            "+00011010: 2062 7920 6361 6c63 7061 7261 6d73 5f70   by calcparams_p",
            "+00011020: 7673 7973 7420 6361 6e20 6265 2075 7365  vsyst can be use",
            "+00011030: 6420 6279 2073 696e 676c 6564 696f 6465  d by singlediode",
            "+00011040: 0a20 2020 2074 6f20 6361 6c63 756c 6174  .    to calculat",
            "+00011050: 6520 616e 2049 5620 6375 7276 652e 0a0a  e an IV curve...",
            "+00011060: 2020 2020 5061 7261 6d65 7465 7273 0a20      Parameters. ",
            "+00011070: 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020     ----------.  ",
            "+00011080: 2020 6566 6665 6374 6976 655f 6972 7261    effective_irra",
            "+00011090: 6469 616e 6365 203a 206e 756d 6572 6963  diance : numeric",
            "+000110a0: 0a20 2020 2020 2020 2054 6865 2069 7272  .        The irr",
            "+000110b0: 6164 6961 6e63 6520 2857 2f6d 3229 2074  adiance (W/m2) t",
            "+000110c0: 6861 7420 6973 2063 6f6e 7665 7274 6564  hat is converted",
            "+000110d0: 2074 6f20 7068 6f74 6f63 7572 7265 6e74   to photocurrent",
            "+000110e0: 2e0a 0a20 2020 2074 656d 705f 6365 6c6c  ...    temp_cell",
            "+000110f0: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "+00011100: 2020 2054 6865 2061 7665 7261 6765 2063     The average c",
            "+00011110: 656c 6c20 7465 6d70 6572 6174 7572 6520  ell temperature ",
            "+00011120: 6f66 2063 656c 6c73 2077 6974 6869 6e20  of cells within ",
            "+00011130: 6120 6d6f 6475 6c65 2069 6e20 432e 0a0a  a module in C...",
            "+00011140: 2020 2020 616c 7068 615f 7363 203a 2066      alpha_sc : f",
            "+00011150: 6c6f 6174 0a20 2020 2020 2020 2054 6865  loat.        The",
            "+00011160: 2073 686f 7274 2d63 6972 6375 6974 2063   short-circuit c",
            "+00011170: 7572 7265 6e74 2074 656d 7065 7261 7475  urrent temperatu",
            "+00011180: 7265 2063 6f65 6666 6963 6965 6e74 206f  re coefficient o",
            "+00011190: 6620 7468 650a 2020 2020 2020 2020 6d6f  f the.        mo",
            "+000111a0: 6475 6c65 2069 6e20 756e 6974 7320 6f66  dule in units of",
            "+000111b0: 2041 2f43 2e0a 0a20 2020 2067 616d 6d61   A/C...    gamma",
            "+000111c0: 5f72 6566 203a 2066 6c6f 6174 0a20 2020  _ref : float.   ",
            "+000111d0: 2020 2020 2054 6865 2064 696f 6465 2069       The diode i",
            "+000111e0: 6465 616c 6974 7920 6661 6374 6f72 0a0a  deality factor..",
            "+000111f0: 2020 2020 6d75 5f67 616d 6d61 203a 2066      mu_gamma : f",
            "+00011200: 6c6f 6174 0a20 2020 2020 2020 2054 6865  loat.        The",
            "+00011210: 2074 656d 7065 7261 7475 7265 2063 6f65   temperature coe",
            "+00011220: 6666 6963 6965 6e74 2066 6f72 2074 6865  fficient for the",
            "+00011230: 2064 696f 6465 2069 6465 616c 6974 7920   diode ideality ",
            "+00011240: 6661 6374 6f72 2c20 312f 4b0a 0a20 2020  factor, 1/K..   ",
            "+00011250: 2049 5f4c 5f72 6566 203a 2066 6c6f 6174   I_L_ref : float",
            "+00011260: 0a20 2020 2020 2020 2054 6865 206c 6967  .        The lig",
            "+00011270: 6874 2d67 656e 6572 6174 6564 2063 7572  ht-generated cur",
            "+00011280: 7265 6e74 2028 6f72 2070 686f 746f 6375  rent (or photocu",
            "+00011290: 7272 656e 7429 2061 7420 7265 6665 7265  rrent) at refere",
            "+000112a0: 6e63 6520 636f 6e64 6974 696f 6e73 2c0a  nce conditions,.",
            "+000112b0: 2020 2020 2020 2020 696e 2061 6d70 6572          in amper",
            "+000112c0: 6573 2e0a 0a20 2020 2049 5f6f 5f72 6566  es...    I_o_ref",
            "+000112d0: 203a 2066 6c6f 6174 0a20 2020 2020 2020   : float.       ",
            "+000112e0: 2054 6865 2064 6172 6b20 6f72 2064 696f   The dark or dio",
            "+000112f0: 6465 2072 6576 6572 7365 2073 6174 7572  de reverse satur",
            "+00011300: 6174 696f 6e20 6375 7272 656e 7420 6174  ation current at",
            "+00011310: 2072 6566 6572 656e 6365 2063 6f6e 6469   reference condi",
            "+00011320: 7469 6f6e 732c 0a20 2020 2020 2020 2069  tions,.        i",
            "+00011330: 6e20 616d 7065 7265 732e 0a0a 2020 2020  n amperes...    ",
            "+00011340: 525f 7368 5f72 6566 203a 2066 6c6f 6174  R_sh_ref : float",
            "+00011350: 0a20 2020 2020 2020 2054 6865 2073 6875  .        The shu",
            "+00011360: 6e74 2072 6573 6973 7461 6e63 6520 6174  nt resistance at",
            "+00011370: 2072 6566 6572 656e 6365 2063 6f6e 6469   reference condi",
            "+00011380: 7469 6f6e 732c 2069 6e20 6f68 6d73 2e0a  tions, in ohms..",
            "+00011390: 0a20 2020 2052 5f73 685f 3020 3a20 666c  .    R_sh_0 : fl",
            "+000113a0: 6f61 740a 2020 2020 2020 2020 5468 6520  oat.        The ",
            "+000113b0: 7368 756e 7420 7265 7369 7374 616e 6365  shunt resistance",
            "+000113c0: 2061 7420 7a65 726f 2069 7272 6164 6961   at zero irradia",
            "+000113d0: 6e63 6520 636f 6e64 6974 696f 6e73 2c20  nce conditions, ",
            "+000113e0: 696e 206f 686d 732e 0a0a 2020 2020 525f  in ohms...    R_",
            "+000113f0: 7320 3a20 666c 6f61 740a 2020 2020 2020  s : float.      ",
            "+00011400: 2020 5468 6520 7365 7269 6573 2072 6573    The series res",
            "+00011410: 6973 7461 6e63 6520 6174 2072 6566 6572  istance at refer",
            "+00011420: 656e 6365 2063 6f6e 6469 7469 6f6e 732c  ence conditions,",
            "+00011430: 2069 6e20 6f68 6d73 2e0a 0a20 2020 2063   in ohms...    c",
            "+00011440: 656c 6c73 5f69 6e5f 7365 7269 6573 203a  ells_in_series :",
            "+00011450: 2069 6e74 6567 6572 0a20 2020 2020 2020   integer.       ",
            "+00011460: 2054 6865 206e 756d 6265 7220 6f66 2063   The number of c",
            "+00011470: 656c 6c73 2063 6f6e 6e65 6374 6564 2069  ells connected i",
            "+00011480: 6e20 7365 7269 6573 2e0a 0a20 2020 2052  n series...    R",
            "+00011490: 5f73 685f 6578 7020 3a20 666c 6f61 740a  _sh_exp : float.",
            "+000114a0: 2020 2020 2020 2020 5468 6520 6578 706f          The expo",
            "+000114b0: 6e65 6e74 2069 6e20 7468 6520 6571 7561  nent in the equa",
            "+000114c0: 7469 6f6e 2066 6f72 2073 6875 6e74 2072  tion for shunt r",
            "+000114d0: 6573 6973 7461 6e63 652c 2075 6e69 746c  esistance, unitl",
            "+000114e0: 6573 732e 2044 6566 6175 6c74 730a 2020  ess. Defaults.  ",
            "+000114f0: 2020 2020 2020 746f 2035 2e35 2e0a 0a20        to 5.5... ",
            "+00011500: 2020 2045 6752 6566 203a 2066 6c6f 6174     EgRef : float",
            "+00011510: 0a20 2020 2020 2020 2054 6865 2065 6e65  .        The ene",
            "+00011520: 7267 7920 6261 6e64 6761 7020 6174 2072  rgy bandgap at r",
            "+00011530: 6566 6572 656e 6365 2074 656d 7065 7261  eference tempera",
            "+00011540: 7475 7265 2069 6e20 756e 6974 7320 6f66  ture in units of",
            "+00011550: 2065 562e 0a20 2020 2020 2020 2031 2e31   eV..        1.1",
            "+00011560: 3231 2065 5620 666f 7220 6372 7973 7461  21 eV for crysta",
            "+00011570: 6c6c 696e 6520 7369 6c69 636f 6e2e 2045  lline silicon. E",
            "+00011580: 6752 6566 206d 7573 7420 6265 203e 302e  gRef must be >0.",
            "+00011590: 0a0a 2020 2020 6972 7261 645f 7265 6620  ..    irrad_ref ",
            "+000115a0: 3a20 666c 6f61 742c 2064 6566 6175 6c74  : float, default",
            "+000115b0: 2031 3030 300a 2020 2020 2020 2020 5265   1000.        Re",
            "+000115c0: 6665 7265 6e63 6520 6972 7261 6469 616e  ference irradian",
            "+000115d0: 6365 2069 6e20 572f 6d5e 322e 0a0a 2020  ce in W/m^2...  ",
            "+000115e0: 2020 7465 6d70 5f72 6566 203a 2066 6c6f    temp_ref : flo",
            "+000115f0: 6174 2c20 6465 6661 756c 7420 3235 0a20  at, default 25. ",
            "+00011600: 2020 2020 2020 2052 6566 6572 656e 6365         Reference",
            "+00011610: 2063 656c 6c20 7465 6d70 6572 6174 7572   cell temperatur",
            "+00011620: 6520 696e 2043 2e0a 0a20 2020 2052 6574  e in C...    Ret",
            "+00011630: 7572 6e73 0a20 2020 202d 2d2d 2d2d 2d2d  urns.    -------",
            "+00011640: 0a20 2020 2054 7570 6c65 206f 6620 7468  .    Tuple of th",
            "+00011650: 6520 666f 6c6c 6f77 696e 6720 7265 7375  e following resu",
            "+00011660: 6c74 733a 0a0a 2020 2020 7068 6f74 6f63  lts:..    photoc",
            "+00011670: 7572 7265 6e74 203a 206e 756d 6572 6963  urrent : numeric",
            "+00011680: 0a20 2020 2020 2020 204c 6967 6874 2d67  .        Light-g",
            "+00011690: 656e 6572 6174 6564 2063 7572 7265 6e74  enerated current",
            "+000116a0: 2069 6e20 616d 7065 7265 730a 0a20 2020   in amperes..   ",
            "+000116b0: 2073 6174 7572 6174 696f 6e5f 6375 7272   saturation_curr",
            "+000116c0: 656e 7420 3a20 6e75 6d65 7269 630a 2020  ent : numeric.  ",
            "+000116d0: 2020 2020 2020 4469 6f64 6520 7361 7475        Diode satu",
            "+000116e0: 7261 7469 6f6e 2063 7572 7265 6e74 2069  ration current i",
            "+000116f0: 6e20 616d 7065 7265 730a 0a20 2020 2072  n amperes..    r",
            "+00011700: 6573 6973 7461 6e63 655f 7365 7269 6573  esistance_series",
            "+00011710: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "+00011720: 2020 2053 6572 6965 7320 7265 7369 7374     Series resist",
            "+00011730: 616e 6365 2069 6e20 6f68 6d73 0a0a 2020  ance in ohms..  ",
            "+00011740: 2020 7265 7369 7374 616e 6365 5f73 6875    resistance_shu",
            "+00011750: 6e74 203a 206e 756d 6572 6963 0a20 2020  nt : numeric.   ",
            "+00011760: 2020 2020 2053 6875 6e74 2072 6573 6973       Shunt resis",
            "+00011770: 7461 6e63 6520 696e 206f 686d 730a 0a20  tance in ohms.. ",
            "+00011780: 2020 206e 4e73 5674 6820 3a20 6e75 6d65     nNsVth : nume",
            "+00011790: 7269 630a 2020 2020 2020 2020 5468 6520  ric.        The ",
            "+000117a0: 7072 6f64 7563 7420 6f66 2074 6865 2075  product of the u",
            "+000117b0: 7375 616c 2064 696f 6465 2069 6465 616c  sual diode ideal",
            "+000117c0: 6974 7920 6661 6374 6f72 2028 6e2c 2075  ity factor (n, u",
            "+000117d0: 6e69 746c 6573 7329 2c0a 2020 2020 2020  nitless),.      ",
            "+000117e0: 2020 6e75 6d62 6572 206f 6620 6365 6c6c    number of cell",
            "+000117f0: 7320 696e 2073 6572 6965 7320 284e 7329  s in series (Ns)",
            "+00011800: 2c20 616e 6420 6365 6c6c 2074 6865 726d  , and cell therm",
            "+00011810: 616c 2076 6f6c 7461 6765 2061 740a 2020  al voltage at.  ",
            "+00011820: 2020 2020 2020 7370 6563 6966 6965 6420        specified ",
            "+00011830: 6566 6665 6374 6976 6520 6972 7261 6469  effective irradi",
            "+00011840: 616e 6365 2061 6e64 2063 656c 6c20 7465  ance and cell te",
            "+00011850: 6d70 6572 6174 7572 652e 0a0a 2020 2020  mperature...    ",
            "+00011860: 5265 6665 7265 6e63 6573 0a20 2020 202d  References.    -",
            "+00011870: 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020 2e2e  ---------.    ..",
            "+00011880: 205b 315d 204b 2e20 5361 7565 722c 2054   [1] K. Sauer, T",
            "+00011890: 2e20 526f 6573 736c 6572 2c20 432e 2057  . Roessler, C. W",
            "+000118a0: 2e20 4861 6e73 656e 2c20 4d6f 6465 6c69  . Hansen, Modeli",
            "+000118b0: 6e67 2074 6865 2049 7272 6164 6961 6e63  ng the Irradianc",
            "+000118c0: 6520 616e 640a 2020 2020 2020 2054 656d  e and.       Tem",
            "+000118d0: 7065 7261 7475 7265 2044 6570 656e 6465  perature Depende",
            "+000118e0: 6e63 6520 6f66 2050 686f 746f 766f 6c74  nce of Photovolt",
            "+000118f0: 6169 6320 4d6f 6475 6c65 7320 696e 2050  aic Modules in P",
            "+00011900: 5673 7973 742c 0a20 2020 2020 2020 4945  Vsyst,.       IE",
            "+00011910: 4545 204a 6f75 726e 616c 206f 6620 5068  EE Journal of Ph",
            "+00011920: 6f74 6f76 6f6c 7461 6963 7320 7635 2831  otovoltaics v5(1",
            "+00011930: 292c 204a 616e 7561 7279 2032 3031 352e  ), January 2015.",
            "+00011940: 0a0a 2020 2020 2e2e 205b 325d 2041 2e20  ..    .. [2] A. ",
            "+00011950: 4d65 726d 6f75 642c 2050 5620 6d6f 6475  Mermoud, PV modu",
            "+00011960: 6c65 7320 6d6f 6465 6c6c 696e 672c 2050  les modelling, P",
            "+00011970: 7265 7365 6e74 6174 696f 6e20 6174 2074  resentation at t",
            "+00011980: 6865 2032 6e64 2050 560a 2020 2020 2020  he 2nd PV.      ",
            "+00011990: 2050 6572 666f 726d 616e 6365 204d 6f64   Performance Mod",
            "+000119a0: 656c 696e 6720 576f 726b 7368 6f70 2c20  eling Workshop, ",
            "+000119b0: 5361 6e74 6120 436c 6172 612c 2043 412c  Santa Clara, CA,",
            "+000119c0: 204d 6179 2032 3031 330a 0a20 2020 202e   May 2013..    .",
            "+000119d0: 2e20 5b33 5d20 412e 204d 6572 6d6f 7564  . [3] A. Mermoud",
            "+000119e0: 2c20 542e 204c 656a 6575 6e65 2c20 5065  , T. Lejeune, Pe",
            "+000119f0: 7266 6f72 6d61 6e63 6520 4173 7365 7373  rformance Assess",
            "+00011a00: 6d65 6e74 206f 6620 6120 5369 6d75 6c61  ment of a Simula",
            "+00011a10: 7469 6f6e 204d 6f64 656c 0a20 2020 2020  tion Model.     ",
            "+00011a20: 2020 666f 7220 5056 206d 6f64 756c 6573    for PV modules",
            "+00011a30: 206f 6620 616e 7920 6176 6169 6c61 626c   of any availabl",
            "+00011a40: 6520 7465 6368 6e6f 6c6f 6779 2c20 3235  e technology, 25",
            "+00011a50: 7468 2045 7572 6f70 6561 6e20 5068 6f74  th European Phot",
            "+00011a60: 6f76 6f6c 7461 6963 0a20 2020 2020 2020  ovoltaic.       ",
            "+00011a70: 536f 6c61 7220 456e 6572 6779 2043 6f6e  Solar Energy Con",
            "+00011a80: 6665 7265 6e63 652c 2056 616c 656e 6369  ference, Valenci",
            "+00011a90: 612c 2053 7061 696e 2c20 5365 7074 2e20  a, Spain, Sept. ",
            "+00011aa0: 3230 3130 0a0a 2020 2020 5365 6520 416c  2010..    See Al",
            "+00011ab0: 736f 0a20 2020 202d 2d2d 2d2d 2d2d 2d0a  so.    --------.",
            "+00011ac0: 2020 2020 6361 6c63 7061 7261 6d73 5f64      calcparams_d",
            "+00011ad0: 6573 6f74 6f0a 2020 2020 7369 6e67 6c65  esoto.    single",
            "+00011ae0: 6469 6f64 650a 0a20 2020 2027 2727 0a0a  diode..    '''..",
            "+00011af0: 2020 2020 6761 6d6d 6120 3d20 5f70 7673      gamma = _pvs",
            "+00011b00: 7973 745f 6761 6d6d 6128 7465 6d70 5f63  yst_gamma(temp_c",
            "+00011b10: 656c 6c2c 2067 616d 6d61 5f72 6566 2c20  ell, gamma_ref, ",
            "+00011b20: 6d75 5f67 616d 6d61 2c20 7465 6d70 5f72  mu_gamma, temp_r",
            "+00011b30: 6566 290a 0a20 2020 206e 4e73 5674 6820  ef)..    nNsVth ",
            "+00011b40: 3d20 5f70 7673 7973 745f 6e4e 7356 7468  = _pvsyst_nNsVth",
            "+00011b50: 2874 656d 705f 6365 6c6c 2c20 6761 6d6d  (temp_cell, gamm",
            "+00011b60: 612c 2063 656c 6c73 5f69 6e5f 7365 7269  a, cells_in_seri",
            "+00011b70: 6573 290a 0a20 2020 2049 4c20 3d20 5f70  es)..    IL = _p",
            "+00011b80: 7673 7973 745f 494c 2865 6666 6563 7469  vsyst_IL(effecti",
            "+00011b90: 7665 5f69 7272 6164 6961 6e63 652c 2074  ve_irradiance, t",
            "+00011ba0: 656d 705f 6365 6c6c 2c20 495f 4c5f 7265  emp_cell, I_L_re",
            "+00011bb0: 662c 2061 6c70 6861 5f73 632c 0a20 2020  f, alpha_sc,.   ",
            "+00011bc0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00011bd0: 2069 7272 6164 5f72 6566 2c20 7465 6d70   irrad_ref, temp",
            "+00011be0: 5f72 6566 290a 0a20 2020 2049 3020 3d20  _ref)..    I0 = ",
            "+00011bf0: 5f70 7673 7973 745f 496f 2874 656d 705f  _pvsyst_Io(temp_",
            "+00011c00: 6365 6c6c 2c20 6761 6d6d 612c 2049 5f6f  cell, gamma, I_o",
            "+00011c10: 5f72 6566 2c20 4567 5265 662c 2074 656d  _ref, EgRef, tem",
            "+00011c20: 705f 7265 6629 0a0a 2020 2020 5273 6820  p_ref)..    Rsh ",
            "+00011c30: 3d20 5f70 7673 7973 745f 5273 6828 6566  = _pvsyst_Rsh(ef",
            "+00011c40: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "+00011c50: 6365 2c20 525f 7368 5f72 6566 2c20 525f  ce, R_sh_ref, R_",
            "+00011c60: 7368 5f30 2c20 525f 7368 5f65 7870 2c0a  sh_0, R_sh_exp,.",
            "+00011c70: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00011c80: 2020 2020 2020 6972 7261 645f 7265 6629        irrad_ref)",
            "+00011c90: 0a0a 2020 2020 5273 203d 2052 5f73 0a0a  ..    Rs = R_s..",
            "+00011ca0: 2020 2020 6e75 6d65 7269 635f 6172 6773      numeric_args",
            "+00011cb0: 203d 2028 6566 6665 6374 6976 655f 6972   = (effective_ir",
            "+00011cc0: 7261 6469 616e 6365 2c20 7465 6d70 5f63  radiance, temp_c",
            "+00011cd0: 656c 6c29 0a20 2020 2023 2049 4c3a 2070  ell).    # IL: p",
            "+00011ce0: 686f 746f 6375 7272 656e 742c 2049 303a  hotocurrent, I0:",
            "+00011cf0: 2073 6174 7572 6174 696f 6e5f 6375 7272   saturation_curr",
            "+00011d00: 656e 742c 2052 733a 2072 6573 6973 7461  ent, Rs: resista",
            "+00011d10: 6e63 655f 7365 7269 6573 2c0a 2020 2020  nce_series,.    ",
            "+00011d20: 2320 5273 683a 2072 6573 6973 7461 6e63  # Rsh: resistanc",
            "+00011d30: 655f 7368 756e 740a 2020 2020 6f75 7420  e_shunt.    out ",
            "+00011d40: 3d20 2849 4c2c 2049 302c 2052 732c 2052  = (IL, I0, Rs, R",
            "+00011d50: 7368 2c20 6e4e 7356 7468 290a 0a20 2020  sh, nNsVth)..   ",
            "+00011d60: 2069 6620 616c 6c28 6d61 7028 6e70 2e69   if all(map(np.i",
            "+00011d70: 7373 6361 6c61 722c 206e 756d 6572 6963  sscalar, numeric",
            "+00011d80: 5f61 7267 7329 293a 0a20 2020 2020 2020  _args)):.       ",
            "+00011d90: 2072 6574 7572 6e20 6f75 740a 0a20 2020   return out..   ",
            "+00011da0: 2069 6e64 6578 203d 2074 6f6f 6c73 2e67   index = tools.g",
            "+00011db0: 6574 5f70 616e 6461 735f 696e 6465 7828  et_pandas_index(",
            "+00011dc0: 2a6e 756d 6572 6963 5f61 7267 7329 0a0a  *numeric_args)..",
            "+00011dd0: 2020 2020 6966 2069 6e64 6578 2069 7320      if index is ",
            "+00011de0: 4e6f 6e65 3a0a 2020 2020 2020 2020 7265  None:.        re",
            "+00011df0: 7475 726e 206e 702e 6272 6f61 6463 6173  turn np.broadcas",
            "+00011e00: 745f 6172 7261 7973 282a 6f75 7429 0a0a  t_arrays(*out)..",
            "+00011e10: 2020 2020 7265 7475 726e 2074 7570 6c65      return tuple",
            "+00011e20: 2870 642e 5365 7269 6573 2861 2c20 696e  (pd.Series(a, in",
            "+00011e30: 6465 783d 696e 6465 7829 2e72 656e 616d  dex=index).renam",
            "+00011e40: 6528 4e6f 6e65 2920 666f 7220 6120 696e  e(None) for a in",
            "+00011e50: 206f 7574 290a 0a0a 6465 6620 5f70 7673   out)...def _pvs",
            "+00011e60: 7973 745f 5273 6828 6566 6665 6374 6976  yst_Rsh(effectiv",
            "+00011e70: 655f 6972 7261 6469 616e 6365 2c20 525f  e_irradiance, R_",
            "+00011e80: 7368 5f72 6566 2c20 525f 7368 5f30 2c20  sh_ref, R_sh_0, ",
            "+00011e90: 525f 7368 5f65 7870 3d35 2e35 2c0a 2020  R_sh_exp=5.5,.  ",
            "+00011ea0: 2020 2020 2020 2020 2020 2020 2020 6972                ir",
            "+00011eb0: 7261 645f 7265 663d 3130 3030 293a 0a20  rad_ref=1000):. ",
            "+00011ec0: 2020 2052 7368 5f74 6d70 203d 205c 0a20     Rsh_tmp = \\. ",
            "+00011ed0: 2020 2020 2020 2028 525f 7368 5f72 6566         (R_sh_ref",
            "+00011ee0: 202d 2052 5f73 685f 3020 2a20 6e70 2e65   - R_sh_0 * np.e",
            "+00011ef0: 7870 282d 525f 7368 5f65 7870 2929 202f  xp(-R_sh_exp)) /",
            "+00011f00: 2028 312e 3020 2d20 6e70 2e65 7870 282d   (1.0 - np.exp(-",
            "+00011f10: 525f 7368 5f65 7870 2929 0a20 2020 2052  R_sh_exp)).    R",
            "+00011f20: 7368 5f62 6173 6520 3d20 6e70 2e6d 6178  sh_base = np.max",
            "+00011f30: 696d 756d 2830 2e30 2c20 5273 685f 746d  imum(0.0, Rsh_tm",
            "+00011f40: 7029 0a0a 2020 2020 5273 6820 3d20 5273  p)..    Rsh = Rs",
            "+00011f50: 685f 6261 7365 202b 2028 525f 7368 5f30  h_base + (R_sh_0",
            "+00011f60: 202d 2052 7368 5f62 6173 6529 202a 205c   - Rsh_base) * \\",
            "+00011f70: 0a20 2020 2020 2020 206e 702e 6578 7028  .        np.exp(",
            "+00011f80: 2d52 5f73 685f 6578 7020 2a20 6566 6665  -R_sh_exp * effe",
            "+00011f90: 6374 6976 655f 6972 7261 6469 616e 6365  ctive_irradiance",
            "+00011fa0: 202f 2069 7272 6164 5f72 6566 290a 0a20   / irrad_ref).. ",
            "+00011fb0: 2020 2072 6574 7572 6e20 5273 680a 0a0a     return Rsh...",
            "+00011fc0: 6465 6620 5f70 7673 7973 745f 494c 2865  def _pvsyst_IL(e",
            "+00011fd0: 6666 6563 7469 7665 5f69 7272 6164 6961  ffective_irradia",
            "+00011fe0: 6e63 652c 2074 656d 705f 6365 6c6c 2c20  nce, temp_cell, ",
            "+00011ff0: 495f 4c5f 7265 662c 2061 6c70 6861 5f73  I_L_ref, alpha_s",
            "+00012000: 632c 0a20 2020 2020 2020 2020 2020 2020  c,.             ",
            "+00012010: 2020 6972 7261 645f 7265 663d 3130 3030    irrad_ref=1000",
            "+00012020: 2c20 7465 6d70 5f72 6566 3d32 3529 3a0a  , temp_ref=25):.",
            "+00012030: 2020 2020 5472 6566 5f4b 203d 2074 656d      Tref_K = tem",
            "+00012040: 705f 7265 6620 2b20 3237 332e 3135 0a20  p_ref + 273.15. ",
            "+00012050: 2020 2054 6365 6c6c 5f4b 203d 2074 656d     Tcell_K = tem",
            "+00012060: 705f 6365 6c6c 202b 2032 3733 2e31 350a  p_cell + 273.15.",
            "+00012070: 2020 2020 494c 203d 2065 6666 6563 7469      IL = effecti",
            "+00012080: 7665 5f69 7272 6164 6961 6e63 6520 2f20  ve_irradiance / ",
            "+00012090: 6972 7261 645f 7265 6620 2a20 5c0a 2020  irrad_ref * \\.  ",
            "+000120a0: 2020 2020 2020 2849 5f4c 5f72 6566 202b        (I_L_ref +",
            "+000120b0: 2061 6c70 6861 5f73 6320 2a20 2854 6365   alpha_sc * (Tce",
            "+000120c0: 6c6c 5f4b 202d 2054 7265 665f 4b29 290a  ll_K - Tref_K)).",
            "+000120d0: 2020 2020 7265 7475 726e 2049 4c0a 0a0a      return IL...",
            "+000120e0: 6465 6620 5f70 7673 7973 745f 496f 2874  def _pvsyst_Io(t",
            "+000120f0: 656d 705f 6365 6c6c 2c20 6761 6d6d 612c  emp_cell, gamma,",
            "+00012100: 2049 5f6f 5f72 6566 2c20 4567 5265 662c   I_o_ref, EgRef,",
            "+00012110: 2074 656d 705f 7265 663d 3235 293a 0a20   temp_ref=25):. ",
            "+00012120: 2020 206b 203d 2063 6f6e 7374 616e 7473     k = constants",
            "+00012130: 2e6b 2020 2320 426f 6c74 7a6d 616e 6e20  .k  # Boltzmann ",
            "+00012140: 636f 6e73 7461 6e74 2069 6e20 4a2f 4b0a  constant in J/K.",
            "+00012150: 2020 2020 7120 3d20 636f 6e73 7461 6e74      q = constant",
            "+00012160: 732e 6520 2023 2065 6c65 6d65 6e74 6172  s.e  # elementar",
            "+00012170: 7920 6368 6172 6765 2069 6e20 636f 756c  y charge in coul",
            "+00012180: 6f6d 620a 0a20 2020 2054 7265 665f 4b20  omb..    Tref_K ",
            "+00012190: 3d20 7465 6d70 5f72 6566 202b 2032 3733  = temp_ref + 273",
            "+000121a0: 2e31 350a 2020 2020 5463 656c 6c5f 4b20  .15.    Tcell_K ",
            "+000121b0: 3d20 7465 6d70 5f63 656c 6c20 2b20 3237  = temp_cell + 27",
            "+000121c0: 332e 3135 0a0a 2020 2020 496f 203d 2049  3.15..    Io = I",
            "+000121d0: 5f6f 5f72 6566 202a 2028 2854 6365 6c6c  _o_ref * ((Tcell",
            "+000121e0: 5f4b 202f 2054 7265 665f 4b29 202a 2a20  _K / Tref_K) ** ",
            "+000121f0: 3329 202a 205c 0a20 2020 2020 2020 2028  3) * \\.        (",
            "+00012200: 6e70 2e65 7870 2828 7120 2a20 4567 5265  np.exp((q * EgRe",
            "+00012210: 6629 202f 2028 6b20 2a20 6761 6d6d 6129  f) / (k * gamma)",
            "+00012220: 202a 2028 3120 2f20 5472 6566 5f4b 202d   * (1 / Tref_K -",
            "+00012230: 2031 202f 2054 6365 6c6c 5f4b 2929 290a   1 / Tcell_K))).",
            "+00012240: 0a20 2020 2072 6574 7572 6e20 496f 0a0a  .    return Io..",
            "+00012250: 0a64 6566 205f 7076 7379 7374 5f67 616d  .def _pvsyst_gam",
            "+00012260: 6d61 2874 656d 705f 6365 6c6c 2c20 6761  ma(temp_cell, ga",
            "+00012270: 6d6d 615f 7265 662c 206d 755f 6761 6d6d  mma_ref, mu_gamm",
            "+00012280: 612c 2074 656d 705f 7265 663d 3235 293a  a, temp_ref=25):",
            "+00012290: 0a20 2020 2067 616d 6d61 203d 2067 616d  .    gamma = gam",
            "+000122a0: 6d61 5f72 6566 202b 206d 755f 6761 6d6d  ma_ref + mu_gamm",
            "+000122b0: 6120 2a20 2874 656d 705f 6365 6c6c 202d  a * (temp_cell -",
            "+000122c0: 2074 656d 705f 7265 6629 0a20 2020 2072   temp_ref).    r",
            "+000122d0: 6574 7572 6e20 6761 6d6d 610a 0a0a 6465  eturn gamma...de",
            "+000122e0: 6620 5f70 7673 7973 745f 6e4e 7356 7468  f _pvsyst_nNsVth",
            "+000122f0: 2874 656d 705f 6365 6c6c 2c20 6761 6d6d  (temp_cell, gamm",
            "+00012300: 612c 2063 656c 6c73 5f69 6e5f 7365 7269  a, cells_in_seri",
            "+00012310: 6573 293a 0a20 2020 206b 203d 2063 6f6e  es):.    k = con",
            "+00012320: 7374 616e 7473 2e6b 2020 2320 426f 6c74  stants.k  # Bolt",
            "+00012330: 7a6d 616e 6e20 636f 6e73 7461 6e74 2069  zmann constant i",
            "+00012340: 6e20 4a2f 4b0a 2020 2020 7120 3d20 636f  n J/K.    q = co",
            "+00012350: 6e73 7461 6e74 732e 6520 2023 2065 6c65  nstants.e  # ele",
            "+00012360: 6d65 6e74 6172 7920 6368 6172 6765 2069  mentary charge i",
            "+00012370: 6e20 636f 756c 6f6d 620a 2020 2020 5463  n coulomb.    Tc",
            "+00012380: 656c 6c5f 4b20 3d20 7465 6d70 5f63 656c  ell_K = temp_cel",
            "+00012390: 6c20 2b20 3237 332e 3135 0a0a 2020 2020  l + 273.15..    ",
            "+000123a0: 6e4e 7356 7468 203d 2067 616d 6d61 202a  nNsVth = gamma *",
            "+000123b0: 206b 202f 2071 202a 2063 656c 6c73 5f69   k / q * cells_i",
            "+000123c0: 6e5f 7365 7269 6573 202a 2054 6365 6c6c  n_series * Tcell",
            "+000123d0: 5f4b 0a20 2020 2072 6574 7572 6e20 6e4e  _K.    return nN",
            "+000123e0: 7356 7468 0a0a 0a64 6566 2072 6574 7269  sVth...def retri",
            "+000123f0: 6576 655f 7361 6d28 6e61 6d65 3d4e 6f6e  eve_sam(name=Non",
            "+00012400: 652c 2070 6174 683d 4e6f 6e65 293a 0a20  e, path=None):. ",
            "+00012410: 2020 2022 2222 0a20 2020 2052 6574 7269     \"\"\".    Retri",
            "+00012420: 6576 6520 6c61 7465 7374 206d 6f64 756c  eve latest modul",
            "+00012430: 6520 616e 6420 696e 7665 7274 6572 2069  e and inverter i",
            "+00012440: 6e66 6f20 6672 6f6d 2061 2066 696c 6520  nfo from a file ",
            "+00012450: 6275 6e64 6c65 6420 7769 7468 2070 766c  bundled with pvl",
            "+00012460: 6962 2c0a 2020 2020 6120 7061 7468 206f  ib,.    a path o",
            "+00012470: 7220 616e 2055 524c 2028 6c69 6b65 2053  r an URL (like S",
            "+00012480: 414d 2773 2077 6562 7369 7465 292e 0a0a  AM's website)...",
            "+00012490: 2020 2020 5468 6973 2066 756e 6374 696f      This functio",
            "+000124a0: 6e20 7769 6c6c 2072 6574 7269 6576 6520  n will retrieve ",
            "+000124b0: 6569 7468 6572 3a0a 0a20 2020 202a 2043  either:..    * C",
            "+000124c0: 4543 206d 6f64 756c 6520 6461 7461 6261  EC module databa",
            "+000124d0: 7365 0a20 2020 202a 2053 616e 6469 6120  se.    * Sandia ",
            "+000124e0: 4d6f 6475 6c65 2064 6174 6162 6173 650a  Module database.",
            "+000124f0: 2020 2020 2a20 4345 4320 496e 7665 7274      * CEC Invert",
            "+00012500: 6572 2064 6174 6162 6173 650a 2020 2020  er database.    ",
            "+00012510: 2a20 416e 746f 6e20 4472 6965 7373 6520  * Anton Driesse ",
            "+00012520: 496e 7665 7274 6572 2064 6174 6162 6173  Inverter databas",
            "+00012530: 650a 0a20 2020 2061 6e64 2072 6574 7572  e..    and retur",
            "+00012540: 6e20 6974 2061 7320 6120 7061 6e64 6173  n it as a pandas",
            "+00012550: 2044 6174 6146 7261 6d65 2e0a 0a20 2020   DataFrame...   ",
            "+00012560: 202e 2e20 6e6f 7465 3a3a 0a20 2020 2020   .. note::.     ",
            "+00012570: 2020 204f 6e6c 7920 7072 6f76 6964 6520     Only provide ",
            "+00012580: 6f6e 6520 6f66 2060 606e 616d 6560 6020  one of ``name`` ",
            "+00012590: 6f72 2060 6070 6174 6860 602e 0a0a 2020  or ``path``...  ",
            "+000125a0: 2020 5061 7261 6d65 7465 7273 0a20 2020    Parameters.   ",
            "+000125b0: 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020   ----------.    ",
            "+000125c0: 6e61 6d65 203a 2073 7472 696e 672c 206f  name : string, o",
            "+000125d0: 7074 696f 6e61 6c0a 2020 2020 2020 2020  ptional.        ",
            "+000125e0: 5573 6520 6f6e 6520 6f66 2074 6865 2066  Use one of the f",
            "+000125f0: 6f6c 6c6f 7769 6e67 2073 7472 696e 6773  ollowing strings",
            "+00012600: 2074 6f20 7265 7472 6965 7665 2061 2064   to retrieve a d",
            "+00012610: 6174 6162 6173 6520 6275 6e64 6c65 6420  atabase bundled ",
            "+00012620: 7769 7468 0a20 2020 2020 2020 2070 766c  with.        pvl",
            "+00012630: 6962 3a0a 0a20 2020 2020 2020 202a 2060  ib:..        * `",
            "+00012640: 6027 4345 434d 6f64 2760 6020 2d20 7265  `'CECMod'`` - re",
            "+00012650: 7475 726e 7320 7468 6520 4345 4320 6d6f  turns the CEC mo",
            "+00012660: 6475 6c65 2064 6174 6162 6173 650a 2020  dule database.  ",
            "+00012670: 2020 2020 2020 2a20 6060 2743 4543 496e        * ``'CECIn",
            "+00012680: 7665 7274 6572 2760 6020 2d20 7265 7475  verter'`` - retu",
            "+00012690: 726e 7320 7468 6520 4345 4320 496e 7665  rns the CEC Inve",
            "+000126a0: 7274 6572 2064 6174 6162 6173 650a 2020  rter database.  ",
            "+000126b0: 2020 2020 2020 2a20 6060 2753 616e 6469        * ``'Sandi",
            "+000126c0: 6149 6e76 6572 7465 7227 6060 202d 2072  aInverter'`` - r",
            "+000126d0: 6574 7572 6e73 2074 6865 2043 4543 2049  eturns the CEC I",
            "+000126e0: 6e76 6572 7465 7220 6461 7461 6261 7365  nverter database",
            "+000126f0: 0a20 2020 2020 2020 2020 2028 4345 4320  .          (CEC ",
            "+00012700: 6973 206f 6e6c 7920 6375 7272 656e 7420  is only current ",
            "+00012710: 696e 7665 7274 6572 2064 6220 6176 6169  inverter db avai",
            "+00012720: 6c61 626c 653b 2074 6167 206b 6570 7420  lable; tag kept ",
            "+00012730: 666f 720a 2020 2020 2020 2020 2020 6261  for.          ba",
            "+00012740: 636b 7761 7264 7320 636f 6d70 6174 6962  ckwards compatib",
            "+00012750: 696c 6974 7929 0a20 2020 2020 2020 202a  ility).        *",
            "+00012760: 2060 6027 5361 6e64 6961 4d6f 6427 6060   ``'SandiaMod'``",
            "+00012770: 202d 2072 6574 7572 6e73 2074 6865 2053   - returns the S",
            "+00012780: 616e 6469 6120 4d6f 6475 6c65 2064 6174  andia Module dat",
            "+00012790: 6162 6173 650a 2020 2020 2020 2020 2a20  abase.        * ",
            "+000127a0: 6060 2741 4452 496e 7665 7274 6572 2760  ``'ADRInverter'`",
            "+000127b0: 6020 2d20 7265 7475 726e 7320 7468 6520  ` - returns the ",
            "+000127c0: 4144 5220 496e 7665 7274 6572 2064 6174  ADR Inverter dat",
            "+000127d0: 6162 6173 650a 0a20 2020 2070 6174 6820  abase..    path ",
            "+000127e0: 3a20 7374 7269 6e67 2c20 6f70 7469 6f6e  : string, option",
            "+000127f0: 616c 0a20 2020 2020 2020 2050 6174 6820  al.        Path ",
            "+00012800: 746f 2061 2043 5356 2066 696c 6520 6f72  to a CSV file or",
            "+00012810: 2061 2055 524c 2e0a 0a20 2020 2052 6574   a URL...    Ret",
            "+00012820: 7572 6e73 0a20 2020 202d 2d2d 2d2d 2d2d  urns.    -------",
            "+00012830: 0a20 2020 2044 6174 6146 7261 6d65 0a20  .    DataFrame. ",
            "+00012840: 2020 2020 2020 2041 2044 6174 6146 7261         A DataFra",
            "+00012850: 6d65 2063 6f6e 7461 696e 696e 6720 616c  me containing al",
            "+00012860: 6c20 7468 6520 656c 656d 656e 7473 206f  l the elements o",
            "+00012870: 6620 7468 6520 6465 7369 7265 6420 6461  f the desired da",
            "+00012880: 7461 6261 7365 2e0a 2020 2020 2020 2020  tabase..        ",
            "+00012890: 4561 6368 2063 6f6c 756d 6e20 7265 7072  Each column repr",
            "+000128a0: 6573 656e 7473 2061 206d 6f64 756c 6520  esents a module ",
            "+000128b0: 6f72 2069 6e76 6572 7465 722c 2061 6e64  or inverter, and",
            "+000128c0: 2061 2073 7065 6369 6669 630a 2020 2020   a specific.    ",
            "+000128d0: 2020 2020 6461 7461 7365 7420 6361 6e20      dataset can ",
            "+000128e0: 6265 2072 6574 7269 6576 6564 2062 7920  be retrieved by ",
            "+000128f0: 7468 6520 636f 6d6d 616e 640a 0a20 2020  the command..   ",
            "+00012900: 2052 6169 7365 730a 2020 2020 2d2d 2d2d   Raises.    ----",
            "+00012910: 2d2d 0a20 2020 2056 616c 7565 4572 726f  --.    ValueErro",
            "+00012920: 720a 2020 2020 2020 2020 4966 206e 6f20  r.        If no ",
            "+00012930: 6060 6e61 6d65 6060 206f 7220 6060 7061  ``name`` or ``pa",
            "+00012940: 7468 6060 2069 7320 7072 6f76 6964 6564  th`` is provided",
            "+00012950: 2e0a 2020 2020 5661 6c75 6545 7272 6f72  ..    ValueError",
            "+00012960: 0a20 2020 2020 2020 2049 6620 626f 7468  .        If both",
            "+00012970: 2060 606e 616d 6560 6020 616e 6420 6060   ``name`` and ``",
            "+00012980: 7061 7468 6060 2061 7265 2070 726f 7669  path`` are provi",
            "+00012990: 6465 642e 0a20 2020 204b 6579 4572 726f  ded..    KeyErro",
            "+000129a0: 720a 2020 2020 2020 2020 4966 2074 6865  r.        If the",
            "+000129b0: 2070 726f 7669 6465 6420 6060 6e61 6d65   provided ``name",
            "+000129c0: 6060 2069 7320 6e6f 7420 6120 7661 6c69  `` is not a vali",
            "+000129d0: 6420 6461 7461 6261 7365 206e 616d 652e  d database name.",
            "+000129e0: 0a0a 2020 2020 4e6f 7465 730a 2020 2020  ..    Notes.    ",
            "+000129f0: 2d2d 2d2d 2d0a 2020 2020 4669 6c65 7320  -----.    Files ",
            "+00012a00: 6176 6169 6c61 626c 6520 6174 0a20 2020  available at.   ",
            "+00012a10: 2020 2020 2068 7474 7073 3a2f 2f67 6974       https://git",
            "+00012a20: 6875 622e 636f 6d2f 4e52 454c 2f53 414d  hub.com/NREL/SAM",
            "+00012a30: 2f74 7265 652f 6465 7665 6c6f 702f 6465  /tree/develop/de",
            "+00012a40: 706c 6f79 2f6c 6962 7261 7269 6573 0a0a  ploy/libraries..",
            "+00012a50: 2020 2020 4578 616d 706c 6573 0a20 2020      Examples.   ",
            "+00012a60: 202d 2d2d 2d2d 2d2d 2d0a 2020 2020 5573   --------.    Us",
            "+00012a70: 696e 6720 6120 6461 7461 6261 7365 2062  ing a database b",
            "+00012a80: 756e 646c 6564 2077 6974 6820 7076 6c69  undled with pvli",
            "+00012a90: 623a 0a0a 2020 2020 3e3e 3e20 6672 6f6d  b:..    >>> from",
            "+00012aa0: 2070 766c 6962 2069 6d70 6f72 7420 7076   pvlib import pv",
            "+00012ab0: 7379 7374 656d 0a20 2020 203e 3e3e 2069  system.    >>> i",
            "+00012ac0: 6e76 6462 203d 2070 7673 7973 7465 6d2e  nvdb = pvsystem.",
            "+00012ad0: 7265 7472 6965 7665 5f73 616d 286e 616d  retrieve_sam(nam",
            "+00012ae0: 653d 2743 4543 496e 7665 7274 6572 2729  e='CECInverter')",
            "+00012af0: 0a20 2020 203e 3e3e 2069 6e76 6572 7465  .    >>> inverte",
            "+00012b00: 7220 3d20 696e 7664 622e 4145 5f53 6f6c  r = invdb.AE_Sol",
            "+00012b10: 6172 5f45 6e65 7267 795f 5f41 4536 5f30  ar_Energy__AE6_0",
            "+00012b20: 5f5f 3237 3756 5f0a 2020 2020 3e3e 3e20  __277V_.    >>> ",
            "+00012b30: 696e 7665 7274 6572 0a20 2020 2056 6163  inverter.    Vac",
            "+00012b40: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00012b50: 2020 2020 2020 2020 2020 3237 370a 2020            277.  ",
            "+00012b60: 2020 5073 6f20 2020 2020 2020 2020 2020    Pso           ",
            "+00012b70: 2020 2020 2020 2020 2033 362e 3139 3735           36.1975",
            "+00012b80: 3735 0a20 2020 2050 6163 6f20 2020 2020  75.    Paco     ",
            "+00012b90: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00012ba0: 2036 3030 302e 300a 2020 2020 5064 636f   6000.0.    Pdco",
            "+00012bb0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00012bc0: 2036 3135 382e 3734 3630 3934 0a20 2020   6158.746094.   ",
            "+00012bd0: 2056 6463 6f20 2020 2020 2020 2020 2020   Vdco           ",
            "+00012be0: 2020 2020 2020 2020 2020 2020 3336 302e              360.",
            "+00012bf0: 300a 2020 2020 4330 2020 2020 2020 2020  0.    C0        ",
            "+00012c00: 2020 2020 2020 2020 2020 2020 202d 302e               -0.",
            "+00012c10: 3030 3030 3032 0a20 2020 2043 3120 2020  000002.    C1   ",
            "+00012c20: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00012c30: 2020 2d30 2e30 3030 3032 360a 2020 2020    -0.000026.    ",
            "+00012c40: 4332 2020 2020 2020 2020 2020 2020 2020  C2              ",
            "+00012c50: 2020 2020 2020 202d 302e 3030 3132 3533         -0.001253",
            "+00012c60: 0a20 2020 2043 3320 2020 2020 2020 2020  .    C3         ",
            "+00012c70: 2020 2020 2020 2020 2020 2020 2020 302e                0.",
            "+00012c80: 3030 3032 310a 2020 2020 506e 7420 2020  00021.    Pnt   ",
            "+00012c90: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00012ca0: 2020 2020 2020 2031 2e38 0a20 2020 2056         1.8.    V",
            "+00012cb0: 6463 6d61 7820 2020 2020 2020 2020 2020  dcmax           ",
            "+00012cc0: 2020 2020 2020 2020 2020 3435 302e 300a            450.0.",
            "+00012cd0: 2020 2020 4964 636d 6178 2020 2020 2020      Idcmax      ",
            "+00012ce0: 2020 2020 2020 2020 2020 2031 372e 3130             17.10",
            "+00012cf0: 3736 3238 0a20 2020 204d 7070 745f 6c6f  7628.    Mppt_lo",
            "+00012d00: 7720 2020 2020 2020 2020 2020 2020 2020  w               ",
            "+00012d10: 2020 2020 3130 302e 300a 2020 2020 4d70      100.0.    Mp",
            "+00012d20: 7074 5f68 6967 6820 2020 2020 2020 2020  pt_high         ",
            "+00012d30: 2020 2020 2020 2020 2034 3530 2e30 0a20           450.0. ",
            "+00012d40: 2020 2043 4543 5f44 6174 6520 2020 2020     CEC_Date     ",
            "+00012d50: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00012d60: 4e61 4e0a 2020 2020 4345 435f 5479 7065  NaN.    CEC_Type",
            "+00012d70: 2020 2020 2055 7469 6c69 7479 2049 6e74       Utility Int",
            "+00012d80: 6572 6163 7469 7665 0a20 2020 204e 616d  eractive.    Nam",
            "+00012d90: 653a 2041 455f 536f 6c61 725f 456e 6572  e: AE_Solar_Ener",
            "+00012da0: 6779 5f5f 4145 365f 305f 5f32 3737 565f  gy__AE6_0__277V_",
            "+00012db0: 2c20 6474 7970 653a 206f 626a 6563 740a  , dtype: object.",
            "+00012dc0: 0a20 2020 2055 7369 6e67 2061 2072 656d  .    Using a rem",
            "+00012dd0: 6f74 6520 6461 7461 6261 7365 2c20 7669  ote database, vi",
            "+00012de0: 6120 5552 4c3a 0a0a 2020 2020 3e3e 3e20  a URL:..    >>> ",
            "+00012df0: 7572 6c20 3d20 2268 7474 7073 3a2f 2f72  url = \"https://r",
            "+00012e00: 6177 2e67 6974 6875 6275 7365 7263 6f6e  aw.githubusercon",
            "+00012e10: 7465 6e74 2e63 6f6d 2f4e 5245 4c2f 5341  tent.com/NREL/SA",
            "+00012e20: 4d2f 7265 6673 2f68 6561 6473 2f64 6576  M/refs/heads/dev",
            "+00012e30: 656c 6f70 2f64 6570 6c6f 792f 6c69 6272  elop/deploy/libr",
            "+00012e40: 6172 6965 732f 4345 4325 3230 496e 7665  aries/CEC%20Inve",
            "+00012e50: 7274 6572 732e 6373 7622 0a20 2020 203e  rters.csv\".    >",
            "+00012e60: 3e3e 2069 6e76 5f64 6220 3d20 7076 7379  >> inv_db = pvsy",
            "+00012e70: 7374 656d 2e72 6574 7269 6576 655f 7361  stem.retrieve_sa",
            "+00012e80: 6d28 7061 7468 3d75 726c 290a 2020 2020  m(path=url).    ",
            "+00012e90: 3e3e 3e20 696e 765f 6462 2e6b 6579 7328  >>> inv_db.keys(",
            "+00012ea0: 290a 2020 2020 496e 6465 7828 5b27 4142  ).    Index(['AB",
            "+00012eb0: 425f 5f50 5649 5f33 5f30 5f4f 5554 445f  B__PVI_3_0_OUTD_",
            "+00012ec0: 535f 5553 5f41 5f5f 3230 3856 5f27 2c20  S_US_A__208V_', ",
            "+00012ed0: 2741 4242 5f5f 5056 495f 335f 305f 4f55  'ABB__PVI_3_0_OU",
            "+00012ee0: 5444 5f53 5f55 535f 415f 5f32 3430 565f  TD_S_US_A__240V_",
            "+00012ef0: 272c 202e 2e2e 5d2c 0a20 2020 2020 2020  ', ...],.       ",
            "+00012f00: 2020 2064 7479 7065 3d27 6f62 6a65 6374     dtype='object",
            "+00012f10: 272c 206c 656e 6774 683d 2e2e 2e29 0a20  ', length=...). ",
            "+00012f20: 2020 2022 2222 2020 2320 6e6f 7161 3a20     \"\"\"  # noqa: ",
            "+00012f30: 4535 3031 0a20 2020 2023 2065 7272 6f72  E501.    # error",
            "+00012f40: 3a20 7061 7468 2077 6173 2070 7265 7669  : path was previ",
            "+00012f50: 6f75 736c 7920 7369 6c65 6e74 6c79 2069  ously silently i",
            "+00012f60: 676e 6f72 6564 2069 6620 6e61 6d65 2077  gnored if name w",
            "+00012f70: 6173 2067 6976 656e 2047 4823 3230 3138  as given GH#2018",
            "+00012f80: 0a20 2020 2069 6620 6e61 6d65 2069 7320  .    if name is ",
            "+00012f90: 6e6f 7420 4e6f 6e65 2061 6e64 2070 6174  not None and pat",
            "+00012fa0: 6820 6973 206e 6f74 204e 6f6e 653a 0a20  h is not None:. ",
            "+00012fb0: 2020 2020 2020 2072 6169 7365 2056 616c         raise Val",
            "+00012fc0: 7565 4572 726f 7228 2250 6c65 6173 6520  ueError(\"Please ",
            "+00012fd0: 7072 6f76 6964 6520 6569 7468 6572 2027  provide either '",
            "+00012fe0: 6e61 6d65 2720 6f72 2027 7061 7468 272c  name' or 'path',",
            "+00012ff0: 206e 6f74 2062 6f74 682e 2229 0a20 2020   not both.\").   ",
            "+00013000: 2065 6c69 6620 6e61 6d65 2069 7320 4e6f   elif name is No",
            "+00013010: 6e65 2061 6e64 2070 6174 6820 6973 204e  ne and path is N",
            "+00013020: 6f6e 653a 0a20 2020 2020 2020 2072 6169  one:.        rai",
            "+00013030: 7365 2056 616c 7565 4572 726f 7228 2250  se ValueError(\"P",
            "+00013040: 6c65 6173 6520 7072 6f76 6964 6520 6569  lease provide ei",
            "+00013050: 7468 6572 2027 6e61 6d65 2720 6f72 2027  ther 'name' or '",
            "+00013060: 7061 7468 272e 2229 0a20 2020 2065 6c69  path'.\").    eli",
            "+00013070: 6620 6e61 6d65 2069 7320 6e6f 7420 4e6f  f name is not No",
            "+00013080: 6e65 3a0a 2020 2020 2020 2020 696e 7465  ne:.        inte",
            "+00013090: 726e 616c 5f64 6273 203d 207b 0a20 2020  rnal_dbs = {.   ",
            "+000130a0: 2020 2020 2020 2020 2022 6365 636d 6f64           \"cecmod",
            "+000130b0: 223a 2022 7361 6d2d 6c69 6272 6172 792d  \": \"sam-library-",
            "+000130c0: 6365 632d 6d6f 6475 6c65 732d 3230 3139  cec-modules-2019",
            "+000130d0: 2d30 332d 3035 2e63 7376 222c 0a20 2020  -03-05.csv\",.   ",
            "+000130e0: 2020 2020 2020 2020 2022 7361 6e64 6961           \"sandia",
            "+000130f0: 6d6f 6422 3a20 2273 616d 2d6c 6962 7261  mod\": \"sam-libra",
            "+00013100: 7279 2d73 616e 6469 612d 6d6f 6475 6c65  ry-sandia-module",
            "+00013110: 732d 3230 3135 2d36 2d33 302e 6373 7622  s-2015-6-30.csv\"",
            "+00013120: 2c0a 2020 2020 2020 2020 2020 2020 2261  ,.            \"a",
            "+00013130: 6472 696e 7665 7274 6572 223a 2022 6164  drinverter\": \"ad",
            "+00013140: 722d 6c69 6272 6172 792d 6365 632d 696e  r-library-cec-in",
            "+00013150: 7665 7274 6572 732d 3230 3139 2d30 332d  verters-2019-03-",
            "+00013160: 3035 2e63 7376 222c 0a20 2020 2020 2020  05.csv\",.       ",
            "+00013170: 2020 2020 2023 2042 6f74 6820 2763 6563       # Both 'cec",
            "+00013180: 696e 7665 7274 6572 2720 616e 6420 2773  inverter' and 's",
            "+00013190: 616e 6469 6169 6e76 6572 7465 7227 2c20  andiainverter', ",
            "+000131a0: 706f 696e 7420 746f 2073 616d 6520 6461  point to same da",
            "+000131b0: 7461 6261 7365 0a20 2020 2020 2020 2020  tabase.         ",
            "+000131c0: 2020 2023 2074 6f20 7072 6f76 6964 6520     # to provide ",
            "+000131d0: 666f 7220 6f6c 6420 636f 6465 2c20 7768  for old code, wh",
            "+000131e0: 696c 6520 616c 6967 6e69 6e67 2077 6974  ile aligning wit",
            "+000131f0: 6820 6375 7272 656e 7420 6578 7065 6374  h current expect",
            "+00013200: 6174 696f 6e73 0a20 2020 2020 2020 2020  ations.         ",
            "+00013210: 2020 2022 6365 6369 6e76 6572 7465 7222     \"cecinverter\"",
            "+00013220: 3a20 2273 616d 2d6c 6962 7261 7279 2d63  : \"sam-library-c",
            "+00013230: 6563 2d69 6e76 6572 7465 7273 2d32 3031  ec-inverters-201",
            "+00013240: 392d 3033 2d30 352e 6373 7622 2c0a 2020  9-03-05.csv\",.  ",
            "+00013250: 2020 2020 2020 2020 2020 2273 616e 6469            \"sandi",
            "+00013260: 6169 6e76 6572 7465 7222 3a20 2273 616d  ainverter\": \"sam",
            "+00013270: 2d6c 6962 7261 7279 2d63 6563 2d69 6e76  -library-cec-inv",
            "+00013280: 6572 7465 7273 2d32 3031 392d 3033 2d30  erters-2019-03-0",
            "+00013290: 352e 6373 7622 2c0a 2020 2020 2020 2020  5.csv\",.        ",
            "+000132a0: 7d0a 2020 2020 2020 2020 7472 793a 0a20  }.        try:. ",
            "+000132b0: 2020 2020 2020 2020 2020 2063 7376 6461             csvda",
            "+000132c0: 7461 5f70 6174 6820 3d20 5061 7468 285f  ta_path = Path(_",
            "+000132d0: 5f66 696c 655f 5f29 2e70 6172 656e 742e  _file__).parent.",
            "+000132e0: 6a6f 696e 7061 7468 280a 2020 2020 2020  joinpath(.      ",
            "+000132f0: 2020 2020 2020 2020 2020 2264 6174 6122            \"data\"",
            "+00013300: 2c20 696e 7465 726e 616c 5f64 6273 5b6e  , internal_dbs[n",
            "+00013310: 616d 652e 6c6f 7765 7228 295d 0a20 2020  ame.lower()].   ",
            "+00013320: 2020 2020 2020 2020 2029 0a20 2020 2020           ).     ",
            "+00013330: 2020 2065 7863 6570 7420 4b65 7945 7272     except KeyErr",
            "+00013340: 6f72 3a0a 2020 2020 2020 2020 2020 2020  or:.            ",
            "+00013350: 7261 6973 6520 4b65 7945 7272 6f72 280a  raise KeyError(.",
            "+00013360: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00013370: 6622 496e 7661 6c69 6420 6e61 6d65 207b  f\"Invalid name {",
            "+00013380: 6e61 6d65 7d2e 2022 0a20 2020 2020 2020  name}. \".       ",
            "+00013390: 2020 2020 2020 2020 202b 2066 2250 726f           + f\"Pro",
            "+000133a0: 7669 6465 206f 6e65 206f 6620 7b6c 6973  vide one of {lis",
            "+000133b0: 7428 696e 7465 726e 616c 5f64 6273 2e6b  t(internal_dbs.k",
            "+000133c0: 6579 7328 2929 7d2e 220a 2020 2020 2020  eys())}.\".      ",
            "+000133d0: 2020 2020 2020 2920 6672 6f6d 204e 6f6e        ) from Non",
            "+000133e0: 650a 2020 2020 656c 7365 3a20 2023 2070  e.    else:  # p",
            "+000133f0: 6174 6820 6973 206e 6f74 204e 6f6e 650a  ath is not None.",
            "+00013400: 2020 2020 2020 2020 6966 2070 6174 682e          if path.",
            "+00013410: 6c6f 7765 7228 292e 7374 6172 7473 7769  lower().startswi",
            "+00013420: 7468 2822 6874 7470 2229 3a20 2023 2055  th(\"http\"):  # U",
            "+00013430: 524c 2063 6865 636b 2069 7320 6e6f 7420  RL check is not ",
            "+00013440: 6361 7365 2d73 656e 7369 7469 7665 0a20  case-sensitive. ",
            "+00013450: 2020 2020 2020 2020 2020 2072 6573 706f             respo",
            "+00013460: 6e73 6520 3d20 7572 6c6f 7065 6e28 7061  nse = urlopen(pa",
            "+00013470: 7468 2920 2023 2055 524c 2069 7320 6361  th)  # URL is ca",
            "+00013480: 7365 2d73 656e 7369 7469 7665 0a20 2020  se-sensitive.   ",
            "+00013490: 2020 2020 2020 2020 2063 7376 6461 7461           csvdata",
            "+000134a0: 5f70 6174 6820 3d20 696f 2e53 7472 696e  _path = io.Strin",
            "+000134b0: 6749 4f28 7265 7370 6f6e 7365 2e72 6561  gIO(response.rea",
            "+000134c0: 6428 292e 6465 636f 6465 2865 7272 6f72  d().decode(error",
            "+000134d0: 733d 2269 676e 6f72 6522 2929 0a20 2020  s=\"ignore\")).   ",
            "+000134e0: 2020 2020 2065 6c73 653a 0a20 2020 2020       else:.     ",
            "+000134f0: 2020 2020 2020 2063 7376 6461 7461 5f70         csvdata_p",
            "+00013500: 6174 6820 3d20 7061 7468 0a20 2020 2072  ath = path.    r",
            "+00013510: 6574 7572 6e20 5f70 6172 7365 5f72 6177  eturn _parse_raw",
            "+00013520: 5f73 616d 5f64 6628 6373 7664 6174 615f  _sam_df(csvdata_",
            "+00013530: 7061 7468 290a 0a0a 6465 6620 5f6e 6f72  path)...def _nor",
            "+00013540: 6d61 6c69 7a65 5f73 616d 5f70 726f 6475  malize_sam_produ",
            "+00013550: 6374 5f6e 616d 6573 286e 616d 6573 293a  ct_names(names):",
            "+00013560: 0a20 2020 2027 2727 0a20 2020 2052 6570  .    '''.    Rep",
            "+00013570: 6c61 6365 2073 7065 6369 616c 2063 6861  lace special cha",
            "+00013580: 7261 6374 6572 7320 7769 7468 696e 2074  racters within t",
            "+00013590: 6865 2070 726f 6475 6374 206e 616d 6573  he product names",
            "+000135a0: 2074 6f20 6d61 6b65 2074 6865 6d20 6d6f   to make them mo",
            "+000135b0: 7265 0a20 2020 2073 7569 7461 626c 6520  re.    suitable ",
            "+000135c0: 666f 7220 7573 6520 6173 2044 6174 6166  for use as Dataf",
            "+000135d0: 7261 6d65 2063 6f6c 756d 6e20 6e61 6d65  rame column name",
            "+000135e0: 732e 0a20 2020 2027 2727 0a20 2020 2023  s..    '''.    #",
            "+000135f0: 2043 6f6e 7472 6962 7574 6564 2062 7920   Contributed by ",
            "+00013600: 416e 746f 6e20 4472 6965 7373 6520 2840  Anton Driesse (@",
            "+00013610: 6164 7269 6573 7365 292c 2050 5620 5065  adriesse), PV Pe",
            "+00013620: 7266 6f72 6d61 6e63 6520 4c61 6273 2e20  rformance Labs. ",
            "+00013630: 4a75 6c79 2c20 3230 3139 0a0a 2020 2020  July, 2019..    ",
            "+00013640: 696d 706f 7274 2077 6172 6e69 6e67 730a  import warnings.",
            "+00013650: 0a20 2020 2042 4144 5f43 4841 5253 203d  .    BAD_CHARS =",
            "+00013660: 2027 202d 2e28 295b 5d3a 2b2f 222c 270a   ' -.()[]:+/\",'.",
            "+00013670: 2020 2020 474f 4f44 5f43 4841 5253 203d      GOOD_CHARS =",
            "+00013680: 2027 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 270a   '____________'.",
            "+00013690: 0a20 2020 206d 6170 7069 6e67 203d 2073  .    mapping = s",
            "+000136a0: 7472 2e6d 616b 6574 7261 6e73 2842 4144  tr.maketrans(BAD",
            "+000136b0: 5f43 4841 5253 2c20 474f 4f44 5f43 4841  _CHARS, GOOD_CHA",
            "+000136c0: 5253 290a 2020 2020 6e61 6d65 7320 3d20  RS).    names = ",
            "+000136d0: 7064 2e53 6572 6965 7328 6461 7461 3d6e  pd.Series(data=n",
            "+000136e0: 616d 6573 290a 2020 2020 6e6f 726d 5f6e  ames).    norm_n",
            "+000136f0: 616d 6573 203d 206e 616d 6573 2e73 7472  ames = names.str",
            "+00013700: 2e74 7261 6e73 6c61 7465 286d 6170 7069  .translate(mappi",
            "+00013710: 6e67 290a 0a20 2020 206e 5f64 7570 6c69  ng)..    n_dupli",
            "+00013720: 6361 7465 7320 3d20 6e61 6d65 732e 6475  cates = names.du",
            "+00013730: 706c 6963 6174 6564 2829 2e73 756d 2829  plicated().sum()",
            "+00013740: 0a20 2020 2069 6620 6e5f 6475 706c 6963  .    if n_duplic",
            "+00013750: 6174 6573 203e 2030 3a0a 2020 2020 2020  ates > 0:.      ",
            "+00013760: 2020 7761 726e 696e 6773 2e77 6172 6e28    warnings.warn(",
            "+00013770: 274f 7269 6769 6e61 6c20 6e61 6d65 7320  'Original names ",
            "+00013780: 636f 6e74 6169 6e20 2564 2064 7570 6c69  contain %d dupli",
            "+00013790: 6361 7465 2873 292e 2720 2520 6e5f 6475  cate(s).' % n_du",
            "+000137a0: 706c 6963 6174 6573 290a 0a20 2020 206e  plicates)..    n",
            "+000137b0: 5f64 7570 6c69 6361 7465 7320 3d20 6e6f  _duplicates = no",
            "+000137c0: 726d 5f6e 616d 6573 2e64 7570 6c69 6361  rm_names.duplica",
            "+000137d0: 7465 6428 292e 7375 6d28 290a 2020 2020  ted().sum().    ",
            "+000137e0: 6966 206e 5f64 7570 6c69 6361 7465 7320  if n_duplicates ",
            "+000137f0: 3e20 303a 0a20 2020 2020 2020 2077 6172  > 0:.        war",
            "+00013800: 6e69 6e67 732e 7761 726e 280a 2020 2020  nings.warn(.    ",
            "+00013810: 2020 2020 2020 2020 274e 6f72 6d61 6c69          'Normali",
            "+00013820: 7a65 6420 6e61 6d65 7320 636f 6e74 6169  zed names contai",
            "+00013830: 6e20 2564 2064 7570 6c69 6361 7465 2873  n %d duplicate(s",
            "+00013840: 292e 2720 2520 6e5f 6475 706c 6963 6174  ).' % n_duplicat",
            "+00013850: 6573 290a 0a20 2020 2072 6574 7572 6e20  es)..    return ",
            "+00013860: 6e6f 726d 5f6e 616d 6573 2e76 616c 7565  norm_names.value",
            "+00013870: 730a 0a0a 6465 6620 5f70 6172 7365 5f72  s...def _parse_r",
            "+00013880: 6177 5f73 616d 5f64 6628 6373 7664 6174  aw_sam_df(csvdat",
            "+00013890: 6129 3a0a 0a20 2020 2064 6620 3d20 7064  a):..    df = pd",
            "+000138a0: 2e72 6561 645f 6373 7628 6373 7664 6174  .read_csv(csvdat",
            "+000138b0: 612c 2069 6e64 6578 5f63 6f6c 3d30 2c20  a, index_col=0, ",
            "+000138c0: 736b 6970 726f 7773 3d5b 312c 2032 5d29  skiprows=[1, 2])",
            "+000138d0: 0a0a 2020 2020 6466 2e63 6f6c 756d 6e73  ..    df.columns",
            "+000138e0: 203d 2064 662e 636f 6c75 6d6e 732e 7374   = df.columns.st",
            "+000138f0: 722e 7265 706c 6163 6528 2720 272c 2027  r.replace(' ', '",
            "+00013900: 5f27 290a 2020 2020 6466 2e69 6e64 6578  _').    df.index",
            "+00013910: 203d 205f 6e6f 726d 616c 697a 655f 7361   = _normalize_sa",
            "+00013920: 6d5f 7072 6f64 7563 745f 6e61 6d65 7328  m_product_names(",
            "+00013930: 6466 2e69 6e64 6578 290a 2020 2020 6466  df.index).    df",
            "+00013940: 203d 2064 662e 7472 616e 7370 6f73 6528   = df.transpose(",
            "+00013950: 290a 0a20 2020 2069 6620 2741 4452 436f  )..    if 'ADRCo",
            "+00013960: 6566 6669 6369 656e 7473 2720 696e 2064  efficients' in d",
            "+00013970: 662e 696e 6465 783a 0a20 2020 2020 2020  f.index:.       ",
            "+00013980: 2061 645f 6365 203d 2027 4144 5243 6f65   ad_ce = 'ADRCoe",
            "+00013990: 6666 6963 6965 6e74 7327 0a20 2020 2020  fficients'.     ",
            "+000139a0: 2020 2023 2066 6f72 2065 6163 6820 696e     # for each in",
            "+000139b0: 7665 7274 6572 2c20 7061 7273 6573 2061  verter, parses a",
            "+000139c0: 2073 7472 696e 6720 6f66 2063 6f65 6666   string of coeff",
            "+000139d0: 6963 6965 6e74 7320 6c69 6b65 0a20 2020  icients like.   ",
            "+000139e0: 2020 2020 2023 2027 2031 2e33 332c 2032       # ' 1.33, 2",
            "+000139f0: 2e31 312c 2033 2e31 3227 2069 6e74 6f20  .11, 3.12' into ",
            "+00013a00: 6120 6c69 7374 2063 6f6e 7461 696e 696e  a list containin",
            "+00013a10: 6720 666c 6f61 7473 3a0a 2020 2020 2020  g floats:.      ",
            "+00013a20: 2020 2320 5b31 2e33 332c 2032 2e31 312c    # [1.33, 2.11,",
            "+00013a30: 2033 2e31 325d 0a20 2020 2020 2020 2064   3.12].        d",
            "+00013a40: 662e 6c6f 635b 6164 5f63 655d 203d 2064  f.loc[ad_ce] = d",
            "+00013a50: 662e 6c6f 635b 6164 5f63 655d 2e6d 6170  f.loc[ad_ce].map",
            "+00013a60: 286c 616d 6264 6120 783a 206c 6973 7428  (lambda x: list(",
            "+00013a70: 0a20 2020 2020 2020 2020 2020 206d 6170  .            map",
            "+00013a80: 2866 6c6f 6174 2c20 782e 7374 7269 7028  (float, x.strip(",
            "+00013a90: 2720 5b5d 2729 2e73 706c 6974 2829 2929  ' []').split()))",
            "+00013aa0: 290a 0a20 2020 2072 6574 7572 6e20 6466  )..    return df",
            "+00013ab0: 0a0a 0a64 6566 2073 6170 6d28 6566 6665  ...def sapm(effe",
            "+00013ac0: 6374 6976 655f 6972 7261 6469 616e 6365  ctive_irradiance",
            "+00013ad0: 2c20 7465 6d70 5f63 656c 6c2c 206d 6f64  , temp_cell, mod",
            "+00013ae0: 756c 652c 202a 2c20 7465 6d70 6572 6174  ule, *, temperat",
            "+00013af0: 7572 655f 7265 663d 3235 2c0a 2020 2020  ure_ref=25,.    ",
            "+00013b00: 2020 2020 2069 7272 6164 6961 6e63 655f       irradiance_",
            "+00013b10: 7265 663d 3130 3030 293a 0a20 2020 2027  ref=1000):.    '",
            "+00013b20: 2727 0a20 2020 2054 6865 2053 616e 6469  ''.    The Sandi",
            "+00013b30: 6120 5056 2041 7272 6179 2050 6572 666f  a PV Array Perfo",
            "+00013b40: 726d 616e 6365 204d 6f64 656c 2028 5341  rmance Model (SA",
            "+00013b50: 504d 2920 6765 6e65 7261 7465 7320 3520  PM) generates 5 ",
            "+00013b60: 706f 696e 7473 206f 6e20 610a 2020 2020  points on a.    ",
            "+00013b70: 5056 206d 6f64 756c 6527 7320 492d 5620  PV module's I-V ",
            "+00013b80: 6375 7276 6520 2856 6f63 2c20 4973 632c  curve (Voc, Isc,",
            "+00013b90: 2049 782c 2049 7878 2c20 566d 702f 496d   Ix, Ixx, Vmp/Im",
            "+00013ba0: 7029 2061 6363 6f72 6469 6e67 2074 6f0a  p) according to.",
            "+00013bb0: 2020 2020 5341 4e44 3230 3034 2d33 3533      SAND2004-353",
            "+00013bc0: 352e 2041 7373 756d 6573 2061 2072 6566  5. Assumes a ref",
            "+00013bd0: 6572 656e 6365 2063 656c 6c20 7465 6d70  erence cell temp",
            "+00013be0: 6572 6174 7572 6520 6f66 2032 35c2 b043  erature of 25..C",
            "+00013bf0: 2e0a 0a20 2020 2050 6172 616d 6574 6572  ...    Parameter",
            "+00013c00: 730a 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d  s.    ----------",
            "+00013c10: 0a20 2020 2065 6666 6563 7469 7665 5f69  .    effective_i",
            "+00013c20: 7272 6164 6961 6e63 6520 3a20 6e75 6d65  rradiance : nume",
            "+00013c30: 7269 630a 2020 2020 2020 2020 4972 7261  ric.        Irra",
            "+00013c40: 6469 616e 6365 2072 6561 6368 696e 6720  diance reaching ",
            "+00013c50: 7468 6520 6d6f 6475 6c65 2773 2063 656c  the module's cel",
            "+00013c60: 6c73 2c20 6166 7465 7220 7265 666c 6563  ls, after reflec",
            "+00013c70: 7469 6f6e 7320 616e 640a 2020 2020 2020  tions and.      ",
            "+00013c80: 2020 6164 6a75 7374 6d65 6e74 2066 6f72    adjustment for",
            "+00013c90: 2073 7065 6374 7275 6d2e 205b 576d e281   spectrum. [Wm..",
            "+00013ca0: bbc2 b25d 0a0a 2020 2020 7465 6d70 5f63  ...]..    temp_c",
            "+00013cb0: 656c 6c20 3a20 6e75 6d65 7269 630a 2020  ell : numeric.  ",
            "+00013cc0: 2020 2020 2020 4365 6c6c 2074 656d 7065        Cell tempe",
            "+00013cd0: 7261 7475 7265 205b c2b0 435d 2e0a 0a20  rature [..C]... ",
            "+00013ce0: 2020 206d 6f64 756c 6520 3a20 6469 6374     module : dict",
            "+00013cf0: 2d6c 696b 650a 2020 2020 2020 2020 4120  -like.        A ",
            "+00013d00: 6469 6374 206f 7220 5365 7269 6573 2064  dict or Series d",
            "+00013d10: 6566 696e 696e 6720 7468 6520 5341 504d  efining the SAPM",
            "+00013d20: 2070 6172 616d 6574 6572 732e 2053 6565   parameters. See",
            "+00013d30: 2074 6865 206e 6f74 6573 2073 6563 7469   the notes secti",
            "+00013d40: 6f6e 0a20 2020 2020 2020 2066 6f72 206d  on.        for m",
            "+00013d50: 6f72 6520 6465 7461 696c 732e 0a0a 2020  ore details...  ",
            "+00013d60: 2020 7465 6d70 6572 6174 7572 655f 7265    temperature_re",
            "+00013d70: 6620 3a20 6e75 6d65 7269 632c 206f 7074  f : numeric, opt",
            "+00013d80: 696f 6e61 6c0a 2020 2020 2020 2020 5265  ional.        Re",
            "+00013d90: 6665 7265 6e63 6520 7465 6d70 6572 6174  ference temperat",
            "+00013da0: 7572 6520 5bc2 b043 5d0a 0a20 2020 2069  ure [..C]..    i",
            "+00013db0: 7272 6164 6961 6e63 655f 7265 6620 3a20  rradiance_ref : ",
            "+00013dc0: 6e75 6d65 7269 632c 206f 7074 696f 6e61  numeric, optiona",
            "+00013dd0: 6c0a 2020 2020 2020 2020 5265 6665 7265  l.        Refere",
            "+00013de0: 6e63 6520 6972 7261 6469 616e 6365 205b  nce irradiance [",
            "+00013df0: 576d e281 bbc2 b25d 0a0a 2020 2020 5265  Wm.....]..    Re",
            "+00013e00: 7475 726e 730a 2020 2020 2d2d 2d2d 2d2d  turns.    ------",
            "+00013e10: 2d0a 2020 2020 4120 4461 7461 4672 616d  -.    A DataFram",
            "+00013e20: 6520 7769 7468 2074 6865 2063 6f6c 756d  e with the colum",
            "+00013e30: 6e73 3a0a 0a20 2020 2020 2020 202a 2069  ns:..        * i",
            "+00013e40: 5f73 6320 3a20 5368 6f72 742d 6369 7263  _sc : Short-circ",
            "+00013e50: 7569 7420 6375 7272 656e 7420 2841 290a  uit current (A).",
            "+00013e60: 2020 2020 2020 2020 2a20 695f 6d70 203a          * i_mp :",
            "+00013e70: 2043 7572 7265 6e74 2061 7420 7468 6520   Current at the ",
            "+00013e80: 6d61 7869 6d75 6d2d 706f 7765 7220 706f  maximum-power po",
            "+00013e90: 696e 7420 2841 290a 2020 2020 2020 2020  int (A).        ",
            "+00013ea0: 2a20 765f 6f63 203a 204f 7065 6e2d 6369  * v_oc : Open-ci",
            "+00013eb0: 7263 7569 7420 766f 6c74 6167 6520 2856  rcuit voltage (V",
            "+00013ec0: 290a 2020 2020 2020 2020 2a20 765f 6d70  ).        * v_mp",
            "+00013ed0: 203a 2056 6f6c 7461 6765 2061 7420 6d61   : Voltage at ma",
            "+00013ee0: 7869 6d75 6d2d 706f 7765 7220 706f 696e  ximum-power poin",
            "+00013ef0: 7420 2856 290a 2020 2020 2020 2020 2a20  t (V).        * ",
            "+00013f00: 705f 6d70 203a 2050 6f77 6572 2061 7420  p_mp : Power at ",
            "+00013f10: 6d61 7869 6d75 6d2d 706f 7765 7220 706f  maximum-power po",
            "+00013f20: 696e 7420 2857 290a 2020 2020 2020 2020  int (W).        ",
            "+00013f30: 2a20 695f 7820 3a20 4375 7272 656e 7420  * i_x : Current ",
            "+00013f40: 6174 206d 6f64 756c 6520 5620 3d20 302e  at module V = 0.",
            "+00013f50: 3556 6f63 2c20 6465 6669 6e65 7320 3474  5Voc, defines 4t",
            "+00013f60: 6820 706f 696e 7420 6f6e 2049 2d56 0a20  h point on I-V. ",
            "+00013f70: 2020 2020 2020 2020 2063 7572 7665 2066           curve f",
            "+00013f80: 6f72 206d 6f64 656c 696e 6720 6375 7276  or modeling curv",
            "+00013f90: 6520 7368 6170 652e 2020 4f6d 6974 7465  e shape.  Omitte",
            "+00013fa0: 6420 6966 2060 6049 584f 6060 2c20 6060  d if ``IXO``, ``",
            "+00013fb0: 4334 6060 2c20 616e 640a 2020 2020 2020  C4``, and.      ",
            "+00013fc0: 2020 2020 6060 4335 6060 2070 6172 616d      ``C5`` param",
            "+00013fd0: 6574 6572 7320 6172 6520 6e6f 7420 7375  eters are not su",
            "+00013fe0: 7070 6c69 6564 2e0a 2020 2020 2020 2020  pplied..        ",
            "+00013ff0: 2a20 695f 7878 203a 2043 7572 7265 6e74  * i_xx : Current",
            "+00014000: 2061 7420 6d6f 6475 6c65 2056 203d 2030   at module V = 0",
            "+00014010: 2e35 2856 6f63 2b56 6d70 292c 2064 6566  .5(Voc+Vmp), def",
            "+00014020: 696e 6573 2035 7468 2070 6f69 6e74 206f  ines 5th point o",
            "+00014030: 6e0a 2020 2020 2020 2020 2020 492d 5620  n.          I-V ",
            "+00014040: 6375 7276 6520 666f 7220 6d6f 6465 6c69  curve for modeli",
            "+00014050: 6e67 2063 7572 7665 2073 6861 7065 2e20  ng curve shape. ",
            "+00014060: 204f 6d69 7474 6564 2069 6620 6060 4958   Omitted if ``IX",
            "+00014070: 584f 6060 2c20 6060 4336 6060 2c0a 2020  XO``, ``C6``,.  ",
            "+00014080: 2020 2020 2020 2020 616e 6420 6060 4337          and ``C7",
            "+00014090: 6060 2070 6172 616d 6574 6572 7320 6172  `` parameters ar",
            "+000140a0: 6520 6e6f 7420 7375 7070 6c69 6564 2e0a  e not supplied..",
            "+000140b0: 0a20 2020 204e 6f74 6573 0a20 2020 202d  .    Notes.    -",
            "+000140c0: 2d2d 2d2d 0a20 2020 2054 6865 2053 616e  ----.    The San",
            "+000140d0: 6469 6120 6d6f 6475 6c65 2064 6174 6162  dia module datab",
            "+000140e0: 6173 6520 636f 6e74 6169 6e73 2070 6172  ase contains par",
            "+000140f0: 616d 6574 6572 2076 616c 7565 7320 666f  ameter values fo",
            "+00014100: 7220 6120 6c69 6d69 7465 6420 7365 740a  r a limited set.",
            "+00014110: 2020 2020 6f66 206d 6f64 756c 6573 2e20      of modules. ",
            "+00014120: 5468 6520 4345 4320 6d6f 6475 6c65 2064  The CEC module d",
            "+00014130: 6174 6162 6173 6520 646f 6573 206e 6f74  atabase does not",
            "+00014140: 2063 6f6e 7461 696e 2074 6865 7365 2070   contain these p",
            "+00014150: 6172 616d 6574 6572 732e 0a20 2020 2042  arameters..    B",
            "+00014160: 6f74 6820 6461 7461 6261 7365 7320 6361  oth databases ca",
            "+00014170: 6e20 6265 2061 6363 6573 7365 6420 7573  n be accessed us",
            "+00014180: 696e 6720 3a70 793a 6675 6e63 3a60 7265  ing :py:func:`re",
            "+00014190: 7472 6965 7665 5f73 616d 602e 2054 6865  trieve_sam`. The",
            "+000141a0: 2066 756c 6c20 6c69 7374 0a20 2020 206f   full list.    o",
            "+000141b0: 6620 5341 504d 2070 6172 616d 6574 6572  f SAPM parameter",
            "+000141c0: 7320 6973 2070 7265 7365 6e74 6564 2069  s is presented i",
            "+000141d0: 6e20 7468 6520 7461 626c 6520 6265 6c6f  n the table belo",
            "+000141e0: 772e 2054 686f 7365 2074 6861 7420 6172  w. Those that ar",
            "+000141f0: 6520 7265 7175 6972 6564 0a20 2020 2069  e required.    i",
            "+00014200: 6e20 7468 6520 6060 6d6f 6475 6c65 6060  n the ``module``",
            "+00014210: 2070 6172 616d 6574 6572 2074 6f20 7275   parameter to ru",
            "+00014220: 6e20 7468 6973 206d 6f64 656c 2061 7265  n this model are",
            "+00014230: 2061 7320 666f 6c6c 6f77 733a 0a0a 2020   as follows:..  ",
            "+00014240: 2020 2a20 6060 4330 6060 2c20 6060 4331    * ``C0``, ``C1",
            "+00014250: 6060 2c20 6060 4332 6060 2c20 6060 4333  ``, ``C2``, ``C3",
            "+00014260: 6060 0a20 2020 202a 2060 6049 7363 6f60  ``.    * ``Isco`",
            "+00014270: 600a 2020 2020 2a20 6060 496d 706f 6060  `.    * ``Impo``",
            "+00014280: 0a20 2020 202a 2060 6056 6f63 6f60 600a  .    * ``Voco``.",
            "+00014290: 2020 2020 2a20 6060 566d 706f 6060 0a20      * ``Vmpo``. ",
            "+000142a0: 2020 202a 2060 6041 6973 6360 600a 2020     * ``Aisc``.  ",
            "+000142b0: 2020 2a20 6060 4169 6d70 6060 0a20 2020    * ``Aimp``.   ",
            "+000142c0: 202a 2060 6042 766f 636f 6060 0a20 2020   * ``Bvoco``.   ",
            "+000142d0: 202a 2060 604d 6276 6f63 6060 0a20 2020   * ``Mbvoc``.   ",
            "+000142e0: 202a 2060 6042 766d 706f 6060 0a20 2020   * ``Bvmpo``.   ",
            "+000142f0: 202a 2060 604d 6276 6d70 6060 0a20 2020   * ``Mbvmp``.   ",
            "+00014300: 202a 2060 604e 6060 0a20 2020 202a 2060   * ``N``.    * `",
            "+00014310: 6043 656c 6c73 5f69 6e5f 7365 7269 6573  `Cells_in_series",
            "+00014320: 6060 0a0a 2020 2020 3d3d 3d3d 3d3d 3d3d  ``..    ========",
            "+00014330: 3d3d 3d3d 3d3d 3d3d 2020 203d 3d3d 3d3d  ========   =====",
            "+00014340: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+00014350: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+00014360: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+00014370: 3d3d 3d0a 2020 2020 4b65 7920 2020 2020  ===.    Key     ",
            "+00014380: 2020 2020 2020 2020 2020 2044 6573 6372             Descr",
            "+00014390: 6970 7469 6f6e 0a20 2020 203d 3d3d 3d3d  iption.    =====",
            "+000143a0: 3d3d 3d3d 3d3d 3d3d 3d3d 3d20 2020 3d3d  ===========   ==",
            "+000143b0: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+000143c0: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+000143d0: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+000143e0: 3d3d 3d3d 3d3d 0a20 2020 2041 302d 4134  ======.    A0-A4",
            "+000143f0: 2020 2020 2020 2020 2020 2020 2020 5468                Th",
            "+00014400: 6520 6169 726d 6173 7320 636f 6566 6669  e airmass coeffi",
            "+00014410: 6369 656e 7473 2075 7365 6420 696e 2063  cients used in c",
            "+00014420: 616c 6375 6c61 7469 6e67 0a20 2020 2020  alculating.     ",
            "+00014430: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00014440: 2020 6566 6665 6374 6976 6520 6972 7261    effective irra",
            "+00014450: 6469 616e 6365 0a20 2020 2042 302d 4235  diance.    B0-B5",
            "+00014460: 2020 2020 2020 2020 2020 2020 2020 5468                Th",
            "+00014470: 6520 616e 676c 6520 6f66 2069 6e63 6964  e angle of incid",
            "+00014480: 656e 6365 2063 6f65 6666 6963 6965 6e74  ence coefficient",
            "+00014490: 7320 7573 6564 2069 6e20 6361 6c63 756c  s used in calcul",
            "+000144a0: 6174 696e 670a 2020 2020 2020 2020 2020  ating.          ",
            "+000144b0: 2020 2020 2020 2020 2020 2020 2065 6666               eff",
            "+000144c0: 6563 7469 7665 2069 7272 6164 6961 6e63  ective irradianc",
            "+000144d0: 650a 2020 2020 4330 2d43 3720 2020 2020  e.    C0-C7     ",
            "+000144e0: 2020 2020 2020 2020 2054 6865 2065 6d70           The emp",
            "+000144f0: 6972 6963 616c 6c79 2064 6574 6572 6d69  irically determi",
            "+00014500: 6e65 6420 636f 6566 6669 6369 656e 7473  ned coefficients",
            "+00014510: 2072 656c 6174 696e 670a 2020 2020 2020   relating.      ",
            "+00014520: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00014530: 2049 6d70 2c20 566d 702c 2049 782c 2061   Imp, Vmp, Ix, a",
            "+00014540: 6e64 2049 7878 2074 6f20 6566 6665 6374  nd Ixx to effect",
            "+00014550: 6976 6520 6972 7261 6469 616e 6365 0a20  ive irradiance. ",
            "+00014560: 2020 2049 7363 6f20 2020 2020 2020 2020     Isco         ",
            "+00014570: 2020 2020 2020 5368 6f72 7420 6369 7263        Short circ",
            "+00014580: 7569 7420 6375 7272 656e 7420 6174 2072  uit current at r",
            "+00014590: 6566 6572 656e 6365 2063 6f6e 6469 7469  eference conditi",
            "+000145a0: 6f6e 2028 616d 7073 290a 2020 2020 496d  on (amps).    Im",
            "+000145b0: 706f 2020 2020 2020 2020 2020 2020 2020  po              ",
            "+000145c0: 204d 6178 696d 756d 2070 6f77 6572 2063   Maximum power c",
            "+000145d0: 7572 7265 6e74 2061 7420 7265 6665 7265  urrent at refere",
            "+000145e0: 6e63 6520 636f 6e64 6974 696f 6e20 2861  nce condition (a",
            "+000145f0: 6d70 7329 0a20 2020 2056 6f63 6f20 2020  mps).    Voco   ",
            "+00014600: 2020 2020 2020 2020 2020 2020 4f70 656e              Open",
            "+00014610: 2063 6972 6375 6974 2076 6f6c 7461 6765   circuit voltage",
            "+00014620: 2061 7420 7265 6665 7265 6e63 6520 636f   at reference co",
            "+00014630: 6e64 6974 696f 6e20 2861 6d70 7329 0a20  ndition (amps). ",
            "+00014640: 2020 2056 6d70 6f20 2020 2020 2020 2020     Vmpo         ",
            "+00014650: 2020 2020 2020 4d61 7869 6d75 6d20 706f        Maximum po",
            "+00014660: 7765 7220 766f 6c74 6167 6520 6174 2072  wer voltage at r",
            "+00014670: 6566 6572 656e 6365 2063 6f6e 6469 7469  eference conditi",
            "+00014680: 6f6e 2028 616d 7073 290a 2020 2020 4169  on (amps).    Ai",
            "+00014690: 7363 2020 2020 2020 2020 2020 2020 2020  sc              ",
            "+000146a0: 2053 686f 7274 2063 6972 6375 6974 2063   Short circuit c",
            "+000146b0: 7572 7265 6e74 2074 656d 7065 7261 7475  urrent temperatu",
            "+000146c0: 7265 2063 6f65 6666 6963 6965 6e74 2061  re coefficient a",
            "+000146d0: 740a 2020 2020 2020 2020 2020 2020 2020  t.              ",
            "+000146e0: 2020 2020 2020 2020 2072 6566 6572 656e           referen",
            "+000146f0: 6365 2063 6f6e 6469 7469 6f6e 2028 312f  ce condition (1/",
            "+00014700: c2b0 4329 0a20 2020 2041 696d 7020 2020  ..C).    Aimp   ",
            "+00014710: 2020 2020 2020 2020 2020 2020 4d61 7869              Maxi",
            "+00014720: 6d75 6d20 706f 7765 7220 6375 7272 656e  mum power curren",
            "+00014730: 7420 7465 6d70 6572 6174 7572 6520 636f  t temperature co",
            "+00014740: 6566 6669 6369 656e 7420 6174 0a20 2020  efficient at.   ",
            "+00014750: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00014760: 2020 2020 7265 6665 7265 6e63 6520 636f      reference co",
            "+00014770: 6e64 6974 696f 6e20 2831 2fc2 b043 290a  ndition (1/..C).",
            "+00014780: 2020 2020 4276 6f63 6f20 2020 2020 2020      Bvoco       ",
            "+00014790: 2020 2020 2020 204f 7065 6e20 6369 7263         Open circ",
            "+000147a0: 7569 7420 766f 6c74 6167 6520 7465 6d70  uit voltage temp",
            "+000147b0: 6572 6174 7572 6520 636f 6566 6669 6369  erature coeffici",
            "+000147c0: 656e 7420 6174 0a20 2020 2020 2020 2020  ent at.         ",
            "+000147d0: 2020 2020 2020 2020 2020 2020 2020 7265                re",
            "+000147e0: 6665 7265 6e63 6520 636f 6e64 6974 696f  ference conditio",
            "+000147f0: 6e20 2856 2fc2 b043 290a 2020 2020 4d62  n (V/..C).    Mb",
            "+00014800: 766f 6320 2020 2020 2020 2020 2020 2020  voc             ",
            "+00014810: 2043 6f65 6666 6963 6965 6e74 2070 726f   Coefficient pro",
            "+00014820: 7669 6469 6e67 2074 6865 2069 7272 6164  viding the irrad",
            "+00014830: 6961 6e63 6520 6465 7065 6e64 656e 6365  iance dependence",
            "+00014840: 2066 6f72 2074 6865 0a20 2020 2020 2020   for the.       ",
            "+00014850: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00014860: 4265 7461 566f 6320 7465 6d70 6572 6174  BetaVoc temperat",
            "+00014870: 7572 6520 636f 6566 6669 6369 656e 7420  ure coefficient ",
            "+00014880: 6174 2072 6566 6572 656e 6365 2069 7272  at reference irr",
            "+00014890: 6164 6961 6e63 650a 2020 2020 2020 2020  adiance.        ",
            "+000148a0: 2020 2020 2020 2020 2020 2020 2020 2028                 (",
            "+000148b0: 562f c2b0 4329 0a20 2020 2042 766d 706f  V/..C).    Bvmpo",
            "+000148c0: 2020 2020 2020 2020 2020 2020 2020 4d61                Ma",
            "+000148d0: 7869 6d75 6d20 706f 7765 7220 766f 6c74  ximum power volt",
            "+000148e0: 6167 6520 7465 6d70 6572 6174 7572 6520  age temperature ",
            "+000148f0: 636f 6566 6669 6369 656e 7420 6174 0a20  coefficient at. ",
            "+00014900: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00014910: 2020 2020 2020 7265 6665 7265 6e63 6520        reference ",
            "+00014920: 636f 6e64 6974 696f 6e0a 2020 2020 4d62  condition.    Mb",
            "+00014930: 766d 7020 2020 2020 2020 2020 2020 2020  vmp             ",
            "+00014940: 2043 6f65 6666 6963 6965 6e74 2070 726f   Coefficient pro",
            "+00014950: 7669 6469 6e67 2074 6865 2069 7272 6164  viding the irrad",
            "+00014960: 6961 6e63 6520 6465 7065 6e64 656e 6365  iance dependence",
            "+00014970: 2066 6f72 2074 6865 0a20 2020 2020 2020   for the.       ",
            "+00014980: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+00014990: 4265 7461 566d 7020 7465 6d70 6572 6174  BetaVmp temperat",
            "+000149a0: 7572 6520 636f 6566 6669 6369 656e 7420  ure coefficient ",
            "+000149b0: 6174 2072 6566 6572 656e 6365 2069 7272  at reference irr",
            "+000149c0: 6164 6961 6e63 650a 2020 2020 2020 2020  adiance.        ",
            "+000149d0: 2020 2020 2020 2020 2020 2020 2020 2028                 (",
            "+000149e0: 562f c2b0 4329 0a20 2020 204e 2020 2020  V/..C).    N    ",
            "+000149f0: 2020 2020 2020 2020 2020 2020 2020 456d                Em",
            "+00014a00: 7069 7269 6361 6c6c 7920 6465 7465 726d  pirically determ",
            "+00014a10: 696e 6564 2022 6469 6f64 6520 6661 6374  ined \"diode fact",
            "+00014a20: 6f72 2220 2864 696d 656e 7369 6f6e 6c65  or\" (dimensionle",
            "+00014a30: 7373 290a 2020 2020 4365 6c6c 735f 696e  ss).    Cells_in",
            "+00014a40: 5f53 6572 6965 7320 2020 204e 756d 6265  _Series    Numbe",
            "+00014a50: 7220 6f66 2063 656c 6c73 2069 6e20 7365  r of cells in se",
            "+00014a60: 7269 6573 2069 6e20 6120 6d6f 6475 6c65  ries in a module",
            "+00014a70: 2773 2063 656c 6c20 7374 7269 6e67 2873  's cell string(s",
            "+00014a80: 290a 2020 2020 4958 4f20 2020 2020 2020  ).    IXO       ",
            "+00014a90: 2020 2020 2020 2020 2049 7820 6174 2072           Ix at r",
            "+00014aa0: 6566 6572 656e 6365 2063 6f6e 6469 7469  eference conditi",
            "+00014ab0: 6f6e 730a 2020 2020 4958 584f 2020 2020  ons.    IXXO    ",
            "+00014ac0: 2020 2020 2020 2020 2020 2049 7878 2061             Ixx a",
            "+00014ad0: 7420 7265 6665 7265 6e63 6520 636f 6e64  t reference cond",
            "+00014ae0: 6974 696f 6e73 0a20 2020 2046 4420 2020  itions.    FD   ",
            "+00014af0: 2020 2020 2020 2020 2020 2020 2020 4672                Fr",
            "+00014b00: 6163 7469 6f6e 206f 6620 6469 6666 7573  action of diffus",
            "+00014b10: 6520 6972 7261 6469 616e 6365 2075 7365  e irradiance use",
            "+00014b20: 6420 6279 206d 6f64 756c 650a 2020 2020  d by module.    ",
            "+00014b30: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+00014b40: 2020 203d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     =============",
            "+00014b50: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+00014b60: 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================",
            "+00014b70: 3d3d 3d3d 3d3d 3d3d 3d3d 3d0a 0a20 2020  ===========..   ",
            "+00014b80: 2052 6566 6572 656e 6365 730a 2020 2020   References.    ",
            "+00014b90: 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020 202e  ----------.    .",
            "+00014ba0: 2e20 5b31 5d20 4b69 6e67 2c20 442e 2065  . [1] King, D. e",
            "+00014bb0: 7420 616c 2c20 3230 3034 2c20 2253 616e  t al, 2004, \"San",
            "+00014bc0: 6469 6120 5068 6f74 6f76 6f6c 7461 6963  dia Photovoltaic",
            "+00014bd0: 2041 7272 6179 2050 6572 666f 726d 616e   Array Performan",
            "+00014be0: 6365 0a20 2020 2020 2020 4d6f 6465 6c22  ce.       Model\"",
            "+00014bf0: 2c20 5341 4e44 2052 6570 6f72 7420 3335  , SAND Report 35",
            "+00014c00: 3335 2c20 5361 6e64 6961 204e 6174 696f  35, Sandia Natio",
            "+00014c10: 6e61 6c20 4c61 626f 7261 746f 7269 6573  nal Laboratories",
            "+00014c20: 2c20 416c 6275 7175 6572 7175 652c 0a20  , Albuquerque,. ",
            "+00014c30: 2020 2020 2020 4e4d 2e0a 0a20 2020 2053        NM...    S",
            "+00014c40: 6565 2041 6c73 6f0a 2020 2020 2d2d 2d2d  ee Also.    ----",
            "+00014c50: 2d2d 2d2d 0a20 2020 2072 6574 7269 6576  ----.    retriev",
            "+00014c60: 655f 7361 6d0a 2020 2020 7076 6c69 622e  e_sam.    pvlib.",
            "+00014c70: 7465 6d70 6572 6174 7572 652e 7361 706d  temperature.sapm",
            "+00014c80: 5f63 656c 6c0a 2020 2020 7076 6c69 622e  _cell.    pvlib.",
            "+00014c90: 7465 6d70 6572 6174 7572 652e 7361 706d  temperature.sapm",
            "+00014ca0: 5f6d 6f64 756c 650a 2020 2020 2727 270a  _module.    '''.",
            "+00014cb0: 0a20 2020 2071 203d 2063 6f6e 7374 616e  .    q = constan",
            "+00014cc0: 7473 2e65 2020 2320 456c 656d 656e 7461  ts.e  # Elementa",
            "+00014cd0: 7279 2063 6861 7267 6520 696e 2075 6e69  ry charge in uni",
            "+00014ce0: 7473 206f 6620 636f 756c 6f6d 6273 0a20  ts of coulombs. ",
            "+00014cf0: 2020 206b 6220 3d20 636f 6e73 7461 6e74     kb = constant",
            "+00014d00: 732e 6b20 2023 2042 6f6c 747a 6d61 6e6e  s.k  # Boltzmann",
            "+00014d10: 2773 2063 6f6e 7374 616e 7420 696e 2075  's constant in u",
            "+00014d20: 6e69 7473 206f 6620 4a2f 4b0a 0a20 2020  nits of J/K..   ",
            "+00014d30: 2023 2061 766f 6964 2070 726f 626c 656d   # avoid problem",
            "+00014d40: 2077 6974 6820 696e 7465 6765 7220 696e   with integer in",
            "+00014d50: 7075 740a 2020 2020 4565 203d 206e 702e  put.    Ee = np.",
            "+00014d60: 6172 7261 7928 6566 6665 6374 6976 655f  array(effective_",
            "+00014d70: 6972 7261 6469 616e 6365 2c20 6474 7970  irradiance, dtyp",
            "+00014d80: 653d 2766 6c6f 6174 3634 2729 202f 2069  e='float64') / i",
            "+00014d90: 7272 6164 6961 6e63 655f 7265 660a 0a20  rradiance_ref.. ",
            "+00014da0: 2020 2023 2073 6574 2075 7020 6d61 736b     # set up mask",
            "+00014db0: 696e 6720 666f 7220 302c 2070 6f73 6974  ing for 0, posit",
            "+00014dc0: 6976 652c 2061 6e64 206e 616e 2069 6e70  ive, and nan inp",
            "+00014dd0: 7574 730a 2020 2020 4565 5f67 745f 3020  uts.    Ee_gt_0 ",
            "+00014de0: 3d20 6e70 2e66 756c 6c5f 6c69 6b65 2845  = np.full_like(E",
            "+00014df0: 652c 2046 616c 7365 2c20 6474 7970 653d  e, False, dtype=",
            "+00014e00: 2762 6f6f 6c27 290a 2020 2020 4565 5f65  'bool').    Ee_e",
            "+00014e10: 715f 3020 3d20 6e70 2e66 756c 6c5f 6c69  q_0 = np.full_li",
            "+00014e20: 6b65 2845 652c 2046 616c 7365 2c20 6474  ke(Ee, False, dt",
            "+00014e30: 7970 653d 2762 6f6f 6c27 290a 2020 2020  ype='bool').    ",
            "+00014e40: 6e6f 746e 616e 203d 207e 6e70 2e69 736e  notnan = ~np.isn",
            "+00014e50: 616e 2845 6529 0a20 2020 206e 702e 6772  an(Ee).    np.gr",
            "+00014e60: 6561 7465 7228 4565 2c20 302c 2077 6865  eater(Ee, 0, whe",
            "+00014e70: 7265 3d6e 6f74 6e61 6e2c 206f 7574 3d45  re=notnan, out=E",
            "+00014e80: 655f 6774 5f30 290a 2020 2020 6e70 2e65  e_gt_0).    np.e",
            "+00014e90: 7175 616c 2845 652c 2030 2c20 7768 6572  qual(Ee, 0, wher",
            "+00014ea0: 653d 6e6f 746e 616e 2c20 6f75 743d 4565  e=notnan, out=Ee",
            "+00014eb0: 5f65 715f 3029 0a0a 2020 2020 4276 6d70  _eq_0)..    Bvmp",
            "+00014ec0: 6f20 3d20 6d6f 6475 6c65 5b27 4276 6d70  o = module['Bvmp",
            "+00014ed0: 6f27 5d20 2b20 6d6f 6475 6c65 5b27 4d62  o'] + module['Mb",
            "+00014ee0: 766d 7027 5d2a 2831 202d 2045 6529 0a20  vmp']*(1 - Ee). ",
            "+00014ef0: 2020 2042 766f 636f 203d 206d 6f64 756c     Bvoco = modul",
            "+00014f00: 655b 2742 766f 636f 275d 202b 206d 6f64  e['Bvoco'] + mod",
            "+00014f10: 756c 655b 274d 6276 6f63 275d 2a28 3120  ule['Mbvoc']*(1 ",
            "+00014f20: 2d20 4565 290a 2020 2020 6465 6c74 6120  - Ee).    delta ",
            "+00014f30: 3d20 6d6f 6475 6c65 5b27 4e27 5d20 2a20  = module['N'] * ",
            "+00014f40: 6b62 202a 2028 7465 6d70 5f63 656c 6c20  kb * (temp_cell ",
            "+00014f50: 2b20 3237 332e 3135 2920 2f20 710a 0a20  + 273.15) / q.. ",
            "+00014f60: 2020 2023 2061 766f 6964 2072 6570 6561     # avoid repea",
            "+00014f70: 7465 6420 636f 6d70 7574 6174 696f 6e0a  ted computation.",
            "+00014f80: 2020 2020 6c6f 6745 6520 3d20 6e70 2e66      logEe = np.f",
            "+00014f90: 756c 6c5f 6c69 6b65 2845 652c 206e 702e  ull_like(Ee, np.",
            "+00014fa0: 6e61 6e29 0a20 2020 206e 702e 6c6f 6728  nan).    np.log(",
            "+00014fb0: 4565 2c20 7768 6572 653d 4565 5f67 745f  Ee, where=Ee_gt_",
            "+00014fc0: 302c 206f 7574 3d6c 6f67 4565 290a 2020  0, out=logEe).  ",
            "+00014fd0: 2020 6c6f 6745 6520 3d20 6e70 2e77 6865    logEe = np.whe",
            "+00014fe0: 7265 2845 655f 6571 5f30 2c20 2d6e 702e  re(Ee_eq_0, -np.",
            "+00014ff0: 696e 662c 206c 6f67 4565 290a 2020 2020  inf, logEe).    ",
            "+00015000: 2320 6176 6f69 6420 7265 7065 6174 6564  # avoid repeated",
            "+00015010: 205f 5f67 6574 6974 656d 5f5f 0a20 2020   __getitem__.   ",
            "+00015020: 2063 656c 6c73 5f69 6e5f 7365 7269 6573   cells_in_series",
            "+00015030: 203d 206d 6f64 756c 655b 2743 656c 6c73   = module['Cells",
            "+00015040: 5f69 6e5f 5365 7269 6573 275d 0a0a 2020  _in_Series']..  ",
            "+00015050: 2020 6f75 7420 3d20 4f72 6465 7265 6444    out = OrderedD",
            "+00015060: 6963 7428 290a 0a20 2020 206f 7574 5b27  ict()..    out['",
            "+00015070: 695f 7363 275d 203d 2028 0a20 2020 2020  i_sc'] = (.     ",
            "+00015080: 2020 206d 6f64 756c 655b 2749 7363 6f27     module['Isco'",
            "+00015090: 5d20 2a20 4565 202a 2028 3120 2b20 6d6f  ] * Ee * (1 + mo",
            "+000150a0: 6475 6c65 5b27 4169 7363 275d 2a28 7465  dule['Aisc']*(te",
            "+000150b0: 6d70 5f63 656c 6c20 2d0a 2020 2020 2020  mp_cell -.      ",
            "+000150c0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000150d0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000150e0: 2020 2020 2020 2020 2020 2020 2074 656d               tem",
            "+000150f0: 7065 7261 7475 7265 5f72 6566 2929 290a  perature_ref))).",
            "+00015100: 0a20 2020 206f 7574 5b27 695f 6d70 275d  .    out['i_mp']",
            "+00015110: 203d 2028 0a20 2020 2020 2020 206d 6f64   = (.        mod",
            "+00015120: 756c 655b 2749 6d70 6f27 5d20 2a20 286d  ule['Impo'] * (m",
            "+00015130: 6f64 756c 655b 2743 3027 5d2a 4565 202b  odule['C0']*Ee +",
            "+00015140: 206d 6f64 756c 655b 2743 3127 5d2a 2845   module['C1']*(E",
            "+00015150: 652a 2a32 2929 202a 0a20 2020 2020 2020  e**2)) *.       ",
            "+00015160: 2028 3120 2b20 6d6f 6475 6c65 5b27 4169   (1 + module['Ai",
            "+00015170: 6d70 275d 2a28 7465 6d70 5f63 656c 6c20  mp']*(temp_cell ",
            "+00015180: 2d20 7465 6d70 6572 6174 7572 655f 7265  - temperature_re",
            "+00015190: 6629 2929 0a0a 2020 2020 6f75 745b 2776  f)))..    out['v",
            "+000151a0: 5f6f 6327 5d20 3d20 6e70 2e6d 6178 696d  _oc'] = np.maxim",
            "+000151b0: 756d 2830 2c20 280a 2020 2020 2020 2020  um(0, (.        ",
            "+000151c0: 6d6f 6475 6c65 5b27 566f 636f 275d 202b  module['Voco'] +",
            "+000151d0: 2063 656c 6c73 5f69 6e5f 7365 7269 6573   cells_in_series",
            "+000151e0: 202a 2064 656c 7461 202a 206c 6f67 4565   * delta * logEe",
            "+000151f0: 202b 0a20 2020 2020 2020 2042 766f 636f   +.        Bvoco",
            "+00015200: 2a28 7465 6d70 5f63 656c 6c20 2d20 7465  *(temp_cell - te",
            "+00015210: 6d70 6572 6174 7572 655f 7265 6629 2929  mperature_ref)))",
            "+00015220: 0a0a 2020 2020 6f75 745b 2776 5f6d 7027  ..    out['v_mp'",
            "+00015230: 5d20 3d20 6e70 2e6d 6178 696d 756d 2830  ] = np.maximum(0",
            "+00015240: 2c20 280a 2020 2020 2020 2020 6d6f 6475  , (.        modu",
            "+00015250: 6c65 5b27 566d 706f 275d 202b 0a20 2020  le['Vmpo'] +.   ",
            "+00015260: 2020 2020 206d 6f64 756c 655b 2743 3227       module['C2'",
            "+00015270: 5d20 2a20 6365 6c6c 735f 696e 5f73 6572  ] * cells_in_ser",
            "+00015280: 6965 7320 2a20 6465 6c74 6120 2a20 6c6f  ies * delta * lo",
            "+00015290: 6745 6520 2b0a 2020 2020 2020 2020 6d6f  gEe +.        mo",
            "+000152a0: 6475 6c65 5b27 4333 275d 202a 2063 656c  dule['C3'] * cel",
            "+000152b0: 6c73 5f69 6e5f 7365 7269 6573 202a 2028  ls_in_series * (",
            "+000152c0: 2864 656c 7461 202a 206c 6f67 4565 2920  (delta * logEe) ",
            "+000152d0: 2a2a 2032 2920 2b0a 2020 2020 2020 2020  ** 2) +.        ",
            "+000152e0: 4276 6d70 6f2a 2874 656d 705f 6365 6c6c  Bvmpo*(temp_cell",
            "+000152f0: 202d 2074 656d 7065 7261 7475 7265 5f72   - temperature_r",
            "+00015300: 6566 2929 290a 0a20 2020 206f 7574 5b27  ef)))..    out['",
            "+00015310: 705f 6d70 275d 203d 206f 7574 5b27 695f  p_mp'] = out['i_",
            "+00015320: 6d70 275d 202a 206f 7574 5b27 765f 6d70  mp'] * out['v_mp",
            "+00015330: 275d 0a0a 2020 2020 6966 2027 4958 4f27  ']..    if 'IXO'",
            "+00015340: 2069 6e20 6d6f 6475 6c65 2061 6e64 2027   in module and '",
            "+00015350: 4334 2720 696e 206d 6f64 756c 6520 616e  C4' in module an",
            "+00015360: 6420 2743 3527 2069 6e20 6d6f 6475 6c65  d 'C5' in module",
            "+00015370: 3a0a 2020 2020 2020 2020 6f75 745b 2769  :.        out['i",
            "+00015380: 5f78 275d 203d 2028 0a20 2020 2020 2020  _x'] = (.       ",
            "+00015390: 2020 2020 206d 6f64 756c 655b 2749 584f       module['IXO",
            "+000153a0: 275d 202a 2028 6d6f 6475 6c65 5b27 4334  '] * (module['C4",
            "+000153b0: 275d 2a45 6520 2b20 6d6f 6475 6c65 5b27  ']*Ee + module['",
            "+000153c0: 4335 275d 2a28 4565 2a2a 3229 2920 2a0a  C5']*(Ee**2)) *.",
            "+000153d0: 2020 2020 2020 2020 2020 2020 2831 202b              (1 +",
            "+000153e0: 206d 6f64 756c 655b 2741 6973 6327 5d2a   module['Aisc']*",
            "+000153f0: 2874 656d 705f 6365 6c6c 202d 2074 656d  (temp_cell - tem",
            "+00015400: 7065 7261 7475 7265 5f72 6566 2929 290a  perature_ref))).",
            "+00015410: 0a20 2020 2069 6620 2749 5858 4f27 2069  .    if 'IXXO' i",
            "+00015420: 6e20 6d6f 6475 6c65 2061 6e64 2027 4336  n module and 'C6",
            "+00015430: 2720 696e 206d 6f64 756c 6520 616e 6420  ' in module and ",
            "+00015440: 2743 3727 2069 6e20 6d6f 6475 6c65 3a0a  'C7' in module:.",
            "+00015450: 2020 2020 2020 2020 6f75 745b 2769 5f78          out['i_x",
            "+00015460: 7827 5d20 3d20 280a 2020 2020 2020 2020  x'] = (.        ",
            "+00015470: 2020 2020 6d6f 6475 6c65 5b27 4958 584f      module['IXXO",
            "+00015480: 275d 202a 2028 6d6f 6475 6c65 5b27 4336  '] * (module['C6",
            "+00015490: 275d 2a45 6520 2b20 6d6f 6475 6c65 5b27  ']*Ee + module['",
            "+000154a0: 4337 275d 2a28 4565 2a2a 3229 2920 2a0a  C7']*(Ee**2)) *.",
            "+000154b0: 2020 2020 2020 2020 2020 2020 2831 202b              (1 +",
            "+000154c0: 206d 6f64 756c 655b 2741 696d 7027 5d2a   module['Aimp']*",
            "+000154d0: 2874 656d 705f 6365 6c6c 202d 2074 656d  (temp_cell - tem",
            "+000154e0: 7065 7261 7475 7265 5f72 6566 2929 290a  perature_ref))).",
            "+000154f0: 0a20 2020 2069 6620 6973 696e 7374 616e  .    if isinstan",
            "+00015500: 6365 286f 7574 5b27 695f 7363 275d 2c20  ce(out['i_sc'], ",
            "+00015510: 7064 2e53 6572 6965 7329 3a0a 2020 2020  pd.Series):.    ",
            "+00015520: 2020 2020 6f75 7420 3d20 7064 2e44 6174      out = pd.Dat",
            "+00015530: 6146 7261 6d65 286f 7574 290a 0a20 2020  aFrame(out)..   ",
            "+00015540: 2072 6574 7572 6e20 6f75 740a 0a0a 6465   return out...de",
            "+00015550: 6620 7361 706d 5f65 6666 6563 7469 7665  f sapm_effective",
            "+00015560: 5f69 7272 6164 6961 6e63 6528 706f 615f  _irradiance(poa_",
            "+00015570: 6469 7265 6374 2c20 706f 615f 6469 6666  direct, poa_diff",
            "+00015580: 7573 652c 2061 6972 6d61 7373 5f61 6273  use, airmass_abs",
            "+00015590: 6f6c 7574 652c 2061 6f69 2c0a 2020 2020  olute, aoi,.    ",
            "+000155a0: 2020 2020 2020 2020 2020 2020 2020 2020                  ",
            "+000155b0: 2020 2020 2020 2020 2020 6d6f 6475 6c65            module",
            "+000155c0: 293a 0a20 2020 2072 2222 220a 2020 2020  ):.    r\"\"\".    ",
            "+000155d0: 4361 6c63 756c 6174 6573 2074 6865 2053  Calculates the S",
            "+000155e0: 4150 4d20 6566 6665 6374 6976 6520 6972  APM effective ir",
            "+000155f0: 7261 6469 616e 6365 2075 7369 6e67 2074  radiance using t",
            "+00015600: 6865 2053 4150 4d20 7370 6563 7472 616c  he SAPM spectral",
            "+00015610: 0a20 2020 206c 6f73 7320 616e 6420 5341  .    loss and SA",
            "+00015620: 504d 2061 6e67 6c65 206f 6620 696e 6369  PM angle of inci",
            "+00015630: 6465 6e63 6520 6c6f 7373 2066 756e 6374  dence loss funct",
            "+00015640: 696f 6e73 2e0a 0a20 2020 2050 6172 616d  ions...    Param",
            "+00015650: 6574 6572 730a 2020 2020 2d2d 2d2d 2d2d  eters.    ------",
            "+00015660: 2d2d 2d2d 0a20 2020 2070 6f61 5f64 6972  ----.    poa_dir",
            "+00015670: 6563 7420 3a20 6e75 6d65 7269 630a 2020  ect : numeric.  ",
            "+00015680: 2020 2020 2020 5468 6520 6469 7265 6374        The direct",
            "+00015690: 2069 7272 6164 6961 6e63 6520 696e 6369   irradiance inci",
            "+000156a0: 6465 6e74 2075 706f 6e20 7468 6520 6d6f  dent upon the mo",
            "+000156b0: 6475 6c65 2e20 5b57 2f6d 325d 0a0a 2020  dule. [W/m2]..  ",
            "+000156c0: 2020 706f 615f 6469 6666 7573 6520 3a20    poa_diffuse : ",
            "+000156d0: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "+000156e0: 5468 6520 6469 6666 7573 6520 6972 7261  The diffuse irra",
            "+000156f0: 6469 616e 6365 2069 6e63 6964 656e 7420  diance incident ",
            "+00015700: 6f6e 206d 6f64 756c 652e 2020 5b57 2f6d  on module.  [W/m",
            "+00015710: 325d 0a0a 2020 2020 6169 726d 6173 735f  2]..    airmass_",
            "+00015720: 6162 736f 6c75 7465 203a 206e 756d 6572  absolute : numer",
            "+00015730: 6963 0a20 2020 2020 2020 2041 6273 6f6c  ic.        Absol",
            "+00015740: 7574 6520 6169 726d 6173 732e 205b 756e  ute airmass. [un",
            "+00015750: 6974 6c65 7373 5d0a 0a20 2020 2061 6f69  itless]..    aoi",
            "+00015760: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "+00015770: 2020 2041 6e67 6c65 206f 6620 696e 6369     Angle of inci",
            "+00015780: 6465 6e63 652e 205b 6465 6772 6565 735d  dence. [degrees]",
            "+00015790: 0a0a 2020 2020 6d6f 6475 6c65 203a 2064  ..    module : d",
            "+000157a0: 6963 742d 6c69 6b65 0a20 2020 2020 2020  ict-like.       ",
            "+000157b0: 2041 2064 6963 742c 2053 6572 6965 732c   A dict, Series,",
            "+000157c0: 206f 7220 4461 7461 4672 616d 6520 6465   or DataFrame de",
            "+000157d0: 6669 6e69 6e67 2074 6865 2053 4150 4d20  fining the SAPM ",
            "+000157e0: 7065 7266 6f72 6d61 6e63 650a 2020 2020  performance.    ",
            "+000157f0: 2020 2020 7061 7261 6d65 7465 7273 2e20      parameters. ",
            "+00015800: 5365 6520 7468 6520 3a70 793a 6675 6e63  See the :py:func",
            "+00015810: 3a60 7361 706d 6020 6e6f 7465 7320 7365  :`sapm` notes se",
            "+00015820: 6374 696f 6e20 666f 7220 6d6f 7265 0a20  ction for more. ",
            "+00015830: 2020 2020 2020 2064 6574 6169 6c73 2e0a         details..",
            "+00015840: 0a20 2020 2052 6574 7572 6e73 0a20 2020  .    Returns.   ",
            "+00015850: 202d 2d2d 2d2d 2d2d 0a20 2020 2065 6666   -------.    eff",
            "+00015860: 6563 7469 7665 5f69 7272 6164 6961 6e63  ective_irradianc",
            "+00015870: 6520 3a20 6e75 6d65 7269 630a 2020 2020  e : numeric.    ",
            "+00015880: 2020 2020 4566 6665 6374 6976 6520 6972      Effective ir",
            "+00015890: 7261 6469 616e 6365 2061 6363 6f75 6e74  radiance account",
            "+000158a0: 696e 6720 666f 7220 7265 666c 6563 7469  ing for reflecti",
            "+000158b0: 6f6e 7320 616e 6420 7370 6563 7472 616c  ons and spectral",
            "+000158c0: 2063 6f6e 7465 6e74 2e0a 2020 2020 2020   content..      ",
            "+000158d0: 2020 5b57 2f6d 325d 0a0a 2020 2020 4e6f    [W/m2]..    No",
            "+000158e0: 7465 730a 2020 2020 2d2d 2d2d 2d0a 2020  tes.    -----.  ",
            "+000158f0: 2020 5468 6520 5341 504d 206d 6f64 656c    The SAPM model",
            "+00015900: 2066 6f72 2065 6666 6563 7469 7665 2069   for effective i",
            "+00015910: 7272 6164 6961 6e63 6520 5b31 5d5f 2074  rradiance [1]_ t",
            "+00015920: 7261 6e73 6c61 7465 7320 6272 6f61 6462  ranslates broadb",
            "+00015930: 616e 6420 6469 7265 6374 0a20 2020 2061  and direct.    a",
            "+00015940: 6e64 2064 6966 6675 7365 2069 7272 6164  nd diffuse irrad",
            "+00015950: 6961 6e63 6520 6f6e 2074 6865 2070 6c61  iance on the pla",
            "+00015960: 6e65 206f 6620 6172 7261 7920 746f 2074  ne of array to t",
            "+00015970: 6865 2069 7272 6164 6961 6e63 6520 6162  he irradiance ab",
            "+00015980: 736f 7262 6564 2062 790a 2020 2020 6120  sorbed by.    a ",
            "+00015990: 6d6f 6475 6c65 2773 2063 656c 6c73 2e0a  module's cells..",
            "+000159a0: 0a20 2020 2054 6865 206d 6f64 656c 2069  .    The model i",
            "+000159b0: 730a 0a20 2020 202e 2e20 6d61 7468 3a3a  s..    .. math::",
            "+000159c0: 0a0a 2020 2020 2020 2020 4565 203d 2066  ..        Ee = f",
            "+000159d0: 5f31 2841 4d5f 6129 2028 455f 6220 665f  _1(AM_a) (E_b f_",
            "+000159e0: 3228 414f 4929 202b 2066 5f64 2045 5f64  2(AOI) + f_d E_d",
            "+000159f0: 290a 0a20 2020 2077 6865 7265 203a 6d61  )..    where :ma",
            "+00015a00: 7468 3a60 4565 6020 6973 2065 6666 6563  th:`Ee` is effec",
            "+00015a10: 7469 7665 2069 7272 6164 6961 6e63 6520  tive irradiance ",
            "+00015a20: 2857 2f6d 3229 2c20 3a6d 6174 683a 6066  (W/m2), :math:`f",
            "+00015a30: 5f31 6020 6973 2061 2066 6f75 7274 680a  _1` is a fourth.",
            "+00015a40: 2020 2020 6465 6772 6565 2070 6f6c 796e      degree polyn",
            "+00015a50: 6f6d 6961 6c20 696e 2061 6972 206d 6173  omial in air mas",
            "+00015a60: 7320 3a6d 6174 683a 6041 4d5f 6160 2c20  s :math:`AM_a`, ",
            "+00015a70: 3a6d 6174 683a 6045 5f62 6020 6973 2062  :math:`E_b` is b",
            "+00015a80: 6561 6d20 2864 6972 6563 7429 0a20 2020  eam (direct).   ",
            "+00015a90: 2069 7272 6164 6961 6e63 6520 6f6e 2074   irradiance on t",
            "+00015aa0: 6865 2070 6c61 6e65 206f 6620 6172 7261  he plane of arra",
            "+00015ab0: 792c 203a 6d61 7468 3a60 455f 6460 2069  y, :math:`E_d` i",
            "+00015ac0: 7320 6469 6666 7573 6520 6972 7261 6469  s diffuse irradi",
            "+00015ad0: 616e 6365 206f 6e20 7468 650a 2020 2020  ance on the.    ",
            "+00015ae0: 706c 616e 6520 6f66 2061 7272 6179 2c20  plane of array, ",
            "+00015af0: 3a6d 6174 683a 6066 5f32 6020 6973 2061  :math:`f_2` is a",
            "+00015b00: 2066 6966 7468 2064 6567 7265 6520 706f   fifth degree po",
            "+00015b10: 6c79 6e6f 6d69 616c 2069 6e20 7468 6520  lynomial in the ",
            "+00015b20: 616e 676c 6520 6f66 0a20 2020 2069 6e63  angle of.    inc",
            "+00015b30: 6964 656e 6365 203a 6d61 7468 3a60 414f  idence :math:`AO",
            "+00015b40: 4960 2c20 616e 6420 3a6d 6174 683a 6066  I`, and :math:`f",
            "+00015b50: 5f64 6020 6973 2074 6865 2066 7261 6374  _d` is the fract",
            "+00015b60: 696f 6e20 6f66 2064 6966 6675 7365 0a20  ion of diffuse. ",
            "+00015b70: 2020 2069 7272 6164 6961 6e63 6520 6f6e     irradiance on",
            "+00015b80: 2074 6865 2070 6c61 6e65 206f 6620 6172   the plane of ar",
            "+00015b90: 7261 7920 7468 6174 2069 7320 6e6f 7420  ray that is not ",
            "+00015ba0: 7265 666c 6563 7465 6420 6177 6179 2e0a  reflected away..",
            "+00015bb0: 0a20 2020 2052 6566 6572 656e 6365 730a  .    References.",
            "+00015bc0: 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20      ----------. ",
            "+00015bd0: 2020 202e 2e20 5b31 5d20 442e 204b 696e     .. [1] D. Kin",
            "+00015be0: 6720 6574 2061 6c2c 2022 5361 6e64 6961  g et al, \"Sandia",
            "+00015bf0: 2050 686f 746f 766f 6c74 6169 6320 4172   Photovoltaic Ar",
            "+00015c00: 7261 7920 5065 7266 6f72 6d61 6e63 6520  ray Performance ",
            "+00015c10: 4d6f 6465 6c22 2c0a 2020 2020 2020 2053  Model\",.       S",
            "+00015c20: 414e 4432 3030 342d 3335 3335 2c20 5361  AND2004-3535, Sa",
            "+00015c30: 6e64 6961 204e 6174 696f 6e61 6c20 4c61  ndia National La",
            "+00015c40: 626f 7261 746f 7269 6573 2c20 416c 6275  boratories, Albu",
            "+00015c50: 7175 6572 7175 652c 204e 4d0a 0a20 2020  querque, NM..   ",
            "+00015c60: 2053 6565 2061 6c73 6f0a 2020 2020 2d2d   See also.    --",
            "+00015c70: 2d2d 2d2d 2d2d 0a20 2020 2070 766c 6962  ------.    pvlib",
            "+00015c80: 2e69 616d 2e73 6170 6d0a 2020 2020 7076  .iam.sapm.    pv",
            "+00015c90: 6c69 622e 7370 6563 7472 756d 2e73 7065  lib.spectrum.spe",
            "+00015ca0: 6374 7261 6c5f 6661 6374 6f72 5f73 6170  ctral_factor_sap",
            "+00015cb0: 6d0a 2020 2020 7076 6c69 622e 7076 7379  m.    pvlib.pvsy",
            "+00015cc0: 7374 656d 2e73 6170 6d0a 2020 2020 2222  stem.sapm.    \"\"",
            "+00015cd0: 220a 0a20 2020 2046 3120 3d20 7370 6563  \"..    F1 = spec",
            "+00015ce0: 7472 756d 2e73 7065 6374 7261 6c5f 6661  trum.spectral_fa",
            "+00015cf0: 6374 6f72 5f73 6170 6d28 6169 726d 6173  ctor_sapm(airmas",
            "+00015d00: 735f 6162 736f 6c75 7465 2c20 6d6f 6475  s_absolute, modu",
            "+00015d10: 6c65 290a 2020 2020 4632 203d 2069 616d  le).    F2 = iam",
            "+00015d20: 2e73 6170 6d28 616f 692c 206d 6f64 756c  .sapm(aoi, modul",
            "+00015d30: 6529 0a0a 2020 2020 4565 203d 2046 3120  e)..    Ee = F1 ",
            "+00015d40: 2a20 2870 6f61 5f64 6972 6563 7420 2a20  * (poa_direct * ",
            "+00015d50: 4632 202b 206d 6f64 756c 655b 2746 4427  F2 + module['FD'",
            "+00015d60: 5d20 2a20 706f 615f 6469 6666 7573 6529  ] * poa_diffuse)",
            "+00015d70: 0a0a 2020 2020 7265 7475 726e 2045 650a  ..    return Ee.",
            "+00015d80: 0a0a 6465 6620 7369 6e67 6c65 6469 6f64  ..def singlediod",
            "+00015d90: 6528 7068 6f74 6f63 7572 7265 6e74 2c20  e(photocurrent, ",
            "+00015da0: 7361 7475 7261 7469 6f6e 5f63 7572 7265  saturation_curre",
            "+00015db0: 6e74 2c20 7265 7369 7374 616e 6365 5f73  nt, resistance_s",
            "+00015dc0: 6572 6965 732c 0a20 2020 2020 2020 2020  eries,.         ",
            "+00015dd0: 2020 2020 2020 2072 6573 6973 7461 6e63         resistanc",
            "+00015de0: 655f 7368 756e 742c 206e 4e73 5674 682c  e_shunt, nNsVth,",
            "+00015df0: 206d 6574 686f 643d 276c 616d 6265 7274   method='lambert",
            "+00015e00: 7727 293a 0a20 2020 2072 2222 220a 2020  w'):.    r\"\"\".  ",
            "+00015e10: 2020 536f 6c76 6520 7468 6520 7369 6e67    Solve the sing",
            "+00015e20: 6c65 2064 696f 6465 2065 7175 6174 696f  le diode equatio",
            "+00015e30: 6e20 746f 206f 6274 6169 6e20 6120 7068  n to obtain a ph",
            "+00015e40: 6f74 6f76 6f6c 7461 6963 2049 5620 6375  otovoltaic IV cu",
            "+00015e50: 7276 652e 0a0a 2020 2020 536f 6c76 6573  rve...    Solves",
            "+00015e60: 2074 6865 2073 696e 676c 6520 6469 6f64   the single diod",
            "+00015e70: 6520 6571 7561 7469 6f6e 205b 315d 5f0a  e equation [1]_.",
            "+00015e80: 0a20 2020 202e 2e20 6d61 7468 3a3a 0a0a  .    .. math::..",
            "+00015e90: 2020 2020 2020 2020 4920 3d20 495f 4c20          I = I_L ",
            "+00015ea0: 2d0a 2020 2020 2020 2020 2020 2020 495f  -.            I_",
            "+00015eb0: 3020 5c6c 6566 745b 0a20 2020 2020 2020  0 \\left[.       ",
            "+00015ec0: 2020 2020 2020 2020 205c 6578 7020 5c6c           \\exp \\l",
            "+00015ed0: 6566 7428 5c66 7261 637b 562b 4920 525f  eft(\\frac{V+I R_",
            "+00015ee0: 737d 7b6e 204e 5f73 2056 5f7b 7468 7d7d  s}{n N_s V_{th}}",
            "+00015ef0: 205c 7269 6768 7429 2d31 0a20 2020 2020   \\right)-1.     ",
            "+00015f00: 2020 2020 2020 205c 7269 6768 745d 202d         \\right] -",
            "+00015f10: 0a20 2020 2020 2020 2020 2020 205c 6672  .            \\fr",
            "+00015f20: 6163 7b56 202b 2049 2052 5f73 7d7b 525f  ac{V + I R_s}{R_",
            "+00015f30: 7b73 687d 7d0a 0a20 2020 2066 6f72 203a  {sh}}..    for :",
            "+00015f40: 6d61 7468 3a60 4960 2061 6e64 203a 6d61  math:`I` and :ma",
            "+00015f50: 7468 3a60 5660 2077 6865 6e20 6769 7665  th:`V` when give",
            "+00015f60: 6e20 3a6d 6174 683a 6049 5f4c 2c20 495f  n :math:`I_L, I_",
            "+00015f70: 302c 2052 5f73 2c20 525f 7b73 687d 2c60  0, R_s, R_{sh},`",
            "+00015f80: 2061 6e64 0a20 2020 203a 6d61 7468 3a60   and.    :math:`",
            "+00015f90: 6e20 4e5f 7320 565f 7b74 687d 6020 7768  n N_s V_{th}` wh",
            "+00015fa0: 6963 6820 6172 6520 6465 7363 7269 6265  ich are describe",
            "+00015fb0: 6420 6c61 7465 722e 2054 6865 2066 6976  d later. The fiv",
            "+00015fc0: 6520 706f 696e 7473 206f 6e20 7468 6520  e points on the ",
            "+00015fd0: 492d 560a 2020 2020 6375 7276 6520 7370  I-V.    curve sp",
            "+00015fe0: 6563 6966 6965 6420 696e 205b 335d 5f20  ecified in [3]_ ",
            "+00015ff0: 6172 6520 7265 7475 726e 6564 2e20 4966  are returned. If",
            "+00016000: 203a 6d61 7468 3a60 495f 4c2c 2049 5f30   :math:`I_L, I_0",
            "+00016010: 2c20 525f 732c 2052 5f7b 7368 7d2c 6020  , R_s, R_{sh},` ",
            "+00016020: 616e 640a 2020 2020 3a6d 6174 683a 606e  and.    :math:`n",
            "+00016030: 204e 5f73 2056 5f7b 7468 7d60 2061 7265   N_s V_{th}` are",
            "+00016040: 2061 6c6c 2073 6361 6c61 7273 2c20 6120   all scalars, a ",
            "+00016050: 7369 6e67 6c65 2063 7572 7665 2069 7320  single curve is ",
            "+00016060: 7265 7475 726e 6564 2e20 4966 2061 6e79  returned. If any",
            "+00016070: 0a20 2020 2061 7265 2061 7272 6179 2d6c  .    are array-l",
            "+00016080: 696b 6520 286f 6620 7468 6520 7361 6d65  ike (of the same",
            "+00016090: 206c 656e 6774 6829 2c20 6d75 6c74 6970   length), multip",
            "+000160a0: 6c65 2049 5620 6375 7276 6573 2061 7265  le IV curves are",
            "+000160b0: 2063 616c 6375 6c61 7465 642e 0a0a 2020   calculated...  ",
            "+000160c0: 2020 5468 6520 696e 7075 7420 7061 7261    The input para",
            "+000160d0: 6d65 7465 7273 2063 616e 2062 6520 6361  meters can be ca",
            "+000160e0: 6c63 756c 6174 6564 2066 726f 6d20 6d65  lculated from me",
            "+000160f0: 7465 6f72 6f6c 6f67 6963 616c 2064 6174  teorological dat",
            "+00016100: 6120 7573 696e 6720 610a 2020 2020 6675  a using a.    fu",
            "+00016110: 6e63 7469 6f6e 2066 6f72 2061 2073 696e  nction for a sin",
            "+00016120: 676c 6520 6469 6f64 6520 6d6f 6465 6c2c  gle diode model,",
            "+00016130: 2065 2e67 2e2c 0a20 2020 203a 7079 3a66   e.g.,.    :py:f",
            "+00016140: 756e 633a 607e 7076 6c69 622e 7076 7379  unc:`~pvlib.pvsy",
            "+00016150: 7374 656d 2e63 616c 6370 6172 616d 735f  stem.calcparams_",
            "+00016160: 6465 736f 746f 602e 0a0a 2020 2020 5061  desoto`...    Pa",
            "+00016170: 7261 6d65 7465 7273 0a20 2020 202d 2d2d  rameters.    ---",
            "+00016180: 2d2d 2d2d 2d2d 2d0a 2020 2020 7068 6f74  -------.    phot",
            "+00016190: 6f63 7572 7265 6e74 203a 206e 756d 6572  ocurrent : numer",
            "+000161a0: 6963 0a20 2020 2020 2020 204c 6967 6874  ic.        Light",
            "+000161b0: 2d67 656e 6572 6174 6564 2063 7572 7265  -generated curre",
            "+000161c0: 6e74 203a 6d61 7468 3a60 495f 4c60 2028  nt :math:`I_L` (",
            "+000161d0: 7068 6f74 6f63 7572 7265 6e74 290a 2020  photocurrent).  ",
            "+000161e0: 2020 2020 2020 6060 3020 3c3d 2070 686f        ``0 <= pho",
            "+000161f0: 746f 6375 7272 656e 7460 602e 205b 415d  tocurrent``. [A]",
            "+00016200: 0a0a 2020 2020 7361 7475 7261 7469 6f6e  ..    saturation",
            "+00016210: 5f63 7572 7265 6e74 203a 206e 756d 6572  _current : numer",
            "+00016220: 6963 0a20 2020 2020 2020 2044 696f 6465  ic.        Diode",
            "+00016230: 2073 6174 7572 6174 696f 6e20 3a6d 6174   saturation :mat",
            "+00016240: 683a 6049 5f30 6020 6375 7272 656e 7420  h:`I_0` current ",
            "+00016250: 756e 6465 7220 6465 7369 7265 6420 4956  under desired IV",
            "+00016260: 2063 7572 7665 0a20 2020 2020 2020 2063   curve.        c",
            "+00016270: 6f6e 6469 7469 6f6e 732e 2060 6030 203c  onditions. ``0 <",
            "+00016280: 2073 6174 7572 6174 696f 6e5f 6375 7272   saturation_curr",
            "+00016290: 656e 7460 602e 205b 415d 0a0a 2020 2020  ent``. [A]..    ",
            "+000162a0: 7265 7369 7374 616e 6365 5f73 6572 6965  resistance_serie",
            "+000162b0: 7320 3a20 6e75 6d65 7269 630a 2020 2020  s : numeric.    ",
            "+000162c0: 2020 2020 5365 7269 6573 2072 6573 6973      Series resis",
            "+000162d0: 7461 6e63 6520 3a6d 6174 683a 6052 5f73  tance :math:`R_s",
            "+000162e0: 6020 756e 6465 7220 6465 7369 7265 6420  ` under desired ",
            "+000162f0: 4956 2063 7572 7665 2063 6f6e 6469 7469  IV curve conditi",
            "+00016300: 6f6e 732e 0a20 2020 2020 2020 2060 6030  ons..        ``0",
            "+00016310: 203c 3d20 7265 7369 7374 616e 6365 5f73   <= resistance_s",
            "+00016320: 6572 6965 7320 3c20 6e75 6d70 792e 696e  eries < numpy.in",
            "+00016330: 6660 602e 2020 5b6f 686d 5d0a 0a20 2020  f``.  [ohm]..   ",
            "+00016340: 2072 6573 6973 7461 6e63 655f 7368 756e   resistance_shun",
            "+00016350: 7420 3a20 6e75 6d65 7269 630a 2020 2020  t : numeric.    ",
            "+00016360: 2020 2020 5368 756e 7420 7265 7369 7374      Shunt resist",
            "+00016370: 616e 6365 203a 6d61 7468 3a60 525f 7b73  ance :math:`R_{s",
            "+00016380: 687d 6020 756e 6465 7220 6465 7369 7265  h}` under desire",
            "+00016390: 6420 4956 2063 7572 7665 2063 6f6e 6469  d IV curve condi",
            "+000163a0: 7469 6f6e 732e 0a20 2020 2020 2020 2060  tions..        `",
            "+000163b0: 6030 203c 2072 6573 6973 7461 6e63 655f  `0 < resistance_",
            "+000163c0: 7368 756e 7420 3c3d 206e 756d 7079 2e69  shunt <= numpy.i",
            "+000163d0: 6e66 6060 2e20 205b 6f68 6d5d 0a0a 2020  nf``.  [ohm]..  ",
            "+000163e0: 2020 6e4e 7356 7468 203a 206e 756d 6572    nNsVth : numer",
            "+000163f0: 6963 0a20 2020 2020 2020 2054 6865 2070  ic.        The p",
            "+00016400: 726f 6475 6374 206f 6620 7468 7265 6520  roduct of three ",
            "+00016410: 636f 6d70 6f6e 656e 7473 3a20 3129 2074  components: 1) t",
            "+00016420: 6865 2075 7375 616c 2064 696f 6465 2069  he usual diode i",
            "+00016430: 6465 616c 6974 7920 6661 6374 6f72 0a20  deality factor. ",
            "+00016440: 2020 2020 2020 203a 6d61 7468 3a60 6e60         :math:`n`",
            "+00016450: 2c20 3229 2074 6865 206e 756d 6265 7220  , 2) the number ",
            "+00016460: 6f66 2063 656c 6c73 2069 6e20 7365 7269  of cells in seri",
            "+00016470: 6573 203a 6d61 7468 3a60 4e5f 7360 2c20  es :math:`N_s`, ",
            "+00016480: 616e 6420 3329 0a20 2020 2020 2020 2074  and 3).        t",
            "+00016490: 6865 2063 656c 6c20 7468 6572 6d61 6c20  he cell thermal ",
            "+000164a0: 766f 6c74 6167 650a 2020 2020 2020 2020  voltage.        ",
            "+000164b0: 3a6d 6174 683a 6056 5f7b 7468 7d60 2e20  :math:`V_{th}`. ",
            "+000164c0: 5468 6520 7468 6572 6d61 6c20 766f 6c74  The thermal volt",
            "+000164d0: 6167 6520 6f66 2074 6865 2063 656c 6c20  age of the cell ",
            "+000164e0: 2869 6e20 766f 6c74 7329 206d 6179 2062  (in volts) may b",
            "+000164f0: 650a 2020 2020 2020 2020 6361 6c63 756c  e.        calcul",
            "+00016500: 6174 6564 2061 7320 3a6d 6174 683a 606b  ated as :math:`k",
            "+00016510: 5f42 2054 5f63 202f 2071 602c 2077 6865  _B T_c / q`, whe",
            "+00016520: 7265 203a 6d61 7468 3a60 6b5f 4260 2069  re :math:`k_B` i",
            "+00016530: 730a 2020 2020 2020 2020 426f 6c74 7a6d  s.        Boltzm",
            "+00016540: 616e 6e27 7320 636f 6e73 7461 6e74 2028  ann's constant (",
            "+00016550: 4a2f 4b29 2c20 3a6d 6174 683a 6054 5f63  J/K), :math:`T_c",
            "+00016560: 6020 6973 2074 6865 2074 656d 7065 7261  ` is the tempera",
            "+00016570: 7475 7265 206f 6620 7468 6520 702d 6e0a  ture of the p-n.",
            "+00016580: 2020 2020 2020 2020 6a75 6e63 7469 6f6e          junction",
            "+00016590: 2069 6e20 4b65 6c76 696e 2c20 616e 6420   in Kelvin, and ",
            "+000165a0: 3a6d 6174 683a 6071 6020 6973 2074 6865  :math:`q` is the",
            "+000165b0: 2063 6861 7267 6520 6f66 2061 6e20 656c   charge of an el",
            "+000165c0: 6563 7472 6f6e 0a20 2020 2020 2020 2028  ectron.        (",
            "+000165d0: 636f 756c 6f6d 6273 292e 2060 6030 203c  coulombs). ``0 <",
            "+000165e0: 206e 4e73 5674 6860 602e 2020 5b56 5d0a   nNsVth``.  [V].",
            "+000165f0: 0a20 2020 206d 6574 686f 6420 3a20 7374  .    method : st",
            "+00016600: 722c 2064 6566 6175 6c74 2027 6c61 6d62  r, default 'lamb",
            "+00016610: 6572 7477 270a 2020 2020 2020 2020 4465  ertw'.        De",
            "+00016620: 7465 726d 696e 6573 2074 6865 206d 6574  termines the met",
            "+00016630: 686f 6420 7573 6564 2074 6f20 6361 6c63  hod used to calc",
            "+00016640: 756c 6174 6520 706f 696e 7473 206f 6e20  ulate points on ",
            "+00016650: 7468 6520 4956 2063 7572 7665 2e20 5468  the IV curve. Th",
            "+00016660: 650a 2020 2020 2020 2020 6f70 7469 6f6e  e.        option",
            "+00016670: 7320 6172 6520 6060 276c 616d 6265 7274  s are ``'lambert",
            "+00016680: 7727 6060 2c20 6060 276e 6577 746f 6e27  w'``, ``'newton'",
            "+00016690: 6060 2c20 6f72 2060 6027 6272 656e 7471  ``, or ``'brentq",
            "+000166a0: 2760 602e 0a0a 2020 2020 5265 7475 726e  '``...    Return",
            "+000166b0: 730a 2020 2020 2d2d 2d2d 2d2d 2d0a 2020  s.    -------.  ",
            "+000166c0: 2020 6469 6374 206f 7220 7061 6e64 6173    dict or pandas",
            "+000166d0: 2e44 6174 6146 7261 6d65 0a20 2020 2020  .DataFrame.     ",
            "+000166e0: 2020 2054 6865 2072 6574 7572 6e65 6420     The returned ",
            "+000166f0: 6469 6374 2d6c 696b 6520 6f62 6a65 6374  dict-like object",
            "+00016700: 2061 6c77 6179 7320 636f 6e74 6169 6e73   always contains",
            "+00016710: 2074 6865 206b 6579 732f 636f 6c75 6d6e   the keys/column",
            "+00016720: 733a 0a0a 2020 2020 2020 2020 2a20 695f  s:..        * i_",
            "+00016730: 7363 202d 2073 686f 7274 2063 6972 6375  sc - short circu",
            "+00016740: 6974 2063 7572 7265 6e74 2069 6e20 616d  it current in am",
            "+00016750: 7065 7265 732e 0a20 2020 2020 2020 202a  peres..        *",
            "+00016760: 2076 5f6f 6320 2d20 6f70 656e 2063 6972   v_oc - open cir",
            "+00016770: 6375 6974 2076 6f6c 7461 6765 2069 6e20  cuit voltage in ",
            "+00016780: 766f 6c74 732e 0a20 2020 2020 2020 202a  volts..        *",
            "+00016790: 2069 5f6d 7020 2d20 6375 7272 656e 7420   i_mp - current ",
            "+000167a0: 6174 206d 6178 696d 756d 2070 6f77 6572  at maximum power",
            "+000167b0: 2070 6f69 6e74 2069 6e20 616d 7065 7265   point in ampere",
            "+000167c0: 732e 0a20 2020 2020 2020 202a 2076 5f6d  s..        * v_m",
            "+000167d0: 7020 2d20 766f 6c74 6167 6520 6174 206d  p - voltage at m",
            "+000167e0: 6178 696d 756d 2070 6f77 6572 2070 6f69  aximum power poi",
            "+000167f0: 6e74 2069 6e20 766f 6c74 732e 0a20 2020  nt in volts..   ",
            "+00016800: 2020 2020 202a 2070 5f6d 7020 2d20 706f       * p_mp - po",
            "+00016810: 7765 7220 6174 206d 6178 696d 756d 2070  wer at maximum p",
            "+00016820: 6f77 6572 2070 6f69 6e74 2069 6e20 7761  ower point in wa",
            "+00016830: 7474 732e 0a20 2020 2020 2020 202a 2069  tts..        * i",
            "+00016840: 5f78 202d 2063 7572 7265 6e74 2c20 696e  _x - current, in",
            "+00016850: 2061 6d70 6572 6573 2c20 6174 2060 6076   amperes, at ``v",
            "+00016860: 203d 2030 2e35 2a76 5f6f 6360 602e 0a20   = 0.5*v_oc``.. ",
            "+00016870: 2020 2020 2020 202a 2069 5f78 7820 2d20         * i_xx - ",
            "+00016880: 6375 7272 656e 742c 2069 6e20 616d 7065  current, in ampe",
            "+00016890: 7265 732c 2061 7420 6060 7620 3d20 302e  res, at ``v = 0.",
            "+000168a0: 352a 2876 5f6f 632b 765f 6d70 2960 602e  5*(v_oc+v_mp)``.",
            "+000168b0: 0a0a 2020 2020 2020 2020 4120 6469 6374  ..        A dict",
            "+000168c0: 2069 7320 7265 7475 726e 6564 2077 6865   is returned whe",
            "+000168d0: 6e20 7468 6520 696e 7075 7420 7061 7261  n the input para",
            "+000168e0: 6d65 7465 7273 2061 7265 2073 6361 6c61  meters are scala",
            "+000168f0: 7273 2e0a 0a20 2020 2053 6565 2061 6c73  rs...    See als",
            "+00016900: 6f0a 2020 2020 2d2d 2d2d 2d2d 2d2d 0a20  o.    --------. ",
            "+00016910: 2020 2063 616c 6370 6172 616d 735f 6465     calcparams_de",
            "+00016920: 736f 746f 0a20 2020 2063 616c 6370 6172  soto.    calcpar",
            "+00016930: 616d 735f 6365 630a 2020 2020 6361 6c63  ams_cec.    calc",
            "+00016940: 7061 7261 6d73 5f70 7673 7973 740a 2020  params_pvsyst.  ",
            "+00016950: 2020 7361 706d 0a20 2020 2070 766c 6962    sapm.    pvlib",
            "+00016960: 2e73 696e 676c 6564 696f 6465 2e62 6973  .singlediode.bis",
            "+00016970: 686f 7038 380a 0a20 2020 204e 6f74 6573  hop88..    Notes",
            "+00016980: 0a20 2020 202d 2d2d 2d2d 0a20 2020 2049  .    -----.    I",
            "+00016990: 6620 7468 6520 6d65 7468 6f64 2069 7320  f the method is ",
            "+000169a0: 6060 276c 616d 6265 7274 7727 6060 2074  ``'lambertw'`` t",
            "+000169b0: 6865 6e20 7468 6520 736f 6c75 7469 6f6e  hen the solution",
            "+000169c0: 2065 6d70 6c6f 7965 6420 746f 2073 6f6c   employed to sol",
            "+000169d0: 7665 2074 6865 0a20 2020 2069 6d70 6c69  ve the.    impli",
            "+000169e0: 6369 7420 6469 6f64 6520 6571 7561 7469  cit diode equati",
            "+000169f0: 6f6e 2075 7469 6c69 7a65 7320 7468 6520  on utilizes the ",
            "+00016a00: 4c61 6d62 6572 7420 5720 6675 6e63 7469  Lambert W functi",
            "+00016a10: 6f6e 2074 6f20 6f62 7461 696e 2061 6e0a  on to obtain an.",
            "+00016a20: 2020 2020 6578 706c 6963 6974 2066 756e      explicit fun",
            "+00016a30: 6374 696f 6e20 6f66 203a 6d61 7468 3a60  ction of :math:`",
            "+00016a40: 563d 6628 4929 6020 616e 6420 3a6d 6174  V=f(I)` and :mat",
            "+00016a50: 683a 6049 3d66 2856 2960 2061 7320 7368  h:`I=f(V)` as sh",
            "+00016a60: 6f77 6e20 696e 205b 325d 5f2e 0a0a 2020  own in [2]_...  ",
            "+00016a70: 2020 4966 2074 6865 206d 6574 686f 6420    If the method ",
            "+00016a80: 6973 2060 6027 6e65 7774 6f6e 2760 6020  is ``'newton'`` ",
            "+00016a90: 7468 656e 2074 6865 2072 6f6f 742d 6669  then the root-fi",
            "+00016aa0: 6e64 696e 6720 4e65 7774 6f6e 2d52 6170  nding Newton-Rap",
            "+00016ab0: 6873 6f6e 206d 6574 686f 640a 2020 2020  hson method.    ",
            "+00016ac0: 6973 2075 7365 642e 2049 7420 7368 6f75  is used. It shou",
            "+00016ad0: 6c64 2062 6520 7361 6665 2066 6f72 2077  ld be safe for w",
            "+00016ae0: 656c 6c20 6265 6861 7665 6420 4956 2d63  ell behaved IV-c",
            "+00016af0: 7572 7665 732c 2062 7574 2074 6865 2060  urves, but the `",
            "+00016b00: 6027 6272 656e 7471 2760 600a 2020 2020  `'brentq'``.    ",
            "+00016b10: 6d65 7468 6f64 2069 7320 7265 636f 6d6d  method is recomm",
            "+00016b20: 656e 6465 6420 666f 7220 7265 6c69 6162  ended for reliab",
            "+00016b30: 696c 6974 792e 0a0a 2020 2020 4966 2074  ility...    If t",
            "+00016b40: 6865 206d 6574 686f 6420 6973 2060 6027  he method is ``'",
            "+00016b50: 6272 656e 7471 2760 6020 7468 656e 2042  brentq'`` then B",
            "+00016b60: 7265 6e74 2773 2062 6973 6563 7469 6f6e  rent's bisection",
            "+00016b70: 2073 6561 7263 6820 6d65 7468 6f64 2069   search method i",
            "+00016b80: 7320 7573 6564 0a20 2020 2074 6861 7420  s used.    that ",
            "+00016b90: 6775 6172 616e 7465 6573 2063 6f6e 7665  guarantees conve",
            "+00016ba0: 7267 656e 6365 2062 7920 626f 756e 6469  rgence by boundi",
            "+00016bb0: 6e67 2074 6865 2076 6f6c 7461 6765 2062  ng the voltage b",
            "+00016bc0: 6574 7765 656e 207a 6572 6f20 616e 640a  etween zero and.",
            "+00016bd0: 2020 2020 6f70 656e 2d63 6972 6375 6974      open-circuit",
            "+00016be0: 2e0a 0a20 2020 2052 6566 6572 656e 6365  ...    Reference",
            "+00016bf0: 730a 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d  s.    ----------",
            "+00016c00: 0a20 2020 202e 2e20 5b31 5d20 532e 522e  .    .. [1] S.R.",
            "+00016c10: 2057 656e 6861 6d2c 204d 2e41 2e20 4772   Wenham, M.A. Gr",
            "+00016c20: 6565 6e2c 204d 2e45 2e20 5761 7474 2c20  een, M.E. Watt, ",
            "+00016c30: 2241 7070 6c69 6564 2050 686f 746f 766f  \"Applied Photovo",
            "+00016c40: 6c74 6169 6373 2220 4953 424e 0a20 2020  ltaics\" ISBN.   ",
            "+00016c50: 2020 2020 3020 3836 3735 3820 3930 3920      0 86758 909 ",
            "+00016c60: 340a 0a20 2020 202e 2e20 5b32 5d20 412e  4..    .. [2] A.",
            "+00016c70: 204a 6169 6e2c 2041 2e20 4b61 706f 6f72   Jain, A. Kapoor",
            "+00016c80: 2c20 2245 7861 6374 2061 6e61 6c79 7469  , \"Exact analyti",
            "+00016c90: 6361 6c20 736f 6c75 7469 6f6e 7320 6f66  cal solutions of",
            "+00016ca0: 2074 6865 0a20 2020 2020 2020 7061 7261   the.       para",
            "+00016cb0: 6d65 7465 7273 206f 6620 7265 616c 2073  meters of real s",
            "+00016cc0: 6f6c 6172 2063 656c 6c73 2075 7369 6e67  olar cells using",
            "+00016cd0: 204c 616d 6265 7274 2057 2d66 756e 6374   Lambert W-funct",
            "+00016ce0: 696f 6e22 2c20 536f 6c61 720a 2020 2020  ion\", Solar.    ",
            "+00016cf0: 2020 2045 6e65 7267 7920 4d61 7465 7269     Energy Materi",
            "+00016d00: 616c 7320 616e 6420 536f 6c61 7220 4365  als and Solar Ce",
            "+00016d10: 6c6c 732c 2038 3120 2832 3030 3429 2032  lls, 81 (2004) 2",
            "+00016d20: 3639 2d32 3737 2e0a 0a20 2020 202e 2e20  69-277...    .. ",
            "+00016d30: 5b33 5d20 442e 204b 696e 6720 6574 2061  [3] D. King et a",
            "+00016d40: 6c2c 2022 5361 6e64 6961 2050 686f 746f  l, \"Sandia Photo",
            "+00016d50: 766f 6c74 6169 6320 4172 7261 7920 5065  voltaic Array Pe",
            "+00016d60: 7266 6f72 6d61 6e63 6520 4d6f 6465 6c22  rformance Model\"",
            "+00016d70: 2c0a 2020 2020 2020 2053 414e 4432 3030  ,.       SAND200",
            "+00016d80: 342d 3335 3335 2c20 5361 6e64 6961 204e  4-3535, Sandia N",
            "+00016d90: 6174 696f 6e61 6c20 4c61 626f 7261 746f  ational Laborato",
            "+00016da0: 7269 6573 2c20 416c 6275 7175 6572 7175  ries, Albuquerqu",
            "+00016db0: 652c 204e 4d0a 0a20 2020 202e 2e20 5b34  e, NM..    .. [4",
            "+00016dc0: 5d20 2243 6f6d 7075 7465 7220 7369 6d75  ] \"Computer simu",
            "+00016dd0: 6c61 7469 6f6e 206f 6620 7468 6520 6566  lation of the ef",
            "+00016de0: 6665 6374 7320 6f66 2065 6c65 6374 7269  fects of electri",
            "+00016df0: 6361 6c20 6d69 736d 6174 6368 6573 2069  cal mismatches i",
            "+00016e00: 6e0a 2020 2020 2020 2070 686f 746f 766f  n.       photovo",
            "+00016e10: 6c74 6169 6320 6365 6c6c 2069 6e74 6572  ltaic cell inter",
            "+00016e20: 636f 6e6e 6563 7469 6f6e 2063 6972 6375  connection circu",
            "+00016e30: 6974 7322 204a 5720 4269 7368 6f70 2c20  its\" JW Bishop, ",
            "+00016e40: 536f 6c61 7220 4365 6c6c 2028 3139 3838  Solar Cell (1988",
            "+00016e50: 290a 2020 2020 2020 2068 7474 7073 3a2f  ).       https:/",
            "+00016e60: 2f64 6f69 2e6f 7267 2f31 302e 3130 3136  /doi.org/10.1016",
            "+00016e70: 2f30 3337 392d 3637 3837 2838 3829 3930  /0379-6787(88)90",
            "+00016e80: 3035 392d 320a 2020 2020 2222 220a 2020  059-2.    \"\"\".  ",
            "+00016e90: 2020 6172 6773 203d 2028 7068 6f74 6f63    args = (photoc",
            "+00016ea0: 7572 7265 6e74 2c20 7361 7475 7261 7469  urrent, saturati",
            "+00016eb0: 6f6e 5f63 7572 7265 6e74 2c20 7265 7369  on_current, resi",
            "+00016ec0: 7374 616e 6365 5f73 6572 6965 732c 0a20  stance_series,. ",
            "+00016ed0: 2020 2020 2020 2020 2020 2072 6573 6973             resis",
            "+00016ee0: 7461 6e63 655f 7368 756e 742c 206e 4e73  tance_shunt, nNs",
            "+00016ef0: 5674 6829 2020 2320 636f 6c6c 6563 7420  Vth)  # collect ",
            "+00016f00: 6172 6773 0a20 2020 2023 2043 616c 6375  args.    # Calcu",
            "+00016f10: 6c61 7465 2070 6f69 6e74 7320 6f6e 2074  late points on t",
            "+00016f20: 6865 2049 5620 6375 7276 6520 7573 696e  he IV curve usin",
            "+00016f30: 6720 7468 6520 4c61 6d62 6572 7457 2073  g the LambertW s",
            "+00016f40: 6f6c 7574 696f 6e20 746f 2074 6865 0a20  olution to the. ",
            "+00016f50: 2020 2023 2073 696e 676c 6520 6469 6f64     # single diod",
            "+00016f60: 6520 6571 7561 7469 6f6e 0a20 2020 2069  e equation.    i",
            "+00016f70: 6620 6d65 7468 6f64 2e6c 6f77 6572 2829  f method.lower()",
            "+00016f80: 203d 3d20 276c 616d 6265 7274 7727 3a0a   == 'lambertw':.",
            "+00016f90: 2020 2020 2020 2020 6f75 7420 3d20 5f73          out = _s",
            "+00016fa0: 696e 676c 6564 696f 6465 2e5f 6c61 6d62  inglediode._lamb",
            "+00016fb0: 6572 7477 282a 6172 6773 290a 2020 2020  ertw(*args).    ",
            "+00016fc0: 2020 2020 706f 696e 7473 203d 206f 7574      points = out",
            "+00016fd0: 5b3a 375d 0a20 2020 2065 6c73 653a 0a20  [:7].    else:. ",
            "+00016fe0: 2020 2020 2020 2023 2043 616c 6375 6c61         # Calcula",
            "+00016ff0: 7465 2070 6f69 6e74 7320 6f6e 2074 6865  te points on the",
            "+00017000: 2049 5620 6375 7276 6520 7573 696e 6720   IV curve using ",
            "+00017010: 6569 7468 6572 2027 6e65 7774 6f6e 2720  either 'newton' ",
            "+00017020: 6f72 2027 6272 656e 7471 270a 2020 2020  or 'brentq'.    ",
            "+00017030: 2020 2020 2320 6d65 7468 6f64 732e 2056      # methods. V",
            "+00017040: 6f6c 7461 6765 7320 6172 6520 6465 7465  oltages are dete",
            "+00017050: 726d 696e 6564 2062 7920 6669 7273 7420  rmined by first ",
            "+00017060: 736f 6c76 696e 6720 7468 6520 7369 6e67  solving the sing",
            "+00017070: 6c65 2064 696f 6465 0a20 2020 2020 2020  le diode.       ",
            "+00017080: 2023 2065 7175 6174 696f 6e20 666f 7220   # equation for ",
            "+00017090: 7468 6520 6469 6f64 6520 766f 6c74 6167  the diode voltag",
            "+000170a0: 6520 565f 6420 7468 656e 2062 6163 6b69  e V_d then backi",
            "+000170b0: 6e67 206f 7574 2076 6f6c 7461 6765 0a20  ng out voltage. ",
            "+000170c0: 2020 2020 2020 2076 5f6f 6320 3d20 5f73         v_oc = _s",
            "+000170d0: 696e 676c 6564 696f 6465 2e62 6973 686f  inglediode.bisho",
            "+000170e0: 7038 385f 765f 6672 6f6d 5f69 280a 2020  p88_v_from_i(.  ",
            "+000170f0: 2020 2020 2020 2020 2020 302e 302c 202a            0.0, *",
            "+00017100: 6172 6773 2c20 6d65 7468 6f64 3d6d 6574  args, method=met",
            "+00017110: 686f 642e 6c6f 7765 7228 290a 2020 2020  hod.lower().    ",
            "+00017120: 2020 2020 290a 2020 2020 2020 2020 695f      ).        i_",
            "+00017130: 6d70 2c20 765f 6d70 2c20 705f 6d70 203d  mp, v_mp, p_mp =",
            "+00017140: 205f 7369 6e67 6c65 6469 6f64 652e 6269   _singlediode.bi",
            "+00017150: 7368 6f70 3838 5f6d 7070 280a 2020 2020  shop88_mpp(.    ",
            "+00017160: 2020 2020 2020 2020 2a61 7267 732c 206d          *args, m",
            "+00017170: 6574 686f 643d 6d65 7468 6f64 2e6c 6f77  ethod=method.low",
            "+00017180: 6572 2829 0a20 2020 2020 2020 2029 0a20  er().        ). ",
            "+00017190: 2020 2020 2020 2069 5f73 6320 3d20 5f73         i_sc = _s",
            "+000171a0: 696e 676c 6564 696f 6465 2e62 6973 686f  inglediode.bisho",
            "+000171b0: 7038 385f 695f 6672 6f6d 5f76 280a 2020  p88_i_from_v(.  ",
            "+000171c0: 2020 2020 2020 2020 2020 302e 302c 202a            0.0, *",
            "+000171d0: 6172 6773 2c20 6d65 7468 6f64 3d6d 6574  args, method=met",
            "+000171e0: 686f 642e 6c6f 7765 7228 290a 2020 2020  hod.lower().    ",
            "+000171f0: 2020 2020 290a 2020 2020 2020 2020 695f      ).        i_",
            "+00017200: 7820 3d20 5f73 696e 676c 6564 696f 6465  x = _singlediode",
            "+00017210: 2e62 6973 686f 7038 385f 695f 6672 6f6d  .bishop88_i_from",
            "+00017220: 5f76 280a 2020 2020 2020 2020 2020 2020  _v(.            ",
            "+00017230: 765f 6f63 202f 2032 2e30 2c20 2a61 7267  v_oc / 2.0, *arg",
            "+00017240: 732c 206d 6574 686f 643d 6d65 7468 6f64  s, method=method",
            "+00017250: 2e6c 6f77 6572 2829 0a20 2020 2020 2020  .lower().       ",
            "+00017260: 2029 0a20 2020 2020 2020 2069 5f78 7820   ).        i_xx ",
            "+00017270: 3d20 5f73 696e 676c 6564 696f 6465 2e62  = _singlediode.b",
            "+00017280: 6973 686f 7038 385f 695f 6672 6f6d 5f76  ishop88_i_from_v",
            "+00017290: 280a 2020 2020 2020 2020 2020 2020 2876  (.            (v",
            "+000172a0: 5f6f 6320 2b20 765f 6d70 2920 2f20 322e  _oc + v_mp) / 2.",
            "+000172b0: 302c 202a 6172 6773 2c20 6d65 7468 6f64  0, *args, method",
            "+000172c0: 3d6d 6574 686f 642e 6c6f 7765 7228 290a  =method.lower().",
            "+000172d0: 2020 2020 2020 2020 290a 2020 2020 2020          ).      ",
            "+000172e0: 2020 706f 696e 7473 203d 2069 5f73 632c    points = i_sc,",
            "+000172f0: 2076 5f6f 632c 2069 5f6d 702c 2076 5f6d   v_oc, i_mp, v_m",
            "+00017300: 702c 2070 5f6d 702c 2069 5f78 2c20 695f  p, p_mp, i_x, i_",
            "+00017310: 7878 0a0a 2020 2020 636f 6c75 6d6e 7320  xx..    columns ",
            "+00017320: 3d20 2827 695f 7363 272c 2027 765f 6f63  = ('i_sc', 'v_oc",
            "+00017330: 272c 2027 695f 6d70 272c 2027 765f 6d70  ', 'i_mp', 'v_mp",
            "+00017340: 272c 2027 705f 6d70 272c 2027 695f 7827  ', 'p_mp', 'i_x'",
            "+00017350: 2c20 2769 5f78 7827 290a 0a20 2020 2069  , 'i_xx')..    i",
            "+00017360: 6620 616c 6c28 6d61 7028 6e70 2e69 7373  f all(map(np.iss",
            "+00017370: 6361 6c61 722c 2061 7267 7329 293a 0a20  calar, args)):. ",
            "+00017380: 2020 2020 2020 206f 7574 203d 207b 633a         out = {c:",
            "+00017390: 2070 2066 6f72 2063 2c20 7020 696e 207a   p for c, p in z",
            "+000173a0: 6970 2863 6f6c 756d 6e73 2c20 706f 696e  ip(columns, poin",
            "+000173b0: 7473 297d 0a20 2020 2020 2020 2072 6574  ts)}.        ret",
            "+000173c0: 7572 6e20 6f75 740a 0a20 2020 2070 6f69  urn out..    poi",
            "+000173d0: 6e74 7320 3d20 6e70 2e61 746c 6561 7374  nts = np.atleast",
            "+000173e0: 5f31 6428 2a70 6f69 6e74 7329 2020 2320  _1d(*points)  # ",
            "+000173f0: 636f 6e76 6572 7420 7363 616c 6172 7320  convert scalars ",
            "+00017400: 746f 2031 642d 6172 7261 7973 0a20 2020  to 1d-arrays.   ",
            "+00017410: 2070 6f69 6e74 7320 3d20 6e70 2e76 7374   points = np.vst",
            "+00017420: 6163 6b28 706f 696e 7473 292e 5420 2023  ack(points).T  #",
            "+00017430: 2063 6f6c 6c65 6374 2072 6f77 7320 696e   collect rows in",
            "+00017440: 746f 2044 6174 6146 7261 6d65 2063 6f6c  to DataFrame col",
            "+00017450: 756d 6e73 0a0a 2020 2020 2320 7361 7665  umns..    # save",
            "+00017460: 2074 6865 2066 6972 7374 2061 7661 696c   the first avail",
            "+00017470: 6162 6c65 2070 642e 5365 7269 6573 2069  able pd.Series i",
            "+00017480: 6e64 6578 2c20 6f74 6865 7277 6973 6520  ndex, otherwise ",
            "+00017490: 7365 7420 746f 204e 6f6e 650a 2020 2020  set to None.    ",
            "+000174a0: 696e 6465 7820 3d20 6e65 7874 2828 612e  index = next((a.",
            "+000174b0: 696e 6465 7820 666f 7220 6120 696e 2061  index for a in a",
            "+000174c0: 7267 7320 6966 2069 7369 6e73 7461 6e63  rgs if isinstanc",
            "+000174d0: 6528 612c 2070 642e 5365 7269 6573 2929  e(a, pd.Series))",
            "+000174e0: 2c20 4e6f 6e65 290a 0a20 2020 206f 7574  , None)..    out",
            "+000174f0: 203d 2070 642e 4461 7461 4672 616d 6528   = pd.DataFrame(",
            "+00017500: 706f 696e 7473 2c20 636f 6c75 6d6e 733d  points, columns=",
            "+00017510: 636f 6c75 6d6e 732c 2069 6e64 6578 3d69  columns, index=i",
            "+00017520: 6e64 6578 290a 0a20 2020 2072 6574 7572  ndex)..    retur",
            "+00017530: 6e20 6f75 740a 0a0a 6465 6620 6d61 785f  n out...def max_",
            "+00017540: 706f 7765 725f 706f 696e 7428 7068 6f74  power_point(phot",
            "+00017550: 6f63 7572 7265 6e74 2c20 7361 7475 7261  ocurrent, satura",
            "+00017560: 7469 6f6e 5f63 7572 7265 6e74 2c20 7265  tion_current, re",
            "+00017570: 7369 7374 616e 6365 5f73 6572 6965 732c  sistance_series,",
            "+00017580: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+00017590: 2020 2020 2072 6573 6973 7461 6e63 655f       resistance_",
            "+000175a0: 7368 756e 742c 206e 4e73 5674 682c 2064  shunt, nNsVth, d",
            "+000175b0: 326d 7574 6175 3d30 2c20 4e73 5662 693d  2mutau=0, NsVbi=",
            "+000175c0: 6e70 2e69 6e66 2c0a 2020 2020 2020 2020  np.inf,.        ",
            "+000175d0: 2020 2020 2020 2020 2020 2020 6d65 7468              meth",
            "+000175e0: 6f64 3d27 6272 656e 7471 2729 3a0a 2020  od='brentq'):.  ",
            "+000175f0: 2020 2222 220a 2020 2020 4769 7665 6e20    \"\"\".    Given ",
            "+00017600: 7468 6520 7369 6e67 6c65 2064 696f 6465  the single diode",
            "+00017610: 2065 7175 6174 696f 6e20 636f 6566 6669   equation coeffi",
            "+00017620: 6369 656e 7473 2c20 6361 6c63 756c 6174  cients, calculat",
            "+00017630: 6573 2074 6865 206d 6178 696d 756d 2070  es the maximum p",
            "+00017640: 6f77 6572 0a20 2020 2070 6f69 6e74 2028  ower.    point (",
            "+00017650: 4d50 5029 2e0a 0a20 2020 2050 6172 616d  MPP)...    Param",
            "+00017660: 6574 6572 730a 2020 2020 2d2d 2d2d 2d2d  eters.    ------",
            "+00017670: 2d2d 2d2d 0a20 2020 2070 686f 746f 6375  ----.    photocu",
            "+00017680: 7272 656e 7420 3a20 6e75 6d65 7269 630a  rrent : numeric.",
            "+00017690: 2020 2020 2020 2020 7068 6f74 6f2d 6765          photo-ge",
            "+000176a0: 6e65 7261 7465 6420 6375 7272 656e 7420  nerated current ",
            "+000176b0: 5b41 5d0a 2020 2020 7361 7475 7261 7469  [A].    saturati",
            "+000176c0: 6f6e 5f63 7572 7265 6e74 203a 206e 756d  on_current : num",
            "+000176d0: 6572 6963 0a20 2020 2020 2020 2064 696f  eric.        dio",
            "+000176e0: 6465 2072 6576 6572 7365 2073 6174 7572  de reverse satur",
            "+000176f0: 6174 696f 6e20 6375 7272 656e 7420 5b41  ation current [A",
            "+00017700: 5d0a 2020 2020 7265 7369 7374 616e 6365  ].    resistance",
            "+00017710: 5f73 6572 6965 7320 3a20 6e75 6d65 7269  _series : numeri",
            "+00017720: 630a 2020 2020 2020 2020 7365 7269 6573  c.        series",
            "+00017730: 2072 6573 6974 616e 6365 205b 6f68 6d73   resitance [ohms",
            "+00017740: 5d0a 2020 2020 7265 7369 7374 616e 6365  ].    resistance",
            "+00017750: 5f73 6875 6e74 203a 206e 756d 6572 6963  _shunt : numeric",
            "+00017760: 0a20 2020 2020 2020 2073 6875 6e74 2072  .        shunt r",
            "+00017770: 6573 6974 616e 6365 205b 6f68 6d73 5d0a  esitance [ohms].",
            "+00017780: 2020 2020 6e4e 7356 7468 203a 206e 756d      nNsVth : num",
            "+00017790: 6572 6963 0a20 2020 2020 2020 2070 726f  eric.        pro",
            "+000177a0: 6475 6374 206f 6620 7468 6572 6d61 6c20  duct of thermal ",
            "+000177b0: 766f 6c74 6167 6520 6060 5674 6860 6020  voltage ``Vth`` ",
            "+000177c0: 5b56 5d2c 2064 696f 6465 2069 6465 616c  [V], diode ideal",
            "+000177d0: 6974 7920 6661 6374 6f72 2060 606e 6060  ity factor ``n``",
            "+000177e0: 2c0a 2020 2020 2020 2020 616e 6420 6e75  ,.        and nu",
            "+000177f0: 6d62 6572 206f 6620 7365 7269 6365 7320  mber of serices ",
            "+00017800: 6365 6c6c 7320 6060 4e73 6060 0a20 2020  cells ``Ns``.   ",
            "+00017810: 2064 326d 7574 6175 203a 206e 756d 6572   d2mutau : numer",
            "+00017820: 6963 2c20 6465 6661 756c 7420 300a 2020  ic, default 0.  ",
            "+00017830: 2020 2020 2020 5056 7379 7374 2070 6172        PVsyst par",
            "+00017840: 616d 6574 6572 2066 6f72 2063 6164 6d69  ameter for cadmi",
            "+00017850: 756d 2d74 656c 6c75 7269 6465 2028 4364  um-telluride (Cd",
            "+00017860: 5465 2920 616e 6420 616d 6f72 7068 6f75  Te) and amorphou",
            "+00017870: 732d 7369 6c69 636f 6e0a 2020 2020 2020  s-silicon.      ",
            "+00017880: 2020 2861 2d53 6929 206d 6f64 756c 6573    (a-Si) modules",
            "+00017890: 2074 6861 7420 6163 636f 756e 7473 2066   that accounts f",
            "+000178a0: 6f72 2072 6563 6f6d 6269 6e61 7469 6f6e  or recombination",
            "+000178b0: 2063 7572 7265 6e74 2069 6e20 7468 650a   current in the.",
            "+000178c0: 2020 2020 2020 2020 696e 7472 696e 7369          intrinsi",
            "+000178d0: 6320 6c61 7965 722e 2054 6865 2076 616c  c layer. The val",
            "+000178e0: 7565 2069 7320 7468 6520 7261 7469 6f20  ue is the ratio ",
            "+000178f0: 6f66 2069 6e74 7269 6e73 6963 206c 6179  of intrinsic lay",
            "+00017900: 6572 2074 6869 636b 6e65 7373 0a20 2020  er thickness.   ",
            "+00017910: 2020 2020 2073 7175 6172 6564 203a 6d61       squared :ma",
            "+00017920: 7468 3a60 645e 3260 2074 6f20 7468 6520  th:`d^2` to the ",
            "+00017930: 6469 6666 7573 696f 6e20 6c65 6e67 7468  diffusion length",
            "+00017940: 206f 6620 6368 6172 6765 2063 6172 7269   of charge carri",
            "+00017950: 6572 730a 2020 2020 2020 2020 3a6d 6174  ers.        :mat",
            "+00017960: 683a 605c 5c6d 7520 5c5c 7461 7560 2e20  h:`\\\\mu \\\\tau`. ",
            "+00017970: 5b56 5d0a 2020 2020 4e73 5662 6920 3a20  [V].    NsVbi : ",
            "+00017980: 6e75 6d65 7269 632c 2064 6566 6175 6c74  numeric, default",
            "+00017990: 206e 702e 696e 660a 2020 2020 2020 2020   np.inf.        ",
            "+000179a0: 5056 7379 7374 2070 6172 616d 6574 6572  PVsyst parameter",
            "+000179b0: 2066 6f72 2063 6164 6d69 756d 2d74 656c   for cadmium-tel",
            "+000179c0: 6c75 7269 6465 2028 4364 5465 2920 616e  luride (CdTe) an",
            "+000179d0: 6420 616d 6f72 7068 6f75 732d 7369 6c69  d amorphous-sili",
            "+000179e0: 636f 6e0a 2020 2020 2020 2020 2861 2d53  con.        (a-S",
            "+000179f0: 6929 206d 6f64 756c 6573 2074 6861 7420  i) modules that ",
            "+00017a00: 6973 2074 6865 2070 726f 6475 6374 206f  is the product o",
            "+00017a10: 6620 7468 6520 5056 206d 6f64 756c 6520  f the PV module ",
            "+00017a20: 6e75 6d62 6572 206f 6620 7365 7269 6573  number of series",
            "+00017a30: 0a20 2020 2020 2020 2063 656c 6c73 2060  .        cells `",
            "+00017a40: 604e 7360 6020 616e 6420 7468 6520 6275  `Ns`` and the bu",
            "+00017a50: 696c 7469 6e20 766f 6c74 6167 6520 6060  iltin voltage ``",
            "+00017a60: 5662 6960 6020 6f66 2074 6865 2069 6e74  Vbi`` of the int",
            "+00017a70: 7269 6e73 6963 206c 6179 6572 2e0a 2020  rinsic layer..  ",
            "+00017a80: 2020 2020 2020 5b56 5d2e 0a20 2020 206d        [V]..    m",
            "+00017a90: 6574 686f 6420 3a20 7374 720a 2020 2020  ethod : str.    ",
            "+00017aa0: 2020 2020 6569 7468 6572 2060 6027 6e65      either ``'ne",
            "+00017ab0: 7774 6f6e 2760 6020 6f72 2060 6027 6272  wton'`` or ``'br",
            "+00017ac0: 656e 7471 2760 600a 0a20 2020 2052 6574  entq'``..    Ret",
            "+00017ad0: 7572 6e73 0a20 2020 202d 2d2d 2d2d 2d2d  urns.    -------",
            "+00017ae0: 0a20 2020 204f 7264 6572 6564 4469 6374  .    OrderedDict",
            "+00017af0: 206f 7220 7061 6e64 6173 2e44 6174 6146   or pandas.DataF",
            "+00017b00: 7261 6d65 0a20 2020 2020 2020 2060 6028  rame.        ``(",
            "+00017b10: 695f 6d70 2c20 765f 6d70 2c20 705f 6d70  i_mp, v_mp, p_mp",
            "+00017b20: 2960 600a 0a20 2020 204e 6f74 6573 0a20  )``..    Notes. ",
            "+00017b30: 2020 202d 2d2d 2d2d 0a20 2020 2055 7365     -----.    Use",
            "+00017b40: 2074 6869 7320 6675 6e63 7469 6f6e 2077   this function w",
            "+00017b50: 6865 6e20 796f 7520 6f6e 6c79 2077 616e  hen you only wan",
            "+00017b60: 7420 746f 2066 696e 6420 7468 6520 6d61  t to find the ma",
            "+00017b70: 7869 6d75 6d20 706f 7765 7220 706f 696e  ximum power poin",
            "+00017b80: 742e 2055 7365 0a20 2020 203a 6675 6e63  t. Use.    :func",
            "+00017b90: 3a60 7369 6e67 6c65 6469 6f64 6560 2077  :`singlediode` w",
            "+00017ba0: 6865 6e20 796f 7520 6e65 6564 2074 6f20  hen you need to ",
            "+00017bb0: 6669 6e64 2061 6464 6974 696f 6e61 6c20  find additional ",
            "+00017bc0: 706f 696e 7473 206f 6e20 7468 6520 4956  points on the IV",
            "+00017bd0: 0a20 2020 2063 7572 7665 2e20 5468 6973  .    curve. This",
            "+00017be0: 2066 756e 6374 696f 6e20 7573 6573 2042   function uses B",
            "+00017bf0: 7265 6e74 2773 206d 6574 686f 6420 6279  rent's method by",
            "+00017c00: 2064 6566 6175 6c74 2062 6563 6175 7365   default because",
            "+00017c10: 2069 7420 6973 0a20 2020 2067 7561 7261   it is.    guara",
            "+00017c20: 6e74 6565 6420 746f 2063 6f6e 7665 7267  nteed to converg",
            "+00017c30: 652e 0a20 2020 2022 2222 0a20 2020 2069  e..    \"\"\".    i",
            "+00017c40: 5f6d 702c 2076 5f6d 702c 2070 5f6d 7020  _mp, v_mp, p_mp ",
            "+00017c50: 3d20 5f73 696e 676c 6564 696f 6465 2e62  = _singlediode.b",
            "+00017c60: 6973 686f 7038 385f 6d70 7028 0a20 2020  ishop88_mpp(.   ",
            "+00017c70: 2020 2020 2070 686f 746f 6375 7272 656e       photocurren",
            "+00017c80: 742c 2073 6174 7572 6174 696f 6e5f 6375  t, saturation_cu",
            "+00017c90: 7272 656e 742c 2072 6573 6973 7461 6e63  rrent, resistanc",
            "+00017ca0: 655f 7365 7269 6573 2c0a 2020 2020 2020  e_series,.      ",
            "+00017cb0: 2020 7265 7369 7374 616e 6365 5f73 6875    resistance_shu",
            "+00017cc0: 6e74 2c20 6e4e 7356 7468 2c20 6432 6d75  nt, nNsVth, d2mu",
            "+00017cd0: 7461 752c 204e 7356 6269 2c20 6d65 7468  tau, NsVbi, meth",
            "+00017ce0: 6f64 3d6d 6574 686f 642e 6c6f 7765 7228  od=method.lower(",
            "+00017cf0: 290a 2020 2020 290a 2020 2020 6966 2069  ).    ).    if i",
            "+00017d00: 7369 6e73 7461 6e63 6528 7068 6f74 6f63  sinstance(photoc",
            "+00017d10: 7572 7265 6e74 2c20 7064 2e53 6572 6965  urrent, pd.Serie",
            "+00017d20: 7329 3a0a 2020 2020 2020 2020 6976 7020  s):.        ivp ",
            "+00017d30: 3d20 7b27 695f 6d70 273a 2069 5f6d 702c  = {'i_mp': i_mp,",
            "+00017d40: 2027 765f 6d70 273a 2076 5f6d 702c 2027   'v_mp': v_mp, '",
            "+00017d50: 705f 6d70 273a 2070 5f6d 707d 0a20 2020  p_mp': p_mp}.   ",
            "+00017d60: 2020 2020 206f 7574 203d 2070 642e 4461       out = pd.Da",
            "+00017d70: 7461 4672 616d 6528 6976 702c 2069 6e64  taFrame(ivp, ind",
            "+00017d80: 6578 3d70 686f 746f 6375 7272 656e 742e  ex=photocurrent.",
            "+00017d90: 696e 6465 7829 0a20 2020 2065 6c73 653a  index).    else:",
            "+00017da0: 0a20 2020 2020 2020 206f 7574 203d 204f  .        out = O",
            "+00017db0: 7264 6572 6564 4469 6374 2829 0a20 2020  rderedDict().   ",
            "+00017dc0: 2020 2020 206f 7574 5b27 695f 6d70 275d       out['i_mp']",
            "+00017dd0: 203d 2069 5f6d 700a 2020 2020 2020 2020   = i_mp.        ",
            "+00017de0: 6f75 745b 2776 5f6d 7027 5d20 3d20 765f  out['v_mp'] = v_",
            "+00017df0: 6d70 0a20 2020 2020 2020 206f 7574 5b27  mp.        out['",
            "+00017e00: 705f 6d70 275d 203d 2070 5f6d 700a 2020  p_mp'] = p_mp.  ",
            "+00017e10: 2020 7265 7475 726e 206f 7574 0a0a 0a64    return out...d",
            "+00017e20: 6566 2076 5f66 726f 6d5f 6928 6375 7272  ef v_from_i(curr",
            "+00017e30: 656e 742c 2070 686f 746f 6375 7272 656e  ent, photocurren",
            "+00017e40: 742c 2073 6174 7572 6174 696f 6e5f 6375  t, saturation_cu",
            "+00017e50: 7272 656e 742c 2072 6573 6973 7461 6e63  rrent, resistanc",
            "+00017e60: 655f 7365 7269 6573 2c0a 2020 2020 2020  e_series,.      ",
            "+00017e70: 2020 2020 2020 2072 6573 6973 7461 6e63         resistanc",
            "+00017e80: 655f 7368 756e 742c 206e 4e73 5674 682c  e_shunt, nNsVth,",
            "+00017e90: 206d 6574 686f 643d 276c 616d 6265 7274   method='lambert",
            "+00017ea0: 7727 293a 0a20 2020 2027 2727 0a20 2020  w'):.    '''.   ",
            "+00017eb0: 2044 6576 6963 6520 766f 6c74 6167 6520   Device voltage ",
            "+00017ec0: 6174 2074 6865 2067 6976 656e 2064 6576  at the given dev",
            "+00017ed0: 6963 6520 6375 7272 656e 7420 666f 7220  ice current for ",
            "+00017ee0: 7468 6520 7369 6e67 6c65 2064 696f 6465  the single diode",
            "+00017ef0: 206d 6f64 656c 2e0a 0a20 2020 2055 7365   model...    Use",
            "+00017f00: 7320 7468 6520 7369 6e67 6c65 2064 696f  s the single dio",
            "+00017f10: 6465 206d 6f64 656c 2028 5344 4d29 2061  de model (SDM) a",
            "+00017f20: 7320 6465 7363 7269 6265 6420 696e 2c20  s described in, ",
            "+00017f30: 652e 672e 2c0a 2020 2020 4a61 696e 2061  e.g.,.    Jain a",
            "+00017f40: 6e64 204b 6170 6f6f 7220 3230 3034 205b  nd Kapoor 2004 [",
            "+00017f50: 315d 5f2e 0a20 2020 2054 6865 2073 6f6c  1]_..    The sol",
            "+00017f60: 7574 696f 6e20 6973 2070 6572 2045 7120  ution is per Eq ",
            "+00017f70: 3320 6f66 205b 315d 5f20 6578 6365 7074  3 of [1]_ except",
            "+00017f80: 2077 6865 6e20 7265 7369 7374 616e 6365   when resistance",
            "+00017f90: 5f73 6875 6e74 3d6e 756d 7079 2e69 6e66  _shunt=numpy.inf",
            "+00017fa0: 2c0a 2020 2020 696e 2077 6869 6368 2063  ,.    in which c",
            "+00017fb0: 6173 6520 7468 6520 6578 706c 6963 7420  ase the explict ",
            "+00017fc0: 736f 6c75 7469 6f6e 2066 6f72 2076 6f6c  solution for vol",
            "+00017fd0: 7461 6765 2069 7320 7573 6564 2e0a 2020  tage is used..  ",
            "+00017fe0: 2020 4964 6561 6c20 6465 7669 6365 2070    Ideal device p",
            "+00017ff0: 6172 616d 6574 6572 7320 6172 6520 7370  arameters are sp",
            "+00018000: 6563 6966 6965 6420 6279 2072 6573 6973  ecified by resis",
            "+00018010: 7461 6e63 655f 7368 756e 743d 6e70 2e69  tance_shunt=np.i",
            "+00018020: 6e66 2061 6e64 0a20 2020 2072 6573 6973  nf and.    resis",
            "+00018030: 7461 6e63 655f 7365 7269 6573 3d30 2e0a  tance_series=0..",
            "+00018040: 2020 2020 496e 7075 7473 2074 6f20 7468      Inputs to th",
            "+00018050: 6973 2066 756e 6374 696f 6e20 6361 6e20  is function can ",
            "+00018060: 696e 636c 7564 6520 7363 616c 6172 7320  include scalars ",
            "+00018070: 616e 6420 7061 6e64 6173 2e53 6572 6965  and pandas.Serie",
            "+00018080: 732c 2062 7574 2069 7420 6973 0a20 2020  s, but it is.   ",
            "+00018090: 2074 6865 2063 616c 6c65 7227 7320 7265   the caller's re",
            "+000180a0: 7370 6f6e 7369 6269 6c69 7479 2074 6f20  sponsibility to ",
            "+000180b0: 656e 7375 7265 2074 6861 7420 7468 6520  ensure that the ",
            "+000180c0: 6172 6775 6d65 6e74 7320 6172 6520 616c  arguments are al",
            "+000180d0: 6c20 666c 6f61 7436 340a 2020 2020 616e  l float64.    an",
            "+000180e0: 6420 7769 7468 696e 2074 6865 2070 726f  d within the pro",
            "+000180f0: 7065 7220 7261 6e67 6573 2e0a 0a20 2020  per ranges...   ",
            "+00018100: 202e 2e20 7665 7273 696f 6e63 6861 6e67   .. versionchang",
            "+00018110: 6564 3a3a 2030 2e31 302e 300a 2020 2020  ed:: 0.10.0.    ",
            "+00018120: 2020 2054 6865 2066 756e 6374 696f 6e27     The function'",
            "+00018130: 7320 6172 6775 6d65 6e74 7320 6861 7665  s arguments have",
            "+00018140: 2062 6565 6e20 7265 6f72 6465 7265 642e   been reordered.",
            "+00018150: 0a0a 2020 2020 5061 7261 6d65 7465 7273  ..    Parameters",
            "+00018160: 0a20 2020 202d 2d2d 2d2d 2d2d 2d2d 2d0a  .    ----------.",
            "+00018170: 2020 2020 6375 7272 656e 7420 3a20 6e75      current : nu",
            "+00018180: 6d65 7269 630a 2020 2020 2020 2020 5468  meric.        Th",
            "+00018190: 6520 6375 7272 656e 7420 696e 2061 6d70  e current in amp",
            "+000181a0: 6572 6573 2075 6e64 6572 2064 6573 6972  eres under desir",
            "+000181b0: 6564 2049 5620 6375 7276 6520 636f 6e64  ed IV curve cond",
            "+000181c0: 6974 696f 6e73 2e0a 0a20 2020 2070 686f  itions...    pho",
            "+000181d0: 746f 6375 7272 656e 7420 3a20 6e75 6d65  tocurrent : nume",
            "+000181e0: 7269 630a 2020 2020 2020 2020 4c69 6768  ric.        Ligh",
            "+000181f0: 742d 6765 6e65 7261 7465 6420 6375 7272  t-generated curr",
            "+00018200: 656e 7420 2870 686f 746f 6375 7272 656e  ent (photocurren",
            "+00018210: 7429 2069 6e20 616d 7065 7265 7320 756e  t) in amperes un",
            "+00018220: 6465 7220 6465 7369 7265 640a 2020 2020  der desired.    ",
            "+00018230: 2020 2020 4956 2063 7572 7665 2063 6f6e      IV curve con",
            "+00018240: 6469 7469 6f6e 732e 204f 6674 656e 2061  ditions. Often a",
            "+00018250: 6262 7265 7669 6174 6564 2060 6049 5f4c  bbreviated ``I_L",
            "+00018260: 6060 2e0a 2020 2020 2020 2020 3020 3c3d  ``..        0 <=",
            "+00018270: 2070 686f 746f 6375 7272 656e 740a 0a20   photocurrent.. ",
            "+00018280: 2020 2073 6174 7572 6174 696f 6e5f 6375     saturation_cu",
            "+00018290: 7272 656e 7420 3a20 6e75 6d65 7269 630a  rrent : numeric.",
            "+000182a0: 2020 2020 2020 2020 4469 6f64 6520 7361          Diode sa",
            "+000182b0: 7475 7261 7469 6f6e 2063 7572 7265 6e74  turation current",
            "+000182c0: 2069 6e20 616d 7065 7265 7320 756e 6465   in amperes unde",
            "+000182d0: 7220 6465 7369 7265 6420 4956 2063 7572  r desired IV cur",
            "+000182e0: 7665 0a20 2020 2020 2020 2063 6f6e 6469  ve.        condi",
            "+000182f0: 7469 6f6e 732e 204f 6674 656e 2061 6262  tions. Often abb",
            "+00018300: 7265 7669 6174 6564 2060 6049 5f30 6060  reviated ``I_0``",
            "+00018310: 2e0a 2020 2020 2020 2020 3020 3c20 7361  ..        0 < sa",
            "+00018320: 7475 7261 7469 6f6e 5f63 7572 7265 6e74  turation_current",
            "+00018330: 0a0a 2020 2020 7265 7369 7374 616e 6365  ..    resistance",
            "+00018340: 5f73 6572 6965 7320 3a20 6e75 6d65 7269  _series : numeri",
            "+00018350: 630a 2020 2020 2020 2020 5365 7269 6573  c.        Series",
            "+00018360: 2072 6573 6973 7461 6e63 6520 696e 206f   resistance in o",
            "+00018370: 686d 7320 756e 6465 7220 6465 7369 7265  hms under desire",
            "+00018380: 6420 4956 2063 7572 7665 2063 6f6e 6469  d IV curve condi",
            "+00018390: 7469 6f6e 732e 0a20 2020 2020 2020 204f  tions..        O",
            "+000183a0: 6674 656e 2061 6262 7265 7669 6174 6564  ften abbreviated",
            "+000183b0: 2060 6052 7360 602e 0a20 2020 2020 2020   ``Rs``..       ",
            "+000183c0: 2030 203c 3d20 7265 7369 7374 616e 6365   0 <= resistance",
            "+000183d0: 5f73 6572 6965 7320 3c20 6e75 6d70 792e  _series < numpy.",
            "+000183e0: 696e 660a 0a20 2020 2072 6573 6973 7461  inf..    resista",
            "+000183f0: 6e63 655f 7368 756e 7420 3a20 6e75 6d65  nce_shunt : nume",
            "+00018400: 7269 630a 2020 2020 2020 2020 5368 756e  ric.        Shun",
            "+00018410: 7420 7265 7369 7374 616e 6365 2069 6e20  t resistance in ",
            "+00018420: 6f68 6d73 2075 6e64 6572 2064 6573 6972  ohms under desir",
            "+00018430: 6564 2049 5620 6375 7276 6520 636f 6e64  ed IV curve cond",
            "+00018440: 6974 696f 6e73 2e0a 2020 2020 2020 2020  itions..        ",
            "+00018450: 4f66 7465 6e20 6162 6272 6576 6961 7465  Often abbreviate",
            "+00018460: 6420 6060 5273 6860 602e 0a20 2020 2020  d ``Rsh``..     ",
            "+00018470: 2020 2030 203c 2072 6573 6973 7461 6e63     0 < resistanc",
            "+00018480: 655f 7368 756e 7420 3c3d 206e 756d 7079  e_shunt <= numpy",
            "+00018490: 2e69 6e66 0a0a 2020 2020 6e4e 7356 7468  .inf..    nNsVth",
            "+000184a0: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "+000184b0: 2020 2054 6865 2070 726f 6475 6374 206f     The product o",
            "+000184c0: 6620 7468 7265 6520 636f 6d70 6f6e 656e  f three componen",
            "+000184d0: 7473 2e20 3129 2054 6865 2075 7375 616c  ts. 1) The usual",
            "+000184e0: 2064 696f 6465 2069 6465 616c 2066 6163   diode ideal fac",
            "+000184f0: 746f 720a 2020 2020 2020 2020 286e 292c  tor.        (n),",
            "+00018500: 2032 2920 7468 6520 6e75 6d62 6572 206f   2) the number o",
            "+00018510: 6620 6365 6c6c 7320 696e 2073 6572 6965  f cells in serie",
            "+00018520: 7320 284e 7329 2c20 616e 6420 3329 2074  s (Ns), and 3) t",
            "+00018530: 6865 2063 656c 6c0a 2020 2020 2020 2020  he cell.        ",
            "+00018540: 7468 6572 6d61 6c20 766f 6c74 6167 6520  thermal voltage ",
            "+00018550: 756e 6465 7220 7468 6520 6465 7369 7265  under the desire",
            "+00018560: 6420 4956 2063 7572 7665 2063 6f6e 6469  d IV curve condi",
            "+00018570: 7469 6f6e 7320 2856 7468 292e 2054 6865  tions (Vth). The",
            "+00018580: 0a20 2020 2020 2020 2074 6865 726d 616c  .        thermal",
            "+00018590: 2076 6f6c 7461 6765 206f 6620 7468 6520   voltage of the ",
            "+000185a0: 6365 6c6c 2028 696e 2076 6f6c 7473 2920  cell (in volts) ",
            "+000185b0: 6d61 7920 6265 2063 616c 6375 6c61 7465  may be calculate",
            "+000185c0: 6420 6173 0a20 2020 2020 2020 2060 606b  d as.        ``k",
            "+000185d0: 2a74 656d 705f 6365 6c6c 2f71 6060 2c20  *temp_cell/q``, ",
            "+000185e0: 7768 6572 6520 6b20 6973 2042 6f6c 747a  where k is Boltz",
            "+000185f0: 6d61 6e6e 2773 2063 6f6e 7374 616e 7420  mann's constant ",
            "+00018600: 284a 2f4b 292c 0a20 2020 2020 2020 2074  (J/K),.        t",
            "+00018610: 656d 705f 6365 6c6c 2069 7320 7468 6520  emp_cell is the ",
            "+00018620: 7465 6d70 6572 6174 7572 6520 6f66 2074  temperature of t",
            "+00018630: 6865 2070 2d6e 206a 756e 6374 696f 6e20  he p-n junction ",
            "+00018640: 696e 204b 656c 7669 6e2c 2061 6e64 0a20  in Kelvin, and. ",
            "+00018650: 2020 2020 2020 2071 2069 7320 7468 6520         q is the ",
            "+00018660: 6368 6172 6765 206f 6620 616e 2065 6c65  charge of an ele",
            "+00018670: 6374 726f 6e20 2863 6f75 6c6f 6d62 7329  ctron (coulombs)",
            "+00018680: 2e0a 2020 2020 2020 2020 3020 3c20 6e4e  ..        0 < nN",
            "+00018690: 7356 7468 0a0a 2020 2020 6d65 7468 6f64  sVth..    method",
            "+000186a0: 203a 2073 7472 0a20 2020 2020 2020 204d   : str.        M",
            "+000186b0: 6574 686f 6420 746f 2075 7365 3a20 6060  ethod to use: ``",
            "+000186c0: 276c 616d 6265 7274 7727 6060 2c20 6060  'lambertw'``, ``",
            "+000186d0: 276e 6577 746f 6e27 6060 2c20 6f72 2060  'newton'``, or `",
            "+000186e0: 6027 6272 656e 7471 2760 602e 202a 4e6f  `'brentq'``. *No",
            "+000186f0: 7465 2a3a 0a20 2020 2020 2020 2060 6027  te*:.        ``'",
            "+00018700: 6272 656e 7471 2760 6020 6973 206c 696d  brentq'`` is lim",
            "+00018710: 6974 6564 2074 6f20 3173 7420 7175 6164  ited to 1st quad",
            "+00018720: 7261 6e74 206f 6e6c 792e 0a0a 2020 2020  rant only...    ",
            "+00018730: 5265 7475 726e 730a 2020 2020 2d2d 2d2d  Returns.    ----",
            "+00018740: 2d2d 2d0a 2020 2020 6375 7272 656e 7420  ---.    current ",
            "+00018750: 3a20 6e70 2e6e 6461 7272 6179 206f 7220  : np.ndarray or ",
            "+00018760: 7363 616c 6172 0a0a 2020 2020 5265 6665  scalar..    Refe",
            "+00018770: 7265 6e63 6573 0a20 2020 202d 2d2d 2d2d  rences.    -----",
            "+00018780: 2d2d 2d2d 2d0a 2020 2020 2e2e 205b 315d  -----.    .. [1]",
            "+00018790: 2041 2e20 4a61 696e 2c20 412e 204b 6170   A. Jain, A. Kap",
            "+000187a0: 6f6f 722c 2022 4578 6163 7420 616e 616c  oor, \"Exact anal",
            "+000187b0: 7974 6963 616c 2073 6f6c 7574 696f 6e73  ytical solutions",
            "+000187c0: 206f 6620 7468 650a 2020 2020 2020 2070   of the.       p",
            "+000187d0: 6172 616d 6574 6572 7320 6f66 2072 6561  arameters of rea",
            "+000187e0: 6c20 736f 6c61 7220 6365 6c6c 7320 7573  l solar cells us",
            "+000187f0: 696e 6720 4c61 6d62 6572 7420 572d 6675  ing Lambert W-fu",
            "+00018800: 6e63 7469 6f6e 222c 2053 6f6c 6172 0a20  nction\", Solar. ",
            "+00018810: 2020 2020 2020 456e 6572 6779 204d 6174        Energy Mat",
            "+00018820: 6572 6961 6c73 2061 6e64 2053 6f6c 6172  erials and Solar",
            "+00018830: 2043 656c 6c73 2c20 3831 2028 3230 3034   Cells, 81 (2004",
            "+00018840: 2920 3236 392d 3237 372e 0a20 2020 2027  ) 269-277..    '",
            "+00018850: 2727 0a20 2020 2061 7267 7320 3d20 2863  ''.    args = (c",
            "+00018860: 7572 7265 6e74 2c20 7068 6f74 6f63 7572  urrent, photocur",
            "+00018870: 7265 6e74 2c20 7361 7475 7261 7469 6f6e  rent, saturation",
            "+00018880: 5f63 7572 7265 6e74 2c0a 2020 2020 2020  _current,.      ",
            "+00018890: 2020 2020 2020 7265 7369 7374 616e 6365        resistance",
            "+000188a0: 5f73 6572 6965 732c 2072 6573 6973 7461  _series, resista",
            "+000188b0: 6e63 655f 7368 756e 742c 206e 4e73 5674  nce_shunt, nNsVt",
            "+000188c0: 6829 0a20 2020 2069 6620 6d65 7468 6f64  h).    if method",
            "+000188d0: 2e6c 6f77 6572 2829 203d 3d20 276c 616d  .lower() == 'lam",
            "+000188e0: 6265 7274 7727 3a0a 2020 2020 2020 2020  bertw':.        ",
            "+000188f0: 7265 7475 726e 205f 7369 6e67 6c65 6469  return _singledi",
            "+00018900: 6f64 652e 5f6c 616d 6265 7274 775f 765f  ode._lambertw_v_",
            "+00018910: 6672 6f6d 5f69 282a 6172 6773 290a 2020  from_i(*args).  ",
            "+00018920: 2020 656c 7365 3a0a 2020 2020 2020 2020    else:.        ",
            "+00018930: 2320 4361 6c63 756c 6174 6520 706f 696e  # Calculate poin",
            "+00018940: 7473 206f 6e20 7468 6520 4956 2063 7572  ts on the IV cur",
            "+00018950: 7665 2075 7369 6e67 2065 6974 6865 7220  ve using either ",
            "+00018960: 276e 6577 746f 6e27 206f 7220 2762 7265  'newton' or 'bre",
            "+00018970: 6e74 7127 0a20 2020 2020 2020 2023 206d  ntq'.        # m",
            "+00018980: 6574 686f 6473 2e20 566f 6c74 6167 6573  ethods. Voltages",
            "+00018990: 2061 7265 2064 6574 6572 6d69 6e65 6420   are determined ",
            "+000189a0: 6279 2066 6972 7374 2073 6f6c 7669 6e67  by first solving",
            "+000189b0: 2074 6865 2073 696e 676c 6520 6469 6f64   the single diod",
            "+000189c0: 650a 2020 2020 2020 2020 2320 6571 7561  e.        # equa",
            "+000189d0: 7469 6f6e 2066 6f72 2074 6865 2064 696f  tion for the dio",
            "+000189e0: 6465 2076 6f6c 7461 6765 2056 5f64 2074  de voltage V_d t",
            "+000189f0: 6865 6e20 6261 636b 696e 6720 6f75 7420  hen backing out ",
            "+00018a00: 766f 6c74 6167 650a 2020 2020 2020 2020  voltage.        ",
            "+00018a10: 5620 3d20 5f73 696e 676c 6564 696f 6465  V = _singlediode",
            "+00018a20: 2e62 6973 686f 7038 385f 765f 6672 6f6d  .bishop88_v_from",
            "+00018a30: 5f69 282a 6172 6773 2c20 6d65 7468 6f64  _i(*args, method",
            "+00018a40: 3d6d 6574 686f 642e 6c6f 7765 7228 2929  =method.lower())",
            "+00018a50: 0a20 2020 2020 2020 2069 6620 616c 6c28  .        if all(",
            "+00018a60: 6d61 7028 6e70 2e69 7373 6361 6c61 722c  map(np.isscalar,",
            "+00018a70: 2061 7267 7329 293a 0a20 2020 2020 2020   args)):.       ",
            "+00018a80: 2020 2020 2072 6574 7572 6e20 560a 2020       return V.  ",
            "+00018a90: 2020 2020 2020 7368 6170 6520 3d20 5f73        shape = _s",
            "+00018aa0: 696e 676c 6564 696f 6465 2e5f 7368 6170  inglediode._shap",
            "+00018ab0: 655f 6f66 5f6d 6178 5f73 697a 6528 2a61  e_of_max_size(*a",
            "+00018ac0: 7267 7329 0a20 2020 2020 2020 2072 6574  rgs).        ret",
            "+00018ad0: 7572 6e20 6e70 2e62 726f 6164 6361 7374  urn np.broadcast",
            "+00018ae0: 5f74 6f28 562c 2073 6861 7065 290a 0a0a  _to(V, shape)...",
            "+00018af0: 6465 6620 695f 6672 6f6d 5f76 2876 6f6c  def i_from_v(vol",
            "+00018b00: 7461 6765 2c20 7068 6f74 6f63 7572 7265  tage, photocurre",
            "+00018b10: 6e74 2c20 7361 7475 7261 7469 6f6e 5f63  nt, saturation_c",
            "+00018b20: 7572 7265 6e74 2c20 7265 7369 7374 616e  urrent, resistan",
            "+00018b30: 6365 5f73 6572 6965 732c 0a20 2020 2020  ce_series,.     ",
            "+00018b40: 2020 2020 2020 2020 7265 7369 7374 616e          resistan",
            "+00018b50: 6365 5f73 6875 6e74 2c20 6e4e 7356 7468  ce_shunt, nNsVth",
            "+00018b60: 2c20 6d65 7468 6f64 3d27 6c61 6d62 6572  , method='lamber",
            "+00018b70: 7477 2729 3a0a 2020 2020 2727 270a 2020  tw'):.    '''.  ",
            "+00018b80: 2020 4465 7669 6365 2063 7572 7265 6e74    Device current",
            "+00018b90: 2061 7420 7468 6520 6769 7665 6e20 6465   at the given de",
            "+00018ba0: 7669 6365 2076 6f6c 7461 6765 2066 6f72  vice voltage for",
            "+00018bb0: 2074 6865 2073 696e 676c 6520 6469 6f64   the single diod",
            "+00018bc0: 6520 6d6f 6465 6c2e 0a0a 2020 2020 5573  e model...    Us",
            "+00018bd0: 6573 2074 6865 2073 696e 676c 6520 6469  es the single di",
            "+00018be0: 6f64 6520 6d6f 6465 6c20 2853 444d 2920  ode model (SDM) ",
            "+00018bf0: 6173 2064 6573 6372 6962 6564 2069 6e2c  as described in,",
            "+00018c00: 2065 2e67 2e2c 0a20 2020 204a 6169 6e20   e.g.,.    Jain ",
            "+00018c10: 616e 6420 4b61 706f 6f72 2032 3030 3420  and Kapoor 2004 ",
            "+00018c20: 5b31 5d5f 2e0a 2020 2020 5468 6520 736f  [1]_..    The so",
            "+00018c30: 6c75 7469 6f6e 2069 7320 7065 7220 4571  lution is per Eq",
            "+00018c40: 2032 206f 6620 5b31 5d20 6578 6365 7074   2 of [1] except",
            "+00018c50: 2077 6865 6e20 7265 7369 7374 616e 6365   when resistance",
            "+00018c60: 5f73 6572 6965 733d 302c 0a20 2020 2069  _series=0,.    i",
            "+00018c70: 6e20 7768 6963 6820 6361 7365 2074 6865  n which case the",
            "+00018c80: 2065 7870 6c69 6374 2073 6f6c 7574 696f   explict solutio",
            "+00018c90: 6e20 666f 7220 6375 7272 656e 7420 6973  n for current is",
            "+00018ca0: 2075 7365 642e 0a20 2020 2049 6465 616c   used..    Ideal",
            "+00018cb0: 2064 6576 6963 6520 7061 7261 6d65 7465   device paramete",
            "+00018cc0: 7273 2061 7265 2073 7065 6369 6669 6564  rs are specified",
            "+00018cd0: 2062 7920 7265 7369 7374 616e 6365 5f73   by resistance_s",
            "+00018ce0: 6875 6e74 3d6e 702e 696e 6620 616e 640a  hunt=np.inf and.",
            "+00018cf0: 2020 2020 7265 7369 7374 616e 6365 5f73      resistance_s",
            "+00018d00: 6572 6965 733d 302e 0a20 2020 2049 6e70  eries=0..    Inp",
            "+00018d10: 7574 7320 746f 2074 6869 7320 6675 6e63  uts to this func",
            "+00018d20: 7469 6f6e 2063 616e 2069 6e63 6c75 6465  tion can include",
            "+00018d30: 2073 6361 6c61 7273 2061 6e64 2070 616e   scalars and pan",
            "+00018d40: 6461 732e 5365 7269 6573 2c20 6275 7420  das.Series, but ",
            "+00018d50: 6974 2069 730a 2020 2020 7468 6520 6361  it is.    the ca",
            "+00018d60: 6c6c 6572 2773 2072 6573 706f 6e73 6962  ller's responsib",
            "+00018d70: 696c 6974 7920 746f 2065 6e73 7572 6520  ility to ensure ",
            "+00018d80: 7468 6174 2074 6865 2061 7267 756d 656e  that the argumen",
            "+00018d90: 7473 2061 7265 2061 6c6c 2066 6c6f 6174  ts are all float",
            "+00018da0: 3634 0a20 2020 2061 6e64 2077 6974 6869  64.    and withi",
            "+00018db0: 6e20 7468 6520 7072 6f70 6572 2072 616e  n the proper ran",
            "+00018dc0: 6765 732e 0a0a 2020 2020 2e2e 2076 6572  ges...    .. ver",
            "+00018dd0: 7369 6f6e 6368 616e 6765 643a 3a20 302e  sionchanged:: 0.",
            "+00018de0: 3130 2e30 0a20 2020 2020 2020 5468 6520  10.0.       The ",
            "+00018df0: 6675 6e63 7469 6f6e 2773 2061 7267 756d  function's argum",
            "+00018e00: 656e 7473 2068 6176 6520 6265 656e 2072  ents have been r",
            "+00018e10: 656f 7264 6572 6564 2e0a 0a20 2020 2050  eordered...    P",
            "+00018e20: 6172 616d 6574 6572 730a 2020 2020 2d2d  arameters.    --",
            "+00018e30: 2d2d 2d2d 2d2d 2d2d 0a20 2020 2076 6f6c  --------.    vol",
            "+00018e40: 7461 6765 203a 206e 756d 6572 6963 0a20  tage : numeric. ",
            "+00018e50: 2020 2020 2020 2054 6865 2076 6f6c 7461         The volta",
            "+00018e60: 6765 2069 6e20 566f 6c74 7320 756e 6465  ge in Volts unde",
            "+00018e70: 7220 6465 7369 7265 6420 4956 2063 7572  r desired IV cur",
            "+00018e80: 7665 2063 6f6e 6469 7469 6f6e 732e 0a0a  ve conditions...",
            "+00018e90: 2020 2020 7068 6f74 6f63 7572 7265 6e74      photocurrent",
            "+00018ea0: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "+00018eb0: 2020 204c 6967 6874 2d67 656e 6572 6174     Light-generat",
            "+00018ec0: 6564 2063 7572 7265 6e74 2028 7068 6f74  ed current (phot",
            "+00018ed0: 6f63 7572 7265 6e74 2920 696e 2061 6d70  ocurrent) in amp",
            "+00018ee0: 6572 6573 2075 6e64 6572 2064 6573 6972  eres under desir",
            "+00018ef0: 6564 0a20 2020 2020 2020 2049 5620 6375  ed.        IV cu",
            "+00018f00: 7276 6520 636f 6e64 6974 696f 6e73 2e20  rve conditions. ",
            "+00018f10: 4f66 7465 6e20 6162 6272 6576 6961 7465  Often abbreviate",
            "+00018f20: 6420 6060 495f 4c60 602e 0a20 2020 2020  d ``I_L``..     ",
            "+00018f30: 2020 2030 203c 3d20 7068 6f74 6f63 7572     0 <= photocur",
            "+00018f40: 7265 6e74 0a0a 2020 2020 7361 7475 7261  rent..    satura",
            "+00018f50: 7469 6f6e 5f63 7572 7265 6e74 203a 206e  tion_current : n",
            "+00018f60: 756d 6572 6963 0a20 2020 2020 2020 2044  umeric.        D",
            "+00018f70: 696f 6465 2073 6174 7572 6174 696f 6e20  iode saturation ",
            "+00018f80: 6375 7272 656e 7420 696e 2061 6d70 6572  current in amper",
            "+00018f90: 6573 2075 6e64 6572 2064 6573 6972 6564  es under desired",
            "+00018fa0: 2049 5620 6375 7276 650a 2020 2020 2020   IV curve.      ",
            "+00018fb0: 2020 636f 6e64 6974 696f 6e73 2e20 4f66    conditions. Of",
            "+00018fc0: 7465 6e20 6162 6272 6576 6961 7465 6420  ten abbreviated ",
            "+00018fd0: 6060 495f 3060 602e 0a20 2020 2020 2020  ``I_0``..       ",
            "+00018fe0: 2030 203c 2073 6174 7572 6174 696f 6e5f   0 < saturation_",
            "+00018ff0: 6375 7272 656e 740a 0a20 2020 2072 6573  current..    res",
            "+00019000: 6973 7461 6e63 655f 7365 7269 6573 203a  istance_series :",
            "+00019010: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "+00019020: 2053 6572 6965 7320 7265 7369 7374 616e   Series resistan",
            "+00019030: 6365 2069 6e20 6f68 6d73 2075 6e64 6572  ce in ohms under",
            "+00019040: 2064 6573 6972 6564 2049 5620 6375 7276   desired IV curv",
            "+00019050: 6520 636f 6e64 6974 696f 6e73 2e0a 2020  e conditions..  ",
            "+00019060: 2020 2020 2020 4f66 7465 6e20 6162 6272        Often abbr",
            "+00019070: 6576 6961 7465 6420 6060 5273 6060 2e0a  eviated ``Rs``..",
            "+00019080: 2020 2020 2020 2020 3020 3c3d 2072 6573          0 <= res",
            "+00019090: 6973 7461 6e63 655f 7365 7269 6573 203c  istance_series <",
            "+000190a0: 206e 756d 7079 2e69 6e66 0a0a 2020 2020   numpy.inf..    ",
            "+000190b0: 7265 7369 7374 616e 6365 5f73 6875 6e74  resistance_shunt",
            "+000190c0: 203a 206e 756d 6572 6963 0a20 2020 2020   : numeric.     ",
            "+000190d0: 2020 2053 6875 6e74 2072 6573 6973 7461     Shunt resista",
            "+000190e0: 6e63 6520 696e 206f 686d 7320 756e 6465  nce in ohms unde",
            "+000190f0: 7220 6465 7369 7265 6420 4956 2063 7572  r desired IV cur",
            "+00019100: 7665 2063 6f6e 6469 7469 6f6e 732e 0a20  ve conditions.. ",
            "+00019110: 2020 2020 2020 204f 6674 656e 2061 6262         Often abb",
            "+00019120: 7265 7669 6174 6564 2060 6052 7368 6060  reviated ``Rsh``",
            "+00019130: 2e0a 2020 2020 2020 2020 3020 3c20 7265  ..        0 < re",
            "+00019140: 7369 7374 616e 6365 5f73 6875 6e74 203c  sistance_shunt <",
            "+00019150: 3d20 6e75 6d70 792e 696e 660a 0a20 2020  = numpy.inf..   ",
            "+00019160: 206e 4e73 5674 6820 3a20 6e75 6d65 7269   nNsVth : numeri",
            "+00019170: 630a 2020 2020 2020 2020 5468 6520 7072  c.        The pr",
            "+00019180: 6f64 7563 7420 6f66 2074 6872 6565 2063  oduct of three c",
            "+00019190: 6f6d 706f 6e65 6e74 732e 2031 2920 5468  omponents. 1) Th",
            "+000191a0: 6520 7573 7561 6c20 6469 6f64 6520 6964  e usual diode id",
            "+000191b0: 6561 6c20 6661 6374 6f72 0a20 2020 2020  eal factor.     ",
            "+000191c0: 2020 2028 6e29 2c20 3229 2074 6865 206e     (n), 2) the n",
            "+000191d0: 756d 6265 7220 6f66 2063 656c 6c73 2069  umber of cells i",
            "+000191e0: 6e20 7365 7269 6573 2028 4e73 292c 2061  n series (Ns), a",
            "+000191f0: 6e64 2033 2920 7468 6520 6365 6c6c 0a20  nd 3) the cell. ",
            "+00019200: 2020 2020 2020 2074 6865 726d 616c 2076         thermal v",
            "+00019210: 6f6c 7461 6765 2075 6e64 6572 2074 6865  oltage under the",
            "+00019220: 2064 6573 6972 6564 2049 5620 6375 7276   desired IV curv",
            "+00019230: 6520 636f 6e64 6974 696f 6e73 2028 5674  e conditions (Vt",
            "+00019240: 6829 2e20 5468 650a 2020 2020 2020 2020  h). The.        ",
            "+00019250: 7468 6572 6d61 6c20 766f 6c74 6167 6520  thermal voltage ",
            "+00019260: 6f66 2074 6865 2063 656c 6c20 2869 6e20  of the cell (in ",
            "+00019270: 766f 6c74 7329 206d 6179 2062 6520 6361  volts) may be ca",
            "+00019280: 6c63 756c 6174 6564 2061 730a 2020 2020  lculated as.    ",
            "+00019290: 2020 2020 6060 6b2a 7465 6d70 5f63 656c      ``k*temp_cel",
            "+000192a0: 6c2f 7160 602c 2077 6865 7265 206b 2069  l/q``, where k i",
            "+000192b0: 7320 426f 6c74 7a6d 616e 6e27 7320 636f  s Boltzmann's co",
            "+000192c0: 6e73 7461 6e74 2028 4a2f 4b29 2c0a 2020  nstant (J/K),.  ",
            "+000192d0: 2020 2020 2020 7465 6d70 5f63 656c 6c20        temp_cell ",
            "+000192e0: 6973 2074 6865 2074 656d 7065 7261 7475  is the temperatu",
            "+000192f0: 7265 206f 6620 7468 6520 702d 6e20 6a75  re of the p-n ju",
            "+00019300: 6e63 7469 6f6e 2069 6e20 4b65 6c76 696e  nction in Kelvin",
            "+00019310: 2c20 616e 640a 2020 2020 2020 2020 7120  , and.        q ",
            "+00019320: 6973 2074 6865 2063 6861 7267 6520 6f66  is the charge of",
            "+00019330: 2061 6e20 656c 6563 7472 6f6e 2028 636f   an electron (co",
            "+00019340: 756c 6f6d 6273 292e 0a20 2020 2020 2020  ulombs)..       ",
            "+00019350: 2030 203c 206e 4e73 5674 680a 0a20 2020   0 < nNsVth..   ",
            "+00019360: 206d 6574 686f 6420 3a20 7374 720a 2020   method : str.  ",
            "+00019370: 2020 2020 2020 4d65 7468 6f64 2074 6f20        Method to ",
            "+00019380: 7573 653a 2060 6027 6c61 6d62 6572 7477  use: ``'lambertw",
            "+00019390: 2760 602c 2060 6027 6e65 7774 6f6e 2760  '``, ``'newton'`",
            "+000193a0: 602c 206f 7220 6060 2762 7265 6e74 7127  `, or ``'brentq'",
            "+000193b0: 6060 2e20 2a4e 6f74 652a 3a0a 2020 2020  ``. *Note*:.    ",
            "+000193c0: 2020 2020 6060 2762 7265 6e74 7127 6060      ``'brentq'``",
            "+000193d0: 2069 7320 6c69 6d69 7465 6420 746f 2031   is limited to 1",
            "+000193e0: 7374 2071 7561 6472 616e 7420 6f6e 6c79  st quadrant only",
            "+000193f0: 2e0a 0a20 2020 2052 6574 7572 6e73 0a20  ...    Returns. ",
            "+00019400: 2020 202d 2d2d 2d2d 2d2d 0a20 2020 2063     -------.    c",
            "+00019410: 7572 7265 6e74 203a 206e 702e 6e64 6172  urrent : np.ndar",
            "+00019420: 7261 7920 6f72 2073 6361 6c61 720a 0a20  ray or scalar.. ",
            "+00019430: 2020 2052 6566 6572 656e 6365 730a 2020     References.  ",
            "+00019440: 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020    ----------.   ",
            "+00019450: 202e 2e20 5b31 5d20 412e 204a 6169 6e2c   .. [1] A. Jain,",
            "+00019460: 2041 2e20 4b61 706f 6f72 2c20 2245 7861   A. Kapoor, \"Exa",
            "+00019470: 6374 2061 6e61 6c79 7469 6361 6c20 736f  ct analytical so",
            "+00019480: 6c75 7469 6f6e 7320 6f66 2074 6865 0a20  lutions of the. ",
            "+00019490: 2020 2020 2020 7061 7261 6d65 7465 7273        parameters",
            "+000194a0: 206f 6620 7265 616c 2073 6f6c 6172 2063   of real solar c",
            "+000194b0: 656c 6c73 2075 7369 6e67 204c 616d 6265  ells using Lambe",
            "+000194c0: 7274 2057 2d66 756e 6374 696f 6e22 2c20  rt W-function\", ",
            "+000194d0: 536f 6c61 720a 2020 2020 2020 2045 6e65  Solar.       Ene",
            "+000194e0: 7267 7920 4d61 7465 7269 616c 7320 616e  rgy Materials an",
            "+000194f0: 6420 536f 6c61 7220 4365 6c6c 732c 2038  d Solar Cells, 8",
            "+00019500: 3120 2832 3030 3429 2032 3639 2d32 3737  1 (2004) 269-277",
            "+00019510: 2e0a 2020 2020 2727 270a 2020 2020 6172  ..    '''.    ar",
            "+00019520: 6773 203d 2028 766f 6c74 6167 652c 2070  gs = (voltage, p",
            "+00019530: 686f 746f 6375 7272 656e 742c 2073 6174  hotocurrent, sat",
            "+00019540: 7572 6174 696f 6e5f 6375 7272 656e 742c  uration_current,",
            "+00019550: 0a20 2020 2020 2020 2020 2020 2072 6573  .            res",
            "+00019560: 6973 7461 6e63 655f 7365 7269 6573 2c20  istance_series, ",
            "+00019570: 7265 7369 7374 616e 6365 5f73 6875 6e74  resistance_shunt",
            "+00019580: 2c20 6e4e 7356 7468 290a 2020 2020 6966  , nNsVth).    if",
            "+00019590: 206d 6574 686f 642e 6c6f 7765 7228 2920   method.lower() ",
            "+000195a0: 3d3d 2027 6c61 6d62 6572 7477 273a 0a20  == 'lambertw':. ",
            "+000195b0: 2020 2020 2020 2072 6574 7572 6e20 5f73         return _s",
            "+000195c0: 696e 676c 6564 696f 6465 2e5f 6c61 6d62  inglediode._lamb",
            "+000195d0: 6572 7477 5f69 5f66 726f 6d5f 7628 2a61  ertw_i_from_v(*a",
            "+000195e0: 7267 7329 0a20 2020 2065 6c73 653a 0a20  rgs).    else:. ",
            "+000195f0: 2020 2020 2020 2023 2043 616c 6375 6c61         # Calcula",
            "+00019600: 7465 2070 6f69 6e74 7320 6f6e 2074 6865  te points on the",
            "+00019610: 2049 5620 6375 7276 6520 7573 696e 6720   IV curve using ",
            "+00019620: 6569 7468 6572 2027 6e65 7774 6f6e 2720  either 'newton' ",
            "+00019630: 6f72 2027 6272 656e 7471 270a 2020 2020  or 'brentq'.    ",
            "+00019640: 2020 2020 2320 6d65 7468 6f64 732e 2056      # methods. V",
            "+00019650: 6f6c 7461 6765 7320 6172 6520 6465 7465  oltages are dete",
            "+00019660: 726d 696e 6564 2062 7920 6669 7273 7420  rmined by first ",
            "+00019670: 736f 6c76 696e 6720 7468 6520 7369 6e67  solving the sing",
            "+00019680: 6c65 2064 696f 6465 0a20 2020 2020 2020  le diode.       ",
            "+00019690: 2023 2065 7175 6174 696f 6e20 666f 7220   # equation for ",
            "+000196a0: 7468 6520 6469 6f64 6520 766f 6c74 6167  the diode voltag",
            "+000196b0: 6520 565f 6420 7468 656e 2062 6163 6b69  e V_d then backi",
            "+000196c0: 6e67 206f 7574 2076 6f6c 7461 6765 0a20  ng out voltage. ",
            "+000196d0: 2020 2020 2020 2063 7572 7265 6e74 203d         current =",
            "+000196e0: 205f 7369 6e67 6c65 6469 6f64 652e 6269   _singlediode.bi",
            "+000196f0: 7368 6f70 3838 5f69 5f66 726f 6d5f 7628  shop88_i_from_v(",
            "+00019700: 2a61 7267 732c 206d 6574 686f 643d 6d65  *args, method=me",
            "+00019710: 7468 6f64 2e6c 6f77 6572 2829 290a 2020  thod.lower()).  ",
            "+00019720: 2020 2020 2020 6966 2061 6c6c 286d 6170        if all(map",
            "+00019730: 286e 702e 6973 7363 616c 6172 2c20 6172  (np.isscalar, ar",
            "+00019740: 6773 2929 3a0a 2020 2020 2020 2020 2020  gs)):.          ",
            "+00019750: 2020 7265 7475 726e 2063 7572 7265 6e74    return current",
            "+00019760: 0a20 2020 2020 2020 2073 6861 7065 203d  .        shape =",
            "+00019770: 205f 7369 6e67 6c65 6469 6f64 652e 5f73   _singlediode._s",
            "+00019780: 6861 7065 5f6f 665f 6d61 785f 7369 7a65  hape_of_max_size",
            "+00019790: 282a 6172 6773 290a 2020 2020 2020 2020  (*args).        ",
            "+000197a0: 7265 7475 726e 206e 702e 6272 6f61 6463  return np.broadc",
            "+000197b0: 6173 745f 746f 2863 7572 7265 6e74 2c20  ast_to(current, ",
            "+000197c0: 7368 6170 6529 0a0a 0a64 6566 2073 6361  shape)...def sca",
            "+000197d0: 6c65 5f76 6f6c 7461 6765 5f63 7572 7265  le_voltage_curre",
            "+000197e0: 6e74 5f70 6f77 6572 2864 6174 612c 2076  nt_power(data, v",
            "+000197f0: 6f6c 7461 6765 3d31 2c20 6375 7272 656e  oltage=1, curren",
            "+00019800: 743d 3129 3a0a 2020 2020 2222 220a 2020  t=1):.    \"\"\".  ",
            "+00019810: 2020 5363 616c 6573 2074 6865 2076 6f6c    Scales the vol",
            "+00019820: 7461 6765 2c20 6375 7272 656e 742c 2061  tage, current, a",
            "+00019830: 6e64 2070 6f77 6572 2069 6e20 6461 7461  nd power in data",
            "+00019840: 2062 7920 7468 6520 766f 6c74 6167 650a   by the voltage.",
            "+00019850: 2020 2020 616e 6420 6375 7272 656e 7420      and current ",
            "+00019860: 6661 6374 6f72 732e 0a0a 2020 2020 5061  factors...    Pa",
            "+00019870: 7261 6d65 7465 7273 0a20 2020 202d 2d2d  rameters.    ---",
            "+00019880: 2d2d 2d2d 2d2d 2d0a 2020 2020 6461 7461  -------.    data",
            "+00019890: 3a20 4461 7461 4672 616d 650a 2020 2020  : DataFrame.    ",
            "+000198a0: 2020 2020 4d61 7920 636f 6e74 6169 6e20      May contain ",
            "+000198b0: 636f 6c75 6d6e 7320 6027 765f 6d70 272c  columns `'v_mp',",
            "+000198c0: 2027 765f 6f63 272c 2027 695f 6d70 2720   'v_oc', 'i_mp' ",
            "+000198d0: 2c27 695f 7827 2c20 2769 5f78 7827 2c0a  ,'i_x', 'i_xx',.",
            "+000198e0: 2020 2020 2020 2020 2769 5f73 6327 2c20          'i_sc', ",
            "+000198f0: 2770 5f6d 7027 602e 0a20 2020 2076 6f6c  'p_mp'`..    vol",
            "+00019900: 7461 6765 3a20 6e75 6d65 7269 632c 2064  tage: numeric, d",
            "+00019910: 6566 6175 6c74 2031 0a20 2020 2020 2020  efault 1.       ",
            "+00019920: 2054 6865 2061 6d6f 756e 7420 6279 2077   The amount by w",
            "+00019930: 6869 6368 2074 6f20 6d75 6c74 6970 6c79  hich to multiply",
            "+00019940: 2074 6865 2076 6f6c 7461 6765 732e 0a20   the voltages.. ",
            "+00019950: 2020 2063 7572 7265 6e74 3a20 6e75 6d65     current: nume",
            "+00019960: 7269 632c 2064 6566 6175 6c74 2031 0a20  ric, default 1. ",
            "+00019970: 2020 2020 2020 2054 6865 2061 6d6f 756e         The amoun",
            "+00019980: 7420 6279 2077 6869 6368 2074 6f20 6d75  t by which to mu",
            "+00019990: 6c74 6970 6c79 2074 6865 2063 7572 7265  ltiply the curre",
            "+000199a0: 6e74 732e 0a0a 2020 2020 5265 7475 726e  nts...    Return",
            "+000199b0: 730a 2020 2020 2d2d 2d2d 2d2d 2d0a 2020  s.    -------.  ",
            "+000199c0: 2020 7363 616c 6564 5f64 6174 613a 2044    scaled_data: D",
            "+000199d0: 6174 6146 7261 6d65 0a20 2020 2020 2020  ataFrame.       ",
            "+000199e0: 2041 2073 6361 6c65 6420 636f 7079 206f   A scaled copy o",
            "+000199f0: 6620 7468 6520 696e 7075 7420 6461 7461  f the input data",
            "+00019a00: 2e0a 2020 2020 2020 2020 6027 705f 6d70  ..        `'p_mp",
            "+00019a10: 2760 2069 7320 7363 616c 6564 2062 7920  '` is scaled by ",
            "+00019a20: 6076 6f6c 7461 6765 202a 2063 7572 7265  `voltage * curre",
            "+00019a30: 6e74 602e 0a20 2020 2022 2222 0a0a 2020  nt`..    \"\"\"..  ",
            "+00019a40: 2020 2320 6173 2077 7269 7474 656e 2c20    # as written, ",
            "+00019a50: 6f6e 6c79 2077 6f72 6b73 2077 6974 6820  only works with ",
            "+00019a60: 6120 4461 7461 4672 616d 650a 2020 2020  a DataFrame.    ",
            "+00019a70: 2320 636f 756c 6420 6d61 6b65 2069 7420  # could make it ",
            "+00019a80: 776f 726b 2077 6974 6820 6120 6469 6374  work with a dict",
            "+00019a90: 2c20 6275 7420 6974 2077 6f75 6c64 2062  , but it would b",
            "+00019aa0: 6520 6d6f 7265 2076 6572 626f 7365 0a20  e more verbose. ",
            "+00019ab0: 2020 2076 6f6c 7461 6765 5f6b 6579 7320     voltage_keys ",
            "+00019ac0: 3d20 5b27 765f 6d70 272c 2027 765f 6f63  = ['v_mp', 'v_oc",
            "+00019ad0: 275d 0a20 2020 2063 7572 7265 6e74 5f6b  '].    current_k",
            "+00019ae0: 6579 7320 3d20 5b27 695f 6d70 272c 2027  eys = ['i_mp', '",
            "+00019af0: 695f 7827 2c20 2769 5f78 7827 2c20 2769  i_x', 'i_xx', 'i",
            "+00019b00: 5f73 6327 5d0a 2020 2020 706f 7765 725f  _sc'].    power_",
            "+00019b10: 6b65 7973 203d 205b 2770 5f6d 7027 5d0a  keys = ['p_mp'].",
            "+00019b20: 2020 2020 766f 6c74 6167 655f 6466 203d      voltage_df =",
            "+00019b30: 2064 6174 612e 6669 6c74 6572 2876 6f6c   data.filter(vol",
            "+00019b40: 7461 6765 5f6b 6579 732c 2061 7869 733d  tage_keys, axis=",
            "+00019b50: 3129 202a 2076 6f6c 7461 6765 0a20 2020  1) * voltage.   ",
            "+00019b60: 2063 7572 7265 6e74 5f64 6620 3d20 6461   current_df = da",
            "+00019b70: 7461 2e66 696c 7465 7228 6375 7272 656e  ta.filter(curren",
            "+00019b80: 745f 6b65 7973 2c20 6178 6973 3d31 2920  t_keys, axis=1) ",
            "+00019b90: 2a20 6375 7272 656e 740a 2020 2020 706f  * current.    po",
            "+00019ba0: 7765 725f 6466 203d 2064 6174 612e 6669  wer_df = data.fi",
            "+00019bb0: 6c74 6572 2870 6f77 6572 5f6b 6579 732c  lter(power_keys,",
            "+00019bc0: 2061 7869 733d 3129 202a 2076 6f6c 7461   axis=1) * volta",
            "+00019bd0: 6765 202a 2063 7572 7265 6e74 0a20 2020  ge * current.   ",
            "+00019be0: 2064 6620 3d20 7064 2e63 6f6e 6361 7428   df = pd.concat(",
            "+00019bf0: 5b76 6f6c 7461 6765 5f64 662c 2063 7572  [voltage_df, cur",
            "+00019c00: 7265 6e74 5f64 662c 2070 6f77 6572 5f64  rent_df, power_d",
            "+00019c10: 665d 2c20 6178 6973 3d31 290a 2020 2020  f], axis=1).    ",
            "+00019c20: 6466 5f73 6f72 7465 6420 3d20 6466 5b64  df_sorted = df[d",
            "+00019c30: 6174 612e 636f 6c75 6d6e 735d 2020 2320  ata.columns]  # ",
            "+00019c40: 7265 7461 696e 206f 7269 6769 6e61 6c20  retain original ",
            "+00019c50: 636f 6c75 6d6e 206f 7264 6572 0a20 2020  column order.   ",
            "+00019c60: 2072 6574 7572 6e20 6466 5f73 6f72 7465   return df_sorte",
            "+00019c70: 640a 0a0a 4072 656e 616d 6564 5f6b 7761  d...@renamed_kwa",
            "+00019c80: 7267 5f77 6172 6e69 6e67 280a 2020 2020  rg_warning(.    ",
            "+00019c90: 2230 2e31 332e 3022 2c20 2267 5f70 6f61  \"0.13.0\", \"g_poa",
            "+00019ca0: 5f65 6666 6563 7469 7665 222c 2022 6566  _effective\", \"ef",
            "+00019cb0: 6665 6374 6976 655f 6972 7261 6469 616e  fective_irradian",
            "+00019cc0: 6365 2229 0a64 6566 2070 7677 6174 7473  ce\").def pvwatts",
            "+00019cd0: 5f64 6328 6566 6665 6374 6976 655f 6972  _dc(effective_ir",
            "+00019ce0: 7261 6469 616e 6365 2c20 7465 6d70 5f63  radiance, temp_c",
            "+00019cf0: 656c 6c2c 2070 6463 302c 2067 616d 6d61  ell, pdc0, gamma",
            "+00019d00: 5f70 6463 2c20 7465 6d70 5f72 6566 3d32  _pdc, temp_ref=2",
            "+00019d10: 352e 293a 0a20 2020 2072 2222 220a 2020  5.):.    r\"\"\".  ",
            "+00019d20: 2020 496d 706c 656d 656e 7473 204e 5245    Implements NRE",
            "+00019d30: 4c27 7320 5056 5761 7474 7320 4443 2070  L's PVWatts DC p",
            "+00019d40: 6f77 6572 206d 6f64 656c 2e20 5468 6520  ower model. The ",
            "+00019d50: 5056 5761 7474 7320 4443 206d 6f64 656c  PVWatts DC model",
            "+00019d60: 205b 315d 5f20 6973 3a0a 0a20 2020 202e   [1]_ is:..    .",
            "+00019d70: 2e20 6d61 7468 3a3a 0a0a 2020 2020 2020  . math::..      ",
            "+00019d80: 2020 505f 7b64 637d 203d 205c 6672 6163    P_{dc} = \\frac",
            "+00019d90: 7b47 5f7b 706f 6120 6566 667d 7d7b 3130  {G_{poa eff}}{10",
            "+00019da0: 3030 7d20 505f 7b64 6330 7d20 2820 3120  00} P_{dc0} ( 1 ",
            "+00019db0: 2b20 5c67 616d 6d61 5f7b 7064 637d 2028  + \\gamma_{pdc} (",
            "+00019dc0: 545f 7b63 656c 6c7d 202d 2054 5f7b 7265  T_{cell} - T_{re",
            "+00019dd0: 667d 2929 0a0a 2020 2020 4e6f 7465 2074  f}))..    Note t",
            "+00019de0: 6861 7420 6060 7064 6330 6060 2069 7320  hat ``pdc0`` is ",
            "+00019df0: 616c 736f 2075 7365 6420 6173 2061 2073  also used as a s",
            "+00019e00: 796d 626f 6c20 696e 0a20 2020 203a 7079  ymbol in.    :py",
            "+00019e10: 3a66 756e 633a 6070 766c 6962 2e69 6e76  :func:`pvlib.inv",
            "+00019e20: 6572 7465 722e 7076 7761 7474 7360 2e20  erter.pvwatts`. ",
            "+00019e30: 6060 7064 6330 6060 2069 6e20 7468 6973  ``pdc0`` in this",
            "+00019e40: 2066 756e 6374 696f 6e20 7265 6665 7273   function refers",
            "+00019e50: 2074 6f20 7468 6520 4443 0a20 2020 2070   to the DC.    p",
            "+00019e60: 6f77 6572 206f 6620 7468 6520 6d6f 6475  ower of the modu",
            "+00019e70: 6c65 7320 6174 2072 6566 6572 656e 6365  les at reference",
            "+00019e80: 2063 6f6e 6469 7469 6f6e 732e 2060 6070   conditions. ``p",
            "+00019e90: 6463 3060 6020 696e 0a20 2020 203a 7079  dc0`` in.    :py",
            "+00019ea0: 3a66 756e 633a 6070 766c 6962 2e69 6e76  :func:`pvlib.inv",
            "+00019eb0: 6572 7465 722e 7076 7761 7474 7360 2072  erter.pvwatts` r",
            "+00019ec0: 6566 6572 7320 746f 2074 6865 2044 4320  efers to the DC ",
            "+00019ed0: 706f 7765 7220 696e 7075 7420 6c69 6d69  power input limi",
            "+00019ee0: 7420 6f66 0a20 2020 2074 6865 2069 6e76  t of.    the inv",
            "+00019ef0: 6572 7465 722e 0a0a 2020 2020 5061 7261  erter...    Para",
            "+00019f00: 6d65 7465 7273 0a20 2020 202d 2d2d 2d2d  meters.    -----",
            "+00019f10: 2d2d 2d2d 2d0a 2020 2020 6566 6665 6374  -----.    effect",
            "+00019f20: 6976 655f 6972 7261 6469 616e 6365 3a20  ive_irradiance: ",
            "+00019f30: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "+00019f40: 4972 7261 6469 616e 6365 2074 7261 6e73  Irradiance trans",
            "+00019f50: 6d69 7474 6564 2074 6f20 7468 6520 5056  mitted to the PV",
            "+00019f60: 2063 656c 6c73 2e20 546f 2062 650a 2020   cells. To be.  ",
            "+00019f70: 2020 2020 2020 6675 6c6c 7920 636f 6e73        fully cons",
            "+00019f80: 6973 7465 6e74 2077 6974 6820 5056 5761  istent with PVWa",
            "+00019f90: 7474 732c 2074 6865 2075 7365 7220 6d75  tts, the user mu",
            "+00019fa0: 7374 2068 6176 6520 616c 7265 6164 790a  st have already.",
            "+00019fb0: 2020 2020 2020 2020 6170 706c 6965 6420          applied ",
            "+00019fc0: 616e 676c 6520 6f66 2069 6e63 6964 656e  angle of inciden",
            "+00019fd0: 6365 206c 6f73 7365 732c 2062 7574 206e  ce losses, but n",
            "+00019fe0: 6f74 2073 6f69 6c69 6e67 2c20 7370 6563  ot soiling, spec",
            "+00019ff0: 7472 616c 2c0a 2020 2020 2020 2020 6574  tral,.        et",
            "+0001a000: 632e 205b 572f 6d5e 325d 0a20 2020 2074  c. [W/m^2].    t",
            "+0001a010: 656d 705f 6365 6c6c 3a20 6e75 6d65 7269  emp_cell: numeri",
            "+0001a020: 630a 2020 2020 2020 2020 4365 6c6c 2074  c.        Cell t",
            "+0001a030: 656d 7065 7261 7475 7265 205b 435d 2e0a  emperature [C]..",
            "+0001a040: 2020 2020 7064 6330 3a20 6e75 6d65 7269      pdc0: numeri",
            "+0001a050: 630a 2020 2020 2020 2020 506f 7765 7220  c.        Power ",
            "+0001a060: 6f66 2074 6865 206d 6f64 756c 6573 2061  of the modules a",
            "+0001a070: 7420 3130 3030 2057 2f6d 5e32 2061 6e64  t 1000 W/m^2 and",
            "+0001a080: 2063 656c 6c20 7265 6665 7265 6e63 6520   cell reference ",
            "+0001a090: 7465 6d70 6572 6174 7572 652e 205b 575d  temperature. [W]",
            "+0001a0a0: 0a20 2020 2067 616d 6d61 5f70 6463 3a20  .    gamma_pdc: ",
            "+0001a0b0: 6e75 6d65 7269 630a 2020 2020 2020 2020  numeric.        ",
            "+0001a0c0: 5468 6520 7465 6d70 6572 6174 7572 6520  The temperature ",
            "+0001a0d0: 636f 6566 6669 6369 656e 7420 6f66 2070  coefficient of p",
            "+0001a0e0: 6f77 6572 2e20 5479 7069 6361 6c6c 7920  ower. Typically ",
            "+0001a0f0: 2d30 2e30 3032 2074 6f0a 2020 2020 2020  -0.002 to.      ",
            "+0001a100: 2020 2d30 2e30 3035 2070 6572 2064 6567    -0.005 per deg",
            "+0001a110: 7265 6520 432e 205b 312f 435d 0a20 2020  ree C. [1/C].   ",
            "+0001a120: 2074 656d 705f 7265 663a 206e 756d 6572   temp_ref: numer",
            "+0001a130: 6963 2c20 6465 6661 756c 7420 3235 2e30  ic, default 25.0",
            "+0001a140: 0a20 2020 2020 2020 2043 656c 6c20 7265  .        Cell re",
            "+0001a150: 6665 7265 6e63 6520 7465 6d70 6572 6174  ference temperat",
            "+0001a160: 7572 652e 2050 5657 6174 7473 2064 6566  ure. PVWatts def",
            "+0001a170: 696e 6573 2069 7420 746f 2062 6520 3235  ines it to be 25",
            "+0001a180: 2043 2061 6e64 0a20 2020 2020 2020 2069   C and.        i",
            "+0001a190: 7320 696e 636c 7564 6564 2068 6572 6520  s included here ",
            "+0001a1a0: 666f 7220 666c 6578 6962 696c 6974 792e  for flexibility.",
            "+0001a1b0: 205b 435d 0a0a 2020 2020 5265 7475 726e   [C]..    Return",
            "+0001a1c0: 730a 2020 2020 2d2d 2d2d 2d2d 2d0a 2020  s.    -------.  ",
            "+0001a1d0: 2020 7064 633a 206e 756d 6572 6963 0a20    pdc: numeric. ",
            "+0001a1e0: 2020 2020 2020 2044 4320 706f 7765 722e         DC power.",
            "+0001a1f0: 205b 575d 0a0a 2020 2020 5265 6665 7265   [W]..    Refere",
            "+0001a200: 6e63 6573 0a20 2020 202d 2d2d 2d2d 2d2d  nces.    -------",
            "+0001a210: 2d2d 2d0a 2020 2020 2e2e 205b 315d 2041  ---.    .. [1] A",
            "+0001a220: 2e20 502e 2044 6f62 6f73 2c20 2250 5657  . P. Dobos, \"PVW",
            "+0001a230: 6174 7473 2056 6572 7369 6f6e 2035 204d  atts Version 5 M",
            "+0001a240: 616e 7561 6c22 0a20 2020 2020 2020 2020  anual\".         ",
            "+0001a250: 2020 6874 7470 3a2f 2f70 7677 6174 7473    http://pvwatts",
            "+0001a260: 2e6e 7265 6c2e 676f 762f 646f 776e 6c6f  .nrel.gov/downlo",
            "+0001a270: 6164 732f 7076 7761 7474 7376 352e 7064  ads/pvwattsv5.pd",
            "+0001a280: 660a 2020 2020 2020 2020 2020 2028 3230  f.           (20",
            "+0001a290: 3134 292e 0a20 2020 2022 2222 2020 2320  14)..    \"\"\"  # ",
            "+0001a2a0: 6e6f 7161 3a20 4535 3031 0a0a 2020 2020  noqa: E501..    ",
            "+0001a2b0: 7064 6320 3d20 2865 6666 6563 7469 7665  pdc = (effective",
            "+0001a2c0: 5f69 7272 6164 6961 6e63 6520 2a20 302e  _irradiance * 0.",
            "+0001a2d0: 3030 3120 2a20 7064 6330 202a 0a20 2020  001 * pdc0 *.   ",
            "+0001a2e0: 2020 2020 2020 2020 2831 202b 2067 616d          (1 + gam",
            "+0001a2f0: 6d61 5f70 6463 202a 2028 7465 6d70 5f63  ma_pdc * (temp_c",
            "+0001a300: 656c 6c20 2d20 7465 6d70 5f72 6566 2929  ell - temp_ref))",
            "+0001a310: 290a 0a20 2020 2072 6574 7572 6e20 7064  )..    return pd",
            "+0001a320: 630a 0a0a 6465 6620 7076 7761 7474 735f  c...def pvwatts_",
            "+0001a330: 6c6f 7373 6573 2873 6f69 6c69 6e67 3d32  losses(soiling=2",
            "+0001a340: 2c20 7368 6164 696e 673d 332c 2073 6e6f  , shading=3, sno",
            "+0001a350: 773d 302c 206d 6973 6d61 7463 683d 322c  w=0, mismatch=2,",
            "+0001a360: 2077 6972 696e 673d 322c 0a20 2020 2020   wiring=2,.     ",
            "+0001a370: 2020 2020 2020 2020 2020 2020 2020 636f                co",
            "+0001a380: 6e6e 6563 7469 6f6e 733d 302e 352c 206c  nnections=0.5, l",
            "+0001a390: 6964 3d31 2e35 2c20 6e61 6d65 706c 6174  id=1.5, nameplat",
            "+0001a3a0: 655f 7261 7469 6e67 3d31 2c20 6167 653d  e_rating=1, age=",
            "+0001a3b0: 302c 0a20 2020 2020 2020 2020 2020 2020  0,.             ",
            "+0001a3c0: 2020 2020 2020 6176 6169 6c61 6269 6c69        availabili",
            "+0001a3d0: 7479 3d33 293a 0a20 2020 2072 2222 220a  ty=3):.    r\"\"\".",
            "+0001a3e0: 2020 2020 496d 706c 656d 656e 7473 204e      Implements N",
            "+0001a3f0: 5245 4c27 7320 5056 5761 7474 7320 7379  REL's PVWatts sy",
            "+0001a400: 7374 656d 206c 6f73 7320 6d6f 6465 6c2e  stem loss model.",
            "+0001a410: 0a20 2020 2054 6865 2050 5657 6174 7473  .    The PVWatts",
            "+0001a420: 206c 6f73 7320 6d6f 6465 6c20 5b31 5d5f   loss model [1]_",
            "+0001a430: 2069 733a 0a0a 2020 2020 2e2e 206d 6174   is:..    .. mat",
            "+0001a440: 683a 3a0a 0a20 2020 2020 2020 204c 5f7b  h::..        L_{",
            "+0001a450: 746f 7461 6c7d 285c 2529 203d 2031 3030  total}(\\%) = 100",
            "+0001a460: 205b 2031 202d 205c 5069 5f69 2028 2031   [ 1 - \\Pi_i ( 1",
            "+0001a470: 202d 205c 6672 6163 7b4c 5f69 7d7b 3130   - \\frac{L_i}{10",
            "+0001a480: 307d 2029 205d 0a0a 2020 2020 416c 6c20  0} ) ]..    All ",
            "+0001a490: 7061 7261 6d65 7465 7273 206d 7573 7420  parameters must ",
            "+0001a4a0: 6265 2069 6e20 756e 6974 7320 6f66 2025  be in units of %",
            "+0001a4b0: 2e20 5061 7261 6d65 7465 7273 206d 6179  . Parameters may",
            "+0001a4c0: 2062 650a 2020 2020 6172 7261 792d 6c69   be.    array-li",
            "+0001a4d0: 6b65 2c20 7468 6f75 6768 2061 6c6c 2061  ke, though all a",
            "+0001a4e0: 7272 6179 2073 697a 6573 206d 7573 7420  rray sizes must ",
            "+0001a4f0: 6d61 7463 682e 0a0a 2020 2020 5061 7261  match...    Para",
            "+0001a500: 6d65 7465 7273 0a20 2020 202d 2d2d 2d2d  meters.    -----",
            "+0001a510: 2d2d 2d2d 2d0a 2020 2020 736f 696c 696e  -----.    soilin",
            "+0001a520: 673a 206e 756d 6572 6963 2c20 6465 6661  g: numeric, defa",
            "+0001a530: 756c 7420 320a 2020 2020 7368 6164 696e  ult 2.    shadin",
            "+0001a540: 673a 206e 756d 6572 6963 2c20 6465 6661  g: numeric, defa",
            "+0001a550: 756c 7420 330a 2020 2020 736e 6f77 3a20  ult 3.    snow: ",
            "+0001a560: 6e75 6d65 7269 632c 2064 6566 6175 6c74  numeric, default",
            "+0001a570: 2030 0a20 2020 206d 6973 6d61 7463 683a   0.    mismatch:",
            "+0001a580: 206e 756d 6572 6963 2c20 6465 6661 756c   numeric, defaul",
            "+0001a590: 7420 320a 2020 2020 7769 7269 6e67 3a20  t 2.    wiring: ",
            "+0001a5a0: 6e75 6d65 7269 632c 2064 6566 6175 6c74  numeric, default",
            "+0001a5b0: 2032 0a20 2020 2063 6f6e 6e65 6374 696f   2.    connectio",
            "+0001a5c0: 6e73 3a20 6e75 6d65 7269 632c 2064 6566  ns: numeric, def",
            "+0001a5d0: 6175 6c74 2030 2e35 0a20 2020 206c 6964  ault 0.5.    lid",
            "+0001a5e0: 3a20 6e75 6d65 7269 632c 2064 6566 6175  : numeric, defau",
            "+0001a5f0: 6c74 2031 2e35 0a20 2020 2020 2020 204c  lt 1.5.        L",
            "+0001a600: 6967 6874 2069 6e64 7563 6564 2064 6567  ight induced deg",
            "+0001a610: 7261 6461 7469 6f6e 0a20 2020 206e 616d  radation.    nam",
            "+0001a620: 6570 6c61 7465 5f72 6174 696e 673a 206e  eplate_rating: n",
            "+0001a630: 756d 6572 6963 2c20 6465 6661 756c 7420  umeric, default ",
            "+0001a640: 310a 2020 2020 6167 653a 206e 756d 6572  1.    age: numer",
            "+0001a650: 6963 2c20 6465 6661 756c 7420 300a 2020  ic, default 0.  ",
            "+0001a660: 2020 6176 6169 6c61 6269 6c69 7479 3a20    availability: ",
            "+0001a670: 6e75 6d65 7269 632c 2064 6566 6175 6c74  numeric, default",
            "+0001a680: 2033 0a0a 2020 2020 5265 7475 726e 730a   3..    Returns.",
            "+0001a690: 2020 2020 2d2d 2d2d 2d2d 2d0a 2020 2020      -------.    ",
            "+0001a6a0: 6c6f 7373 6573 3a20 6e75 6d65 7269 630a  losses: numeric.",
            "+0001a6b0: 2020 2020 2020 2020 5379 7374 656d 206c          System l",
            "+0001a6c0: 6f73 7365 7320 696e 2075 6e69 7473 206f  osses in units o",
            "+0001a6d0: 6620 252e 0a0a 2020 2020 5265 6665 7265  f %...    Refere",
            "+0001a6e0: 6e63 6573 0a20 2020 202d 2d2d 2d2d 2d2d  nces.    -------",
            "+0001a6f0: 2d2d 2d0a 2020 2020 2e2e 205b 315d 2041  ---.    .. [1] A",
            "+0001a700: 2e20 502e 2044 6f62 6f73 2c20 2250 5657  . P. Dobos, \"PVW",
            "+0001a710: 6174 7473 2056 6572 7369 6f6e 2035 204d  atts Version 5 M",
            "+0001a720: 616e 7561 6c22 0a20 2020 2020 2020 2020  anual\".         ",
            "+0001a730: 2020 6874 7470 3a2f 2f70 7677 6174 7473    http://pvwatts",
            "+0001a740: 2e6e 7265 6c2e 676f 762f 646f 776e 6c6f  .nrel.gov/downlo",
            "+0001a750: 6164 732f 7076 7761 7474 7376 352e 7064  ads/pvwattsv5.pd",
            "+0001a760: 660a 2020 2020 2020 2020 2020 2028 3230  f.           (20",
            "+0001a770: 3134 292e 0a20 2020 2022 2222 0a0a 2020  14)..    \"\"\"..  ",
            "+0001a780: 2020 7061 7261 6d73 203d 205b 736f 696c    params = [soil",
            "+0001a790: 696e 672c 2073 6861 6469 6e67 2c20 736e  ing, shading, sn",
            "+0001a7a0: 6f77 2c20 6d69 736d 6174 6368 2c20 7769  ow, mismatch, wi",
            "+0001a7b0: 7269 6e67 2c20 636f 6e6e 6563 7469 6f6e  ring, connection",
            "+0001a7c0: 732c 206c 6964 2c0a 2020 2020 2020 2020  s, lid,.        ",
            "+0001a7d0: 2020 2020 2020 6e61 6d65 706c 6174 655f        nameplate_",
            "+0001a7e0: 7261 7469 6e67 2c20 6167 652c 2061 7661  rating, age, ava",
            "+0001a7f0: 696c 6162 696c 6974 795d 0a0a 2020 2020  ilability]..    ",
            "+0001a800: 2320 6d61 6e75 616c 6c79 206c 6f6f 7069  # manually loopi",
            "+0001a810: 6e67 206f 7665 7220 7061 7261 6d73 2061  ng over params a",
            "+0001a820: 6c6c 6f77 7320 666f 7220 6e75 6d70 792f  llows for numpy/",
            "+0001a830: 7061 6e64 6173 2074 6f20 6861 6e64 6c65  pandas to handle",
            "+0001a840: 2061 6e79 0a20 2020 2023 2061 7272 6179   any.    # array",
            "+0001a850: 2d6c 696b 6520 6272 6f61 6463 6173 7469  -like broadcasti",
            "+0001a860: 6e67 2074 6861 7420 6d69 6768 7420 6265  ng that might be",
            "+0001a870: 206e 6563 6573 7361 7279 2e0a 2020 2020   necessary..    ",
            "+0001a880: 7065 7266 203d 2031 0a20 2020 2066 6f72  perf = 1.    for",
            "+0001a890: 2070 6172 616d 2069 6e20 7061 7261 6d73   param in params",
            "+0001a8a0: 3a0a 2020 2020 2020 2020 7065 7266 202a  :.        perf *",
            "+0001a8b0: 3d20 3120 2d20 7061 7261 6d2f 3130 300a  = 1 - param/100.",
            "+0001a8c0: 0a20 2020 206c 6f73 7365 7320 3d20 2831  .    losses = (1",
            "+0001a8d0: 202d 2070 6572 6629 202a 2031 3030 2e0a   - perf) * 100..",
            "+0001a8e0: 0a20 2020 2072 6574 7572 6e20 6c6f 7373  .    return loss",
            "+0001a8f0: 6573 0a0a 0a64 6566 2064 635f 6f68 6d73  es...def dc_ohms",
            "+0001a900: 5f66 726f 6d5f 7065 7263 656e 7428 766d  _from_percent(vm",
            "+0001a910: 705f 7265 662c 2069 6d70 5f72 6566 2c20  p_ref, imp_ref, ",
            "+0001a920: 6463 5f6f 686d 6963 5f70 6572 6365 6e74  dc_ohmic_percent",
            "+0001a930: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              ",
            "+0001a940: 2020 2020 2020 2020 2020 206d 6f64 756c             modul",
            "+0001a950: 6573 5f70 6572 5f73 7472 696e 673d 312c  es_per_string=1,",
            "+0001a960: 0a20 2020 2020 2020 2020 2020 2020 2020  .               ",
            "+0001a970: 2020 2020 2020 2020 2020 7374 7269 6e67            string",
            "+0001a980: 733d 3129 3a0a 2020 2020 7222 2222 0a20  s=1):.    r\"\"\". ",
            "+0001a990: 2020 2043 616c 6375 6c61 7465 2074 6865     Calculate the",
            "+0001a9a0: 2065 7175 6976 616c 656e 7420 7265 7369   equivalent resi",
            "+0001a9b0: 7374 616e 6365 206f 6620 7468 6520 636f  stance of the co",
            "+0001a9c0: 6e64 7563 746f 7273 2066 726f 6d20 7468  nductors from th",
            "+0001a9d0: 6520 7065 7263 656e 740a 2020 2020 6f68  e percent.    oh",
            "+0001a9e0: 6d69 6320 6c6f 7373 206f 6620 616e 2061  mic loss of an a",
            "+0001a9f0: 7272 6179 2061 7420 7265 6665 7265 6e63  rray at referenc",
            "+0001aa00: 6520 636f 6e64 6974 696f 6e73 2e0a 0a20  e conditions... ",
            "+0001aa10: 2020 2050 6172 616d 6574 6572 730a 2020     Parameters.  ",
            "+0001aa20: 2020 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020    ----------.   ",
            "+0001aa30: 2076 6d70 5f72 6566 3a20 6e75 6d65 7269   vmp_ref: numeri",
            "+0001aa40: 630a 2020 2020 2020 2020 4d61 7869 6d75  c.        Maximu",
            "+0001aa50: 6d20 706f 7765 7220 766f 6c74 6167 6520  m power voltage ",
            "+0001aa60: 6f66 206f 6e65 206d 6f64 756c 6520 6174  of one module at",
            "+0001aa70: 2072 6566 6572 656e 6365 2063 6f6e 6469   reference condi",
            "+0001aa80: 7469 6f6e 732e 205b 565d 0a20 2020 2069  tions. [V].    i",
            "+0001aa90: 6d70 5f72 6566 3a20 6e75 6d65 7269 630a  mp_ref: numeric.",
            "+0001aaa0: 2020 2020 2020 2020 4d61 7869 6d75 6d20          Maximum ",
            "+0001aab0: 706f 7765 7220 6375 7272 656e 7420 6f66  power current of",
            "+0001aac0: 206f 6e65 206d 6f64 756c 6520 6174 2072   one module at r",
            "+0001aad0: 6566 6572 656e 6365 2063 6f6e 6469 7469  eference conditi",
            "+0001aae0: 6f6e 732e 205b 415d 0a20 2020 2064 635f  ons. [A].    dc_",
            "+0001aaf0: 6f68 6d69 635f 7065 7263 656e 743a 206e  ohmic_percent: n",
            "+0001ab00: 756d 6572 6963 0a20 2020 2020 2020 2041  umeric.        A",
            "+0001ab10: 7272 6179 2044 4320 706f 7765 7220 6c6f  rray DC power lo",
            "+0001ab20: 7373 2061 7320 6120 7065 7263 656e 7420  ss as a percent ",
            "+0001ab30: 6f66 2044 4320 706f 7765 7220 6c6f 7373  of DC power loss",
            "+0001ab40: 2061 7420 7265 6665 7265 6e63 650a 2020   at reference.  ",
            "+0001ab50: 2020 2020 2020 636f 6e64 6974 696f 6e73        conditions",
            "+0001ab60: 2e20 496e 2070 6572 6365 6e74 2c20 652e  . In percent, e.",
            "+0001ab70: 672e 2031 2e35 2520 6c6f 7373 2069 7320  g. 1.5% loss is ",
            "+0001ab80: 696e 7075 7420 6173 2031 2e35 2e0a 2020  input as 1.5..  ",
            "+0001ab90: 2020 6d6f 6475 6c65 735f 7065 725f 7374    modules_per_st",
            "+0001aba0: 7269 6e67 3a20 696e 742c 2064 6566 6175  ring: int, defau",
            "+0001abb0: 6c74 2031 0a20 2020 2020 2020 204e 756d  lt 1.        Num",
            "+0001abc0: 6265 7220 6f66 2073 6572 6965 732d 636f  ber of series-co",
            "+0001abd0: 6e6e 6563 7465 6420 6d6f 6475 6c65 7320  nnected modules ",
            "+0001abe0: 7065 7220 7374 7269 6e67 2069 6e20 7468  per string in th",
            "+0001abf0: 6520 6172 7261 792e 0a20 2020 2073 7472  e array..    str",
            "+0001ac00: 696e 6773 3a20 696e 742c 2064 6566 6175  ings: int, defau",
            "+0001ac10: 6c74 2031 0a20 2020 2020 2020 204e 756d  lt 1.        Num",
            "+0001ac20: 6265 7220 6f66 2070 6172 616c 6c65 6c20  ber of parallel ",
            "+0001ac30: 7374 7269 6e67 7320 696e 2074 6865 2061  strings in the a",
            "+0001ac40: 7272 6179 2e0a 0a20 2020 2052 6574 7572  rray...    Retur",
            "+0001ac50: 6e73 0a20 2020 202d 2d2d 2d2d 2d2d 2d2d  ns.    ---------",
            "+0001ac60: 2d0a 2020 2020 5277 3a20 6e75 6d65 7269  -.    Rw: numeri",
            "+0001ac70: 630a 2020 2020 2020 2020 4571 7569 7661  c.        Equiva",
            "+0001ac80: 6c65 6e74 2072 6573 6973 7461 6e63 652e  lent resistance.",
            "+0001ac90: 205b 6f68 6d5d 0a0a 2020 2020 5365 6520   [ohm]..    See ",
            "+0001aca0: 416c 736f 0a20 2020 202d 2d2d 2d2d 2d2d  Also.    -------",
            "+0001acb0: 2d0a 2020 2020 7076 6c69 622e 7076 7379  -.    pvlib.pvsy",
            "+0001acc0: 7374 656d 2e64 635f 6f68 6d69 635f 6c6f  stem.dc_ohmic_lo",
            "+0001acd0: 7373 6573 0a0a 2020 2020 4e6f 7465 730a  sses..    Notes.",
            "+0001ace0: 2020 2020 2d2d 2d2d 2d0a 2020 2020 4571      -----.    Eq",
            "+0001acf0: 7569 7661 6c65 6e74 2072 6573 6973 7461  uivalent resista",
            "+0001ad00: 6e63 6520 6973 2063 616c 6375 6c61 7465  nce is calculate",
            "+0001ad10: 6420 6173 3a0a 0a20 2020 202e 2e20 6d61  d as:..    .. ma",
            "+0001ad20: 7468 3a3a 0a0a 2020 2020 2020 2020 525f  th::..        R_",
            "+0001ad30: 7720 3d20 5c6c 6566 7428 5c66 7261 637b  w = \\left(\\frac{",
            "+0001ad40: 4c5f 7b73 7463 7d7d 7b31 3030 7d5c 7269  L_{stc}}{100}\\ri",
            "+0001ad50: 6768 7429 205c 7469 6d65 7320 5c6c 6566  ght) \\times \\lef",
            "+0001ad60: 7428 5c66 7261 637b 0a20 2020 2020 2020  t(\\frac{.       ",
            "+0001ad70: 2056 5f7b 6172 7261 797d 7d7b 495f 7b61   V_{array}}{I_{a",
            "+0001ad80: 7272 6179 7d7d 5c72 6967 6874 290a 0a20  rray}}\\right).. ",
            "+0001ad90: 2020 203a 6d61 7468 3a60 525f 7760 2069     :math:`R_w` i",
            "+0001ada0: 7320 7468 6520 6571 7569 7661 6c65 6e74  s the equivalent",
            "+0001adb0: 2072 6573 6973 7461 6e63 6520 696e 206f   resistance in o",
            "+0001adc0: 686d 732e 0a20 2020 203a 6d61 7468 3a60  hms..    :math:`",
            "+0001add0: 565f 7b61 7272 6179 7d60 2069 7320 7468  V_{array}` is th",
            "+0001ade0: 6520 6172 7261 7920 766f 6c74 6167 652c  e array voltage,",
            "+0001adf0: 2065 7175 616c 2074 6f20 6060 766d 705f   equal to ``vmp_",
            "+0001ae00: 7265 6660 6020 7469 6d65 730a 2020 2020  ref`` times.    ",
            "+0001ae10: 6060 6d6f 6475 6c65 735f 7065 725f 7374  ``modules_per_st",
            "+0001ae20: 7269 6e67 6060 2e0a 2020 2020 3a6d 6174  ring``..    :mat",
            "+0001ae30: 683a 6049 5f7b 6172 7261 797d 6020 6973  h:`I_{array}` is",
            "+0001ae40: 2074 6865 2061 7272 6179 2063 7572 7265   the array curre",
            "+0001ae50: 6e74 2c20 6571 7561 6c20 746f 2060 6069  nt, equal to ``i",
            "+0001ae60: 6d70 5f72 6566 6060 2074 696d 6573 0a20  mp_ref`` times. ",
            "+0001ae70: 2020 2060 6073 7472 696e 6773 6060 2e0a     ``strings``..",
            "+0001ae80: 2020 2020 3a6d 6174 683a 604c 5f7b 7374      :math:`L_{st",
            "+0001ae90: 637d 6020 6973 2074 6865 2069 6e70 7574  c}` is the input",
            "+0001aea0: 2044 4320 6c6f 7373 2070 6572 6365 6e74   DC loss percent",
            "+0001aeb0: 2061 7420 7265 6665 7265 6e63 6520 636f   at reference co",
            "+0001aec0: 6e64 6974 696f 6e73 2e0a 0a20 2020 2022  nditions...    \"",
            "+0001aed0: 2222 0a20 2020 2076 6d70 203d 206d 6f64  \"\".    vmp = mod",
            "+0001aee0: 756c 6573 5f70 6572 5f73 7472 696e 6720  ules_per_string ",
            "+0001aef0: 2a20 766d 705f 7265 660a 0a20 2020 2069  * vmp_ref..    i",
            "+0001af00: 6d70 203d 2073 7472 696e 6773 202a 2069  mp = strings * i",
            "+0001af10: 6d70 5f72 6566 0a0a 2020 2020 5277 203d  mp_ref..    Rw =",
            "+0001af20: 2028 6463 5f6f 686d 6963 5f70 6572 6365   (dc_ohmic_perce",
            "+0001af30: 6e74 202f 2031 3030 2920 2a20 2876 6d70  nt / 100) * (vmp",
            "+0001af40: 202f 2069 6d70 290a 0a20 2020 2072 6574   / imp)..    ret",
            "+0001af50: 7572 6e20 5277 0a0a 0a64 6566 2064 635f  urn Rw...def dc_",
            "+0001af60: 6f68 6d69 635f 6c6f 7373 6573 2872 6573  ohmic_losses(res",
            "+0001af70: 6973 7461 6e63 652c 2063 7572 7265 6e74  istance, current",
            "+0001af80: 293a 0a20 2020 2072 2222 220a 2020 2020  ):.    r\"\"\".    ",
            "+0001af90: 5265 7475 726e 7320 6f68 6d69 6320 6c6f  Returns ohmic lo",
            "+0001afa0: 7373 6573 2069 6e20 756e 6974 7320 6f66  sses in units of",
            "+0001afb0: 2070 6f77 6572 2066 726f 6d20 7468 6520   power from the ",
            "+0001afc0: 6571 7569 7661 6c65 6e74 0a20 2020 2072  equivalent.    r",
            "+0001afd0: 6573 6973 7461 6e63 6520 6f66 2074 6865  esistance of the",
            "+0001afe0: 2077 6972 6573 2061 6e64 2074 6865 206f   wires and the o",
            "+0001aff0: 7065 7261 7469 6e67 2063 7572 7265 6e74  perating current",
            "+0001b000: 2e0a 0a20 2020 2050 6172 616d 6574 6572  ...    Parameter",
            "+0001b010: 730a 2020 2020 2d2d 2d2d 2d2d 2d2d 2d2d  s.    ----------",
            "+0001b020: 0a20 2020 2072 6573 6973 7461 6e63 653a  .    resistance:",
            "+0001b030: 206e 756d 6572 6963 0a20 2020 2020 2020   numeric.       ",
            "+0001b040: 2045 7175 6976 616c 656e 7420 7265 7369   Equivalent resi",
            "+0001b050: 7374 616e 6365 206f 6620 7769 7265 732e  stance of wires.",
            "+0001b060: 205b 6f68 6d5d 0a20 2020 2063 7572 7265   [ohm].    curre",
            "+0001b070: 6e74 3a20 6e75 6d65 7269 632c 2066 6c6f  nt: numeric, flo",
            "+0001b080: 6174 206f 7220 6172 7261 792d 6c69 6b65  at or array-like",
            "+0001b090: 0a20 2020 2020 2020 204f 7065 7261 7469  .        Operati",
            "+0001b0a0: 6e67 2063 7572 7265 6e74 2e20 5b41 5d0a  ng current. [A].",
            "+0001b0b0: 0a20 2020 2052 6574 7572 6e73 0a20 2020  .    Returns.   ",
            "+0001b0c0: 202d 2d2d 2d2d 2d2d 2d2d 2d0a 2020 2020   ----------.    ",
            "+0001b0d0: 6c6f 7373 3a20 6e75 6d65 7269 630a 2020  loss: numeric.  ",
            "+0001b0e0: 2020 2020 2020 506f 7765 7220 6c6f 7373        Power loss",
            "+0001b0f0: 2e20 5b57 5d0a 0a20 2020 2053 6565 2041  . [W]..    See A",
            "+0001b100: 6c73 6f0a 2020 2020 2d2d 2d2d 2d2d 2d2d  lso.    --------",
            "+0001b110: 0a20 2020 2070 766c 6962 2e70 7673 7973  .    pvlib.pvsys",
            "+0001b120: 7465 6d2e 6463 5f6f 686d 735f 6672 6f6d  tem.dc_ohms_from",
            "+0001b130: 5f70 6572 6365 6e74 0a0a 2020 2020 4e6f  _percent..    No",
            "+0001b140: 7465 730a 2020 2020 2d2d 2d2d 2d0a 2020  tes.    -----.  ",
            "+0001b150: 2020 4f68 6d69 6320 2861 6c73 6f20 7465    Ohmic (also te",
            "+0001b160: 726d 6564 206a 6f75 6c65 206f 7220 6865  rmed joule or he",
            "+0001b170: 6174 2920 6c6f 7373 2069 7320 7468 6520  at) loss is the ",
            "+0001b180: 706f 7765 7220 6c6f 7374 2064 7565 2074  power lost due t",
            "+0001b190: 6f20 6375 7272 656e 740a 2020 2020 666c  o current.    fl",
            "+0001b1a0: 6f77 696e 6720 7468 726f 7567 6820 6120  owing through a ",
            "+0001b1b0: 636f 6e64 7563 746f 722e 204f 686d 6963  conductor. Ohmic",
            "+0001b1c0: 206c 6f73 732c 203a 6d61 7468 3a60 4c60   loss, :math:`L`",
            "+0001b1d0: 2c20 6973 2063 6f6d 7075 7465 6420 6173  , is computed as",
            "+0001b1e0: 0a0a 2020 2020 2e2e 206d 6174 683a 3a0a  ..    .. math::.",
            "+0001b1f0: 0a20 2020 2020 2020 204c 203d 2049 5e32  .        L = I^2",
            "+0001b200: 205c 7469 6d65 7320 520a 0a20 2020 2077   \\times R..    w",
            "+0001b210: 6865 7265 203a 6d61 7468 3a60 4960 2069  here :math:`I` i",
            "+0001b220: 7320 7468 6520 6375 7272 656e 7420 2841  s the current (A",
            "+0001b230: 2920 616e 6420 3a6d 6174 683a 6052 6020  ) and :math:`R` ",
            "+0001b240: 6973 2074 6865 2072 6573 6973 7461 6e63  is the resistanc",
            "+0001b250: 6520 6f66 2074 6865 0a20 2020 2063 6f6e  e of the.    con",
            "+0001b260: 6475 6374 6f72 2028 6f68 6d73 292e 0a20  ductor (ohms).. ",
            "+0001b270: 2020 2022 2222 0a20 2020 2072 6574 7572     \"\"\".    retur",
            "+0001b280: 6e20 7265 7369 7374 616e 6365 202a 2063  n resistance * c",
            "+0001b290: 7572 7265 6e74 202a 2063 7572 7265 6e74  urrent * current",
            "+0001b2a0: 0a0a 0a64 6566 2063 6f6d 6269 6e65 5f6c  ...def combine_l",
            "+0001b2b0: 6f73 735f 6661 6374 6f72 7328 696e 6465  oss_factors(inde",
            "+0001b2c0: 782c 202a 6c6f 7373 6573 2c20 6669 6c6c  x, *losses, fill",
            "+0001b2d0: 5f6d 6574 686f 643d 2766 6669 6c6c 2729  _method='ffill')",
            "+0001b2e0: 3a0a 2020 2020 7222 2222 0a20 2020 2043  :.    r\"\"\".    C",
            "+0001b2f0: 6f6d 6269 6e65 7320 5365 7269 6573 206c  ombines Series l",
            "+0001b300: 6f73 7320 6672 6163 7469 6f6e 7320 7768  oss fractions wh",
            "+0001b310: 696c 6520 7365 7474 696e 6720 6120 636f  ile setting a co",
            "+0001b320: 6d6d 6f6e 2069 6e64 6578 2e0a 0a20 2020  mmon index...   ",
            "+0001b330: 2054 6865 2073 6570 6172 6174 6520 6c6f   The separate lo",
            "+0001b340: 7373 6573 2061 7265 2063 6f6d 706f 756e  sses are compoun",
            "+0001b350: 6465 6420 7573 696e 6720 7468 6520 666f  ded using the fo",
            "+0001b360: 6c6c 6f77 696e 6720 6571 7561 7469 6f6e  llowing equation",
            "+0001b370: 3a0a 0a20 2020 202e 2e20 6d61 7468 3a3a  :..    .. math::",
            "+0001b380: 0a0a 2020 2020 2020 2020 4c5f 7b74 6f74  ..        L_{tot",
            "+0001b390: 616c 7d20 3d20 3120 2d20 5b20 3120 2d20  al} = 1 - [ 1 - ",
            "+0001b3a0: 5c50 695f 6920 2820 3120 2d20 4c5f 6920  \\Pi_i ( 1 - L_i ",
            "+0001b3b0: 2920 5d0a 0a20 2020 203a 6d61 7468 3a60  ) ]..    :math:`",
            "+0001b3c0: 4c5f 7b74 6f74 616c 7d60 2069 7320 7468  L_{total}` is th",
            "+0001b3d0: 6520 746f 7461 6c20 6c6f 7373 2072 6574  e total loss ret",
            "+0001b3e0: 7572 6e65 640a 2020 2020 3a6d 6174 683a  urned.    :math:",
            "+0001b3f0: 604c 5f69 6020 6973 2065 6163 6820 696e  `L_i` is each in",
            "+0001b400: 6469 7669 6475 616c 206c 6f73 7320 6661  dividual loss fa",
            "+0001b410: 6374 6f72 2069 6e70 7574 0a0a 2020 2020  ctor input..    ",
            "+0001b420: 4e6f 7465 2074 6865 206c 6f73 7365 7320  Note the losses ",
            "+0001b430: 6d75 7374 2065 6163 6820 6265 2061 2073  must each be a s",
            "+0001b440: 6572 6965 7320 7769 7468 2061 2044 6174  eries with a Dat",
            "+0001b450: 6574 696d 6549 6e64 6578 2e0a 2020 2020  etimeIndex..    ",
            "+0001b460: 416c 6c20 6c6f 7373 6573 2077 696c 6c20  All losses will ",
            "+0001b470: 6265 2072 6573 616d 706c 6564 2074 6f20  be resampled to ",
            "+0001b480: 6d61 7463 6820 7468 6520 696e 6465 7820  match the index ",
            "+0001b490: 7061 7261 6d65 7465 7220 7573 696e 670a  parameter using.",
            "+0001b4a0: 2020 2020 7468 6520 6669 6c6c 206d 6574      the fill met",
            "+0001b4b0: 686f 6420 7370 6563 6966 6965 6420 2864  hod specified (d",
            "+0001b4c0: 6566 6175 6c74 7320 746f 2022 6669 6c6c  efaults to \"fill",
            "+0001b4d0: 2066 6f72 7761 7264 2229 2e0a 0a20 2020   forward\")...   ",
            "+0001b4e0: 2050 6172 616d 6574 6572 730a 2020 2020   Parameters.    ",
            "+0001b4f0: 2d2d 2d2d 2d2d 2d2d 2d2d 0a20 2020 2069  ----------.    i",
            "+0001b500: 6e64 6578 203a 2044 6174 6574 696d 6549  ndex : DatetimeI",
            "+0001b510: 6e64 6578 0a20 2020 2020 2020 2054 6865  ndex.        The",
            "+0001b520: 2069 6e64 6578 206f 6620 7468 6520 7265   index of the re",
            "+0001b530: 7475 726e 6564 206c 6f73 7320 6661 6374  turned loss fact",
            "+0001b540: 6f72 730a 0a20 2020 202a 6c6f 7373 6573  ors..    *losses",
            "+0001b550: 203a 2053 6572 6965 730a 2020 2020 2020   : Series.      ",
            "+0001b560: 2020 4f6e 6520 6f72 206d 6f72 6520 5365    One or more Se",
            "+0001b570: 7269 6573 206f 6620 6672 6163 7469 6f6e  ries of fraction",
            "+0001b580: 7320 746f 2062 6520 636f 6d70 6f75 6e64  s to be compound",
            "+0001b590: 6564 0a0a 2020 2020 6669 6c6c 5f6d 6574  ed..    fill_met",
            "+0001b5a0: 686f 6420 3a20 7b27 6666 696c 6c27 2c20  hod : {'ffill', ",
            "+0001b5b0: 2762 6669 6c6c 272c 2027 6e65 6172 6573  'bfill', 'neares",
            "+0001b5c0: 7427 7d2c 2064 6566 6175 6c74 2027 6666  t'}, default 'ff",
            "+0001b5d0: 696c 6c27 0a20 2020 2020 2020 204d 6574  ill'.        Met",
            "+0001b5e0: 686f 6420 746f 2075 7365 2066 6f72 2066  hod to use for f",
            "+0001b5f0: 696c 6c69 6e67 2068 6f6c 6573 2069 6e20  illing holes in ",
            "+0001b600: 7265 696e 6465 7865 6420 4461 7461 4672  reindexed DataFr",
            "+0001b610: 616d 650a 0a20 2020 2052 6574 7572 6e73  ame..    Returns",
            "+0001b620: 0a20 2020 202d 2d2d 2d2d 2d2d 0a20 2020  .    -------.   ",
            "+0001b630: 2053 6572 6965 730a 2020 2020 2020 2020   Series.        ",
            "+0001b640: 4672 6163 7469 6f6e 7320 7265 7375 6c74  Fractions result",
            "+0001b650: 696e 6720 6672 6f6d 2074 6865 2063 6f6d  ing from the com",
            "+0001b660: 6269 6e61 7469 6f6e 206f 6620 6561 6368  bination of each",
            "+0001b670: 206c 6f73 7320 6661 6374 6f72 0a20 2020   loss factor.   ",
            "+0001b680: 2022 2222 0a20 2020 2063 6f6d 6269 6e65   \"\"\".    combine",
            "+0001b690: 645f 6661 6374 6f72 203d 2031 0a0a 2020  d_factor = 1..  ",
            "+0001b6a0: 2020 666f 7220 6c6f 7373 2069 6e20 6c6f    for loss in lo",
            "+0001b6b0: 7373 6573 3a0a 2020 2020 2020 2020 6c6f  sses:.        lo",
            "+0001b6c0: 7373 203d 206c 6f73 732e 7265 696e 6465  ss = loss.reinde",
            "+0001b6d0: 7828 696e 6465 782c 206d 6574 686f 643d  x(index, method=",
            "+0001b6e0: 6669 6c6c 5f6d 6574 686f 6429 0a20 2020  fill_method).   ",
            "+0001b6f0: 2020 2020 2063 6f6d 6269 6e65 645f 6661       combined_fa",
            "+0001b700: 6374 6f72 202a 3d20 2831 202d 206c 6f73  ctor *= (1 - los",
            "+0001b710: 7329 0a0a 2020 2020 7265 7475 726e 2031  s)..    return 1",
            "+0001b720: 202d 2063 6f6d 6269 6e65 645f 6661 6374   - combined_fact",
            "+0001b730: 6f72 0a                                  or."
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/solarposition.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/solarposition.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/solarposition.py",
            "@@ -130,15 +130,15 @@",
            "           raw_spa_output=False):",
            "     r\"\"\"",
            "     Calculate the solar position using the C implementation of the NREL",
            "     SPA code.",
            " ",
            "     The source files for this code are located in './spa_c_files/', along with",
            "     a README file which describes how the C code is wrapped in Python.",
            "-    Due to license restrictions, the C code must be downloaded seperately",
            "+    Due to license restrictions, the C code must be downloaded separately",
            "     and used in accordance with it's license.",
            " ",
            "     This function is slower and no more accurate than :py:func:`spa_python`.",
            " ",
            "     Parameters",
            "     ----------",
            "     time : pandas.DatetimeIndex"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/spectrum/irradiance.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/spectrum/irradiance.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/spectrum/irradiance.py",
            "@@ -134,15 +134,16 @@",
            "         :py:class:`pandas.DataFrame` with column headers as wavelength [nm].",
            " ",
            "     Returns",
            "     -------",
            "     ape : numeric or pandas.Series",
            "         Average Photon Energy [eV].",
            "         Note: returns ``np.nan`` in the case of all-zero spectral irradiance",
            "-        input.",
            "+        input, or where one or more spectral irradiance values is",
            "+        ``np.nan``.",
            " ",
            "     Notes",
            "     -----",
            "     The average photon energy (APE) is an index used to characterise the solar",
            "     spectrum. It has been used widely in the physics literature since the",
            "     1900s, but its application for solar spectral irradiance characterisation",
            "     in the context of PV performance modelling was proposed in 2002 [1]_. The"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/temperature.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/temperature.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/temperature.py",
            "@@ -17,15 +17,16 @@",
            "     'sapm': {",
            "         'open_rack_glass_glass': {'a': -3.47, 'b': -.0594, 'deltaT': 3},",
            "         'close_mount_glass_glass': {'a': -2.98, 'b': -.0471, 'deltaT': 1},",
            "         'open_rack_glass_polymer': {'a': -3.56, 'b': -.0750, 'deltaT': 3},",
            "         'insulated_back_glass_polymer': {'a': -2.81, 'b': -.0455, 'deltaT': 0},",
            "     },",
            "     'pvsyst': {'freestanding': {'u_c': 29.0, 'u_v': 0},",
            "-               'insulated': {'u_c': 15.0, 'u_v': 0}}",
            "+               'insulated': {'u_c': 15.0, 'u_v': 0},",
            "+               'semi_integrated': {'u_c': 20.0, 'u_v': 0}}",
            " }",
            " \"\"\"Dictionary of temperature parameters organized by model.",
            " ",
            " There are keys for each model at the top level. Currently there are two models,",
            " ``'sapm'`` for the Sandia Array Performance Model, and ``'pvsyst'``. Each model",
            " has a dictionary of configurations; a value is itself a dictionary containing",
            " model parameters. Retrieve parameters by indexing the model and configuration",
            "@@ -378,27 +379,29 @@",
            " ",
            "         T_{C} = T_{a} + \\frac{\\alpha E (1 - \\eta_{m})}{U_{c} + U_{v} \\times WS}",
            " ",
            "     Inputs to the model are plane-of-array irradiance :math:`E` (W/m2), ambient",
            "     air temperature :math:`T_{a}` (C) and wind speed :math:`WS` (m/s). Model",
            "     output is cell temperature :math:`T_{C}`. Model parameters depend both on",
            "     the module construction and its mounting. Parameters are provided in",
            "-    [1]_ for open (freestanding) and close (insulated) mounting configurations,",
            "-    , and are coded for convenience in",
            "+    [1]_ for open (freestanding), close (insulated), and intermediate",
            "+    (semi_integrated) mounting configurations, and are coded for convenience in",
            "     :data:`~pvlib.temperature.TEMPERATURE_MODEL_PARAMETERS`. The heat loss",
            "     factors provided represent the combined effect of convection, radiation and",
            "     conduction, and their values are experimentally determined.",
            " ",
            "-    +--------------+---------------+---------------+",
            "-    | Mounting     | :math:`U_{c}` | :math:`U_{v}` |",
            "-    +==============+===============+===============+",
            "-    | freestanding | 29.0          | 0.0           |",
            "-    +--------------+---------------+---------------+",
            "-    | insulated    | 15.0          | 0.0           |",
            "-    +--------------+---------------+---------------+",
            "+    +-----------------+---------------+---------------+",
            "+    | Mounting        | :math:`U_{c}` | :math:`U_{v}` |",
            "+    +=================+===============+===============+",
            "+    | freestanding    | 29.0          | 0.0           |",
            "+    +-----------------+---------------+---------------+",
            "+    | insulated       | 15.0          | 0.0           |",
            "+    +-----------------+---------------+---------------+",
            "+    | semi_integrated | 20.0          | 0.0           |",
            "+    +-----------------+---------------+---------------+",
            " ",
            "     Mounting cases can be described in terms of air flow across and around the",
            "     rear-facing surface of the module:",
            " ",
            "     * \"freestanding\" refers to mounting that allows relatively free air",
            "       circulation around the modules. This case is typical of ground-mounted",
            "       systems on tilted, fixed racking or single axis trackers."
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/pvlib/tools.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/pvlib/tools.py",
            "+++ /home/pvlib-python-0.13.0/pvlib/tools.py",
            "@@ -1,11 +1,12 @@",
            " \"\"\"",
            " Collection of functions used in pvlib_python",
            " \"\"\"",
            " ",
            "+import contextlib",
            " import datetime as dt",
            " import warnings",
            " ",
            " import numpy as np",
            " import pandas as pd",
            " import pytz",
            " ",
            "@@ -555,7 +556,33 @@",
            "         The normalized array.",
            "     \"\"\"",
            "     try:  # expect numpy array",
            "         res = a / np.max(np.absolute(a), axis=-1, keepdims=True)",
            "     except ValueError:  # fails for pandas objects",
            "         res = a.div(a.abs().max(axis=0, skipna=True))",
            "     return res",
            "+",
            "+",
            "+def _file_context_manager(filename_or_object, mode='r'):",
            "+    \"\"\"",
            "+    Open a filename/path for reading, or pass a file-like object",
            "+    through unchanged.",
            "+",
            "+    Parameters",
            "+    ----------",
            "+    filename_or_object : str, path-like, or file-like object",
            "+        The filename/path or object to convert to an object",
            "+",
            "+    Returns",
            "+    -------",
            "+    context : context manager",
            "+        A file-like object to be used via python's \"with [context] as buffer:\"",
            "+        syntax.",
            "+    \"\"\"",
            "+",
            "+    if hasattr(filename_or_object, \"read\"):",
            "+        # already a file-like object",
            "+        context = contextlib.nullcontext(filename_or_object)",
            "+    else:",
            "+        # otherwise, assume a filename or path",
            "+        context = open(str(filename_or_object), mode=mode)",
            "+    return context"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/bifacial/test_infinite_sheds.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/bifacial/test_infinite_sheds.py",
            "+++ /home/pvlib-python-0.13.0/tests/bifacial/test_infinite_sheds.py",
            "@@ -38,27 +38,28 @@",
            "     c23 = (0 - sqr3) / np.sqrt(1.25**2 + (0 - sqr3)**2)  # right edge row 1",
            "     vf_2 = 0.5 * (c23 - c22 + c21 - c20)  # vf at point 1",
            "     vfs_ground_sky = np.array([vf_0, vf_1, vf_2])",
            "     return syst, pts, vfs_ground_sky",
            " ",
            " ",
            " def test__poa_ground_shadows():",
            "-    poa_ground, f_gnd_beam, df, vf_gnd_sky = (300., 0.5, 0.5, 0.2)",
            "-    result = infinite_sheds._poa_ground_shadows(",
            "-        poa_ground, f_gnd_beam, df, vf_gnd_sky)",
            "-    expected = 300. * (0.5 * 0.5 + 0.5 * 0.2)",
            "+    ghi, dhi, albedo, f_gnd_beam, vf_gnd_sky = (300., 100, 0.3, 0.5, 0.2)",
            "+    result = infinite_sheds._poa_ground_shadows(ghi, dhi, albedo, f_gnd_beam,",
            "+                                                vf_gnd_sky)",
            "+",
            "+    expected = 0.3 * (200 * 0.5 + 100 * 0.2)",
            "     assert np.isclose(result, expected)",
            "     # vector inputs",
            "-    poa_ground = np.array([300., 300.])",
            "-    f_gnd_beam = np.array([0.5, 0.5])",
            "-    df = np.array([0.5, 0.])",
            "-    vf_gnd_sky = np.array([0.2, 0.2])",
            "-    result = infinite_sheds._poa_ground_shadows(",
            "-        poa_ground, f_gnd_beam, df, vf_gnd_sky)",
            "-    expected_vec = np.array([expected, 300. * 0.5])",
            "+    ghi = np.array([ghi, ghi])",
            "+    dhi = np.array([dhi, 0])",
            "+    f_gnd_beam = np.array([f_gnd_beam, f_gnd_beam])",
            "+    vf_gnd_sky = np.array([vf_gnd_sky, vf_gnd_sky])",
            "+    result = infinite_sheds._poa_ground_shadows(ghi, dhi, albedo, f_gnd_beam,",
            "+                                                vf_gnd_sky)",
            "+    expected_vec = np.array([expected, 300. * 0.5 * 0.3])",
            "     assert np.allclose(result, expected_vec)",
            " ",
            " ",
            " def test__shaded_fraction_floats():",
            "     result = infinite_sheds._shaded_fraction(",
            "         solar_zenith=60., solar_azimuth=180., surface_tilt=60.,",
            "         surface_azimuth=180., gcr=1.0)"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/conftest.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/conftest.py",
            "+++ /home/pvlib-python-0.13.0/tests/conftest.py",
            "@@ -80,14 +80,34 @@",
            " ",
            " ",
            " platform_is_windows = platform.system() == 'Windows'",
            " skip_windows = pytest.mark.skipif(platform_is_windows,",
            "                                   reason='does not run on windows')",
            " ",
            " ",
            "+@pytest.fixture(scope=\"module\")",
            "+def nrel_api_key():",
            "+    \"\"\"Supplies pvlib-python's NREL Developer Network API key.",
            "+",
            "+    pvlib's CI utilizes a secret variable set to NREL_API_KEY",
            "+    to mitigate failures associated with using the default key of",
            "+    \"DEMO_KEY\". A user is capable of using their own key this way if",
            "+    desired however the default key should suffice for testing purposes.",
            "+    \"\"\"",
            "+    try:",
            "+        demo_key = os.environ[\"NREL_API_KEY\"]",
            "+    except KeyError:",
            "+        warnings.warn(",
            "+            \"WARNING: NREL API KEY environment variable not set! \"",
            "+            \"Using DEMO_KEY instead. Unexpected failures may occur.\"",
            "+        )",
            "+        demo_key = 'DEMO_KEY'",
            "+    return demo_key",
            "+",
            "+",
            " try:",
            "     # Attempt to load BSRN credentials used for testing pvlib.iotools.get_bsrn",
            "     bsrn_username = os.environ[\"BSRN_FTP_USERNAME\"]",
            "     bsrn_password = os.environ[\"BSRN_FTP_PASSWORD\"]",
            "     has_bsrn_credentials = True",
            " except KeyError:",
            "     has_bsrn_credentials = False"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/iotools/test_bsrn.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/iotools/test_bsrn.py",
            "+++ /home/pvlib-python-0.13.0/tests/iotools/test_bsrn.py",
            "@@ -2,23 +2,25 @@",
            " tests for :mod:`pvlib.iotools.bsrn`",
            " \"\"\"",
            " ",
            " import pandas as pd",
            " import pytest",
            " import os",
            " import tempfile",
            "-from pvlib.iotools import read_bsrn, get_bsrn",
            "+from pvlib.iotools import read_bsrn, get_bsrn, parse_bsrn",
            " from tests.conftest import (",
            "     TESTS_DATA_DIR,",
            "     RERUNS,",
            "     RERUNS_DELAY,",
            "     assert_index_equal,",
            "     requires_bsrn_credentials,",
            " )",
            " ",
            "+from pvlib._deprecation import pvlibDeprecationWarning",
            "+",
            " ",
            " @pytest.fixture(scope=\"module\")",
            " def bsrn_credentials():",
            "     \"\"\"Supplies the BSRN FTP credentials for testing purposes.",
            " ",
            "     Users should obtain their own credentials as described in the `read_bsrn`",
            "     documentation.\"\"\"",
            "@@ -29,27 +31,44 @@",
            " ",
            " @pytest.fixture",
            " def expected_index():",
            "     return pd.date_range(start='20160601', periods=43200, freq='1min',",
            "                          tz='UTC')",
            " ",
            " ",
            "+def test_parse_bsrn_deprecated():",
            "+    with pytest.warns(pvlibDeprecationWarning, match='Use read_bsrn instead'):",
            "+        with open(TESTS_DATA_DIR / 'bsrn-lr0100-pay0616.dat') as fbuf:",
            "+            data, metadata = parse_bsrn(fbuf)",
            "+",
            "+",
            " @pytest.mark.parametrize('testfile', [",
            "     ('bsrn-pay0616.dat.gz'),",
            "     ('bsrn-lr0100-pay0616.dat'),",
            " ])",
            " def test_read_bsrn(testfile, expected_index):",
            "     data, metadata = read_bsrn(TESTS_DATA_DIR / testfile)",
            "     assert_index_equal(expected_index, data.index)",
            "     assert 'ghi' in data.columns",
            "     assert 'dni_std' in data.columns",
            "     assert 'dhi_min' in data.columns",
            "     assert 'lwd_max' in data.columns",
            "     assert 'relative_humidity' in data.columns",
            " ",
            "+",
            "+def test_read_bsrn_buffer(expected_index):",
            "+    with open(TESTS_DATA_DIR / 'bsrn-lr0100-pay0616.dat') as fbuf:",
            "+        data, metadata = read_bsrn(fbuf)",
            "+    assert_index_equal(expected_index, data.index)",
            "+    assert 'ghi' in data.columns",
            "+    assert 'dni_std' in data.columns",
            "+    assert 'dhi_min' in data.columns",
            "+    assert 'lwd_max' in data.columns",
            "+    assert 'relative_humidity' in data.columns",
            "+",
            " ",
            " def test_read_bsrn_logical_records(expected_index):",
            "     # Test if logical records 0300 and 0500 are correct parsed",
            "     # and that 0100 is not passed when not specified",
            "     data, metadata = read_bsrn(TESTS_DATA_DIR / 'bsrn-pay0616.dat.gz',",
            "                                logical_records=['0300', '0500'])",
            "     assert_index_equal(expected_index, data.index)"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/iotools/test_epw.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/iotools/test_epw.py",
            "+++ /home/pvlib-python-0.13.0/tests/iotools/test_epw.py",
            "@@ -1,17 +1,39 @@",
            " import pytest",
            " ",
            " from pvlib.iotools import epw",
            " from tests.conftest import TESTS_DATA_DIR, RERUNS, RERUNS_DELAY",
            " ",
            "+from pvlib._deprecation import pvlibDeprecationWarning",
            "+",
            " epw_testfile = TESTS_DATA_DIR / 'NLD_Amsterdam062400_IWEC.epw'",
            " ",
            " ",
            " def test_read_epw():",
            "-    epw.read_epw(epw_testfile)",
            "+    df, meta = epw.read_epw(epw_testfile)",
            "+    assert len(df) == 8760",
            "+    assert 'ghi' in df.columns",
            "+    assert meta['latitude'] == 52.3",
            "+",
            "+",
            "+def test_read_epw_buffer():",
            "+    with open(epw_testfile, 'r') as f:",
            "+        df, meta = epw.read_epw(f)",
            "+    assert len(df) == 8760",
            "+    assert 'ghi' in df.columns",
            "+    assert meta['latitude'] == 52.3",
            "+",
            "+",
            "+def test_parse_epw_deprecated():",
            "+    with pytest.warns(pvlibDeprecationWarning, match='Use read_epw instead'):",
            "+        with open(epw_testfile, 'r') as f:",
            "+            df, meta = epw.parse_epw(f)",
            "+    assert len(df) == 8760",
            "+    assert 'ghi' in df.columns",
            "+    assert meta['latitude'] == 52.3",
            " ",
            " ",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            " def test_read_epw_remote():",
            "     url = 'https://energyplus-weather.s3.amazonaws.com/europe_wmo_region_6/NLD/NLD_Amsterdam.062400_IWEC/NLD_Amsterdam.062400_IWEC.epw'",
            "     epw.read_epw(url)"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/iotools/test_psm3.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/iotools/test_psm3.py",
            "+++ /home/pvlib-python-0.13.0/tests/iotools/test_psm3.py",
            "@@ -4,22 +4,24 @@",
            " ",
            " from pvlib.iotools import psm3",
            " from tests.conftest import (",
            "     TESTS_DATA_DIR,",
            "     RERUNS,",
            "     RERUNS_DELAY,",
            "     assert_index_equal,",
            "+    nrel_api_key,",
            " )",
            " import numpy as np",
            " import pandas as pd",
            " import pytest",
            "-import os",
            " from requests import HTTPError",
            " from io import StringIO",
            "-import warnings",
            "+",
            "+from pvlib._deprecation import pvlibDeprecationWarning",
            "+",
            " ",
            " TMY_TEST_DATA = TESTS_DATA_DIR / 'test_psm3_tmy-2017.csv'",
            " YEAR_TEST_DATA = TESTS_DATA_DIR / 'test_psm3_2017.csv'",
            " YEAR_TEST_DATA_5MIN = TESTS_DATA_DIR / 'test_psm3_2019_5min.csv'",
            " MANUAL_TEST_DATA = TESTS_DATA_DIR / 'test_read_psm3.csv'",
            " LATITUDE, LONGITUDE = 40.5137, -108.5449",
            " METADATA_FIELDS = [",
            "@@ -27,34 +29,14 @@",
            "     'Longitude', 'Time Zone', 'Elevation', 'Local Time Zone',",
            "     'Dew Point Units', 'DHI Units', 'DNI Units', 'GHI Units',",
            "     'Temperature Units', 'Pressure Units', 'Wind Direction Units',",
            "     'Wind Speed Units', 'Surface Albedo Units', 'Version']",
            " PVLIB_EMAIL = 'pvlib-admin@googlegroups.com'",
            " ",
            " ",
            "-@pytest.fixture(scope=\"module\")",
            "-def nrel_api_key():",
            "-    \"\"\"Supplies pvlib-python's NREL Developer Network API key.",
            "-",
            "-    Azure Pipelines CI utilizes a secret variable set to NREL_API_KEY",
            "-    to mitigate failures associated with using the default key of",
            "-    \"DEMO_KEY\". A user is capable of using their own key this way if",
            "-    desired however the default key should suffice for testing purposes.",
            "-    \"\"\"",
            "-    try:",
            "-        demo_key = os.environ[\"NREL_API_KEY\"]",
            "-    except KeyError:",
            "-        warnings.warn(",
            "-            \"WARNING: NREL API KEY environment variable not set! \"",
            "-            \"Using DEMO_KEY instead. Unexpected failures may occur.\"",
            "-        )",
            "-        demo_key = 'DEMO_KEY'",
            "-    return demo_key",
            "-",
            "-",
            " def assert_psm3_equal(data, metadata, expected):",
            "     \"\"\"check consistency of PSM3 data\"\"\"",
            "     # check datevec columns",
            "     assert np.allclose(data.Year, expected.Year)",
            "     assert np.allclose(data.Month, expected.Month)",
            "     assert np.allclose(data.Day, expected.Day)",
            "     assert np.allclose(data.Hour, expected.Hour)",
            "@@ -146,35 +128,42 @@",
            "                       map_variables=False)",
            "     # ensure the HTTPError caught isn't due to overuse of the API key",
            "     assert \"OVER_RATE_LIMIT\" not in str(excinfo.value)",
            " ",
            " ",
            " @pytest.fixture",
            " def io_input(request):",
            "-    \"\"\"file-like object for parse_psm3\"\"\"",
            "+    \"\"\"file-like object for read_psm3\"\"\"",
            "     with MANUAL_TEST_DATA.open() as f:",
            "         data = f.read()",
            "     obj = StringIO(data)",
            "     return obj",
            " ",
            " ",
            " def test_parse_psm3(io_input):",
            "     \"\"\"test parse_psm3\"\"\"",
            "-    data, metadata = psm3.parse_psm3(io_input, map_variables=False)",
            "+    with pytest.warns(pvlibDeprecationWarning, match='Use read_psm3 instead'):",
            "+        data, metadata = psm3.parse_psm3(io_input, map_variables=False)",
            "     expected = pd.read_csv(YEAR_TEST_DATA)",
            "     assert_psm3_equal(data, metadata, expected)",
            " ",
            " ",
            " def test_read_psm3():",
            "     \"\"\"test read_psm3\"\"\"",
            "     data, metadata = psm3.read_psm3(MANUAL_TEST_DATA, map_variables=False)",
            "     expected = pd.read_csv(YEAR_TEST_DATA)",
            "     assert_psm3_equal(data, metadata, expected)",
            " ",
            " ",
            "+def test_read_psm3_buffer(io_input):",
            "+    data, metadata = psm3.read_psm3(io_input, map_variables=False)",
            "+    expected = pd.read_csv(YEAR_TEST_DATA)",
            "+    assert_psm3_equal(data, metadata, expected)",
            "+",
            "+",
            " def test_read_psm3_map_variables():",
            "     \"\"\"test read_psm3 map_variables=True\"\"\"",
            "     data, metadata = psm3.read_psm3(MANUAL_TEST_DATA, map_variables=True)",
            "     columns_mapped = ['Year', 'Month', 'Day', 'Hour', 'Minute', 'dhi', 'ghi',",
            "                       'dni', 'ghi_clear', 'dhi_clear', 'dni_clear',",
            "                       'Cloud Type', 'temp_dew', 'solar_zenith',",
            "                       'Fill Flag', 'albedo', 'wind_speed',"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/iotools/test_pvgis.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/iotools/test_pvgis.py",
            "+++ /home/pvlib-python-0.13.0/tests/iotools/test_pvgis.py",
            "@@ -128,14 +128,24 @@",
            "                     'P': {'description': 'PV system power', 'units': 'W'},",
            "                     'G(i)': {'description': 'Global irradiance on the inclined plane (plane of the array)', 'units': 'W/m2'},  # noqa: E501",
            "                     'H_sun': {'description': 'Sun height', 'units': 'degree'},",
            "                     'T2m': {'description': '2-m air temperature', 'units': 'degree Celsius'},  # noqa: E501",
            "                     'WS10m': {'description': '10-m total wind speed', 'units': 'm/s'},  # noqa: E501",
            "                     'Int': {'description': '1 means solar radiation values are reconstructed'}}}}}  # noqa: E501",
            " ",
            "+# Reformat the metadata as implemented in #2462",
            "+descriptions_csv = metadata_radiation_csv.copy()",
            "+metadata_radiation_csv = {}",
            "+metadata_radiation_csv['descriptions'] = descriptions_csv",
            "+metadata_radiation_csv['inputs'] = inputs_radiation_csv",
            "+",
            "+descriptions_json = metadata_pv_json['inputs']",
            "+metadata_pv_json['inputs'] = inputs_pv_json",
            "+metadata_pv_json['inputs']['descriptions'] = descriptions_json",
            "+",
            " ",
            " def generate_expected_dataframe(values, columns, index):",
            "     \"\"\"Create dataframe from arrays of values, columns and index, in order to",
            "     use this dataframe to compare to.",
            "     \"\"\"",
            "     expected = pd.DataFrame(index=index, data=values, columns=columns)",
            "     expected['Int'] = expected['Int'].astype(int)",
            "@@ -171,33 +181,32 @@",
            "         data_pv_json, columns_pv_json_mapped, index_pv_json)",
            "     return expected",
            " ",
            " ",
            " # Test read_pvgis_hourly function using two different files with different",
            " # input arguments (to test variable mapping and pvgis_format)",
            " # pytest request.getfixturevalue is used to simplify the input arguments",
            "-@pytest.mark.parametrize('testfile,expected_name,metadata_exp,inputs_exp,map_variables,pvgis_format', [  # noqa: E501",
            "+@pytest.mark.parametrize('testfile,expected_name,metadata_exp,map_variables,pvgis_format', [  # noqa: E501",
            "     (testfile_radiation_csv, 'expected_radiation_csv', metadata_radiation_csv,",
            "-     inputs_radiation_csv, False, None),",
            "+     False, None),",
            "     (testfile_radiation_csv, 'expected_radiation_csv_mapped',",
            "-     metadata_radiation_csv, inputs_radiation_csv, True, 'csv'),",
            "-    (testfile_pv_json, 'expected_pv_json', metadata_pv_json, inputs_pv_json,",
            "+     metadata_radiation_csv, True, 'csv'),",
            "+    (testfile_pv_json, 'expected_pv_json', metadata_pv_json,",
            "      False, None),",
            "     (testfile_pv_json, 'expected_pv_json_mapped', metadata_pv_json,",
            "-     inputs_pv_json, True, 'json')])",
            "+     True, 'json')])",
            " def test_read_pvgis_hourly(testfile, expected_name, metadata_exp,",
            "-                           inputs_exp, map_variables, pvgis_format, request):",
            "+                           map_variables, pvgis_format, request):",
            "     # Get expected dataframe from fixture",
            "     expected = request.getfixturevalue(expected_name)",
            "     # Read data from file",
            "-    out, inputs, metadata = read_pvgis_hourly(",
            "+    out, metadata = read_pvgis_hourly(",
            "         testfile, map_variables=map_variables, pvgis_format=pvgis_format)",
            "     # Assert whether dataframe, metadata, and inputs are as expected",
            "     assert_frame_equal(out, expected)",
            "-    assert inputs == inputs_exp",
            "     assert metadata == metadata_exp",
            " ",
            " ",
            " def test_read_pvgis_hourly_bad_extension():",
            "     # Test if ValueError is raised if file extension cannot be recognized and",
            "     # pvgis_format is not specified",
            "     with pytest.raises(ValueError, match=\"pvgis format 'txt' was unknown\"):",
            "@@ -244,15 +253,15 @@",
            "     # Open local test file containing McClear monthly data",
            "     with open(testfile, 'r') as test_file:",
            "         mock_response = test_file.read()",
            "     # Specify the full URI of a specific example, this ensures that all of the",
            "     # inputs are passing on correctly",
            "     requests_mock.get(url_test, text=mock_response)",
            "     # Make API call - an error is raised if requested URI does not match",
            "-    out, inputs, metadata = get_pvgis_hourly(",
            "+    out, metadata = get_pvgis_hourly(",
            "         latitude=45, longitude=8, map_variables=map_variables, **args)",
            "     # Get expected dataframe from fixture",
            "     expected = request.getfixturevalue(expected_name)",
            "     # Compare out and expected dataframes",
            "     assert_frame_equal(out, expected)",
            " ",
            " ",
            "@@ -358,37 +367,43 @@",
            " def meta_expected():",
            "     with (TESTS_DATA_DIR / 'pvgis_tmy_meta.json').open() as f:",
            "         return json.load(f)",
            " ",
            " ",
            " @pytest.fixture",
            " def csv_meta(meta_expected):",
            "-    return [",
            "-        f\"{k}: {v['description']} ({v['units']})\" for k, v",
            "-        in meta_expected['outputs']['tmy_hourly']['variables'].items()]",
            "+    return meta_expected['outputs']['tmy_hourly']['variables']",
            " ",
            " ",
            " @pytest.fixture",
            " def pvgis_tmy_mapped_columns():",
            "     return ['temp_air', 'relative_humidity', 'ghi', 'dni', 'dhi', 'IR(h)',",
            "             'wind_speed', 'wind_direction', 'pressure']",
            " ",
            " ",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            " def test_get_pvgis_tmy(expected, month_year_expected, inputs_expected,",
            "                        meta_expected):",
            "-    pvgis_data = get_pvgis_tmy(45, 8, map_variables=False)",
            "+    pvgis_data = get_pvgis_tmy(45, 8, map_variables=False, coerce_year=None)",
            "     _compare_pvgis_tmy_json(expected, month_year_expected, inputs_expected,",
            "                             meta_expected, pvgis_data)",
            " ",
            " ",
            " def _compare_pvgis_tmy_json(expected, month_year_expected, inputs_expected,",
            "                             meta_expected, pvgis_data):",
            "-    data, months_selected, inputs, meta = pvgis_data",
            "+    data, meta = pvgis_data",
            "+",
            "+    # Re-create original outputs (prior to #2470)",
            "+    months_selected = meta['months_selected']",
            "+    inputs = meta['inputs'].copy()",
            "+    del inputs['descriptions']",
            "+    meta['inputs'] = meta['inputs']['descriptions']",
            "+    del meta['months_selected']",
            "+",
            "     # check each column of output separately",
            "     for outvar in meta_expected['outputs']['tmy_hourly']['variables'].keys():",
            "         assert np.allclose(data[outvar], expected[outvar])",
            "     assert np.allclose(",
            "         [_['month'] for _ in months_selected], np.arange(1, 13, 1))",
            "     assert np.allclose(",
            "         [_['year'] for _ in months_selected], month_year_expected)",
            "@@ -406,105 +421,100 @@",
            "     assert inputs_met_data['horizon_db'] == expected_met_data['horizon_db']",
            "     assert meta == meta_expected",
            " ",
            " ",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            " def test_get_pvgis_tmy_kwargs(userhorizon_expected):",
            "-    _, _, inputs, _ = get_pvgis_tmy(45, 8, usehorizon=False,",
            "-                                    map_variables=False)",
            "-    assert inputs['meteo_data']['use_horizon'] is False",
            "-    data, _, _, _ = get_pvgis_tmy(",
            "-        45, 8, userhorizon=[0, 10, 20, 30, 40, 15, 25, 5], map_variables=False)",
            "+    _, meta = get_pvgis_tmy(45, 8, usehorizon=False, map_variables=False)",
            "+    assert meta['inputs']['meteo_data']['use_horizon'] is False",
            "+    data, _ = get_pvgis_tmy(",
            "+        45, 8, userhorizon=[0, 10, 20, 30, 40, 15, 25, 5], map_variables=False,",
            "+        coerce_year=None)",
            "     assert np.allclose(",
            "         data['G(h)'], userhorizon_expected['G(h)'].values)",
            "     assert np.allclose(",
            "         data['Gb(n)'], userhorizon_expected['Gb(n)'].values)",
            "     assert np.allclose(",
            "         data['Gd(h)'], userhorizon_expected['Gd(h)'].values)",
            "-    _, _, inputs, _ = get_pvgis_tmy(45, 8, startyear=2005, map_variables=False)",
            "-    assert inputs['meteo_data']['year_min'] == 2005",
            "-    _, _, inputs, _ = get_pvgis_tmy(45, 8, endyear=2016, map_variables=False)",
            "-    assert inputs['meteo_data']['year_max'] == 2016",
            "-",
            "-",
            "-@pytest.mark.remote_data",
            "-@pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            "-def test_get_pvgis_tmy_basic(expected, meta_expected):",
            "-    pvgis_data = get_pvgis_tmy(45, 8, outputformat='basic',",
            "-                               map_variables=False)",
            "-    _compare_pvgis_tmy_basic(expected, meta_expected, pvgis_data)",
            "-",
            "-",
            "-def _compare_pvgis_tmy_basic(expected, meta_expected, pvgis_data):",
            "-    data, _, _, _ = pvgis_data",
            "-    # check each column of output separately",
            "-    for outvar in meta_expected['outputs']['tmy_hourly']['variables'].keys():",
            "-        assert np.allclose(data[outvar], expected[outvar])",
            "+    _, meta = get_pvgis_tmy(45, 8, startyear=2005, map_variables=False)",
            "+    assert meta['inputs']['meteo_data']['year_min'] == 2005",
            "+    _, meta = get_pvgis_tmy(45, 8, endyear=2016, map_variables=False)",
            "+    assert meta['inputs']['meteo_data']['year_max'] == 2016",
            " ",
            " ",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            " def test_get_pvgis_tmy_coerce_year():",
            "     \"\"\"test utc_offset and coerce_year work as expected\"\"\"",
            "-    base_case, _, _, _ = get_pvgis_tmy(45, 8)  # Turin",
            "+    base_case, _ = get_pvgis_tmy(45, 8)  # Turin",
            "     assert str(base_case.index.tz) == 'UTC'",
            "     assert base_case.index.name == 'time(UTC)'",
            "     noon_test_data = [",
            "         base_case[base_case.index.month == m].iloc[12]",
            "         for m in range(1, 13)]",
            "     cet_tz = 1  # Turin time is CET",
            "     cet_name = 'Etc/GMT-1'",
            "     # check indices of rolled data after converting timezone",
            "-    pvgis_data, _, _, _ = get_pvgis_tmy(45, 8, roll_utc_offset=cet_tz)",
            "-    jan1_midnight = pd.Timestamp('1990-01-01 00:00:00', tz=cet_name)",
            "-    dec31_midnight = pd.Timestamp('1990-12-31 23:00:00', tz=cet_name)",
            "+    pvgis_data, _ = get_pvgis_tmy(45, 8, roll_utc_offset=cet_tz)",
            "+    jan1_midnight = pd.Timestamp('1990-01-01 00', tz=cet_name)",
            "+    dec31_midnight = pd.Timestamp('1990-12-31 23', tz=cet_name)",
            "     assert pvgis_data.index[0] == jan1_midnight",
            "     assert pvgis_data.index[-1] == dec31_midnight",
            "     assert pvgis_data.index.name == f'time({cet_name})'",
            "     # spot check rolled data matches original",
            "     for m, test_case in enumerate(noon_test_data):",
            "         expected = pvgis_data[pvgis_data.index.month == m+1].iloc[12+cet_tz]",
            "         assert all(test_case == expected)",
            "     # repeat tests with year coerced",
            "     test_yr = 2021",
            "-    pvgis_data, _, _, _ = get_pvgis_tmy(",
            "+    pvgis_data, _ = get_pvgis_tmy(",
            "         45, 8, roll_utc_offset=cet_tz, coerce_year=test_yr)",
            "-    jan1_midnight = pd.Timestamp(f'{test_yr}-01-01 00:00:00', tz=cet_name)",
            "-    dec31_midnight = pd.Timestamp(f'{test_yr}-12-31 23:00:00', tz=cet_name)",
            "+    jan1_midnight = pd.Timestamp(f'{test_yr}-01-01 00', tz=cet_name)",
            "+    dec31_midnight = pd.Timestamp(f'{test_yr}-12-31 23', tz=cet_name)",
            "     assert pvgis_data.index[0] == jan1_midnight",
            "     assert pvgis_data.index[-1] == dec31_midnight",
            "     assert pvgis_data.index.name == f'time({cet_name})'",
            "     for m, test_case in enumerate(noon_test_data):",
            "         expected = pvgis_data[pvgis_data.index.month == m+1].iloc[12+cet_tz]",
            "         assert all(test_case == expected)",
            "     # repeat tests with year coerced but utc offset none or zero",
            "-    pvgis_data, _, _, _ = get_pvgis_tmy(45, 8, coerce_year=test_yr)",
            "-    jan1_midnight = pd.Timestamp(f'{test_yr}-01-01 00:00:00', tz='UTC')",
            "-    dec31_midnight = pd.Timestamp(f'{test_yr}-12-31 23:00:00', tz='UTC')",
            "+    pvgis_data, _ = get_pvgis_tmy(45, 8, coerce_year=test_yr)",
            "+    jan1_midnight = pd.Timestamp(f'{test_yr}-01-01 00', tz='UTC')",
            "+    dec31_midnight = pd.Timestamp(f'{test_yr}-12-31 23', tz='UTC')",
            "     assert pvgis_data.index[0] == jan1_midnight",
            "     assert pvgis_data.index[-1] == dec31_midnight",
            "     assert pvgis_data.index.name == 'time(UTC)'",
            "     for m, test_case in enumerate(noon_test_data):",
            "         expected = pvgis_data[pvgis_data.index.month == m+1].iloc[12]",
            "         assert all(test_case == expected)",
            "+    # Test that get_pvgis_tmy defaults to coerce_year=1990",
            "+    pvgis_data, _ = get_pvgis_tmy(45, 8)",
            "+    assert all(pvgis_data.index.year == 1990)",
            " ",
            " ",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            " def test_get_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,",
            "-                           meta_expected, csv_meta):",
            "-    pvgis_data = get_pvgis_tmy(45, 8, outputformat='csv', map_variables=False)",
            "+                           meta_expected, csv_meta, coerce_year=None):",
            "+    pvgis_data = get_pvgis_tmy(45, 8, outputformat='csv', map_variables=False,",
            "+                               coerce_year=None)",
            "     _compare_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,",
            "                            meta_expected, csv_meta, pvgis_data)",
            " ",
            " ",
            " def _compare_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,",
            "                            meta_expected, csv_meta, pvgis_data):",
            "-    data, months_selected, inputs, meta = pvgis_data",
            "+    data, meta = pvgis_data",
            "+",
            "+    # Re-create original outputs (prior to #2470)",
            "+    months_selected = meta['months_selected']",
            "+    inputs = meta['inputs'].copy()",
            "+    meta = meta['descriptions']",
            "+",
            "     # check each column of output separately",
            "     for outvar in meta_expected['outputs']['tmy_hourly']['variables'].keys():",
            "         assert np.allclose(data[outvar], expected[outvar])",
            "     assert np.allclose(",
            "         [_['month'] for _ in months_selected], np.arange(1, 13, 1))",
            "     assert np.allclose(",
            "         [_['year'] for _ in months_selected], month_year_expected)",
            "@@ -523,20 +533,21 @@",
            "             continue",
            "         assert meta_value in csv_meta",
            " ",
            " ",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            " def test_get_pvgis_tmy_epw(expected, epw_meta):",
            "-    pvgis_data = get_pvgis_tmy(45, 8, outputformat='epw', map_variables=False)",
            "+    pvgis_data = get_pvgis_tmy(45, 8, outputformat='epw', map_variables=False,",
            "+                               coerce_year=None)",
            "     _compare_pvgis_tmy_epw(expected, epw_meta, pvgis_data)",
            " ",
            " ",
            " def _compare_pvgis_tmy_epw(expected, epw_meta, pvgis_data):",
            "-    data, _, _, meta = pvgis_data",
            "+    data, meta = pvgis_data",
            "     assert np.allclose(data.ghi, expected['G(h)'])",
            "     assert np.allclose(data.dni, expected['Gb(n)'])",
            "     assert np.allclose(data.dhi, expected['Gd(h)'])",
            "     assert np.allclose(data.temp_air, expected['T2m'])",
            "     assert meta == epw_meta",
            " ",
            " ",
            "@@ -548,16 +559,26 @@",
            "         get_pvgis_tmy(45, 8, outputformat='bad')",
            "     with pytest.raises(requests.HTTPError, match='404 Client Error'):",
            "         get_pvgis_tmy(45, 8, url='https://re.jrc.ec.europa.eu/')",
            " ",
            " ",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            "-def test_get_pvgis_map_variables(pvgis_tmy_mapped_columns):",
            "-    actual, _, _, _ = get_pvgis_tmy(45, 8, map_variables=True)",
            "+def test_get_pvgis_tmy_basic():",
            "+    # Test that a specific error message is raised when outputformat='basic'",
            "+    err_msg = (\"outputformat='basic' is no longer supported by pvlib, \"",
            "+               \"please use outputformat='csv' instead.\")",
            "+    with pytest.raises(ValueError, match=err_msg):",
            "+        get_pvgis_tmy(45, 8, outputformat='basic')",
            "+",
            "+",
            "+@pytest.mark.remote_data",
            "+@pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            "+def test_get_pvgis_tmy_map_variables(pvgis_tmy_mapped_columns):",
            "+    actual, _ = get_pvgis_tmy(45, 8, map_variables=True)",
            "     assert all(c in pvgis_tmy_mapped_columns for c in actual.columns)",
            " ",
            " ",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            " def test_read_pvgis_horizon():",
            "     pvgis_data, _ = get_pvgis_horizon(35.171051, -106.465158)",
            "@@ -572,15 +593,15 @@",
            " def test_read_pvgis_horizon_invalid_coords():",
            "     with pytest.raises(requests.HTTPError, match='lat: Incorrect value'):",
            "         _, _ = get_pvgis_horizon(100, 50)  # unfeasible latitude",
            " ",
            " ",
            " def test_read_pvgis_tmy_map_variables(pvgis_tmy_mapped_columns):",
            "     fn = TESTS_DATA_DIR / 'tmy_45.000_8.000_2005_2023.json'",
            "-    actual, _, _, _ = read_pvgis_tmy(fn, map_variables=True)",
            "+    actual, _ = read_pvgis_tmy(fn, map_variables=True)",
            "     assert all(c in pvgis_tmy_mapped_columns for c in actual.columns)",
            " ",
            " ",
            " def test_read_pvgis_tmy_json(expected, month_year_expected, inputs_expected,",
            "                              meta_expected):",
            "     fn = TESTS_DATA_DIR / 'tmy_45.000_8.000_2005_2023.json'",
            "     # infer outputformat from file extensions",
            "@@ -626,30 +647,18 @@",
            "     with fn.open('rb') as fbuf:",
            "         pvgis_data = read_pvgis_tmy(fbuf, pvgis_format='csv',",
            "                                     map_variables=False)",
            "         _compare_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,",
            "                                meta_expected, csv_meta, pvgis_data)",
            " ",
            " ",
            "-def test_read_pvgis_tmy_basic(expected, meta_expected):",
            "-    fn = TESTS_DATA_DIR / 'tmy_45.000_8.000_2005_2023.txt'",
            "-    # XXX: can't infer outputformat from file extensions for basic",
            "-    with pytest.raises(ValueError, match=\"pvgis format 'txt' was unknown\"):",
            "-        read_pvgis_tmy(fn, map_variables=False)",
            "-    # explicit pvgis outputformat",
            "-    pvgis_data = read_pvgis_tmy(fn, pvgis_format='basic', map_variables=False)",
            "-    _compare_pvgis_tmy_basic(expected, meta_expected, pvgis_data)",
            "-    with fn.open('rb') as fbuf:",
            "-        pvgis_data = read_pvgis_tmy(fbuf, pvgis_format='basic',",
            "-                                    map_variables=False)",
            "-        _compare_pvgis_tmy_basic(expected, meta_expected, pvgis_data)",
            "-        # file buffer raises TypeError if passed to pathlib.Path()",
            "-        with pytest.raises(TypeError):",
            "-            read_pvgis_tmy(fbuf, map_variables=False)",
            "-",
            "-",
            " def test_read_pvgis_tmy_exception():",
            "     bad_outputformat = 'bad'",
            "     err_msg = f\"pvgis format '{bad_outputformat:s}' was unknown\"",
            "     with pytest.raises(ValueError, match=err_msg):",
            "         read_pvgis_tmy('filename', pvgis_format=bad_outputformat,",
            "                        map_variables=False)",
            "+",
            "+",
            "+def test_read_pvgis_tmy_unknown_outputformat():",
            "+    with pytest.raises(ValueError, match=\"pvgis format 'txt' was unknown\"):",
            "+        read_pvgis_tmy(\"hello.txt\")"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/iotools/test_sodapro.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/iotools/test_sodapro.py",
            "+++ /home/pvlib-python-0.13.0/tests/iotools/test_sodapro.py",
            "@@ -7,14 +7,16 @@",
            " import requests",
            " import pytest",
            " ",
            " from pvlib.iotools import sodapro",
            " from tests.conftest import TESTS_DATA_DIR, assert_frame_equal",
            " ",
            " ",
            "+from pvlib._deprecation import pvlibDeprecationWarning",
            "+",
            " testfile_mcclear_verbose = TESTS_DATA_DIR / 'cams_mcclear_1min_verbose.csv'",
            " testfile_mcclear_monthly = TESTS_DATA_DIR / 'cams_mcclear_monthly.csv'",
            " testfile_radiation_verbose = TESTS_DATA_DIR / 'cams_radiation_1min_verbose.csv'",
            " testfile_radiation_monthly = TESTS_DATA_DIR / 'cams_radiation_monthly.csv'",
            " ",
            " ",
            " index_verbose = pd.date_range('2020-06-01 12', periods=4, freq='1min',",
            "@@ -140,15 +142,14 @@",
            "     ['2020-03-01T00:00:00.0/2020-04-01T00:00:00.0', 232.3325, 163.1762,",
            "      125.1677, 38.0085, 307.5256, 120.1659, 69.6217, 50.5653, 159.576, 0.9949],",
            "     ['2020-04-01T00:00:00.0/2020-05-01T00:00:00.0', 344.7433, 250.7587,",
            "      197.8758, 52.8829, 387.6709, 196.7015, 123.2593, 73.5152, 233.9675,",
            "      0.9897]])",
            " ",
            " ",
            "-# @pytest.fixture",
            " def generate_expected_dataframe(values, columns, index, dtypes):",
            "     \"\"\"Create dataframe from arrays of values, columns and index, in order to",
            "     use this dataframe to compare to.",
            "     \"\"\"",
            "     expected = pd.DataFrame(values, columns=columns, index=index)",
            "     expected.index.freq = None",
            "     for (col, _dtype) in zip(expected.columns, dtypes):",
            "@@ -181,14 +182,20 @@",
            "         index_verbose+pd.Timedelta(minutes=1), dtypes=dtypes_radiation_verbose)",
            "     out, metadata = sodapro.read_cams(testfile_radiation_verbose,",
            "                                       integrated=True, label='right',",
            "                                       map_variables=False)",
            "     assert_frame_equal(out, expected, check_less_precise=True)",
            " ",
            " ",
            "+def test_parse_cams_deprecated():",
            "+    with pytest.warns(pvlibDeprecationWarning, match='Use read_cams instead'):",
            "+        with open(testfile_radiation_verbose, mode=\"r\") as fbuf:",
            "+            _ = sodapro.parse_cams(fbuf)",
            "+",
            "+",
            " def test_read_cams_metadata():",
            "     _, metadata = sodapro.read_cams(testfile_mcclear_monthly, integrated=False)",
            "     assert metadata['Time reference'] == 'Universal time (UT)'",
            "     assert metadata['noValue'] == 'nan'",
            "     assert metadata['latitude'] == 55.7906",
            "     assert metadata['longitude'] == 12.5251",
            "     assert metadata['altitude'] == 39.0",
            "@@ -199,15 +206,15 @@",
            " @pytest.mark.parametrize('testfile,index,columns,values,dtypes,identifier', [",
            "     (testfile_mcclear_monthly, index_monthly, columns_mcclear,",
            "      values_mcclear_monthly, dtypes_mcclear, 'mcclear'),",
            "     (testfile_radiation_monthly, index_monthly, columns_radiation,",
            "      values_radiation_monthly, dtypes_radiation, 'cams_radiation')])",
            " def test_get_cams(requests_mock, testfile, index, columns, values, dtypes,",
            "                   identifier):",
            "-    \"\"\"Test that get_cams generates the correct URI request and that parse_cams",
            "+    \"\"\"Test that get_cams generates the correct URI request and that read_cams",
            "     is being called correctly\"\"\"",
            "     # Open local test file containing McClear mothly data",
            "     with open(testfile, 'r') as test_file:",
            "         mock_response = test_file.read()",
            "     # Specify the full URI of a specific example, this ensures that all of the",
            "     # inputs are passing on correctly",
            "     url_test_cams = f'https://api.soda-solardata.com/service/wps?DataInputs=latitude=55.7906;longitude=12.5251;altitude=80;date_begin=2020-01-01;date_end=2020-05-04;time_ref=UT;summarization=P01M;username=pvlib-admin%2540googlegroups.com;verbose=false&Service=WPS&Request=Execute&Identifier=get_{identifier}&version=1.0.0&RawDataOutput=irradiation'  # noqa: E501",
            "@@ -242,15 +249,15 @@",
            "             altitude=80,",
            "             time_step='1M',",
            "             verbose=True)",
            " ",
            " ",
            " def test_get_cams_bad_request(requests_mock):",
            "     \"\"\"Test that a the correct errors/warnings ares raised for invalid",
            "-    requests inputs. Also tests if the specified server url gets used\"\"\"",
            "+    requests inputs. Also tests if the specified url gets used\"\"\"",
            " ",
            "     # Subset of an xml file returned for errornous requests",
            "     mock_response_bad_text = \"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
            "     <ows:Exception exceptionCode=\"NoApplicableCode\" locator=\"None\">",
            "     <ows:ExceptionText>Failed to execute WPS process [get_mcclear]:",
            "         Please, register yourself at www.soda-pro.com",
            "     </ows:ExceptionText>\"\"\"",
            "@@ -270,29 +277,29 @@",
            "             latitude=55.7906,",
            "             longitude=12.5251,",
            "             email='test@test.com',  # a non-registrered email",
            "             identifier='mcclear',",
            "             time_ref='TST',",
            "             verbose=False,",
            "             time_step='1h',",
            "-            server='pro.soda-is.com')",
            "+            url='pro.soda-is.com')",
            "     # Test if value error is raised if incorrect identifier is specified",
            "     with pytest.raises(ValueError, match='Identifier must be either'):",
            "         _ = sodapro.get_cams(",
            "             start=pd.Timestamp('2020-01-01'),",
            "             end=pd.Timestamp('2020-05-04'),",
            "             latitude=55.7906,",
            "             longitude=12.5251,",
            "             email='test@test.com',",
            "             identifier='test',  # incorrect identifier",
            "-            server='pro.soda-is.com')",
            "+            url='pro.soda-is.com')",
            "     # Test if value error is raised if incorrect time step is specified",
            "     with pytest.raises(ValueError, match='Time step not recognized'):",
            "         _ = sodapro.get_cams(",
            "             start=pd.Timestamp('2020-01-01'),",
            "             end=pd.Timestamp('2020-05-04'),",
            "             latitude=55.7906,",
            "             longitude=12.5251,",
            "             email='test@test.com',",
            "             identifier='mcclear',",
            "             time_step='test',  # incorrect time step",
            "-            server='pro.soda-is.com')",
            "+            url='pro.soda-is.com')"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/iotools/test_solaranywhere.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/iotools/test_solaranywhere.py",
            "+++ /home/pvlib-python-0.13.0/tests/iotools/test_solaranywhere.py",
            "@@ -279,13 +279,14 @@",
            " ",
            " ",
            " @requires_solaranywhere_credentials",
            " @pytest.mark.remote_data",
            " @pytest.mark.flaky(reruns=RERUNS, reruns_delay=RERUNS_DELAY)",
            " def test_get_solaranywhere_not_available(solaranywhere_api_key):",
            "     # Test if RuntimeError is raised if location in the ocean is requested",
            "-    with pytest.raises(RuntimeError, match=\"Tile is outside of our coverage\"):",
            "+    with pytest.raises(RuntimeError,",
            "+                       match=\"Location is outside of our coverage area\"):",
            "         pvlib.iotools.get_solaranywhere(",
            "             latitude=40, longitude=-70,",
            "             api_key=solaranywhere_api_key,",
            "             start=pd.Timestamp('2020-01-01 00:00:00+0000'),",
            "             end=pd.Timestamp('2020-01-05 12:00:00+0000'))"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/spectrum/test_irradiance.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/spectrum/test_irradiance.py",
            "+++ /home/pvlib-python-0.13.0/tests/spectrum/test_irradiance.py",
            "@@ -126,7 +126,28 @@",
            "     spectra_series_zero = spectrum.get_reference_spectra()['global']*0",
            "     out_1 = spectrum.average_photon_energy(spectra_df_zero)",
            "     out_2 = spectrum.average_photon_energy(spectra_series_zero)",
            "     expected_1 = np.array([1.36848, np.nan, 1.40885])",
            "     expected_2 = np.nan",
            "     assert_allclose(out_1, expected_1, atol=1e-3)",
            "     assert_allclose(out_2, expected_2, atol=1e-3)",
            "+",
            "+",
            "+def test_average_photon_energy_nan_irr():",
            "+    # test for handling NaN input",
            "+",
            "+    spectra_df_nan = spectrum.get_reference_spectra().T",
            "+    spectra_df_nan.loc[\"global\", 315.0] = np.nan",
            "+    spectra_df_nan.loc['extraterrestrial', :] = np.nan",
            "+",
            "+    spectra_series_nan = spectrum.get_reference_spectra()['global']",
            "+    spectra_series_singlenan = spectra_series_nan.copy()",
            "+    spectra_series_singlenan.loc[315.0] = np.nan",
            "+    spectra_series_allnan = spectra_series_nan*np.nan",
            "+",
            "+    out1 = spectrum.average_photon_energy(spectra_df_nan)",
            "+    out2 = spectrum.average_photon_energy(spectra_series_singlenan)",
            "+    out3 = spectrum.average_photon_energy(spectra_series_allnan)",
            "+",
            "+    assert np.all(np.isnan(out1[['global', 'extraterrestrial']]))",
            "+    assert np.all(np.isnan(out2))",
            "+    assert np.all(np.isnan(out3))"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/test_clearsky.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/test_clearsky.py",
            "+++ /home/pvlib-python-0.13.0/tests/test_clearsky.py",
            "@@ -220,43 +220,47 @@",
            "     expected = pd.Series(np.array([3., 3., 3.]), index=times)",
            "     out = clearsky.lookup_linke_turbidity(times, 32.125, -110.875,",
            "                                           interp_turbidity=False)",
            "     assert_series_equal(expected, out)",
            " ",
            " ",
            " def test_lookup_linke_turbidity_months():",
            "-    times = pd.date_range(start='2014-04-01', end='2014-07-01',",
            "-                          freq='1M', tz='America/Phoenix')",
            "+    times = pd.date_range(start='2014-05-01', end='2014-07-01',",
            "+                          freq='1MS', tz='America/Phoenix',",
            "+                          ) - pd.Timedelta(days=1)",
            "     expected = pd.Series(",
            "         np.array([2.89918032787, 2.97540983607, 3.19672131148]), index=times",
            "     )",
            "     out = clearsky.lookup_linke_turbidity(times, 32.125, -110.875)",
            "     assert_series_equal(expected, out)",
            " ",
            " ",
            " def test_lookup_linke_turbidity_months_leapyear():",
            "-    times = pd.date_range(start='2016-04-01', end='2016-07-01',",
            "-                          freq='1M', tz='America/Phoenix')",
            "+    times = pd.date_range(start='2016-05-01', end='2016-07-01',",
            "+                          freq='1MS', tz='America/Phoenix',",
            "+                          ) - pd.Timedelta(days=1)",
            "     expected = pd.Series(",
            "         np.array([2.89918032787, 2.97540983607, 3.19672131148]), index=times",
            "     )",
            "     out = clearsky.lookup_linke_turbidity(times, 32.125, -110.875)",
            "     assert_series_equal(expected, out)",
            " ",
            " ",
            " def test_lookup_linke_turbidity_nointerp_months():",
            "     times = pd.date_range(start='2014-04-10', end='2014-07-10',",
            "-                          freq='1M', tz='America/Phoenix')",
            "+                          freq='1MS', tz='America/Phoenix',",
            "+                          ) - pd.Timedelta(days=1)",
            "     expected = pd.Series(np.array([2.85, 2.95, 3.]), index=times)",
            "     out = clearsky.lookup_linke_turbidity(times, 32.125, -110.875,",
            "                                           interp_turbidity=False)",
            "     assert_series_equal(expected, out)",
            "     # changing the dates shouldn't matter if interp=False",
            "     times = pd.date_range(start='2014-04-05', end='2014-07-05',",
            "-                          freq='1M', tz='America/Phoenix')",
            "+                          freq='1MS', tz='America/Phoenix',",
            "+                          ) - pd.Timedelta(days=1)",
            "     out = clearsky.lookup_linke_turbidity(times, 32.125, -110.875,",
            "                                           interp_turbidity=False)",
            "     assert_series_equal(expected, out)",
            " ",
            " ",
            " def test_haurwitz():",
            "     apparent_solar_elevation = np.array([-20, -0.05, -0.001, 5, 10, 30, 50, 90])"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/test_irradiance.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/test_irradiance.py",
            "+++ /home/pvlib-python-0.13.0/tests/test_irradiance.py",
            "@@ -1108,15 +1108,15 @@",
            "         out.values,",
            "         dirint_close_values,",
            "         rtol=tol_dirint,",
            "         atol=0,",
            "         equal_nan=True)",
            " ",
            " ",
            "-@fail_on_pvlib_version(\"0.13\")",
            "+@fail_on_pvlib_version(\"0.14\")",
            " def test_dirindex_ghi_clearsky_deprecation():",
            "     times = pd.DatetimeIndex(['2014-06-24T18-1200'])",
            "     ghi = pd.Series([1038.62], index=times)",
            "     ghi_clearsky = pd.Series([1042.48031487], index=times)",
            "     dni_clearsky = pd.Series([939.95469881], index=times)",
            "     zenith = pd.Series([10.56413562], index=times)",
            "     pressure, tdew = 93193, 10",
            "@@ -1153,15 +1153,15 @@",
            " ",
            "     out = irradiance.dirindex(ghi, ghi_clearsky, dni_clear, solar_zenith,",
            "                               times, min_cos_zenith=0, max_zenith=100)",
            "     expected = pd.Series([nan, 5.], index=times)",
            "     assert_series_equal(out, expected)",
            " ",
            " ",
            "-@fail_on_pvlib_version(\"0.13\")",
            "+@fail_on_pvlib_version(\"0.14\")",
            " def test_dirindex_dni_clearsky_deprecation():",
            "     times = pd.DatetimeIndex(['2014-06-24T12-0700', '2014-06-24T18-0700'])",
            "     ghi = pd.Series([0, 1], index=times)",
            "     ghi_clearsky = pd.Series([0, 1], index=times)",
            "     dni_clear = pd.Series([0, 5], index=times)",
            "     solar_zenith = pd.Series([90, 89.99], index=times)",
            "     with pytest.warns(pvlibDeprecationWarning, match='dni_clear'):",
            "@@ -1184,15 +1184,15 @@",
            " ",
            "     dni = irradiance.dni(ghi, dhi, zenith)",
            "     assert_series_equal(dni,",
            "                         pd.Series([float('nan'), float('nan'), 573.685662283,",
            "                                    146.190220008, 573.685662283]))",
            " ",
            " ",
            "-@fail_on_pvlib_version(\"0.13\")",
            "+@fail_on_pvlib_version(\"0.14\")",
            " def test_dni_dni_clearsky_deprecation():",
            "     ghi = pd.Series([90, 100, 100, 100, 100])",
            "     dhi = pd.Series([100, 90, 50, 50, 50])",
            "     zenith = pd.Series([80, 100, 85, 70, 85])",
            "     dni_clear = pd.Series([50, 50, 200, 50, 300])",
            "     with pytest.warns(pvlibDeprecationWarning, match='dni_clear'):",
            "         irradiance.dni(ghi, dhi, zenith,",
            "@@ -1287,15 +1287,15 @@",
            "     ghi_measured = pd.Series([100,  500], index=times)",
            "     ghi_modeled = pd.Series([500, 1000], index=times)",
            "     out = irradiance.clearsky_index(ghi_measured, ghi_modeled)",
            "     expected = pd.Series([0.2, 0.5], index=times)",
            "     assert_series_equal(out, expected)",
            " ",
            " ",
            "-@fail_on_pvlib_version(\"0.13\")",
            "+@fail_on_pvlib_version(\"0.14\")",
            " def test_clearsky_index_clearsky_ghi_deprecation():",
            "     with pytest.warns(pvlibDeprecationWarning, match='ghi_clear'):",
            "         ghi, clearsky_ghi = 200, 300",
            "         irradiance.clearsky_index(ghi, clearsky_ghi=clearsky_ghi)",
            " ",
            " ",
            " def test_clearness_index():"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/test_modelchain.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/test_modelchain.py",
            "+++ /home/pvlib-python-0.13.0/tests/test_modelchain.py",
            "@@ -1758,14 +1758,24 @@",
            "         array.module_parameters.pop('pdc0')",
            " ",
            "     match = 'one or more Arrays are missing one or more required parameters'",
            "     with pytest.raises(ValueError, match=match):",
            "         ModelChain(pvwatts_dc_pvwatts_ac_system, location, **kwargs)",
            " ",
            " ",
            "+def test_sapm_optional_params(sapm_dc_snl_ac_system, location):",
            "+    # inference works when the optional (i_x, i_xx) SAPM parameters are missing",
            "+    for array in sapm_dc_snl_ac_system.arrays:",
            "+        for key in ['IXO', 'IXXO', 'C4', 'C5', 'C6', 'C7']:",
            "+            array.module_parameters.pop(key)",
            "+",
            "+    # no error:",
            "+    ModelChain(sapm_dc_snl_ac_system, location)",
            "+",
            "+",
            " @pytest.mark.parametrize('model', [",
            "     'dc_model', 'ac_model', 'aoi_model', 'spectral_model',",
            "     'temperature_model', 'losses_model'",
            " ])",
            " def test_invalid_models(model, sapm_dc_snl_ac_system, location):",
            "     kwargs = {'dc_model': 'pvwatts', 'ac_model': 'pvwatts',",
            "               'aoi_model': 'no_loss', 'spectral_model': 'no_loss',"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/test_pvsystem.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/test_pvsystem.py",
            "+++ /home/pvlib-python-0.13.0/tests/test_pvsystem.py",
            "@@ -13,15 +13,14 @@",
            " from pvlib import inverter, pvsystem",
            " from pvlib import iam as _iam",
            " from pvlib import irradiance",
            " from pvlib import spectrum",
            " from pvlib.location import Location",
            " from pvlib.pvsystem import FixedMount",
            " from pvlib import temperature",
            "-from pvlib._deprecation import pvlibDeprecationWarning",
            " from pvlib.tools import cosd",
            " from pvlib.singlediode import VOLTAGE_BUILTIN",
            " ",
            " from tests.test_singlediode import get_pvsyst_fs_495",
            " ",
            " ",
            " @pytest.mark.parametrize('iam_model,model_params', [",
            "@@ -193,14 +192,23 @@",
            "     for k, v in expected.items():",
            "         assert_allclose(out[k], v, atol=1e-4)",
            " ",
            "     # just make sure it works with Series input",
            "     pvsystem.sapm(effective_irradiance, temp_cell,",
            "                   pd.Series(sapm_module_params))",
            " ",
            "+    # ensure C4-C7 are optional",
            "+    optional_keys = ['IXO', 'IXXO', 'C4', 'C5', 'C6', 'C7']",
            "+    params_no_c4c7 = {",
            "+        k: v for k, v in sapm_module_params.items() if k not in optional_keys",
            "+    }",
            "+    out = pvsystem.sapm(effective_irradiance, temp_cell, params_no_c4c7)",
            "+    assert 'i_x' not in out.keys()",
            "+    assert 'i_xx' not in out.keys()",
            "+",
            " ",
            " def test_PVSystem_sapm(sapm_module_params, mocker):",
            "     mocker.spy(pvsystem, 'sapm')",
            "     system = pvsystem.PVSystem(module_parameters=sapm_module_params)",
            "     effective_irradiance = 500",
            "     temp_cell = 25",
            "     out = system.sapm(effective_irradiance, temp_cell)",
            "@@ -698,14 +706,21 @@",
            "     array = pvsystem.Array(mount=FixedMount(0, 180,",
            "                                             racking_model='insulated'),",
            "                            module_parameters={},",
            "                            module_type=None)",
            "     expected = temperature.TEMPERATURE_MODEL_PARAMETERS[",
            "         'pvsyst']['insulated']",
            "     assert expected == array._infer_temperature_model_params()",
            "+    array = pvsystem.Array(mount=FixedMount(0, 180,",
            "+                                            racking_model='semi_integrated'),",
            "+                           module_parameters={},",
            "+                           module_type=None)",
            "+    expected = temperature.TEMPERATURE_MODEL_PARAMETERS[",
            "+        'pvsyst']['semi_integrated']",
            "+    assert expected == array._infer_temperature_model_params()",
            " ",
            " ",
            " def test_Array__infer_cell_type():",
            "     array = pvsystem.Array(mount=pvsystem.FixedMount(0, 180),",
            "                            module_parameters={})",
            "     assert array._infer_cell_type() is None"
          ]
        },
        {
          "file": "/home/pvlib-python-0.13.0/tests/test_tools.py",
          "change": [
            "--- /home/pvlib-python-0.12.0/tests/test_tools.py",
            "+++ /home/pvlib-python-0.13.0/tests/test_tools.py",
            "@@ -1,8 +1,12 @@",
            " from datetime import datetime",
            "+from io import StringIO",
            "+import os",
            "+from pathlib import Path",
            "+import tempfile",
            " from zoneinfo import ZoneInfo",
            " ",
            " import numpy as np",
            " from numpy.testing import assert_allclose",
            " import pandas as pd",
            " import pytest",
            " ",
            "@@ -248,7 +252,33 @@",
            "     tz = \"Etc/GMT+5\"",
            " ",
            "     expected = datetime(1974, 6, 22, 18, 30, 15, tzinfo=ZoneInfo(tz))",
            "     assert tools.djd_to_datetime(djd, tz) == expected",
            " ",
            "     expected = datetime(1974, 6, 22, 23, 30, 15, tzinfo=ZoneInfo(\"UTC\"))",
            "     assert tools.djd_to_datetime(djd) == expected",
            "+",
            "+",
            "+def test__file_context_manager():",
            "+    with tempfile.TemporaryDirectory() as td:",
            "+        # make a test file",
            "+        filename = os.path.join(td, 'test.txt')",
            "+        with open(filename, 'w') as fh:",
            "+            fh.write('test content')",
            "+",
            "+        # test with filename as string:",
            "+        with tools._file_context_manager(filename) as obj:",
            "+            assert obj.read() == \"test content\"",
            "+",
            "+        # test with filename as Path:",
            "+        with tools._file_context_manager(Path(filename)) as obj:",
            "+            assert obj.read() == \"test content\"",
            "+",
            "+        # test with file object:",
            "+        with open(filename, \"r\") as f:",
            "+            with tools._file_context_manager(f) as obj:",
            "+                assert obj.read() == \"test content\"",
            "+",
            "+    # test with buffer:",
            "+    buffer = StringIO(\"test content\")",
            "+    with tools._file_context_manager(buffer) as obj:",
            "+        assert obj.read() == \"test content\""
          ]
        }
      ]
    }
  }
}