{
  "$schema": "http://cyclonedx.org/schema/bom-1.6.schema.json",
  "bomFormat": "CycloneDX",
  "specVersion": "1.6",
  "serialNumber": "urn:uuid:6744082e-65be-4d6b-92d0-59d44d5136b5",
  "version": 1,
  "metadata": {
    "timestamp": "2025-07-14T13:10:17-04:00",
    "tools": {
      "components": [
        {
          "type": "application",
          "author": "anchore",
          "name": "syft",
          "version": "1.28.0"
        }
      ]
    },
    "component": {
      "bom-ref": "4ad66f810ac00b80",
      "type": "file",
      "name": "python-rsa-version-4.9/"
    }
  },
  "components": [
    {
      "bom-ref": "pkg:pypi/alabaster@0.7.12?package-id=8f783dd188557391",
      "type": "library",
      "name": "alabaster",
      "version": "0.7.12",
      "cpe": "cpe:2.3:a:python-alabaster:python-alabaster:0.7.12:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/alabaster@0.7.12",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-alabaster:python_alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_alabaster:python-alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_alabaster:python_alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:alabaster:python-alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:alabaster:python_alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-alabaster:alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_alabaster:alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:alabaster:alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:alabaster:0.7.12:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/atomicwrites@1.4.0?package-id=f9d340c57a0fee44",
      "type": "library",
      "name": "atomicwrites",
      "version": "1.4.0",
      "cpe": "cpe:2.3:a:python-atomicwrites:python-atomicwrites:1.4.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/atomicwrites@1.4.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-atomicwrites:python_atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_atomicwrites:python-atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_atomicwrites:python_atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:atomicwrites:python-atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:atomicwrites:python_atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-atomicwrites:atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_atomicwrites:atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:atomicwrites:atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:atomicwrites:1.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/attrs@21.2.0?package-id=e9ca875f5764b8c4",
      "type": "library",
      "name": "attrs",
      "version": "21.2.0",
      "cpe": "cpe:2.3:a:python-attrs:python-attrs:21.2.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/attrs@21.2.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-attrs:python_attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_attrs:python-attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_attrs:python_attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:attrs:python-attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:attrs:python_attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-attrs:attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_attrs:attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:attrs:attrs:21.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/babel@2.9.1?package-id=d2067edaa1b3dd71",
      "type": "library",
      "name": "babel",
      "version": "2.9.1",
      "cpe": "cpe:2.3:a:python-babel:python-babel:2.9.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/babel@2.9.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-babel:python_babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_babel:python-babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_babel:python_babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:babel:python-babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:babel:python_babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-babel:babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_babel:babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:babel:babel:2.9.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/backports-entry-points-selectable@1.1.1?package-id=75047bc763df4739",
      "type": "library",
      "name": "backports-entry-points-selectable",
      "version": "1.1.1",
      "cpe": "cpe:2.3:a:python-backports-entry-points-selectable:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/backports-entry-points-selectable@1.1.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry-points-selectable:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry_points_selectable:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry_points_selectable:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry-points-selectable:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry-points-selectable:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry_points_selectable:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry_points_selectable:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry-points-selectable:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry-points-selectable:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry_points_selectable:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry_points_selectable:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry-points:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry-points:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry_points:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry_points:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry-points-selectable:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry-points-selectable:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry_points_selectable:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry_points_selectable:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry-points:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry-points:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry_points:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry_points:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry-points:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry-points:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry_points:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry_points:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry-points:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry-points:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry_points:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry_points:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports-entry:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports_entry:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-backports:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_backports:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports-entry:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports_entry:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:backports:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:backports-entry-points-selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:backports_entry_points_selectable:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/certifi@2021.10.8?package-id=c6a4944c9c56f01b",
      "type": "library",
      "name": "certifi",
      "version": "2021.10.8",
      "cpe": "cpe:2.3:a:certifi:certifi:2021.10.8:*:*:*:*:python:*:*",
      "purl": "pkg:pypi/certifi@2021.10.8",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/charset-normalizer@2.0.7?package-id=6b8f163e12bc285e",
      "type": "library",
      "name": "charset-normalizer",
      "version": "2.0.7",
      "cpe": "cpe:2.3:a:python-charset-normalizer:python-charset-normalizer:2.0.7:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/charset-normalizer@2.0.7",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-charset-normalizer:python_charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_charset_normalizer:python-charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_charset_normalizer:python_charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset-normalizer:python-charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset-normalizer:python_charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset_normalizer:python-charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset_normalizer:python_charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-charset-normalizer:charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-charset-normalizer:charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_charset_normalizer:charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_charset_normalizer:charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-charset:python-charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-charset:python_charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_charset:python-charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_charset:python_charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset-normalizer:charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset-normalizer:charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset_normalizer:charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset_normalizer:charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset:python-charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset:python_charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-charset:charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-charset:charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_charset:charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_charset:charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset:charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:charset:charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:charset-normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:charset_normalizer:2.0.7:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/colorama@0.4.4?package-id=415b045f62f8e19d",
      "type": "library",
      "name": "colorama",
      "version": "0.4.4",
      "cpe": "cpe:2.3:a:python-colorama:python-colorama:0.4.4:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/colorama@0.4.4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-colorama:python_colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_colorama:python-colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_colorama:python_colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:colorama:python-colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:colorama:python_colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-colorama:colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_colorama:colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:colorama:colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:colorama:0.4.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/coverage@6.1.2?package-id=d89f975597a7cbda",
      "type": "library",
      "name": "coverage",
      "version": "6.1.2",
      "cpe": "cpe:2.3:a:python-coverage:python-coverage:6.1.2:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/coverage@6.1.2",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-coverage:python_coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_coverage:python-coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_coverage:python_coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:coverage:python-coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:coverage:python_coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-coverage:coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_coverage:coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:coverage:coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:coverage:6.1.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/coveralls@3.3.1?package-id=c6477abb0441425e",
      "type": "library",
      "name": "coveralls",
      "version": "3.3.1",
      "cpe": "cpe:2.3:a:python-coveralls:python-coveralls:3.3.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/coveralls@3.3.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-coveralls:python_coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_coveralls:python-coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_coveralls:python_coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:coveralls:python-coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:coveralls:python_coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-coveralls:coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_coveralls:coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:coveralls:coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:coveralls:3.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/distlib@0.3.3?package-id=a8d6781f34385bd8",
      "type": "library",
      "name": "distlib",
      "version": "0.3.3",
      "cpe": "cpe:2.3:a:python-distlib:python-distlib:0.3.3:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/distlib@0.3.3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-distlib:python_distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_distlib:python-distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_distlib:python_distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:distlib:python-distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:distlib:python_distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-distlib:distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_distlib:distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:distlib:distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:distlib:0.3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/docopt@0.6.2?package-id=450e3ebdfc03a688",
      "type": "library",
      "name": "docopt",
      "version": "0.6.2",
      "cpe": "cpe:2.3:a:python-docopt:python-docopt:0.6.2:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/docopt@0.6.2",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-docopt:python_docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_docopt:python-docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_docopt:python_docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:docopt:python-docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:docopt:python_docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-docopt:docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_docopt:docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:docopt:docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:docopt:0.6.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/docutils@0.17.1?package-id=f050eeba27213cf7",
      "type": "library",
      "name": "docutils",
      "version": "0.17.1",
      "cpe": "cpe:2.3:a:python-docutils:python-docutils:0.17.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/docutils@0.17.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-docutils:python_docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_docutils:python-docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_docutils:python_docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:docutils:python-docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:docutils:python_docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-docutils:docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_docutils:docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:docutils:docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:docutils:0.17.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/filelock@3.4.0?package-id=8d62d53b424d034b",
      "type": "library",
      "name": "filelock",
      "version": "3.4.0",
      "cpe": "cpe:2.3:a:python-filelock:python-filelock:3.4.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/filelock@3.4.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-filelock:python_filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_filelock:python-filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_filelock:python_filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:filelock:python-filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:filelock:python_filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-filelock:filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_filelock:filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:filelock:filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:filelock:3.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
      "type": "library",
      "name": "flake8",
      "version": "3.9.2",
      "cpe": "cpe:2.3:a:python-flake8:python-flake8:3.9.2:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/flake8@3.9.2",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-flake8:python_flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_flake8:python-flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_flake8:python_flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:flake8:python-flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:flake8:python_flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-flake8:flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_flake8:flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:flake8:flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:flake8:3.9.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/idna@3.3?package-id=a2f71155570cb34e",
      "type": "library",
      "name": "idna",
      "version": "3.3",
      "cpe": "cpe:2.3:a:python-idna:python-idna:3.3:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/idna@3.3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-idna:python_idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_idna:python-idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_idna:python_idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:idna:python-idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:idna:python_idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-idna:idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_idna:idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:idna:idna:3.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/imagesize@1.3.0?package-id=8feef6fe66d6ce45",
      "type": "library",
      "name": "imagesize",
      "version": "1.3.0",
      "cpe": "cpe:2.3:a:python-imagesize:python-imagesize:1.3.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/imagesize@1.3.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-imagesize:python_imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_imagesize:python-imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_imagesize:python_imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:imagesize:python-imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:imagesize:python_imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-imagesize:imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_imagesize:imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:imagesize:imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:imagesize:1.3.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
      "type": "library",
      "name": "importlib-metadata",
      "version": "4.8.2",
      "cpe": "cpe:2.3:a:python-importlib-metadata:python-importlib-metadata:4.8.2:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/importlib-metadata@4.8.2",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib-metadata:python_importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib_metadata:python-importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib_metadata:python_importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib-metadata:python-importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib-metadata:python_importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib_metadata:python-importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib_metadata:python_importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib-metadata:importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib-metadata:importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib_metadata:importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib_metadata:importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib:python-importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib:python_importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib:python-importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib:python_importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib-metadata:importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib-metadata:importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib_metadata:importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib_metadata:importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib:python-importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib:python_importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib:importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib:importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib:importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib:importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib:importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib:importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:importlib-metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:importlib_metadata:4.8.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/importlib-resources@5.4.0?package-id=faa93767cee226fe",
      "type": "library",
      "name": "importlib-resources",
      "version": "5.4.0",
      "cpe": "cpe:2.3:a:python-importlib-resources:python-importlib-resources:5.4.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/importlib-resources@5.4.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib-resources:python_importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib_resources:python-importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib_resources:python_importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib-resources:python-importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib-resources:python_importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib_resources:python-importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib_resources:python_importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib-resources:importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib-resources:importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib_resources:importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib_resources:importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib:python-importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib:python_importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib:python-importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib:python_importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib-resources:importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib-resources:importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib_resources:importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib_resources:importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib:python-importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib:python_importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib:importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-importlib:importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib:importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_importlib:importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib:importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:importlib:importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:importlib-resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:importlib_resources:5.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/iniconfig@1.1.1?package-id=15a68b918aab16ce",
      "type": "library",
      "name": "iniconfig",
      "version": "1.1.1",
      "cpe": "cpe:2.3:a:python-iniconfig:python-iniconfig:1.1.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/iniconfig@1.1.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-iniconfig:python_iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_iniconfig:python-iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_iniconfig:python_iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:iniconfig:python-iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:iniconfig:python_iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-iniconfig:iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_iniconfig:iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:iniconfig:iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:iniconfig:1.1.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/jinja2@3.0.3?package-id=027d7e1b66a418fb",
      "type": "library",
      "name": "jinja2",
      "version": "3.0.3",
      "cpe": "cpe:2.3:a:python-jinja2:python-jinja2:3.0.3:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/jinja2@3.0.3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-jinja2:python_jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_jinja2:python-jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_jinja2:python_jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:jinja2:python-jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:jinja2:python_jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-jinja2:jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_jinja2:jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:jinja2:jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:jinja2:3.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/markupsafe@2.0.1?package-id=0e4ca5aa64c4b798",
      "type": "library",
      "name": "markupsafe",
      "version": "2.0.1",
      "cpe": "cpe:2.3:a:python-markupsafe:python-markupsafe:2.0.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/markupsafe@2.0.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-markupsafe:python_markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_markupsafe:python-markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_markupsafe:python_markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:markupsafe:python-markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:markupsafe:python_markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-markupsafe:markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_markupsafe:markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:markupsafe:markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:markupsafe:2.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/mccabe@0.6.1?package-id=3fc70689a450a980",
      "type": "library",
      "name": "mccabe",
      "version": "0.6.1",
      "cpe": "cpe:2.3:a:python-mccabe:python-mccabe:0.6.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/mccabe@0.6.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mccabe:python_mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mccabe:python-mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mccabe:python_mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mccabe:python-mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mccabe:python_mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mccabe:mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mccabe:mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mccabe:mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:mccabe:0.6.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
      "type": "library",
      "name": "mypy",
      "version": "0.910",
      "cpe": "cpe:2.3:a:python-mypy:python-mypy:0.910:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/mypy@0.910",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy:python_mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy:python-mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy:python_mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy:python-mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy:python_mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy:mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy:mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy:mypy:0.910:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/mypy-extensions@0.4.3?package-id=0d1899fc6e10b966",
      "type": "library",
      "name": "mypy-extensions",
      "version": "0.4.3",
      "cpe": "cpe:2.3:a:python-mypy-extensions:python-mypy-extensions:0.4.3:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/mypy-extensions@0.4.3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy-extensions:python_mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy_extensions:python-mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy_extensions:python_mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy-extensions:python-mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy-extensions:python_mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy_extensions:python-mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy_extensions:python_mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy-extensions:mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy-extensions:mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy_extensions:mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy_extensions:mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy:python-mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy:python_mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy:python-mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy:python_mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy-extensions:mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy-extensions:mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy_extensions:mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy_extensions:mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy:python-mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy:python_mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy:mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-mypy:mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy:mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_mypy:mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy:mypy-extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:mypy:mypy_extensions:0.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/packaging@21.3?package-id=2c414c8b05c93d32",
      "type": "library",
      "name": "packaging",
      "version": "21.3",
      "cpe": "cpe:2.3:a:python-packaging:python-packaging:21.3:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/packaging@21.3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-packaging:python_packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_packaging:python-packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_packaging:python_packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:packaging:python-packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:packaging:python_packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-packaging:packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_packaging:packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:packaging:packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:packaging:21.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/platformdirs@2.4.0?package-id=27d2491aee03e75e",
      "type": "library",
      "name": "platformdirs",
      "version": "2.4.0",
      "cpe": "cpe:2.3:a:python-platformdirs:python-platformdirs:2.4.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/platformdirs@2.4.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-platformdirs:python_platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_platformdirs:python-platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_platformdirs:python_platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:platformdirs:python-platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:platformdirs:python_platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-platformdirs:platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_platformdirs:platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:platformdirs:platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:platformdirs:2.4.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pluggy@1.0.0?package-id=444ae526cc78f3cf",
      "type": "library",
      "name": "pluggy",
      "version": "1.0.0",
      "cpe": "cpe:2.3:a:python-pluggy:python-pluggy:1.0.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pluggy@1.0.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pluggy:python_pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pluggy:python-pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pluggy:python_pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pluggy:python-pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pluggy:python_pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pluggy:pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pluggy:pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pluggy:pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pluggy:1.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/py@1.11.0?package-id=004a6afcf8c44ee8",
      "type": "library",
      "name": "py",
      "version": "1.11.0",
      "cpe": "cpe:2.3:a:python-py:python-py:1.11.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/py@1.11.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-py:python_py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_py:python-py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_py:python_py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:py:python-py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:py:python_py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-py:py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_py:py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:py:py:1.11.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pyasn1@0.4.8?package-id=fd7a2497e05b6bb1",
      "type": "library",
      "name": "pyasn1",
      "version": "0.4.8",
      "cpe": "cpe:2.3:a:python-pyasn1:python-pyasn1:0.4.8:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pyasn1@0.4.8",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pyasn1:python_pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyasn1:python-pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyasn1:python_pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyasn1:python-pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyasn1:python_pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pyasn1:pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyasn1:pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyasn1:pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pyasn1:0.4.8:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pycodestyle@2.7.0?package-id=87cd454942f42c12",
      "type": "library",
      "name": "pycodestyle",
      "version": "2.7.0",
      "cpe": "cpe:2.3:a:python-pycodestyle:python-pycodestyle:2.7.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pycodestyle@2.7.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pycodestyle:python_pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pycodestyle:python-pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pycodestyle:python_pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pycodestyle:python-pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pycodestyle:python_pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pycodestyle:pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pycodestyle:pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pycodestyle:pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pycodestyle:2.7.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pyflakes@2.3.1?package-id=660a662fabbad12e",
      "type": "library",
      "name": "pyflakes",
      "version": "2.3.1",
      "cpe": "cpe:2.3:a:python-pyflakes:python-pyflakes:2.3.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pyflakes@2.3.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pyflakes:python_pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyflakes:python-pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyflakes:python_pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyflakes:python-pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyflakes:python_pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pyflakes:pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyflakes:pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyflakes:pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pyflakes:2.3.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pygments@2.10.0?package-id=ad3eb46083a84321",
      "type": "library",
      "name": "pygments",
      "version": "2.10.0",
      "cpe": "cpe:2.3:a:python-pygments:python-pygments:2.10.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pygments@2.10.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pygments:python_pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pygments:python-pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pygments:python_pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pygments:python-pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pygments:python_pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pygments:pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pygments:pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pygments:pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pygments:2.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pyparsing@3.0.6?package-id=6855b0a8603cc8ba",
      "type": "library",
      "name": "pyparsing",
      "version": "3.0.6",
      "cpe": "cpe:2.3:a:python-pyparsing:python-pyparsing:3.0.6:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pyparsing@3.0.6",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pyparsing:python_pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyparsing:python-pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyparsing:python_pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyparsing:python-pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyparsing:python_pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pyparsing:pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pyparsing:pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pyparsing:pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pyparsing:3.0.6:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
      "type": "library",
      "name": "pytest",
      "version": "6.2.5",
      "cpe": "cpe:2.3:a:python-pytest:python-pytest:6.2.5:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pytest@6.2.5",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest:python_pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest:python-pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest:python_pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest:python-pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest:python_pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest:pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest:pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest:pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pytest:6.2.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
      "type": "library",
      "name": "pytest-cov",
      "version": "2.12.1",
      "cpe": "cpe:2.3:a:python-pytest-cov:python-pytest-cov:2.12.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pytest-cov@2.12.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest-cov:python_pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest_cov:python-pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest_cov:python_pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest:python-pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest:python_pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest:python-pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest:python_pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest-cov:python-pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest-cov:python_pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest_cov:python-pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest_cov:python_pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest-cov:pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest-cov:pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest_cov:pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest_cov:pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest:python-pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest:python_pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest:pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytest:pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest:pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytest:pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest-cov:pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest-cov:pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest_cov:pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest_cov:pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest:pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytest:pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pytest-cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pytest_cov:2.12.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/pytz@2021.3?package-id=77bee5788bd35abe",
      "type": "library",
      "name": "pytz",
      "version": "2021.3",
      "cpe": "cpe:2.3:a:python-pytz:python-pytz:2021.3:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/pytz@2021.3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytz:python_pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytz:python-pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytz:python_pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-pytz:pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_pytz:pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytz:python-pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytz:python_pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:pytz:pytz:2021.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/requests@2.26.0?package-id=9bc93501b204e2b4",
      "type": "library",
      "name": "requests",
      "version": "2.26.0",
      "cpe": "cpe:2.3:a:python:requests:2.26.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/requests@2.26.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/six@1.16.0?package-id=7ce49a5bde83f07c",
      "type": "library",
      "name": "six",
      "version": "1.16.0",
      "cpe": "cpe:2.3:a:python-six:python-six:1.16.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/six@1.16.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-six:python_six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_six:python-six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_six:python_six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-six:six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_six:six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:six:python-six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:six:python_six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:six:six:1.16.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/snowballstemmer@2.2.0?package-id=478fb81272cf6a03",
      "type": "library",
      "name": "snowballstemmer",
      "version": "2.2.0",
      "cpe": "cpe:2.3:a:python-snowballstemmer:python-snowballstemmer:2.2.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/snowballstemmer@2.2.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-snowballstemmer:python_snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_snowballstemmer:python-snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_snowballstemmer:python_snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-snowballstemmer:snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_snowballstemmer:snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:snowballstemmer:python-snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:snowballstemmer:python_snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:snowballstemmer:snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:snowballstemmer:2.2.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac",
      "type": "library",
      "name": "sphinx",
      "version": "5.0.2",
      "cpe": "cpe:2.3:a:python-sphinx:python-sphinx:5.0.2:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/sphinx@5.0.2",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinx:python_sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinx:python-sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinx:python_sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinx:sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinx:sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinx:python-sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinx:python_sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinx:sphinx:5.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/sphinxcontrib-applehelp@1.0.2?package-id=c8f5bb91b4a9a508",
      "type": "library",
      "name": "sphinxcontrib-applehelp",
      "version": "1.0.2",
      "cpe": "cpe:2.3:a:python-sphinxcontrib-applehelp:python-sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/sphinxcontrib-applehelp@1.0.2",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-applehelp:python_sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_applehelp:python-sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_applehelp:python_sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-applehelp:sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-applehelp:sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_applehelp:sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_applehelp:sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-applehelp:python-sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-applehelp:python_sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_applehelp:python-sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_applehelp:python_sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python-sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python_sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python-sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python_sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-applehelp:sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-applehelp:sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_applehelp:sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_applehelp:sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python-sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python_sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib-applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib_applehelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/sphinxcontrib-devhelp@1.0.2?package-id=f9f5cc858be85e31",
      "type": "library",
      "name": "sphinxcontrib-devhelp",
      "version": "1.0.2",
      "cpe": "cpe:2.3:a:python-sphinxcontrib-devhelp:python-sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/sphinxcontrib-devhelp@1.0.2",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-devhelp:python_sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_devhelp:python-sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_devhelp:python_sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-devhelp:sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-devhelp:sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_devhelp:sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_devhelp:sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-devhelp:python-sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-devhelp:python_sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_devhelp:python-sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_devhelp:python_sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python-sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python_sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python-sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python_sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-devhelp:sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-devhelp:sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_devhelp:sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_devhelp:sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python-sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python_sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib-devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib_devhelp:1.0.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/sphinxcontrib-htmlhelp@2.0.0?package-id=0558fbd8d0d1033f",
      "type": "library",
      "name": "sphinxcontrib-htmlhelp",
      "version": "2.0.0",
      "cpe": "cpe:2.3:a:python-sphinxcontrib-htmlhelp:python-sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/sphinxcontrib-htmlhelp@2.0.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-htmlhelp:python_sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_htmlhelp:python-sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_htmlhelp:python_sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-htmlhelp:sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-htmlhelp:sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_htmlhelp:sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_htmlhelp:sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-htmlhelp:python-sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-htmlhelp:python_sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_htmlhelp:python-sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_htmlhelp:python_sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python-sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python_sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python-sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python_sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-htmlhelp:sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-htmlhelp:sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_htmlhelp:sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_htmlhelp:sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python-sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python_sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib-htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib_htmlhelp:2.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/sphinxcontrib-jsmath@1.0.1?package-id=8b2fd19b3f943abc",
      "type": "library",
      "name": "sphinxcontrib-jsmath",
      "version": "1.0.1",
      "cpe": "cpe:2.3:a:python-sphinxcontrib-jsmath:python-sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/sphinxcontrib-jsmath@1.0.1",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-jsmath:python_sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_jsmath:python-sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_jsmath:python_sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-jsmath:sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-jsmath:sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python-sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python_sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python-sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python_sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_jsmath:sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_jsmath:sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-jsmath:python-sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-jsmath:python_sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_jsmath:python-sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_jsmath:python_sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-jsmath:sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-jsmath:sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python-sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python_sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_jsmath:sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_jsmath:sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib-jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib_jsmath:1.0.1:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/sphinxcontrib-qthelp@1.0.3?package-id=7a3c4c959d84dd03",
      "type": "library",
      "name": "sphinxcontrib-qthelp",
      "version": "1.0.3",
      "cpe": "cpe:2.3:a:python-sphinxcontrib-qthelp:python-sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/sphinxcontrib-qthelp@1.0.3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-qthelp:python_sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_qthelp:python-sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_qthelp:python_sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-qthelp:sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-qthelp:sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python-sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python_sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python-sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python_sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_qthelp:sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_qthelp:sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-qthelp:python-sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-qthelp:python_sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_qthelp:python-sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_qthelp:python_sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-qthelp:sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-qthelp:sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python-sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python_sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_qthelp:sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_qthelp:sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib-qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib_qthelp:1.0.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/sphinxcontrib-serializinghtml@1.1.5?package-id=244f74c672df1de7",
      "type": "library",
      "name": "sphinxcontrib-serializinghtml",
      "version": "1.1.5",
      "cpe": "cpe:2.3:a:python-sphinxcontrib-serializinghtml:python-sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/sphinxcontrib-serializinghtml@1.1.5",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-serializinghtml:python_sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_serializinghtml:python-sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_serializinghtml:python_sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-serializinghtml:sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib-serializinghtml:sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_serializinghtml:sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib_serializinghtml:sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-serializinghtml:python-sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-serializinghtml:python_sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_serializinghtml:python-sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_serializinghtml:python_sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-serializinghtml:sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib-serializinghtml:sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_serializinghtml:sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib_serializinghtml:sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python-sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:python_sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python-sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:python_sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-sphinxcontrib:sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_sphinxcontrib:sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python-sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:python_sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:sphinxcontrib:sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib-serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:sphinxcontrib_serializinghtml:1.1.5:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/toml@0.10.2?package-id=6bd03be0b3b06cf5",
      "type": "library",
      "name": "toml",
      "version": "0.10.2",
      "cpe": "cpe:2.3:a:python-toml:python-toml:0.10.2:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/toml@0.10.2",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-toml:python_toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_toml:python-toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_toml:python_toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-toml:toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_toml:toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:toml:python-toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:toml:python_toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:toml:toml:0.10.2:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/tox@3.24.4?package-id=e0a971a82edafe1c",
      "type": "library",
      "name": "tox",
      "version": "3.24.4",
      "cpe": "cpe:2.3:a:python-tox:python-tox:3.24.4:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/tox@3.24.4",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-tox:python_tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_tox:python-tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_tox:python_tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-tox:tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_tox:tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:tox:python-tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:tox:python_tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:tox:tox:3.24.4:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/typed-ast@1.4.3?package-id=79928376a2b951a0",
      "type": "library",
      "name": "typed-ast",
      "version": "1.4.3",
      "cpe": "cpe:2.3:a:python-typed-ast:python-typed-ast:1.4.3:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/typed-ast@1.4.3",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typed-ast:python_typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typed_ast:python-typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typed_ast:python_typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typed:python-typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typed:python_typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typed:python-typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typed:python_typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typed-ast:typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typed-ast:typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typed_ast:typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typed_ast:typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed-ast:python-typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed-ast:python_typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed_ast:python-typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed_ast:python_typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typed:typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typed:typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typed:typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typed:typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed:python-typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed:python_typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed-ast:typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed-ast:typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed_ast:typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed_ast:typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed:typed-ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typed:typed_ast:1.4.3:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/typing-extensions@4.0.0?package-id=fe21c38f8a8229e7",
      "type": "library",
      "name": "typing-extensions",
      "version": "4.0.0",
      "cpe": "cpe:2.3:a:python-typing-extensions:python-typing-extensions:4.0.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/typing-extensions@4.0.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typing-extensions:python_typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typing_extensions:python-typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typing_extensions:python_typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typing-extensions:typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typing-extensions:typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typing_extensions:typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typing_extensions:typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing-extensions:python-typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing-extensions:python_typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing_extensions:python-typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing_extensions:python_typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typing:python-typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typing:python_typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typing:python-typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typing:python_typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing-extensions:typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing-extensions:typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing_extensions:typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing_extensions:typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typing:typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-typing:typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typing:typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_typing:typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing:python-typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing:python_typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing:typing-extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:typing:typing_extensions:4.0.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/urllib3@1.26.7?package-id=76e0d00036b57b48",
      "type": "library",
      "name": "urllib3",
      "version": "1.26.7",
      "cpe": "cpe:2.3:a:python:urllib3:1.26.7:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/urllib3@1.26.7",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/virtualenv@20.10.0?package-id=9804d1c4e55dc418",
      "type": "library",
      "name": "virtualenv",
      "version": "20.10.0",
      "cpe": "cpe:2.3:a:python-virtualenv:python-virtualenv:20.10.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/virtualenv@20.10.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-virtualenv:python_virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_virtualenv:python-virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_virtualenv:python_virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-virtualenv:virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_virtualenv:virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:virtualenv:python-virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:virtualenv:python_virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:virtualenv:virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:virtualenv:20.10.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "pkg:pypi/zipp@3.6.0?package-id=13cb3c1b85db604c",
      "type": "library",
      "name": "zipp",
      "version": "3.6.0",
      "cpe": "cpe:2.3:a:python-zipp:python-zipp:3.6.0:*:*:*:*:*:*:*",
      "purl": "pkg:pypi/zipp@3.6.0",
      "properties": [
        {
          "name": "syft:package:foundBy",
          "value": "python-package-cataloger"
        },
        {
          "name": "syft:package:language",
          "value": "python"
        },
        {
          "name": "syft:package:type",
          "value": "python"
        },
        {
          "name": "syft:package:metadataType",
          "value": "python-poetry-lock-entry"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-zipp:python_zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_zipp:python-zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_zipp:python_zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python-zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:python_zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python-zipp:zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python_zipp:zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:zipp:python-zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:zipp:python_zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:python:zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:cpe23",
          "value": "cpe:2.3:a:zipp:zipp:3.6.0:*:*:*:*:*:*:*"
        },
        {
          "name": "syft:location:0:path",
          "value": "/poetry.lock"
        }
      ]
    },
    {
      "bom-ref": "4490038dd0eaaf1f",
      "type": "file",
      "name": "/home/python-rsa-version-4.9/poetry.lock",
      "hashes": [
        {
          "alg": "SHA-1",
          "content": "1e6ae4f3d9b407dc6910d560f3e32b37547c7c77"
        },
        {
          "alg": "SHA-256",
          "content": "6f9493d56b36d86033e806f5c61e1074ebed080c07902587ec510480fd55ac73"
        }
      ]
    }
  ],
  "dependencies": [
    {
      "ref": "pkg:pypi/attrs@21.2.0?package-id=e9ca875f5764b8c4",
      "dependsOn": [
        "pkg:pypi/coverage@6.1.2?package-id=d89f975597a7cbda",
        "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/six@1.16.0?package-id=7ce49a5bde83f07c",
        "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac"
      ]
    },
    {
      "ref": "pkg:pypi/babel@2.9.1?package-id=d2067edaa1b3dd71",
      "dependsOn": [
        "pkg:pypi/pytz@2021.3?package-id=77bee5788bd35abe"
      ]
    },
    {
      "ref": "pkg:pypi/backports-entry-points-selectable@1.1.1?package-id=75047bc763df4739",
      "dependsOn": [
        "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
        "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac"
      ]
    },
    {
      "ref": "pkg:pypi/coveralls@3.3.1?package-id=c6477abb0441425e",
      "dependsOn": [
        "pkg:pypi/coverage@6.1.2?package-id=d89f975597a7cbda",
        "pkg:pypi/docopt@0.6.2?package-id=450e3ebdfc03a688",
        "pkg:pypi/requests@2.26.0?package-id=9bc93501b204e2b4"
      ]
    },
    {
      "ref": "pkg:pypi/filelock@3.4.0?package-id=8d62d53b424d034b",
      "dependsOn": [
        "pkg:pypi/coverage@6.1.2?package-id=d89f975597a7cbda",
        "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac"
      ]
    },
    {
      "ref": "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
      "dependsOn": [
        "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
        "pkg:pypi/mccabe@0.6.1?package-id=3fc70689a450a980",
        "pkg:pypi/pycodestyle@2.7.0?package-id=87cd454942f42c12",
        "pkg:pypi/pyflakes@2.3.1?package-id=660a662fabbad12e"
      ]
    },
    {
      "ref": "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
      "dependsOn": [
        "pkg:pypi/importlib-resources@5.4.0?package-id=faa93767cee226fe",
        "pkg:pypi/packaging@21.3?package-id=2c414c8b05c93d32",
        "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac",
        "pkg:pypi/typing-extensions@4.0.0?package-id=fe21c38f8a8229e7",
        "pkg:pypi/zipp@3.6.0?package-id=13cb3c1b85db604c"
      ]
    },
    {
      "ref": "pkg:pypi/importlib-resources@5.4.0?package-id=faa93767cee226fe",
      "dependsOn": [
        "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac",
        "pkg:pypi/zipp@3.6.0?package-id=13cb3c1b85db604c"
      ]
    },
    {
      "ref": "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
      "dependsOn": [
        "pkg:pypi/mypy-extensions@0.4.3?package-id=0d1899fc6e10b966",
        "pkg:pypi/toml@0.10.2?package-id=6bd03be0b3b06cf5",
        "pkg:pypi/typed-ast@1.4.3?package-id=79928376a2b951a0",
        "pkg:pypi/typing-extensions@4.0.0?package-id=fe21c38f8a8229e7"
      ]
    },
    {
      "ref": "pkg:pypi/packaging@21.3?package-id=2c414c8b05c93d32",
      "dependsOn": [
        "pkg:pypi/pyparsing@3.0.6?package-id=6855b0a8603cc8ba"
      ]
    },
    {
      "ref": "pkg:pypi/platformdirs@2.4.0?package-id=27d2491aee03e75e",
      "dependsOn": [
        "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47"
      ]
    },
    {
      "ref": "pkg:pypi/pluggy@1.0.0?package-id=444ae526cc78f3cf",
      "dependsOn": [
        "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/tox@3.24.4?package-id=e0a971a82edafe1c"
      ]
    },
    {
      "ref": "pkg:pypi/pyparsing@3.0.6?package-id=6855b0a8603cc8ba",
      "dependsOn": [
        "pkg:pypi/jinja2@3.0.3?package-id=027d7e1b66a418fb"
      ]
    },
    {
      "ref": "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
      "dependsOn": [
        "pkg:pypi/coverage@6.1.2?package-id=d89f975597a7cbda",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/six@1.16.0?package-id=7ce49a5bde83f07c",
        "pkg:pypi/toml@0.10.2?package-id=6bd03be0b3b06cf5",
        "pkg:pypi/virtualenv@20.10.0?package-id=9804d1c4e55dc418"
      ]
    },
    {
      "ref": "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
      "dependsOn": [
        "pkg:pypi/atomicwrites@1.4.0?package-id=f9d340c57a0fee44",
        "pkg:pypi/attrs@21.2.0?package-id=e9ca875f5764b8c4",
        "pkg:pypi/colorama@0.4.4?package-id=415b045f62f8e19d",
        "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
        "pkg:pypi/iniconfig@1.1.1?package-id=15a68b918aab16ce",
        "pkg:pypi/packaging@21.3?package-id=2c414c8b05c93d32",
        "pkg:pypi/pluggy@1.0.0?package-id=444ae526cc78f3cf",
        "pkg:pypi/py@1.11.0?package-id=004a6afcf8c44ee8",
        "pkg:pypi/requests@2.26.0?package-id=9bc93501b204e2b4",
        "pkg:pypi/toml@0.10.2?package-id=6bd03be0b3b06cf5"
      ]
    },
    {
      "ref": "pkg:pypi/requests@2.26.0?package-id=9bc93501b204e2b4",
      "dependsOn": [
        "pkg:pypi/certifi@2021.10.8?package-id=c6a4944c9c56f01b",
        "pkg:pypi/charset-normalizer@2.0.7?package-id=6b8f163e12bc285e",
        "pkg:pypi/idna@3.3?package-id=a2f71155570cb34e",
        "pkg:pypi/urllib3@1.26.7?package-id=76e0d00036b57b48"
      ]
    },
    {
      "ref": "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac",
      "dependsOn": [
        "pkg:pypi/alabaster@0.7.12?package-id=8f783dd188557391",
        "pkg:pypi/babel@2.9.1?package-id=d2067edaa1b3dd71",
        "pkg:pypi/colorama@0.4.4?package-id=415b045f62f8e19d",
        "pkg:pypi/docutils@0.17.1?package-id=f050eeba27213cf7",
        "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
        "pkg:pypi/imagesize@1.3.0?package-id=8feef6fe66d6ce45",
        "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
        "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
        "pkg:pypi/packaging@21.3?package-id=2c414c8b05c93d32",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/requests@2.26.0?package-id=9bc93501b204e2b4",
        "pkg:pypi/snowballstemmer@2.2.0?package-id=478fb81272cf6a03",
        "pkg:pypi/sphinxcontrib-applehelp@1.0.2?package-id=c8f5bb91b4a9a508",
        "pkg:pypi/sphinxcontrib-devhelp@1.0.2?package-id=f9f5cc858be85e31",
        "pkg:pypi/sphinxcontrib-htmlhelp@2.0.0?package-id=0558fbd8d0d1033f",
        "pkg:pypi/sphinxcontrib-jsmath@1.0.1?package-id=8b2fd19b3f943abc",
        "pkg:pypi/sphinxcontrib-qthelp@1.0.3?package-id=7a3c4c959d84dd03",
        "pkg:pypi/sphinxcontrib-serializinghtml@1.1.5?package-id=244f74c672df1de7",
        "pkg:pypi/typed-ast@1.4.3?package-id=79928376a2b951a0"
      ]
    },
    {
      "ref": "pkg:pypi/sphinxcontrib-applehelp@1.0.2?package-id=c8f5bb91b4a9a508",
      "dependsOn": [
        "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
        "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47"
      ]
    },
    {
      "ref": "pkg:pypi/sphinxcontrib-devhelp@1.0.2?package-id=f9f5cc858be85e31",
      "dependsOn": [
        "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
        "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47"
      ]
    },
    {
      "ref": "pkg:pypi/sphinxcontrib-htmlhelp@2.0.0?package-id=0558fbd8d0d1033f",
      "dependsOn": [
        "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
        "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47"
      ]
    },
    {
      "ref": "pkg:pypi/sphinxcontrib-jsmath@1.0.1?package-id=8b2fd19b3f943abc",
      "dependsOn": [
        "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
        "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47"
      ]
    },
    {
      "ref": "pkg:pypi/sphinxcontrib-qthelp@1.0.3?package-id=7a3c4c959d84dd03",
      "dependsOn": [
        "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
        "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47"
      ]
    },
    {
      "ref": "pkg:pypi/sphinxcontrib-serializinghtml@1.1.5?package-id=244f74c672df1de7",
      "dependsOn": [
        "pkg:pypi/flake8@3.9.2?package-id=74f75ce36b885f1f",
        "pkg:pypi/mypy@0.910?package-id=0b7684705e62e0e4",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47"
      ]
    },
    {
      "ref": "pkg:pypi/tox@3.24.4?package-id=e0a971a82edafe1c",
      "dependsOn": [
        "pkg:pypi/colorama@0.4.4?package-id=415b045f62f8e19d",
        "pkg:pypi/filelock@3.4.0?package-id=8d62d53b424d034b",
        "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
        "pkg:pypi/packaging@21.3?package-id=2c414c8b05c93d32",
        "pkg:pypi/pluggy@1.0.0?package-id=444ae526cc78f3cf",
        "pkg:pypi/py@1.11.0?package-id=004a6afcf8c44ee8",
        "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/six@1.16.0?package-id=7ce49a5bde83f07c",
        "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac",
        "pkg:pypi/toml@0.10.2?package-id=6bd03be0b3b06cf5",
        "pkg:pypi/virtualenv@20.10.0?package-id=9804d1c4e55dc418"
      ]
    },
    {
      "ref": "pkg:pypi/urllib3@1.26.7?package-id=76e0d00036b57b48",
      "dependsOn": [
        "pkg:pypi/certifi@2021.10.8?package-id=c6a4944c9c56f01b",
        "pkg:pypi/idna@3.3?package-id=a2f71155570cb34e"
      ]
    },
    {
      "ref": "pkg:pypi/virtualenv@20.10.0?package-id=9804d1c4e55dc418",
      "dependsOn": [
        "pkg:pypi/coverage@6.1.2?package-id=d89f975597a7cbda",
        "pkg:pypi/distlib@0.3.3?package-id=a8d6781f34385bd8",
        "pkg:pypi/filelock@3.4.0?package-id=8d62d53b424d034b",
        "pkg:pypi/importlib-metadata@4.8.2?package-id=a3c0d5ac58021552",
        "pkg:pypi/importlib-resources@5.4.0?package-id=faa93767cee226fe",
        "pkg:pypi/packaging@21.3?package-id=2c414c8b05c93d32",
        "pkg:pypi/platformdirs@2.4.0?package-id=27d2491aee03e75e",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/six@1.16.0?package-id=7ce49a5bde83f07c",
        "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac"
      ]
    },
    {
      "ref": "pkg:pypi/zipp@3.6.0?package-id=13cb3c1b85db604c",
      "dependsOn": [
        "pkg:pypi/pytest-cov@2.12.1?package-id=24c621fb15323447",
        "pkg:pypi/pytest@6.2.5?package-id=e26b835efca25b47",
        "pkg:pypi/sphinx@5.0.2?package-id=601da1b7e40609ac"
      ]
    }
  ],
  "upgrade": {
    "file_changes": {
      "old_version": "/home/python-rsa-version-4.3",
      "New file": [
        "/home/python-rsa-version-4.9/tests/test_mypy.py"
      ],
      "Deleted file": [
        "/home/python-rsa-version-4.3/rsa/_compat.py",
        "/home/python-rsa-version-4.3/rsa/machine_size.py",
        "/home/python-rsa-version-4.3/setup.py",
        "/home/python-rsa-version-4.3/tests/test_compat.py"
      ],
      "Modified file": [
        {
          "file": "/home/python-rsa-version-4.9/create_timing_table.py",
          "change": [
            "--- /home/python-rsa-version-4.3/create_timing_table.py",
            "+++ /home/python-rsa-version-4.9/create_timing_table.py",
            "@@ -1,10 +1,8 @@",
            " #!/usr/bin/env python",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/doc/conf.py",
          "change": [
            "--- /home/python-rsa-version-4.3/doc/conf.py",
            "+++ /home/python-rsa-version-4.9/doc/conf.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " # Python-RSA documentation build configuration file, created by",
            " # sphinx-quickstart on Sat Jul 30 23:11:07 2011.",
            " #",
            " # This file is execfile()d with the current directory set to its containing dir.",
            " #",
            " # Note that not all possible configuration values are present in this",
            " # autogenerated file.",
            "@@ -42,15 +40,15 @@",
            " source_encoding = 'utf-8'",
            " ",
            " # The master toctree document.",
            " master_doc = 'index'",
            " ",
            " # General information about the project.",
            " project = u'Python-RSA'",
            "-copyright = u'2011-2020, Sybren A. Stüvel'",
            "+copyright = u'2011-2019, Sybren A. Stüvel'",
            " ",
            " # The version info for the project you're documenting, acts as replacement for",
            " # |version| and |release|, also used in various other places throughout the",
            " # built documents.",
            " #",
            " # The short X.Y version.",
            " version = rsa.__version__"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/__init__.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/__init__.py",
            "+++ /home/python-rsa-version-4.9/rsa/__init__.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -20,23 +18,43 @@",
            " ",
            " WARNING: this implementation does not use compression of the cleartext input to",
            " prevent repetitions, or other common security improvements. Use with care.",
            " ",
            " \"\"\"",
            " ",
            " from rsa.key import newkeys, PrivateKey, PublicKey",
            "-from rsa.pkcs1 import encrypt, decrypt, sign, verify, DecryptionError, \\",
            "-    VerificationError, find_signature_hash,  sign_hash, compute_hash",
            "+from rsa.pkcs1 import (",
            "+    encrypt,",
            "+    decrypt,",
            "+    sign,",
            "+    verify,",
            "+    DecryptionError,",
            "+    VerificationError,",
            "+    find_signature_hash,",
            "+    sign_hash,",
            "+    compute_hash,",
            "+)",
            " ",
            " __author__ = \"Sybren Stuvel, Barry Mead and Yesudeep Mangalapilly\"",
            "-__date__ = \"2020-06-12\"",
            "-__version__ = '4.3'",
            "+__date__ = \"2022-07-20\"",
            "+__version__ = \"4.9\"",
            " ",
            " # Do doctest if we're run directly",
            " if __name__ == \"__main__\":",
            "     import doctest",
            " ",
            "     doctest.testmod()",
            " ",
            "-__all__ = [\"newkeys\", \"encrypt\", \"decrypt\", \"sign\", \"verify\", 'PublicKey',",
            "-           'PrivateKey', 'DecryptionError', 'VerificationError',",
            "-           'compute_hash', 'sign_hash']",
            "+__all__ = [",
            "+    \"newkeys\",",
            "+    \"encrypt\",",
            "+    \"decrypt\",",
            "+    \"sign\",",
            "+    \"verify\",",
            "+    \"PublicKey\",",
            "+    \"PrivateKey\",",
            "+    \"DecryptionError\",",
            "+    \"VerificationError\",",
            "+    \"find_signature_hash\",",
            "+    \"compute_hash\",",
            "+    \"sign_hash\",",
            "+]"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/asn1.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/asn1.py",
            "+++ /home/python-rsa-version-4.9/rsa/asn1.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -20,34 +18,35 @@",
            " \"\"\"",
            " ",
            " from pyasn1.type import univ, namedtype, tag",
            " ",
            " ",
            " class PubKeyHeader(univ.Sequence):",
            "     componentType = namedtype.NamedTypes(",
            "-            namedtype.NamedType('oid', univ.ObjectIdentifier()),",
            "-            namedtype.NamedType('parameters', univ.Null()),",
            "+        namedtype.NamedType(\"oid\", univ.ObjectIdentifier()),",
            "+        namedtype.NamedType(\"parameters\", univ.Null()),",
            "     )",
            " ",
            " ",
            " class OpenSSLPubKey(univ.Sequence):",
            "     componentType = namedtype.NamedTypes(",
            "-            namedtype.NamedType('header', PubKeyHeader()),",
            "-",
            "-            # This little hack (the implicit tag) allows us to get a Bit String as Octet String",
            "-            namedtype.NamedType('key', univ.OctetString().subtype(",
            "-                    implicitTag=tag.Tag(tagClass=0, tagFormat=0, tagId=3))),",
            "+        namedtype.NamedType(\"header\", PubKeyHeader()),",
            "+        # This little hack (the implicit tag) allows us to get a Bit String as Octet String",
            "+        namedtype.NamedType(",
            "+            \"key\",",
            "+            univ.OctetString().subtype(implicitTag=tag.Tag(tagClass=0, tagFormat=0, tagId=3)),",
            "+        ),",
            "     )",
            " ",
            " ",
            " class AsnPubKey(univ.Sequence):",
            "     \"\"\"ASN.1 contents of DER encoded public key:",
            " ",
            "     RSAPublicKey ::= SEQUENCE {",
            "          modulus           INTEGER,  -- n",
            "          publicExponent    INTEGER,  -- e",
            "     \"\"\"",
            " ",
            "     componentType = namedtype.NamedTypes(",
            "-            namedtype.NamedType('modulus', univ.Integer()),",
            "-            namedtype.NamedType('publicExponent', univ.Integer()),",
            "+        namedtype.NamedType(\"modulus\", univ.Integer()),",
            "+        namedtype.NamedType(\"publicExponent\", univ.Integer()),",
            "     )"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/cli.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/cli.py",
            "+++ /home/python-rsa-version-4.9/rsa/cli.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -15,274 +13,309 @@",
            " #  limitations under the License.",
            " ",
            " \"\"\"Commandline scripts.",
            " ",
            " These scripts are called by the executables defined in setup.py.",
            " \"\"\"",
            " ",
            "-from __future__ import with_statement, print_function",
            "-",
            " import abc",
            " import sys",
            "-from optparse import OptionParser",
            "+import typing",
            "+import optparse",
            " ",
            " import rsa",
            "+import rsa.key",
            " import rsa.pkcs1",
            " ",
            " HASH_METHODS = sorted(rsa.pkcs1.HASH_METHODS.keys())",
            "+Indexable = typing.Union[typing.Tuple, typing.List[str]]",
            " ",
            " ",
            "-def keygen():",
            "+def keygen() -> None:",
            "     \"\"\"Key generator.\"\"\"",
            " ",
            "     # Parse the CLI options",
            "-    parser = OptionParser(usage='usage: %prog [options] keysize',",
            "-                          description='Generates a new RSA keypair of \"keysize\" bits.')",
            "-",
            "-    parser.add_option('--pubout', type='string',",
            "-                      help='Output filename for the public key. The public key is '",
            "-                           'not saved if this option is not present. You can use '",
            "-                           'pyrsa-priv2pub to create the public key file later.')",
            "-",
            "-    parser.add_option('-o', '--out', type='string',",
            "-                      help='Output filename for the private key. The key is '",
            "-                           'written to stdout if this option is not present.')",
            "-",
            "-    parser.add_option('--form',",
            "-                      help='key format of the private and public keys - default PEM',",
            "-                      choices=('PEM', 'DER'), default='PEM')",
            "+    parser = optparse.OptionParser(",
            "+        usage=\"usage: %prog [options] keysize\",",
            "+        description='Generates a new RSA key pair of \"keysize\" bits.',",
            "+    )",
            "+",
            "+    parser.add_option(",
            "+        \"--pubout\",",
            "+        type=\"string\",",
            "+        help=\"Output filename for the public key. The public key is \"",
            "+        \"not saved if this option is not present. You can use \"",
            "+        \"pyrsa-priv2pub to create the public key file later.\",",
            "+    )",
            "+",
            "+    parser.add_option(",
            "+        \"-o\",",
            "+        \"--out\",",
            "+        type=\"string\",",
            "+        help=\"Output filename for the private key. The key is \"",
            "+        \"written to stdout if this option is not present.\",",
            "+    )",
            "+",
            "+    parser.add_option(",
            "+        \"--form\",",
            "+        help=\"key format of the private and public keys - default PEM\",",
            "+        choices=(\"PEM\", \"DER\"),",
            "+        default=\"PEM\",",
            "+    )",
            " ",
            "     (cli, cli_args) = parser.parse_args(sys.argv[1:])",
            " ",
            "     if len(cli_args) != 1:",
            "         parser.print_help()",
            "         raise SystemExit(1)",
            " ",
            "     try:",
            "         keysize = int(cli_args[0])",
            "-    except ValueError:",
            "+    except ValueError as ex:",
            "         parser.print_help()",
            "-        print('Not a valid number: %s' % cli_args[0], file=sys.stderr)",
            "-        raise SystemExit(1)",
            "+        print(\"Not a valid number: %s\" % cli_args[0], file=sys.stderr)",
            "+        raise SystemExit(1) from ex",
            " ",
            "-    print('Generating %i-bit key' % keysize, file=sys.stderr)",
            "+    print(\"Generating %i-bit key\" % keysize, file=sys.stderr)",
            "     (pub_key, priv_key) = rsa.newkeys(keysize)",
            " ",
            "     # Save public key",
            "     if cli.pubout:",
            "-        print('Writing public key to %s' % cli.pubout, file=sys.stderr)",
            "+        print(\"Writing public key to %s\" % cli.pubout, file=sys.stderr)",
            "         data = pub_key.save_pkcs1(format=cli.form)",
            "-        with open(cli.pubout, 'wb') as outfile:",
            "+        with open(cli.pubout, \"wb\") as outfile:",
            "             outfile.write(data)",
            " ",
            "     # Save private key",
            "     data = priv_key.save_pkcs1(format=cli.form)",
            " ",
            "     if cli.out:",
            "-        print('Writing private key to %s' % cli.out, file=sys.stderr)",
            "-        with open(cli.out, 'wb') as outfile:",
            "+        print(\"Writing private key to %s\" % cli.out, file=sys.stderr)",
            "+        with open(cli.out, \"wb\") as outfile:",
            "             outfile.write(data)",
            "     else:",
            "-        print('Writing private key to stdout', file=sys.stderr)",
            "-        rsa._compat.write_to_stdout(data)",
            "+        print(\"Writing private key to stdout\", file=sys.stderr)",
            "+        sys.stdout.buffer.write(data)",
            " ",
            " ",
            "-class CryptoOperation(object):",
            "+class CryptoOperation(metaclass=abc.ABCMeta):",
            "     \"\"\"CLI callable that operates with input, output, and a key.\"\"\"",
            " ",
            "-    __metaclass__ = abc.ABCMeta",
            "-",
            "-    keyname = 'public'  # or 'private'",
            "-    usage = 'usage: %%prog [options] %(keyname)s_key'",
            "-    description = None",
            "-    operation = 'decrypt'",
            "-    operation_past = 'decrypted'",
            "-    operation_progressive = 'decrypting'",
            "-    input_help = 'Name of the file to %(operation)s. Reads from stdin if ' \\",
            "-                 'not specified.'",
            "-    output_help = 'Name of the file to write the %(operation_past)s file ' \\",
            "-                  'to. Written to stdout if this option is not present.'",
            "+    keyname = \"public\"  # or 'private'",
            "+    usage = \"usage: %%prog [options] %(keyname)s_key\"",
            "+    description = \"\"",
            "+    operation = \"decrypt\"",
            "+    operation_past = \"decrypted\"",
            "+    operation_progressive = \"decrypting\"",
            "+    input_help = \"Name of the file to %(operation)s. Reads from stdin if \" \"not specified.\"",
            "+    output_help = (",
            "+        \"Name of the file to write the %(operation_past)s file \"",
            "+        \"to. Written to stdout if this option is not present.\"",
            "+    )",
            "     expected_cli_args = 1",
            "     has_output = True",
            " ",
            "-    key_class = rsa.PublicKey",
            "+    key_class = rsa.PublicKey  # type: typing.Type[rsa.key.AbstractKey]",
            " ",
            "-    def __init__(self):",
            "+    def __init__(self) -> None:",
            "         self.usage = self.usage % self.__class__.__dict__",
            "         self.input_help = self.input_help % self.__class__.__dict__",
            "         self.output_help = self.output_help % self.__class__.__dict__",
            " ",
            "     @abc.abstractmethod",
            "-    def perform_operation(self, indata, key, cli_args):",
            "+    def perform_operation(",
            "+        self, indata: bytes, key: rsa.key.AbstractKey, cli_args: Indexable",
            "+    ) -> typing.Any:",
            "         \"\"\"Performs the program's operation.",
            " ",
            "         Implement in a subclass.",
            " ",
            "         :returns: the data to write to the output.",
            "         \"\"\"",
            " ",
            "-    def __call__(self):",
            "+    def __call__(self) -> None:",
            "         \"\"\"Runs the program.\"\"\"",
            " ",
            "         (cli, cli_args) = self.parse_cli()",
            " ",
            "         key = self.read_key(cli_args[0], cli.keyform)",
            " ",
            "         indata = self.read_infile(cli.input)",
            " ",
            "         print(self.operation_progressive.title(), file=sys.stderr)",
            "         outdata = self.perform_operation(indata, key, cli_args)",
            " ",
            "         if self.has_output:",
            "             self.write_outfile(outdata, cli.output)",
            " ",
            "-    def parse_cli(self):",
            "+    def parse_cli(self) -> typing.Tuple[optparse.Values, typing.List[str]]:",
            "         \"\"\"Parse the CLI options",
            " ",
            "         :returns: (cli_opts, cli_args)",
            "         \"\"\"",
            " ",
            "-        parser = OptionParser(usage=self.usage, description=self.description)",
            "+        parser = optparse.OptionParser(usage=self.usage, description=self.description)",
            " ",
            "-        parser.add_option('-i', '--input', type='string', help=self.input_help)",
            "+        parser.add_option(\"-i\", \"--input\", type=\"string\", help=self.input_help)",
            " ",
            "         if self.has_output:",
            "-            parser.add_option('-o', '--output', type='string', help=self.output_help)",
            "+            parser.add_option(\"-o\", \"--output\", type=\"string\", help=self.output_help)",
            " ",
            "-        parser.add_option('--keyform',",
            "-                          help='Key format of the %s key - default PEM' % self.keyname,",
            "-                          choices=('PEM', 'DER'), default='PEM')",
            "+        parser.add_option(",
            "+            \"--keyform\",",
            "+            help=\"Key format of the %s key - default PEM\" % self.keyname,",
            "+            choices=(\"PEM\", \"DER\"),",
            "+            default=\"PEM\",",
            "+        )",
            " ",
            "         (cli, cli_args) = parser.parse_args(sys.argv[1:])",
            " ",
            "         if len(cli_args) != self.expected_cli_args:",
            "             parser.print_help()",
            "             raise SystemExit(1)",
            " ",
            "         return cli, cli_args",
            " ",
            "-    def read_key(self, filename, keyform):",
            "+    def read_key(self, filename: str, keyform: str) -> rsa.key.AbstractKey:",
            "         \"\"\"Reads a public or private key.\"\"\"",
            " ",
            "-        print('Reading %s key from %s' % (self.keyname, filename), file=sys.stderr)",
            "-        with open(filename, 'rb') as keyfile:",
            "+        print(\"Reading %s key from %s\" % (self.keyname, filename), file=sys.stderr)",
            "+        with open(filename, \"rb\") as keyfile:",
            "             keydata = keyfile.read()",
            " ",
            "         return self.key_class.load_pkcs1(keydata, keyform)",
            " ",
            "-    def read_infile(self, inname):",
            "+    def read_infile(self, inname: str) -> bytes:",
            "         \"\"\"Read the input file\"\"\"",
            " ",
            "         if inname:",
            "-            print('Reading input from %s' % inname, file=sys.stderr)",
            "-            with open(inname, 'rb') as infile:",
            "+            print(\"Reading input from %s\" % inname, file=sys.stderr)",
            "+            with open(inname, \"rb\") as infile:",
            "                 return infile.read()",
            " ",
            "-        print('Reading input from stdin', file=sys.stderr)",
            "-        return sys.stdin.read()",
            "+        print(\"Reading input from stdin\", file=sys.stderr)",
            "+        return sys.stdin.buffer.read()",
            " ",
            "-    def write_outfile(self, outdata, outname):",
            "+    def write_outfile(self, outdata: bytes, outname: str) -> None:",
            "         \"\"\"Write the output file\"\"\"",
            " ",
            "         if outname:",
            "-            print('Writing output to %s' % outname, file=sys.stderr)",
            "-            with open(outname, 'wb') as outfile:",
            "+            print(\"Writing output to %s\" % outname, file=sys.stderr)",
            "+            with open(outname, \"wb\") as outfile:",
            "                 outfile.write(outdata)",
            "         else:",
            "-            print('Writing output to stdout', file=sys.stderr)",
            "-            rsa._compat.write_to_stdout(outdata)",
            "+            print(\"Writing output to stdout\", file=sys.stderr)",
            "+            sys.stdout.buffer.write(outdata)",
            " ",
            " ",
            " class EncryptOperation(CryptoOperation):",
            "     \"\"\"Encrypts a file.\"\"\"",
            " ",
            "-    keyname = 'public'",
            "-    description = ('Encrypts a file. The file must be shorter than the key '",
            "-                   'length in order to be encrypted.')",
            "-    operation = 'encrypt'",
            "-    operation_past = 'encrypted'",
            "-    operation_progressive = 'encrypting'",
            "-",
            "-    def perform_operation(self, indata, pub_key, cli_args=None):",
            "+    keyname = \"public\"",
            "+    description = (",
            "+        \"Encrypts a file. The file must be shorter than the key \" \"length in order to be encrypted.\"",
            "+    )",
            "+    operation = \"encrypt\"",
            "+    operation_past = \"encrypted\"",
            "+    operation_progressive = \"encrypting\"",
            "+",
            "+    def perform_operation(",
            "+        self, indata: bytes, pub_key: rsa.key.AbstractKey, cli_args: Indexable = ()",
            "+    ) -> bytes:",
            "         \"\"\"Encrypts files.\"\"\"",
            "-",
            "+        assert isinstance(pub_key, rsa.key.PublicKey)",
            "         return rsa.encrypt(indata, pub_key)",
            " ",
            " ",
            " class DecryptOperation(CryptoOperation):",
            "     \"\"\"Decrypts a file.\"\"\"",
            " ",
            "-    keyname = 'private'",
            "-    description = ('Decrypts a file. The original file must be shorter than '",
            "-                   'the key length in order to have been encrypted.')",
            "-    operation = 'decrypt'",
            "-    operation_past = 'decrypted'",
            "-    operation_progressive = 'decrypting'",
            "+    keyname = \"private\"",
            "+    description = (",
            "+        \"Decrypts a file. The original file must be shorter than \"",
            "+        \"the key length in order to have been encrypted.\"",
            "+    )",
            "+    operation = \"decrypt\"",
            "+    operation_past = \"decrypted\"",
            "+    operation_progressive = \"decrypting\"",
            "     key_class = rsa.PrivateKey",
            " ",
            "-    def perform_operation(self, indata, priv_key, cli_args=None):",
            "+    def perform_operation(",
            "+        self, indata: bytes, priv_key: rsa.key.AbstractKey, cli_args: Indexable = ()",
            "+    ) -> bytes:",
            "         \"\"\"Decrypts files.\"\"\"",
            "-",
            "+        assert isinstance(priv_key, rsa.key.PrivateKey)",
            "         return rsa.decrypt(indata, priv_key)",
            " ",
            " ",
            " class SignOperation(CryptoOperation):",
            "     \"\"\"Signs a file.\"\"\"",
            " ",
            "-    keyname = 'private'",
            "-    usage = 'usage: %%prog [options] private_key hash_method'",
            "-    description = ('Signs a file, outputs the signature. Choose the hash '",
            "-                   'method from %s' % ', '.join(HASH_METHODS))",
            "-    operation = 'sign'",
            "-    operation_past = 'signature'",
            "-    operation_progressive = 'Signing'",
            "+    keyname = \"private\"",
            "+    usage = \"usage: %%prog [options] private_key hash_method\"",
            "+    description = (",
            "+        \"Signs a file, outputs the signature. Choose the hash \"",
            "+        \"method from %s\" % \", \".join(HASH_METHODS)",
            "+    )",
            "+    operation = \"sign\"",
            "+    operation_past = \"signature\"",
            "+    operation_progressive = \"Signing\"",
            "     key_class = rsa.PrivateKey",
            "     expected_cli_args = 2",
            " ",
            "-    output_help = ('Name of the file to write the signature to. Written '",
            "-                   'to stdout if this option is not present.')",
            "-",
            "-    def perform_operation(self, indata, priv_key, cli_args):",
            "+    output_help = (",
            "+        \"Name of the file to write the signature to. Written \"",
            "+        \"to stdout if this option is not present.\"",
            "+    )",
            "+",
            "+    def perform_operation(",
            "+        self, indata: bytes, priv_key: rsa.key.AbstractKey, cli_args: Indexable",
            "+    ) -> bytes:",
            "         \"\"\"Signs files.\"\"\"",
            "+        assert isinstance(priv_key, rsa.key.PrivateKey)",
            " ",
            "         hash_method = cli_args[1]",
            "         if hash_method not in HASH_METHODS:",
            "-            raise SystemExit('Invalid hash method, choose one of %s' %",
            "-                             ', '.join(HASH_METHODS))",
            "+            raise SystemExit(\"Invalid hash method, choose one of %s\" % \", \".join(HASH_METHODS))",
            " ",
            "         return rsa.sign(indata, priv_key, hash_method)",
            " ",
            " ",
            " class VerifyOperation(CryptoOperation):",
            "     \"\"\"Verify a signature.\"\"\"",
            " ",
            "-    keyname = 'public'",
            "-    usage = 'usage: %%prog [options] public_key signature_file'",
            "-    description = ('Verifies a signature, exits with status 0 upon success, '",
            "-                   'prints an error message and exits with status 1 upon error.')",
            "-    operation = 'verify'",
            "-    operation_past = 'verified'",
            "-    operation_progressive = 'Verifying'",
            "+    keyname = \"public\"",
            "+    usage = \"usage: %%prog [options] public_key signature_file\"",
            "+    description = (",
            "+        \"Verifies a signature, exits with status 0 upon success, \"",
            "+        \"prints an error message and exits with status 1 upon error.\"",
            "+    )",
            "+    operation = \"verify\"",
            "+    operation_past = \"verified\"",
            "+    operation_progressive = \"Verifying\"",
            "     key_class = rsa.PublicKey",
            "     expected_cli_args = 2",
            "     has_output = False",
            " ",
            "-    def perform_operation(self, indata, pub_key, cli_args):",
            "+    def perform_operation(",
            "+        self, indata: bytes, pub_key: rsa.key.AbstractKey, cli_args: Indexable",
            "+    ) -> None:",
            "         \"\"\"Verifies files.\"\"\"",
            "+        assert isinstance(pub_key, rsa.key.PublicKey)",
            " ",
            "         signature_file = cli_args[1]",
            " ",
            "-        with open(signature_file, 'rb') as sigfile:",
            "+        with open(signature_file, \"rb\") as sigfile:",
            "             signature = sigfile.read()",
            " ",
            "         try:",
            "             rsa.verify(indata, signature, pub_key)",
            "-        except rsa.VerificationError:",
            "-            raise SystemExit('Verification failed.')",
            "+        except rsa.VerificationError as ex:",
            "+            raise SystemExit(\"Verification failed.\") from ex",
            " ",
            "-        print('Verification OK', file=sys.stderr)",
            "+        print(\"Verification OK\", file=sys.stderr)",
            " ",
            " ",
            " encrypt = EncryptOperation()",
            " decrypt = DecryptOperation()",
            " sign = SignOperation()",
            " verify = VerifyOperation()"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/common.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/common.py",
            "+++ /home/python-rsa-version-4.9/rsa/common.py",
            "@@ -1,38 +1,35 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            " #",
            " #  Unless required by applicable law or agreed to in writing, software",
            " #  distributed under the License is distributed on an \"AS IS\" BASIS,",
            " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
            " #  See the License for the specific language governing permissions and",
            " #  limitations under the License.",
            " ",
            "-from rsa._compat import zip",
            "-",
            " \"\"\"Common functionality shared by several modules.\"\"\"",
            " ",
            "+import typing",
            "+",
            " ",
            " class NotRelativePrimeError(ValueError):",
            "-    def __init__(self, a, b, d, msg=None):",
            "-        super(NotRelativePrimeError, self).__init__(",
            "-            msg or \"%d and %d are not relatively prime, divider=%i\" % (a, b, d))",
            "+    def __init__(self, a: int, b: int, d: int, msg: str = \"\") -> None:",
            "+        super().__init__(msg or \"%d and %d are not relatively prime, divider=%i\" % (a, b, d))",
            "         self.a = a",
            "         self.b = b",
            "         self.d = d",
            " ",
            " ",
            "-def bit_size(num):",
            "+def bit_size(num: int) -> int:",
            "     \"\"\"",
            "     Number of bits needed to represent a integer excluding any prefix",
            "     0 bits.",
            " ",
            "     Usage::",
            " ",
            "         >>> bit_size(1023)",
            "@@ -48,19 +45,19 @@",
            "         before the number's bit length is determined.",
            "     :returns:",
            "         Returns the number of bits in the integer.",
            "     \"\"\"",
            " ",
            "     try:",
            "         return num.bit_length()",
            "-    except AttributeError:",
            "-        raise TypeError('bit_size(num) only supports integers, not %r' % type(num))",
            "+    except AttributeError as ex:",
            "+        raise TypeError(\"bit_size(num) only supports integers, not %r\" % type(num)) from ex",
            " ",
            " ",
            "-def byte_size(number):",
            "+def byte_size(number: int) -> int:",
            "     \"\"\"",
            "     Returns the number of bytes required to hold a specific long number.",
            " ",
            "     The number of bytes is rounded up.",
            " ",
            "     Usage::",
            " ",
            "@@ -77,15 +74,15 @@",
            "         The number of bytes required to hold a specific long number.",
            "     \"\"\"",
            "     if number == 0:",
            "         return 1",
            "     return ceil_div(bit_size(number), 8)",
            " ",
            " ",
            "-def ceil_div(num, div):",
            "+def ceil_div(num: int, div: int) -> int:",
            "     \"\"\"",
            "     Returns the ceiling function of a division between `num` and `div`.",
            " ",
            "     Usage::",
            " ",
            "         >>> ceil_div(100, 7)",
            "         15",
            "@@ -101,17 +98,16 @@",
            "     \"\"\"",
            "     quanta, mod = divmod(num, div)",
            "     if mod:",
            "         quanta += 1",
            "     return quanta",
            " ",
            " ",
            "-def extended_gcd(a, b):",
            "-    \"\"\"Returns a tuple (r, i, j) such that r = gcd(a, b) = ia + jb",
            "-    \"\"\"",
            "+def extended_gcd(a: int, b: int) -> typing.Tuple[int, int, int]:",
            "+    \"\"\"Returns a tuple (r, i, j) such that r = gcd(a, b) = ia + jb\"\"\"",
            "     # r = gcd(a,b) i = multiplicitive inverse of a mod b",
            "     #      or      j = multiplicitive inverse of b mod a",
            "     # Neg return values for i or j are made positive mod b or a respectively",
            "     # Iterateive Version is faster and uses much less stack space",
            "     x = 0",
            "     y = 1",
            "     lx = 1",
            "@@ -120,21 +116,21 @@",
            "     ob = b  # negative values from return results",
            "     while b != 0:",
            "         q = a // b",
            "         (a, b) = (b, a % b)",
            "         (x, lx) = ((lx - (q * x)), x)",
            "         (y, ly) = ((ly - (q * y)), y)",
            "     if lx < 0:",
            "-        lx += ob  # If neg wrap modulo orignal b",
            "+        lx += ob  # If neg wrap modulo original b",
            "     if ly < 0:",
            "-        ly += oa  # If neg wrap modulo orignal a",
            "+        ly += oa  # If neg wrap modulo original a",
            "     return a, lx, ly  # Return only positive values",
            " ",
            " ",
            "-def inverse(x, n):",
            "+def inverse(x: int, n: int) -> int:",
            "     \"\"\"Returns the inverse of x % n under multiplication, a.k.a x^-1 (mod n)",
            " ",
            "     >>> inverse(7, 4)",
            "     3",
            "     >>> (inverse(143, 4) * 143) % 4",
            "     1",
            "     \"\"\"",
            "@@ -143,15 +139,15 @@",
            " ",
            "     if divider != 1:",
            "         raise NotRelativePrimeError(x, n, divider)",
            " ",
            "     return inv",
            " ",
            " ",
            "-def crt(a_values, modulo_values):",
            "+def crt(a_values: typing.Iterable[int], modulo_values: typing.Iterable[int]) -> int:",
            "     \"\"\"Chinese Remainder Theorem.",
            " ",
            "     Calculates x such that x = a[i] (mod m[i]) for each i.",
            " ",
            "     :param a_values: the a-values of the above equation",
            "     :param modulo_values: the m-values of the above equation",
            "     :returns: x such that x = a[i] (mod m[i]) for each i",
            "@@ -178,11 +174,11 @@",
            "         inv = inverse(M_i, m_i)",
            " ",
            "         x = (x + a_i * M_i * inv) % m",
            " ",
            "     return x",
            " ",
            " ",
            "-if __name__ == '__main__':",
            "+if __name__ == \"__main__\":",
            "     import doctest",
            " ",
            "     doctest.testmod()"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/core.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/core.py",
            "+++ /home/python-rsa-version-4.9/rsa/core.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -16,42 +14,40 @@",
            " ",
            " \"\"\"Core mathematical operations.",
            " ",
            " This is the actual core RSA implementation, which is only defined",
            " mathematically on integers.",
            " \"\"\"",
            " ",
            "-from rsa._compat import is_integer",
            "-",
            " ",
            "-def assert_int(var, name):",
            "-    if is_integer(var):",
            "+def assert_int(var: int, name: str) -> None:",
            "+    if isinstance(var, int):",
            "         return",
            " ",
            "-    raise TypeError('%s should be an integer, not %s' % (name, var.__class__))",
            "+    raise TypeError(\"%s should be an integer, not %s\" % (name, var.__class__))",
            " ",
            " ",
            "-def encrypt_int(message, ekey, n):",
            "+def encrypt_int(message: int, ekey: int, n: int) -> int:",
            "     \"\"\"Encrypts a message using encryption key 'ekey', working modulo n\"\"\"",
            " ",
            "-    assert_int(message, 'message')",
            "-    assert_int(ekey, 'ekey')",
            "-    assert_int(n, 'n')",
            "+    assert_int(message, \"message\")",
            "+    assert_int(ekey, \"ekey\")",
            "+    assert_int(n, \"n\")",
            " ",
            "     if message < 0:",
            "-        raise ValueError('Only non-negative numbers are supported')",
            "+        raise ValueError(\"Only non-negative numbers are supported\")",
            " ",
            "     if message > n:",
            "         raise OverflowError(\"The message %i is too long for n=%i\" % (message, n))",
            " ",
            "     return pow(message, ekey, n)",
            " ",
            " ",
            "-def decrypt_int(cyphertext, dkey, n):",
            "+def decrypt_int(cyphertext: int, dkey: int, n: int) -> int:",
            "     \"\"\"Decrypts a cypher text using the decryption key 'dkey', working modulo n\"\"\"",
            " ",
            "-    assert_int(cyphertext, 'cyphertext')",
            "-    assert_int(dkey, 'dkey')",
            "-    assert_int(n, 'n')",
            "+    assert_int(cyphertext, \"cyphertext\")",
            "+    assert_int(dkey, \"dkey\")",
            "+    assert_int(n, \"n\")",
            " ",
            "     message = pow(cyphertext, dkey, n)",
            "     return message"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/key.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/key.py",
            "+++ /home/python-rsa-version-4.9/rsa/key.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -29,157 +27,196 @@",
            "     However, it is insecure to load a key from an untrusted source.",
            "     The pickle module is not secure against erroneous or maliciously",
            "     constructed data. Never unpickle data received from an untrusted",
            "     or unauthenticated source.",
            " ",
            " \"\"\"",
            " ",
            "-import logging",
            "+import threading",
            "+import typing",
            " import warnings",
            " ",
            "-from rsa._compat import range",
            " import rsa.prime",
            " import rsa.pem",
            " import rsa.common",
            " import rsa.randnum",
            " import rsa.core",
            " ",
            " ",
            "-log = logging.getLogger(__name__)",
            " DEFAULT_EXPONENT = 65537",
            " ",
            " ",
            "-class AbstractKey(object):",
            "+T = typing.TypeVar(\"T\", bound=\"AbstractKey\")",
            "+",
            "+",
            "+class AbstractKey:",
            "     \"\"\"Abstract superclass for private and public keys.\"\"\"",
            " ",
            "-    __slots__ = ('n', 'e')",
            "+    __slots__ = (\"n\", \"e\", \"blindfac\", \"blindfac_inverse\", \"mutex\")",
            " ",
            "-    def __init__(self, n, e):",
            "+    def __init__(self, n: int, e: int) -> None:",
            "         self.n = n",
            "         self.e = e",
            " ",
            "+        # These will be computed properly on the first call to blind().",
            "+        self.blindfac = self.blindfac_inverse = -1",
            "+",
            "+        # Used to protect updates to the blinding factor in multi-threaded",
            "+        # environments.",
            "+        self.mutex = threading.Lock()",
            "+",
            "     @classmethod",
            "-    def _load_pkcs1_pem(cls, keyfile):",
            "+    def _load_pkcs1_pem(cls: typing.Type[T], keyfile: bytes) -> T:",
            "         \"\"\"Loads a key in PKCS#1 PEM format, implement in a subclass.",
            " ",
            "         :param keyfile: contents of a PEM-encoded file that contains",
            "             the public key.",
            "         :type keyfile: bytes",
            " ",
            "         :return: the loaded key",
            "         :rtype: AbstractKey",
            "         \"\"\"",
            " ",
            "     @classmethod",
            "-    def _load_pkcs1_der(cls, keyfile):",
            "+    def _load_pkcs1_der(cls: typing.Type[T], keyfile: bytes) -> T:",
            "         \"\"\"Loads a key in PKCS#1 PEM format, implement in a subclass.",
            " ",
            "         :param keyfile: contents of a DER-encoded file that contains",
            "             the public key.",
            "         :type keyfile: bytes",
            " ",
            "         :return: the loaded key",
            "         :rtype: AbstractKey",
            "         \"\"\"",
            " ",
            "-    def _save_pkcs1_pem(self):",
            "+    def _save_pkcs1_pem(self) -> bytes:",
            "         \"\"\"Saves the key in PKCS#1 PEM format, implement in a subclass.",
            " ",
            "         :returns: the PEM-encoded key.",
            "         :rtype: bytes",
            "         \"\"\"",
            " ",
            "-    def _save_pkcs1_der(self):",
            "+    def _save_pkcs1_der(self) -> bytes:",
            "         \"\"\"Saves the key in PKCS#1 DER format, implement in a subclass.",
            " ",
            "         :returns: the DER-encoded key.",
            "         :rtype: bytes",
            "         \"\"\"",
            " ",
            "     @classmethod",
            "-    def load_pkcs1(cls, keyfile, format='PEM'):",
            "+    def load_pkcs1(cls: typing.Type[T], keyfile: bytes, format: str = \"PEM\") -> T:",
            "         \"\"\"Loads a key in PKCS#1 DER or PEM format.",
            " ",
            "         :param keyfile: contents of a DER- or PEM-encoded file that contains",
            "             the key.",
            "         :type keyfile: bytes",
            "         :param format: the format of the file to load; 'PEM' or 'DER'",
            "         :type format: str",
            " ",
            "         :return: the loaded key",
            "         :rtype: AbstractKey",
            "         \"\"\"",
            " ",
            "         methods = {",
            "-            'PEM': cls._load_pkcs1_pem,",
            "-            'DER': cls._load_pkcs1_der,",
            "+            \"PEM\": cls._load_pkcs1_pem,",
            "+            \"DER\": cls._load_pkcs1_der,",
            "         }",
            " ",
            "         method = cls._assert_format_exists(format, methods)",
            "         return method(keyfile)",
            " ",
            "     @staticmethod",
            "-    def _assert_format_exists(file_format, methods):",
            "-        \"\"\"Checks whether the given file format exists in 'methods'.",
            "-        \"\"\"",
            "+    def _assert_format_exists(",
            "+        file_format: str, methods: typing.Mapping[str, typing.Callable]",
            "+    ) -> typing.Callable:",
            "+        \"\"\"Checks whether the given file format exists in 'methods'.\"\"\"",
            " ",
            "         try:",
            "             return methods[file_format]",
            "-        except KeyError:",
            "-            formats = ', '.join(sorted(methods.keys()))",
            "-            raise ValueError('Unsupported format: %r, try one of %s' % (file_format,",
            "-                                                                        formats))",
            "+        except KeyError as ex:",
            "+            formats = \", \".join(sorted(methods.keys()))",
            "+            raise ValueError(",
            "+                \"Unsupported format: %r, try one of %s\" % (file_format, formats)",
            "+            ) from ex",
            " ",
            "-    def save_pkcs1(self, format='PEM'):",
            "+    def save_pkcs1(self, format: str = \"PEM\") -> bytes:",
            "         \"\"\"Saves the key in PKCS#1 DER or PEM format.",
            " ",
            "         :param format: the format to save; 'PEM' or 'DER'",
            "         :type format: str",
            "         :returns: the DER- or PEM-encoded key.",
            "         :rtype: bytes",
            "         \"\"\"",
            " ",
            "         methods = {",
            "-            'PEM': self._save_pkcs1_pem,",
            "-            'DER': self._save_pkcs1_der,",
            "+            \"PEM\": self._save_pkcs1_pem,",
            "+            \"DER\": self._save_pkcs1_der,",
            "         }",
            " ",
            "         method = self._assert_format_exists(format, methods)",
            "         return method()",
            " ",
            "-    def blind(self, message, r):",
            "-        \"\"\"Performs blinding on the message using random number 'r'.",
            "+    def blind(self, message: int) -> typing.Tuple[int, int]:",
            "+        \"\"\"Performs blinding on the message.",
            " ",
            "         :param message: the message, as integer, to blind.",
            "-        :type message: int",
            "         :param r: the random number to blind with.",
            "-        :type r: int",
            "-        :return: the blinded message.",
            "-        :rtype: int",
            "+        :return: tuple (the blinded message, the inverse of the used blinding factor)",
            " ",
            "         The blinding is such that message = unblind(decrypt(blind(encrypt(message))).",
            " ",
            "         See https://en.wikipedia.org/wiki/Blinding_%28cryptography%29",
            "         \"\"\"",
            "+        blindfac, blindfac_inverse = self._update_blinding_factor()",
            "+        blinded = (message * pow(blindfac, self.e, self.n)) % self.n",
            "+        return blinded, blindfac_inverse",
            " ",
            "-        return (message * pow(r, self.e, self.n)) % self.n",
            "-",
            "-    def unblind(self, blinded, r):",
            "-        \"\"\"Performs blinding on the message using random number 'r'.",
            "+    def unblind(self, blinded: int, blindfac_inverse: int) -> int:",
            "+        \"\"\"Performs blinding on the message using random number 'blindfac_inverse'.",
            " ",
            "         :param blinded: the blinded message, as integer, to unblind.",
            "-        :param r: the random number to unblind with.",
            "+        :param blindfac: the factor to unblind with.",
            "         :return: the original message.",
            " ",
            "         The blinding is such that message = unblind(decrypt(blind(encrypt(message))).",
            " ",
            "         See https://en.wikipedia.org/wiki/Blinding_%28cryptography%29",
            "         \"\"\"",
            "+        return (blindfac_inverse * blinded) % self.n",
            "+",
            "+    def _initial_blinding_factor(self) -> int:",
            "+        for _ in range(1000):",
            "+            blind_r = rsa.randnum.randint(self.n - 1)",
            "+            if rsa.prime.are_relatively_prime(self.n, blind_r):",
            "+                return blind_r",
            "+        raise RuntimeError(\"unable to find blinding factor\")",
            " ",
            "-        return (rsa.common.inverse(r, self.n) * blinded) % self.n",
            "+    def _update_blinding_factor(self) -> typing.Tuple[int, int]:",
            "+        \"\"\"Update blinding factors.",
            "+",
            "+        Computing a blinding factor is expensive, so instead this function",
            "+        does this once, then updates the blinding factor as per section 9",
            "+        of 'A Timing Attack against RSA with the Chinese Remainder Theorem'",
            "+        by Werner Schindler.",
            "+        See https://tls.mbed.org/public/WSchindler-RSA_Timing_Attack.pdf",
            "+",
            "+        :return: the new blinding factor and its inverse.",
            "+        \"\"\"",
            "+",
            "+        with self.mutex:",
            "+            if self.blindfac < 0:",
            "+                # Compute initial blinding factor, which is rather slow to do.",
            "+                self.blindfac = self._initial_blinding_factor()",
            "+                self.blindfac_inverse = rsa.common.inverse(self.blindfac, self.n)",
            "+            else:",
            "+                # Reuse previous blinding factor.",
            "+                self.blindfac = pow(self.blindfac, 2, self.n)",
            "+                self.blindfac_inverse = pow(self.blindfac_inverse, 2, self.n)",
            "+",
            "+            return self.blindfac, self.blindfac_inverse",
            " ",
            " ",
            " class PublicKey(AbstractKey):",
            "     \"\"\"Represents a public RSA key.",
            " ",
            "     This key is also known as the 'encryption key'. It contains the 'n' and 'e'",
            "     values.",
            "@@ -198,47 +235,48 @@",
            "     >>> key.e",
            "     3",
            "     >>> key['e']",
            "     3",
            " ",
            "     \"\"\"",
            " ",
            "-    __slots__ = ('n', 'e')",
            "+    __slots__ = ()",
            " ",
            "-    def __getitem__(self, key):",
            "+    def __getitem__(self, key: str) -> int:",
            "         return getattr(self, key)",
            " ",
            "-    def __repr__(self):",
            "-        return 'PublicKey(%i, %i)' % (self.n, self.e)",
            "+    def __repr__(self) -> str:",
            "+        return \"PublicKey(%i, %i)\" % (self.n, self.e)",
            " ",
            "-    def __getstate__(self):",
            "+    def __getstate__(self) -> typing.Tuple[int, int]:",
            "         \"\"\"Returns the key as tuple for pickling.\"\"\"",
            "         return self.n, self.e",
            " ",
            "-    def __setstate__(self, state):",
            "+    def __setstate__(self, state: typing.Tuple[int, int]) -> None:",
            "         \"\"\"Sets the key from tuple.\"\"\"",
            "         self.n, self.e = state",
            "+        AbstractKey.__init__(self, self.n, self.e)",
            " ",
            "-    def __eq__(self, other):",
            "+    def __eq__(self, other: typing.Any) -> bool:",
            "         if other is None:",
            "             return False",
            " ",
            "         if not isinstance(other, PublicKey):",
            "             return False",
            " ",
            "         return self.n == other.n and self.e == other.e",
            " ",
            "-    def __ne__(self, other):",
            "+    def __ne__(self, other: typing.Any) -> bool:",
            "         return not (self == other)",
            " ",
            "-    def __hash__(self):",
            "+    def __hash__(self) -> int:",
            "         return hash((self.n, self.e))",
            " ",
            "     @classmethod",
            "-    def _load_pkcs1_der(cls, keyfile):",
            "+    def _load_pkcs1_der(cls, keyfile: bytes) -> \"PublicKey\":",
            "         \"\"\"Loads a key in PKCS#1 DER format.",
            " ",
            "         :param keyfile: contents of a DER-encoded file that contains the public",
            "             key.",
            "         :return: a PublicKey object",
            " ",
            "         First let's construct a DER encoded key:",
            "@@ -254,98 +292,96 @@",
            " ",
            "         \"\"\"",
            " ",
            "         from pyasn1.codec.der import decoder",
            "         from rsa.asn1 import AsnPubKey",
            " ",
            "         (priv, _) = decoder.decode(keyfile, asn1Spec=AsnPubKey())",
            "-        return cls(n=int(priv['modulus']), e=int(priv['publicExponent']))",
            "+        return cls(n=int(priv[\"modulus\"]), e=int(priv[\"publicExponent\"]))",
            " ",
            "-    def _save_pkcs1_der(self):",
            "+    def _save_pkcs1_der(self) -> bytes:",
            "         \"\"\"Saves the public key in PKCS#1 DER format.",
            " ",
            "         :returns: the DER-encoded public key.",
            "         :rtype: bytes",
            "         \"\"\"",
            " ",
            "         from pyasn1.codec.der import encoder",
            "         from rsa.asn1 import AsnPubKey",
            " ",
            "         # Create the ASN object",
            "         asn_key = AsnPubKey()",
            "-        asn_key.setComponentByName('modulus', self.n)",
            "-        asn_key.setComponentByName('publicExponent', self.e)",
            "+        asn_key.setComponentByName(\"modulus\", self.n)",
            "+        asn_key.setComponentByName(\"publicExponent\", self.e)",
            " ",
            "         return encoder.encode(asn_key)",
            " ",
            "     @classmethod",
            "-    def _load_pkcs1_pem(cls, keyfile):",
            "+    def _load_pkcs1_pem(cls, keyfile: bytes) -> \"PublicKey\":",
            "         \"\"\"Loads a PKCS#1 PEM-encoded public key file.",
            " ",
            "         The contents of the file before the \"-----BEGIN RSA PUBLIC KEY-----\" and",
            "         after the \"-----END RSA PUBLIC KEY-----\" lines is ignored.",
            " ",
            "         :param keyfile: contents of a PEM-encoded file that contains the public",
            "             key.",
            "         :return: a PublicKey object",
            "         \"\"\"",
            " ",
            "-        der = rsa.pem.load_pem(keyfile, 'RSA PUBLIC KEY')",
            "+        der = rsa.pem.load_pem(keyfile, \"RSA PUBLIC KEY\")",
            "         return cls._load_pkcs1_der(der)",
            " ",
            "-    def _save_pkcs1_pem(self):",
            "+    def _save_pkcs1_pem(self) -> bytes:",
            "         \"\"\"Saves a PKCS#1 PEM-encoded public key file.",
            " ",
            "         :return: contents of a PEM-encoded file that contains the public key.",
            "         :rtype: bytes",
            "         \"\"\"",
            " ",
            "         der = self._save_pkcs1_der()",
            "-        return rsa.pem.save_pem(der, 'RSA PUBLIC KEY')",
            "+        return rsa.pem.save_pem(der, \"RSA PUBLIC KEY\")",
            " ",
            "     @classmethod",
            "-    def load_pkcs1_openssl_pem(cls, keyfile):",
            "+    def load_pkcs1_openssl_pem(cls, keyfile: bytes) -> \"PublicKey\":",
            "         \"\"\"Loads a PKCS#1.5 PEM-encoded public key file from OpenSSL.",
            " ",
            "         These files can be recognised in that they start with BEGIN PUBLIC KEY",
            "         rather than BEGIN RSA PUBLIC KEY.",
            " ",
            "         The contents of the file before the \"-----BEGIN PUBLIC KEY-----\" and",
            "         after the \"-----END PUBLIC KEY-----\" lines is ignored.",
            " ",
            "         :param keyfile: contents of a PEM-encoded file that contains the public",
            "             key, from OpenSSL.",
            "         :type keyfile: bytes",
            "         :return: a PublicKey object",
            "         \"\"\"",
            " ",
            "-        der = rsa.pem.load_pem(keyfile, 'PUBLIC KEY')",
            "+        der = rsa.pem.load_pem(keyfile, \"PUBLIC KEY\")",
            "         return cls.load_pkcs1_openssl_der(der)",
            " ",
            "     @classmethod",
            "-    def load_pkcs1_openssl_der(cls, keyfile):",
            "+    def load_pkcs1_openssl_der(cls, keyfile: bytes) -> \"PublicKey\":",
            "         \"\"\"Loads a PKCS#1 DER-encoded public key file from OpenSSL.",
            " ",
            "         :param keyfile: contents of a DER-encoded file that contains the public",
            "             key, from OpenSSL.",
            "         :return: a PublicKey object",
            "-        :rtype: bytes",
            "-",
            "         \"\"\"",
            " ",
            "         from rsa.asn1 import OpenSSLPubKey",
            "         from pyasn1.codec.der import decoder",
            "         from pyasn1.type import univ",
            " ",
            "         (keyinfo, _) = decoder.decode(keyfile, asn1Spec=OpenSSLPubKey())",
            " ",
            "-        if keyinfo['header']['oid'] != univ.ObjectIdentifier('1.2.840.113549.1.1.1'):",
            "+        if keyinfo[\"header\"][\"oid\"] != univ.ObjectIdentifier(\"1.2.840.113549.1.1.1\"):",
            "             raise TypeError(\"This is not a DER-encoded OpenSSL-compatible public key\")",
            " ",
            "-        return cls._load_pkcs1_der(keyinfo['key'][1:])",
            "+        return cls._load_pkcs1_der(keyinfo[\"key\"][1:])",
            " ",
            " ",
            " class PrivateKey(AbstractKey):",
            "     \"\"\"Represents a private RSA key.",
            " ",
            "     This key is also known as the 'decryption key'. It contains the 'n', 'e',",
            "     'd', 'p', 'q' and other values.",
            "@@ -364,103 +400,112 @@",
            "     >>> pk.exp2",
            "     10095",
            "     >>> pk.coef",
            "     50797",
            " ",
            "     \"\"\"",
            " ",
            "-    __slots__ = ('n', 'e', 'd', 'p', 'q', 'exp1', 'exp2', 'coef')",
            "+    __slots__ = (\"d\", \"p\", \"q\", \"exp1\", \"exp2\", \"coef\")",
            " ",
            "-    def __init__(self, n, e, d, p, q):",
            "+    def __init__(self, n: int, e: int, d: int, p: int, q: int) -> None:",
            "         AbstractKey.__init__(self, n, e)",
            "         self.d = d",
            "         self.p = p",
            "         self.q = q",
            " ",
            "         # Calculate exponents and coefficient.",
            "         self.exp1 = int(d % (p - 1))",
            "         self.exp2 = int(d % (q - 1))",
            "         self.coef = rsa.common.inverse(q, p)",
            " ",
            "-    def __getitem__(self, key):",
            "+    def __getitem__(self, key: str) -> int:",
            "         return getattr(self, key)",
            " ",
            "-    def __repr__(self):",
            "-        return 'PrivateKey(%(n)i, %(e)i, %(d)i, %(p)i, %(q)i)' % self",
            "+    def __repr__(self) -> str:",
            "+        return \"PrivateKey(%i, %i, %i, %i, %i)\" % (",
            "+            self.n,",
            "+            self.e,",
            "+            self.d,",
            "+            self.p,",
            "+            self.q,",
            "+        )",
            " ",
            "-    def __getstate__(self):",
            "+    def __getstate__(self) -> typing.Tuple[int, int, int, int, int, int, int, int]:",
            "         \"\"\"Returns the key as tuple for pickling.\"\"\"",
            "         return self.n, self.e, self.d, self.p, self.q, self.exp1, self.exp2, self.coef",
            " ",
            "-    def __setstate__(self, state):",
            "+    def __setstate__(self, state: typing.Tuple[int, int, int, int, int, int, int, int]) -> None:",
            "         \"\"\"Sets the key from tuple.\"\"\"",
            "         self.n, self.e, self.d, self.p, self.q, self.exp1, self.exp2, self.coef = state",
            "+        AbstractKey.__init__(self, self.n, self.e)",
            " ",
            "-    def __eq__(self, other):",
            "+    def __eq__(self, other: typing.Any) -> bool:",
            "         if other is None:",
            "             return False",
            " ",
            "         if not isinstance(other, PrivateKey):",
            "             return False",
            " ",
            "-        return (self.n == other.n and",
            "-                self.e == other.e and",
            "-                self.d == other.d and",
            "-                self.p == other.p and",
            "-                self.q == other.q and",
            "-                self.exp1 == other.exp1 and",
            "-                self.exp2 == other.exp2 and",
            "-                self.coef == other.coef)",
            "+        return (",
            "+            self.n == other.n",
            "+            and self.e == other.e",
            "+            and self.d == other.d",
            "+            and self.p == other.p",
            "+            and self.q == other.q",
            "+            and self.exp1 == other.exp1",
            "+            and self.exp2 == other.exp2",
            "+            and self.coef == other.coef",
            "+        )",
            " ",
            "-    def __ne__(self, other):",
            "+    def __ne__(self, other: typing.Any) -> bool:",
            "         return not (self == other)",
            " ",
            "-    def __hash__(self):",
            "+    def __hash__(self) -> int:",
            "         return hash((self.n, self.e, self.d, self.p, self.q, self.exp1, self.exp2, self.coef))",
            " ",
            "-    def _get_blinding_factor(self):",
            "-        for _ in range(1000):",
            "-            blind_r = rsa.randnum.randint(self.n - 1)",
            "-            if rsa.prime.are_relatively_prime(self.n, blind_r):",
            "-                return blind_r",
            "-        raise RuntimeError('unable to find blinding factor')",
            "-",
            "-    def blinded_decrypt(self, encrypted):",
            "+    def blinded_decrypt(self, encrypted: int) -> int:",
            "         \"\"\"Decrypts the message using blinding to prevent side-channel attacks.",
            " ",
            "         :param encrypted: the encrypted message",
            "         :type encrypted: int",
            " ",
            "         :returns: the decrypted message",
            "         :rtype: int",
            "         \"\"\"",
            " ",
            "-        blind_r = self._get_blinding_factor()",
            "-        blinded = self.blind(encrypted, blind_r)  # blind before decrypting",
            "-        decrypted = rsa.core.decrypt_int(blinded, self.d, self.n)",
            "+        # Blinding and un-blinding should be using the same factor",
            "+        blinded, blindfac_inverse = self.blind(encrypted)",
            "+",
            "+        # Instead of using the core functionality, use the Chinese Remainder",
            "+        # Theorem and be 2-4x faster. This the same as:",
            "+        #",
            "+        # decrypted = rsa.core.decrypt_int(blinded, self.d, self.n)",
            "+        s1 = pow(blinded, self.exp1, self.p)",
            "+        s2 = pow(blinded, self.exp2, self.q)",
            "+        h = ((s1 - s2) * self.coef) % self.p",
            "+        decrypted = s2 + self.q * h",
            " ",
            "-        return self.unblind(decrypted, blind_r)",
            "+        return self.unblind(decrypted, blindfac_inverse)",
            " ",
            "-    def blinded_encrypt(self, message):",
            "+    def blinded_encrypt(self, message: int) -> int:",
            "         \"\"\"Encrypts the message using blinding to prevent side-channel attacks.",
            " ",
            "         :param message: the message to encrypt",
            "         :type message: int",
            " ",
            "         :returns: the encrypted message",
            "         :rtype: int",
            "         \"\"\"",
            " ",
            "-        blind_r = self._get_blinding_factor()",
            "-        blinded = self.blind(message, blind_r)  # blind before encrypting",
            "+        blinded, blindfac_inverse = self.blind(message)",
            "         encrypted = rsa.core.encrypt_int(blinded, self.d, self.n)",
            "-        return self.unblind(encrypted, blind_r)",
            "+        return self.unblind(encrypted, blindfac_inverse)",
            " ",
            "     @classmethod",
            "-    def _load_pkcs1_der(cls, keyfile):",
            "+    def _load_pkcs1_der(cls, keyfile: bytes) -> \"PrivateKey\":",
            "         \"\"\"Loads a key in PKCS#1 DER format.",
            " ",
            "         :param keyfile: contents of a DER-encoded file that contains the private",
            "             key.",
            "         :type keyfile: bytes",
            "         :return: a PrivateKey object",
            " ",
            "@@ -474,14 +519,15 @@",
            " ",
            "         >>> PrivateKey._load_pkcs1_der(der)",
            "         PrivateKey(3727264081, 65537, 3349121513, 65063, 57287)",
            " ",
            "         \"\"\"",
            " ",
            "         from pyasn1.codec.der import decoder",
            "+",
            "         (priv, _) = decoder.decode(keyfile)",
            " ",
            "         # ASN.1 contents of DER encoded private key:",
            "         #",
            "         # RSAPrivateKey ::= SEQUENCE {",
            "         #     version           Version,",
            "         #     modulus           INTEGER,  -- n",
            "@@ -492,99 +538,103 @@",
            "         #     exponent1         INTEGER,  -- d mod (p-1)",
            "         #     exponent2         INTEGER,  -- d mod (q-1)",
            "         #     coefficient       INTEGER,  -- (inverse of q) mod p",
            "         #     otherPrimeInfos   OtherPrimeInfos OPTIONAL",
            "         # }",
            " ",
            "         if priv[0] != 0:",
            "-            raise ValueError('Unable to read this file, version %s != 0' % priv[0])",
            "+            raise ValueError(\"Unable to read this file, version %s != 0\" % priv[0])",
            " ",
            "         as_ints = map(int, priv[1:6])",
            "         key = cls(*as_ints)",
            " ",
            "         exp1, exp2, coef = map(int, priv[6:9])",
            " ",
            "         if (key.exp1, key.exp2, key.coef) != (exp1, exp2, coef):",
            "             warnings.warn(",
            "-                'You have provided a malformed keyfile. Either the exponents '",
            "-                'or the coefficient are incorrect. Using the correct values '",
            "-                'instead.',",
            "+                \"You have provided a malformed keyfile. Either the exponents \"",
            "+                \"or the coefficient are incorrect. Using the correct values \"",
            "+                \"instead.\",",
            "                 UserWarning,",
            "             )",
            " ",
            "         return key",
            " ",
            "-    def _save_pkcs1_der(self):",
            "+    def _save_pkcs1_der(self) -> bytes:",
            "         \"\"\"Saves the private key in PKCS#1 DER format.",
            " ",
            "         :returns: the DER-encoded private key.",
            "         :rtype: bytes",
            "         \"\"\"",
            " ",
            "         from pyasn1.type import univ, namedtype",
            "         from pyasn1.codec.der import encoder",
            " ",
            "         class AsnPrivKey(univ.Sequence):",
            "             componentType = namedtype.NamedTypes(",
            "-                namedtype.NamedType('version', univ.Integer()),",
            "-                namedtype.NamedType('modulus', univ.Integer()),",
            "-                namedtype.NamedType('publicExponent', univ.Integer()),",
            "-                namedtype.NamedType('privateExponent', univ.Integer()),",
            "-                namedtype.NamedType('prime1', univ.Integer()),",
            "-                namedtype.NamedType('prime2', univ.Integer()),",
            "-                namedtype.NamedType('exponent1', univ.Integer()),",
            "-                namedtype.NamedType('exponent2', univ.Integer()),",
            "-                namedtype.NamedType('coefficient', univ.Integer()),",
            "+                namedtype.NamedType(\"version\", univ.Integer()),",
            "+                namedtype.NamedType(\"modulus\", univ.Integer()),",
            "+                namedtype.NamedType(\"publicExponent\", univ.Integer()),",
            "+                namedtype.NamedType(\"privateExponent\", univ.Integer()),",
            "+                namedtype.NamedType(\"prime1\", univ.Integer()),",
            "+                namedtype.NamedType(\"prime2\", univ.Integer()),",
            "+                namedtype.NamedType(\"exponent1\", univ.Integer()),",
            "+                namedtype.NamedType(\"exponent2\", univ.Integer()),",
            "+                namedtype.NamedType(\"coefficient\", univ.Integer()),",
            "             )",
            " ",
            "         # Create the ASN object",
            "         asn_key = AsnPrivKey()",
            "-        asn_key.setComponentByName('version', 0)",
            "-        asn_key.setComponentByName('modulus', self.n)",
            "-        asn_key.setComponentByName('publicExponent', self.e)",
            "-        asn_key.setComponentByName('privateExponent', self.d)",
            "-        asn_key.setComponentByName('prime1', self.p)",
            "-        asn_key.setComponentByName('prime2', self.q)",
            "-        asn_key.setComponentByName('exponent1', self.exp1)",
            "-        asn_key.setComponentByName('exponent2', self.exp2)",
            "-        asn_key.setComponentByName('coefficient', self.coef)",
            "+        asn_key.setComponentByName(\"version\", 0)",
            "+        asn_key.setComponentByName(\"modulus\", self.n)",
            "+        asn_key.setComponentByName(\"publicExponent\", self.e)",
            "+        asn_key.setComponentByName(\"privateExponent\", self.d)",
            "+        asn_key.setComponentByName(\"prime1\", self.p)",
            "+        asn_key.setComponentByName(\"prime2\", self.q)",
            "+        asn_key.setComponentByName(\"exponent1\", self.exp1)",
            "+        asn_key.setComponentByName(\"exponent2\", self.exp2)",
            "+        asn_key.setComponentByName(\"coefficient\", self.coef)",
            " ",
            "         return encoder.encode(asn_key)",
            " ",
            "     @classmethod",
            "-    def _load_pkcs1_pem(cls, keyfile):",
            "+    def _load_pkcs1_pem(cls, keyfile: bytes) -> \"PrivateKey\":",
            "         \"\"\"Loads a PKCS#1 PEM-encoded private key file.",
            " ",
            "         The contents of the file before the \"-----BEGIN RSA PRIVATE KEY-----\" and",
            "         after the \"-----END RSA PRIVATE KEY-----\" lines is ignored.",
            " ",
            "         :param keyfile: contents of a PEM-encoded file that contains the private",
            "             key.",
            "         :type keyfile: bytes",
            "         :return: a PrivateKey object",
            "         \"\"\"",
            " ",
            "-        der = rsa.pem.load_pem(keyfile, b'RSA PRIVATE KEY')",
            "+        der = rsa.pem.load_pem(keyfile, b\"RSA PRIVATE KEY\")",
            "         return cls._load_pkcs1_der(der)",
            " ",
            "-    def _save_pkcs1_pem(self):",
            "+    def _save_pkcs1_pem(self) -> bytes:",
            "         \"\"\"Saves a PKCS#1 PEM-encoded private key file.",
            " ",
            "         :return: contents of a PEM-encoded file that contains the private key.",
            "         :rtype: bytes",
            "         \"\"\"",
            " ",
            "         der = self._save_pkcs1_der()",
            "-        return rsa.pem.save_pem(der, b'RSA PRIVATE KEY')",
            "+        return rsa.pem.save_pem(der, b\"RSA PRIVATE KEY\")",
            " ",
            " ",
            "-def find_p_q(nbits, getprime_func=rsa.prime.getprime, accurate=True):",
            "+def find_p_q(",
            "+    nbits: int,",
            "+    getprime_func: typing.Callable[[int], int] = rsa.prime.getprime,",
            "+    accurate: bool = True,",
            "+) -> typing.Tuple[int, int]:",
            "     \"\"\"Returns a tuple of two different primes of nbits bits each.",
            " ",
            "-    The resulting p * q has exacty 2 * nbits bits, and the returned p and q",
            "+    The resulting p * q has exactly 2 * nbits bits, and the returned p and q",
            "     will not be equal.",
            " ",
            "     :param nbits: the number of bits in each of p and q.",
            "     :param getprime_func: the getprime function, defaults to",
            "         :py:func:`rsa.prime.getprime`.",
            " ",
            "         *Introduced in Python-RSA 3.1*",
            "@@ -613,24 +663,22 @@",
            "     # Make sure that p and q aren't too close or the factoring programs can",
            "     # factor n.",
            "     shift = nbits // 16",
            "     pbits = nbits + shift",
            "     qbits = nbits - shift",
            " ",
            "     # Choose the two initial primes",
            "-    log.debug('find_p_q(%i): Finding p', nbits)",
            "     p = getprime_func(pbits)",
            "-    log.debug('find_p_q(%i): Finding q', nbits)",
            "     q = getprime_func(qbits)",
            " ",
            "-    def is_acceptable(p, q):",
            "+    def is_acceptable(p: int, q: int) -> bool:",
            "         \"\"\"Returns True iff p and q are acceptable:",
            " ",
            "-            - p and q differ",
            "-            - (p * q) has the right nr of bits (when accurate=True)",
            "+        - p and q differ",
            "+        - (p * q) has the right nr of bits (when accurate=True)",
            "         \"\"\"",
            " ",
            "         if p == q:",
            "             return False",
            " ",
            "         if not accurate:",
            "             return True",
            "@@ -651,15 +699,15 @@",
            "         change_p = not change_p",
            " ",
            "     # We want p > q as described on",
            "     # http://www.di-mgt.com.au/rsa_alg.html#crt",
            "     return max(p, q), min(p, q)",
            " ",
            " ",
            "-def calculate_keys_custom_exponent(p, q, exponent):",
            "+def calculate_keys_custom_exponent(p: int, q: int, exponent: int) -> typing.Tuple[int, int]:",
            "     \"\"\"Calculates an encryption and a decryption key given p, q and an exponent,",
            "     and returns them as a tuple (e, d)",
            " ",
            "     :param p: the first large prime",
            "     :param q: the second large prime",
            "     :param exponent: the exponent for the key; only change this if you know",
            "         what you're doing, as the exponent influences how difficult your",
            "@@ -670,39 +718,48 @@",
            " ",
            "     phi_n = (p - 1) * (q - 1)",
            " ",
            "     try:",
            "         d = rsa.common.inverse(exponent, phi_n)",
            "     except rsa.common.NotRelativePrimeError as ex:",
            "         raise rsa.common.NotRelativePrimeError(",
            "-            exponent, phi_n, ex.d,",
            "-            msg=\"e (%d) and phi_n (%d) are not relatively prime (divider=%i)\" %",
            "-                (exponent, phi_n, ex.d))",
            "+            exponent,",
            "+            phi_n,",
            "+            ex.d,",
            "+            msg=\"e (%d) and phi_n (%d) are not relatively prime (divider=%i)\"",
            "+            % (exponent, phi_n, ex.d),",
            "+        ) from ex",
            " ",
            "     if (exponent * d) % phi_n != 1:",
            "-        raise ValueError(\"e (%d) and d (%d) are not mult. inv. modulo \"",
            "-                         \"phi_n (%d)\" % (exponent, d, phi_n))",
            "+        raise ValueError(",
            "+            \"e (%d) and d (%d) are not mult. inv. modulo \" \"phi_n (%d)\" % (exponent, d, phi_n)",
            "+        )",
            " ",
            "     return exponent, d",
            " ",
            " ",
            "-def calculate_keys(p, q):",
            "+def calculate_keys(p: int, q: int) -> typing.Tuple[int, int]:",
            "     \"\"\"Calculates an encryption and a decryption key given p and q, and",
            "     returns them as a tuple (e, d)",
            " ",
            "     :param p: the first large prime",
            "     :param q: the second large prime",
            " ",
            "     :return: tuple (e, d) with the encryption and decryption exponents.",
            "     \"\"\"",
            " ",
            "     return calculate_keys_custom_exponent(p, q, DEFAULT_EXPONENT)",
            " ",
            " ",
            "-def gen_keys(nbits, getprime_func, accurate=True, exponent=DEFAULT_EXPONENT):",
            "+def gen_keys(",
            "+    nbits: int,",
            "+    getprime_func: typing.Callable[[int], int],",
            "+    accurate: bool = True,",
            "+    exponent: int = DEFAULT_EXPONENT,",
            "+) -> typing.Tuple[int, int, int, int]:",
            "     \"\"\"Generate RSA keys of nbits bits. Returns (p, q, e, d).",
            " ",
            "     Note: this can take a long time, depending on the key size.",
            " ",
            "     :param nbits: the total number of bits in ``p`` and ``q``. Both ``p`` and",
            "         ``q`` will use ``nbits/2`` bits.",
            "     :param getprime_func: either :py:func:`rsa.prime.getprime` or a function",
            "@@ -722,15 +779,20 @@",
            "             break",
            "         except ValueError:",
            "             pass",
            " ",
            "     return p, q, e, d",
            " ",
            " ",
            "-def newkeys(nbits, accurate=True, poolsize=1, exponent=DEFAULT_EXPONENT):",
            "+def newkeys(",
            "+    nbits: int,",
            "+    accurate: bool = True,",
            "+    poolsize: int = 1,",
            "+    exponent: int = DEFAULT_EXPONENT,",
            "+) -> typing.Tuple[PublicKey, PrivateKey]:",
            "     \"\"\"Generates public and private keys, and returns them as (pub, priv).",
            " ",
            "     The public key is also known as the 'encryption key', and is a",
            "     :py:class:`rsa.PublicKey` object. The private key is also known as the",
            "     'decryption key' and is a :py:class:`rsa.PrivateKey` object.",
            " ",
            "     :param nbits: the number of bits required to store ``n = p*q``.",
            "@@ -749,50 +811,48 @@",
            " ",
            "     The ``poolsize`` parameter was added in *Python-RSA 3.1* and requires",
            "     Python 2.6 or newer.",
            " ",
            "     \"\"\"",
            " ",
            "     if nbits < 16:",
            "-        raise ValueError('Key too small')",
            "+        raise ValueError(\"Key too small\")",
            " ",
            "     if poolsize < 1:",
            "-        raise ValueError('Pool size (%i) should be >= 1' % poolsize)",
            "+        raise ValueError(\"Pool size (%i) should be >= 1\" % poolsize)",
            " ",
            "     # Determine which getprime function to use",
            "     if poolsize > 1:",
            "         from rsa import parallel",
            "-        import functools",
            " ",
            "-        getprime_func = functools.partial(parallel.getprime, poolsize=poolsize)",
            "+        def getprime_func(nbits: int) -> int:",
            "+            return parallel.getprime(nbits, poolsize=poolsize)",
            "+",
            "     else:",
            "         getprime_func = rsa.prime.getprime",
            " ",
            "     # Generate the key components",
            "     (p, q, e, d) = gen_keys(nbits, getprime_func, accurate=accurate, exponent=exponent)",
            " ",
            "     # Create the key objects",
            "     n = p * q",
            " ",
            "-    return (",
            "-        PublicKey(n, e),",
            "-        PrivateKey(n, e, d, p, q)",
            "-    )",
            "+    return (PublicKey(n, e), PrivateKey(n, e, d, p, q))",
            " ",
            " ",
            "-__all__ = ['PublicKey', 'PrivateKey', 'newkeys']",
            "+__all__ = [\"PublicKey\", \"PrivateKey\", \"newkeys\"]",
            " ",
            "-if __name__ == '__main__':",
            "+if __name__ == \"__main__\":",
            "     import doctest",
            " ",
            "     try:",
            "         for count in range(100):",
            "             (failures, tests) = doctest.testmod()",
            "             if failures:",
            "                 break",
            " ",
            "             if (count % 10 == 0 and count) or count == 1:",
            "-                print('%i times' % count)",
            "+                print(\"%i times\" % count)",
            "     except KeyboardInterrupt:",
            "-        print('Aborted')",
            "+        print(\"Aborted\")",
            "     else:",
            "-        print('Doctests done')",
            "+        print(\"Doctests done\")"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/parallel.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/parallel.py",
            "+++ /home/python-rsa-version-4.9/rsa/parallel.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -20,34 +18,32 @@",
            " ",
            " .. note::",
            " ",
            "     Requires Python 2.6 or newer.",
            " ",
            " \"\"\"",
            " ",
            "-from __future__ import print_function",
            "-",
            " import multiprocessing as mp",
            "+from multiprocessing.connection import Connection",
            " ",
            "-from rsa._compat import range",
            " import rsa.prime",
            " import rsa.randnum",
            " ",
            " ",
            "-def _find_prime(nbits, pipe):",
            "+def _find_prime(nbits: int, pipe: Connection) -> None:",
            "     while True:",
            "         integer = rsa.randnum.read_random_odd_int(nbits)",
            " ",
            "         # Test for primeness",
            "         if rsa.prime.is_prime(integer):",
            "             pipe.send(integer)",
            "             return",
            " ",
            " ",
            "-def getprime(nbits, poolsize):",
            "+def getprime(nbits: int, poolsize: int) -> int:",
            "     \"\"\"Returns a prime number that can be stored in 'nbits' bits.",
            " ",
            "     Works in multiple threads at the same time.",
            " ",
            "     >>> p = getprime(128, 3)",
            "     >>> rsa.prime.is_prime(p-1)",
            "     False",
            "@@ -62,16 +58,15 @@",
            " ",
            "     \"\"\"",
            " ",
            "     (pipe_recv, pipe_send) = mp.Pipe(duplex=False)",
            " ",
            "     # Create processes",
            "     try:",
            "-        procs = [mp.Process(target=_find_prime, args=(nbits, pipe_send))",
            "-                 for _ in range(poolsize)]",
            "+        procs = [mp.Process(target=_find_prime, args=(nbits, pipe_send)) for _ in range(poolsize)]",
            "         # Start processes",
            "         for p in procs:",
            "             p.start()",
            " ",
            "         result = pipe_recv.recv()",
            "     finally:",
            "         pipe_recv.close()",
            "@@ -80,22 +75,22 @@",
            "     # Terminate processes",
            "     for p in procs:",
            "         p.terminate()",
            " ",
            "     return result",
            " ",
            " ",
            "-__all__ = ['getprime']",
            "+__all__ = [\"getprime\"]",
            " ",
            "-if __name__ == '__main__':",
            "-    print('Running doctests 1000x or until failure')",
            "+if __name__ == \"__main__\":",
            "+    print(\"Running doctests 1000x or until failure\")",
            "     import doctest",
            " ",
            "     for count in range(100):",
            "         (failures, tests) = doctest.testmod()",
            "         if failures:",
            "             break",
            " ",
            "         if count % 10 == 0 and count:",
            "-            print('%i times' % count)",
            "+            print(\"%i times\" % count)",
            " ",
            "-    print('Doctests done')",
            "+    print(\"Doctests done\")"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/pem.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/pem.py",
            "+++ /home/python-rsa-version-4.9/rsa/pem.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -13,114 +11,124 @@",
            " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
            " #  See the License for the specific language governing permissions and",
            " #  limitations under the License.",
            " ",
            " \"\"\"Functions that load and write PEM-encoded files.\"\"\"",
            " ",
            " import base64",
            "+import typing",
            " ",
            "-from rsa._compat import is_bytes, range",
            "+# Should either be ASCII strings or bytes.",
            "+FlexiText = typing.Union[str, bytes]",
            " ",
            " ",
            "-def _markers(pem_marker):",
            "+def _markers(pem_marker: FlexiText) -> typing.Tuple[bytes, bytes]:",
            "     \"\"\"",
            "     Returns the start and end PEM markers, as bytes.",
            "     \"\"\"",
            " ",
            "-    if not is_bytes(pem_marker):",
            "-        pem_marker = pem_marker.encode('ascii')",
            "-",
            "-    return (b'-----BEGIN ' + pem_marker + b'-----',",
            "-            b'-----END ' + pem_marker + b'-----')",
            "+    if not isinstance(pem_marker, bytes):",
            "+        pem_marker = pem_marker.encode(\"ascii\")",
            " ",
            "+    return (",
            "+        b\"-----BEGIN \" + pem_marker + b\"-----\",",
            "+        b\"-----END \" + pem_marker + b\"-----\",",
            "+    )",
            " ",
            "-def load_pem(contents, pem_marker):",
            "-    \"\"\"Loads a PEM file.",
            "-",
            "-    :param contents: the contents of the file to interpret",
            "-    :param pem_marker: the marker of the PEM content, such as 'RSA PRIVATE KEY'",
            "-        when your file has '-----BEGIN RSA PRIVATE KEY-----' and",
            "-        '-----END RSA PRIVATE KEY-----' markers.",
            " ",
            "-    :return: the base64-decoded content between the start and end markers.",
            "+def _pem_lines(contents: bytes, pem_start: bytes, pem_end: bytes) -> typing.Iterator[bytes]:",
            "+    \"\"\"Generator over PEM lines between pem_start and pem_end.\"\"\"",
            " ",
            "-    @raise ValueError: when the content is invalid, for example when the start",
            "-        marker cannot be found.",
            "-",
            "-    \"\"\"",
            "-",
            "-    # We want bytes, not text. If it's text, it can be converted to ASCII bytes.",
            "-    if not is_bytes(contents):",
            "-        contents = contents.encode('ascii')",
            "-",
            "-    (pem_start, pem_end) = _markers(pem_marker)",
            "-",
            "-    pem_lines = []",
            "     in_pem_part = False",
            "+    seen_pem_start = False",
            " ",
            "     for line in contents.splitlines():",
            "         line = line.strip()",
            " ",
            "         # Skip empty lines",
            "         if not line:",
            "             continue",
            " ",
            "         # Handle start marker",
            "         if line == pem_start:",
            "             if in_pem_part:",
            "-                raise ValueError('Seen start marker \"%s\" twice' % pem_start)",
            "+                raise ValueError('Seen start marker \"%r\" twice' % pem_start)",
            " ",
            "             in_pem_part = True",
            "+            seen_pem_start = True",
            "             continue",
            " ",
            "         # Skip stuff before first marker",
            "         if not in_pem_part:",
            "             continue",
            " ",
            "         # Handle end marker",
            "         if in_pem_part and line == pem_end:",
            "             in_pem_part = False",
            "             break",
            " ",
            "         # Load fields",
            "-        if b':' in line:",
            "+        if b\":\" in line:",
            "             continue",
            " ",
            "-        pem_lines.append(line)",
            "+        yield line",
            " ",
            "     # Do some sanity checks",
            "-    if not pem_lines:",
            "-        raise ValueError('No PEM start marker \"%s\" found' % pem_start)",
            "+    if not seen_pem_start:",
            "+        raise ValueError('No PEM start marker \"%r\" found' % pem_start)",
            " ",
            "     if in_pem_part:",
            "-        raise ValueError('No PEM end marker \"%s\" found' % pem_end)",
            "+        raise ValueError('No PEM end marker \"%r\" found' % pem_end)",
            "+",
            "+",
            "+def load_pem(contents: FlexiText, pem_marker: FlexiText) -> bytes:",
            "+    \"\"\"Loads a PEM file.",
            "+",
            "+    :param contents: the contents of the file to interpret",
            "+    :param pem_marker: the marker of the PEM content, such as 'RSA PRIVATE KEY'",
            "+        when your file has '-----BEGIN RSA PRIVATE KEY-----' and",
            "+        '-----END RSA PRIVATE KEY-----' markers.",
            "+",
            "+    :return: the base64-decoded content between the start and end markers.",
            "+",
            "+    @raise ValueError: when the content is invalid, for example when the start",
            "+        marker cannot be found.",
            "+",
            "+    \"\"\"",
            "+",
            "+    # We want bytes, not text. If it's text, it can be converted to ASCII bytes.",
            "+    if not isinstance(contents, bytes):",
            "+        contents = contents.encode(\"ascii\")",
            "+",
            "+    (pem_start, pem_end) = _markers(pem_marker)",
            "+    pem_lines = [line for line in _pem_lines(contents, pem_start, pem_end)]",
            " ",
            "     # Base64-decode the contents",
            "-    pem = b''.join(pem_lines)",
            "+    pem = b\"\".join(pem_lines)",
            "     return base64.standard_b64decode(pem)",
            " ",
            " ",
            "-def save_pem(contents, pem_marker):",
            "+def save_pem(contents: bytes, pem_marker: FlexiText) -> bytes:",
            "     \"\"\"Saves a PEM file.",
            " ",
            "     :param contents: the contents to encode in PEM format",
            "     :param pem_marker: the marker of the PEM content, such as 'RSA PRIVATE KEY'",
            "         when your file has '-----BEGIN RSA PRIVATE KEY-----' and",
            "         '-----END RSA PRIVATE KEY-----' markers.",
            " ",
            "     :return: the base64-encoded content between the start and end markers, as bytes.",
            " ",
            "     \"\"\"",
            " ",
            "     (pem_start, pem_end) = _markers(pem_marker)",
            " ",
            "-    b64 = base64.standard_b64encode(contents).replace(b'\\n', b'')",
            "+    b64 = base64.standard_b64encode(contents).replace(b\"\\n\", b\"\")",
            "     pem_lines = [pem_start]",
            " ",
            "     for block_start in range(0, len(b64), 64):",
            "-        block = b64[block_start:block_start + 64]",
            "+        block = b64[block_start : block_start + 64]",
            "         pem_lines.append(block)",
            " ",
            "     pem_lines.append(pem_end)",
            "-    pem_lines.append(b'')",
            "+    pem_lines.append(b\"\")",
            " ",
            "-    return b'\\n'.join(pem_lines)",
            "+    return b\"\\n\".join(pem_lines)"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/pkcs1.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/pkcs1.py",
            "+++ /home/python-rsa-version-4.9/rsa/pkcs1.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -26,51 +24,78 @@",
            " that are raised contain the Python traceback information, which can be used to",
            " deduce where in the process the failure occurred. DO NOT PASS SUCH INFORMATION",
            " to your users.",
            " \"\"\"",
            " ",
            " import hashlib",
            " import os",
            "-",
            "-from rsa._compat import range",
            "-from rsa import common, transform, core",
            "+import sys",
            "+import typing",
            "+from hmac import compare_digest",
            "+",
            "+from . import common, transform, core, key",
            "+",
            "+if typing.TYPE_CHECKING:",
            "+    HashType = hashlib._Hash",
            "+else:",
            "+    HashType = typing.Any",
            " ",
            " # ASN.1 codes that describe the hash algorithm used.",
            " HASH_ASN1 = {",
            "-    'MD5': b'\\x30\\x20\\x30\\x0c\\x06\\x08\\x2a\\x86\\x48\\x86\\xf7\\x0d\\x02\\x05\\x05\\x00\\x04\\x10',",
            "-    'SHA-1': b'\\x30\\x21\\x30\\x09\\x06\\x05\\x2b\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14',",
            "-    'SHA-224': b'\\x30\\x2d\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x04\\x05\\x00\\x04\\x1c',",
            "-    'SHA-256': b'\\x30\\x31\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x01\\x05\\x00\\x04\\x20',",
            "-    'SHA-384': b'\\x30\\x41\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x02\\x05\\x00\\x04\\x30',",
            "-    'SHA-512': b'\\x30\\x51\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x03\\x05\\x00\\x04\\x40',",
            "+    \"MD5\": b\"\\x30\\x20\\x30\\x0c\\x06\\x08\\x2a\\x86\\x48\\x86\\xf7\\x0d\\x02\\x05\\x05\\x00\\x04\\x10\",",
            "+    \"SHA-1\": b\"\\x30\\x21\\x30\\x09\\x06\\x05\\x2b\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14\",",
            "+    \"SHA-224\": b\"\\x30\\x2d\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x04\\x05\\x00\\x04\\x1c\",",
            "+    \"SHA-256\": b\"\\x30\\x31\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x01\\x05\\x00\\x04\\x20\",",
            "+    \"SHA-384\": b\"\\x30\\x41\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x02\\x05\\x00\\x04\\x30\",",
            "+    \"SHA-512\": b\"\\x30\\x51\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x03\\x05\\x00\\x04\\x40\",",
            " }",
            " ",
            "-HASH_METHODS = {",
            "-    'MD5': hashlib.md5,",
            "-    'SHA-1': hashlib.sha1,",
            "-    'SHA-224': hashlib.sha224,",
            "-    'SHA-256': hashlib.sha256,",
            "-    'SHA-384': hashlib.sha384,",
            "-    'SHA-512': hashlib.sha512,",
            "+HASH_METHODS: typing.Dict[str, typing.Callable[[], HashType]] = {",
            "+    \"MD5\": hashlib.md5,",
            "+    \"SHA-1\": hashlib.sha1,",
            "+    \"SHA-224\": hashlib.sha224,",
            "+    \"SHA-256\": hashlib.sha256,",
            "+    \"SHA-384\": hashlib.sha384,",
            "+    \"SHA-512\": hashlib.sha512,",
            " }",
            "+\"\"\"Hash methods supported by this library.\"\"\"",
            "+",
            "+",
            "+if sys.version_info >= (3, 6):",
            "+    # Python 3.6 introduced SHA3 support.",
            "+    HASH_ASN1.update(",
            "+        {",
            "+            \"SHA3-256\": b\"\\x30\\x31\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x08\\x05\\x00\\x04\\x20\",",
            "+            \"SHA3-384\": b\"\\x30\\x41\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x09\\x05\\x00\\x04\\x30\",",
            "+            \"SHA3-512\": b\"\\x30\\x51\\x30\\x0d\\x06\\x09\\x60\\x86\\x48\\x01\\x65\\x03\\x04\\x02\\x0a\\x05\\x00\\x04\\x40\",",
            "+        }",
            "+    )",
            "+",
            "+    HASH_METHODS.update(",
            "+        {",
            "+            \"SHA3-256\": hashlib.sha3_256,",
            "+            \"SHA3-384\": hashlib.sha3_384,",
            "+            \"SHA3-512\": hashlib.sha3_512,",
            "+        }",
            "+    )",
            " ",
            " ",
            " class CryptoError(Exception):",
            "     \"\"\"Base class for all exceptions in this module.\"\"\"",
            " ",
            " ",
            " class DecryptionError(CryptoError):",
            "     \"\"\"Raised when decryption fails.\"\"\"",
            " ",
            " ",
            " class VerificationError(CryptoError):",
            "     \"\"\"Raised when verification fails.\"\"\"",
            " ",
            " ",
            "-def _pad_for_encryption(message, target_length):",
            "+def _pad_for_encryption(message: bytes, target_length: int) -> bytes:",
            "     r\"\"\"Pads the message for encryption, returning the padded message.",
            " ",
            "     :return: 00 02 RANDOM_DATA 00 MESSAGE",
            " ",
            "     >>> block = _pad_for_encryption(b'hello', 16)",
            "     >>> len(block)",
            "     16",
            "@@ -81,42 +106,41 @@",
            " ",
            "     \"\"\"",
            " ",
            "     max_msglength = target_length - 11",
            "     msglength = len(message)",
            " ",
            "     if msglength > max_msglength:",
            "-        raise OverflowError('%i bytes needed for message, but there is only'",
            "-                            ' space for %i' % (msglength, max_msglength))",
            "+        raise OverflowError(",
            "+            \"%i bytes needed for message, but there is only\"",
            "+            \" space for %i\" % (msglength, max_msglength)",
            "+        )",
            " ",
            "     # Get random padding",
            "-    padding = b''",
            "+    padding = b\"\"",
            "     padding_length = target_length - msglength - 3",
            " ",
            "     # We remove 0-bytes, so we'll end up with less padding than we've asked for,",
            "     # so keep adding data until we're at the correct length.",
            "     while len(padding) < padding_length:",
            "         needed_bytes = padding_length - len(padding)",
            " ",
            "         # Always read at least 8 bytes more than we need, and trim off the rest",
            "         # after removing the 0-bytes. This increases the chance of getting",
            "         # enough bytes, especially when needed_bytes is small",
            "         new_padding = os.urandom(needed_bytes + 5)",
            "-        new_padding = new_padding.replace(b'\\x00', b'')",
            "+        new_padding = new_padding.replace(b\"\\x00\", b\"\")",
            "         padding = padding + new_padding[:needed_bytes]",
            " ",
            "     assert len(padding) == padding_length",
            " ",
            "-    return b''.join([b'\\x00\\x02',",
            "-                     padding,",
            "-                     b'\\x00',",
            "-                     message])",
            "+    return b\"\".join([b\"\\x00\\x02\", padding, b\"\\x00\", message])",
            " ",
            " ",
            "-def _pad_for_signing(message, target_length):",
            "+def _pad_for_signing(message: bytes, target_length: int) -> bytes:",
            "     r\"\"\"Pads the message for signing, returning the padded message.",
            " ",
            "     The padding is always a repetition of FF bytes.",
            " ",
            "     :return: 00 01 PADDING 00 MESSAGE",
            " ",
            "     >>> block = _pad_for_signing(b'hello', 16)",
            "@@ -131,26 +155,25 @@",
            " ",
            "     \"\"\"",
            " ",
            "     max_msglength = target_length - 11",
            "     msglength = len(message)",
            " ",
            "     if msglength > max_msglength:",
            "-        raise OverflowError('%i bytes needed for message, but there is only'",
            "-                            ' space for %i' % (msglength, max_msglength))",
            "+        raise OverflowError(",
            "+            \"%i bytes needed for message, but there is only\"",
            "+            \" space for %i\" % (msglength, max_msglength)",
            "+        )",
            " ",
            "     padding_length = target_length - msglength - 3",
            " ",
            "-    return b''.join([b'\\x00\\x01',",
            "-                     padding_length * b'\\xff',",
            "-                     b'\\x00',",
            "-                     message])",
            "+    return b\"\".join([b\"\\x00\\x01\", padding_length * b\"\\xff\", b\"\\x00\", message])",
            " ",
            " ",
            "-def encrypt(message, pub_key):",
            "+def encrypt(message: bytes, pub_key: key.PublicKey) -> bytes:",
            "     \"\"\"Encrypts the given message using PKCS#1 v1.5",
            " ",
            "     :param message: the message to encrypt. Must be a byte string no longer than",
            "         ``k-11`` bytes, where ``k`` is the number of bytes needed to encode",
            "         the ``n`` component of the public key.",
            "     :param pub_key: the :py:class:`rsa.PublicKey` to encrypt with.",
            "     :raise OverflowError: when the message is too large to fit in the padded",
            "@@ -174,15 +197,15 @@",
            "     payload = transform.bytes2int(padded)",
            "     encrypted = core.encrypt_int(payload, pub_key.e, pub_key.n)",
            "     block = transform.int2bytes(encrypted, keylength)",
            " ",
            "     return block",
            " ",
            " ",
            "-def decrypt(crypto, priv_key):",
            "+def decrypt(crypto: bytes, priv_key: key.PrivateKey) -> bytes:",
            "     r\"\"\"Decrypts the given message using PKCS#1 v1.5",
            " ",
            "     The decryption is considered 'failed' when the resulting cleartext doesn't",
            "     start with the bytes 00 02, or when the 00 byte between the padding and",
            "     the message cannot be found.",
            " ",
            "     :param crypto: the crypto text as returned by :py:func:`rsa.encrypt`",
            "@@ -234,64 +257,71 @@",
            "     decrypted = priv_key.blinded_decrypt(encrypted)",
            "     cleartext = transform.int2bytes(decrypted, blocksize)",
            " ",
            "     # Detect leading zeroes in the crypto. These are not reflected in the",
            "     # encrypted value (as leading zeroes do not influence the value of an",
            "     # integer). This fixes CVE-2020-13757.",
            "     if len(crypto) > blocksize:",
            "-        raise DecryptionError('Decryption failed')",
            "+        # This is operating on public information, so doesn't need to be constant-time.",
            "+        raise DecryptionError(\"Decryption failed\")",
            " ",
            "     # If we can't find the cleartext marker, decryption failed.",
            "-    if cleartext[0:2] != b'\\x00\\x02':",
            "-        raise DecryptionError('Decryption failed')",
            "+    cleartext_marker_bad = not compare_digest(cleartext[:2], b\"\\x00\\x02\")",
            " ",
            "     # Find the 00 separator between the padding and the message",
            "-    try:",
            "-        sep_idx = cleartext.index(b'\\x00', 2)",
            "-    except ValueError:",
            "-        raise DecryptionError('Decryption failed')",
            "+    sep_idx = cleartext.find(b\"\\x00\", 2)",
            "+",
            "+    # sep_idx indicates the position of the `\\x00` separator that separates the",
            "+    # padding from the actual message. The padding should be at least 8 bytes",
            "+    # long (see https://tools.ietf.org/html/rfc8017#section-7.2.2 step 3), which",
            "+    # means the separator should be at least at index 10 (because of the",
            "+    # `\\x00\\x02` marker that precedes it).",
            "+    sep_idx_bad = sep_idx < 10",
            " ",
            "-    return cleartext[sep_idx + 1:]",
            "+    anything_bad = cleartext_marker_bad | sep_idx_bad",
            "+    if anything_bad:",
            "+        raise DecryptionError(\"Decryption failed\")",
            " ",
            "+    return cleartext[sep_idx + 1 :]",
            " ",
            "-def sign_hash(hash_value, priv_key, hash_method):",
            "+",
            "+def sign_hash(hash_value: bytes, priv_key: key.PrivateKey, hash_method: str) -> bytes:",
            "     \"\"\"Signs a precomputed hash with the private key.",
            " ",
            "     Hashes the message, then signs the hash with the given key. This is known",
            "     as a \"detached signature\", because the message itself isn't altered.",
            " ",
            "-    :param hash_value: A precomputed hash to sign (ignores message). Should be set to",
            "-        None if needing to hash and sign message.",
            "+    :param hash_value: A precomputed hash to sign (ignores message).",
            "     :param priv_key: the :py:class:`rsa.PrivateKey` to sign with",
            "     :param hash_method: the hash method used on the message. Use 'MD5', 'SHA-1',",
            "         'SHA-224', SHA-256', 'SHA-384' or 'SHA-512'.",
            "     :return: a message signature block.",
            "     :raise OverflowError: if the private key is too small to contain the",
            "         requested hash.",
            " ",
            "     \"\"\"",
            " ",
            "     # Get the ASN1 code for this hash method",
            "     if hash_method not in HASH_ASN1:",
            "-        raise ValueError('Invalid hash method: %s' % hash_method)",
            "+        raise ValueError(\"Invalid hash method: %s\" % hash_method)",
            "     asn1code = HASH_ASN1[hash_method]",
            " ",
            "     # Encrypt the hash with the private key",
            "     cleartext = asn1code + hash_value",
            "     keylength = common.byte_size(priv_key.n)",
            "     padded = _pad_for_signing(cleartext, keylength)",
            " ",
            "     payload = transform.bytes2int(padded)",
            "     encrypted = priv_key.blinded_encrypt(payload)",
            "     block = transform.int2bytes(encrypted, keylength)",
            " ",
            "     return block",
            " ",
            " ",
            "-def sign(message, priv_key, hash_method):",
            "+def sign(message: bytes, priv_key: key.PrivateKey, hash_method: str) -> bytes:",
            "     \"\"\"Signs the message with the private key.",
            " ",
            "     Hashes the message, then signs the hash with the given key. This is known",
            "     as a \"detached signature\", because the message itself isn't altered.",
            " ",
            "     :param message: the message to sign. Can be an 8-bit string or a file-like",
            "         object. If ``message`` has a ``read()`` method, it is assumed to be a",
            "@@ -305,15 +335,15 @@",
            " ",
            "     \"\"\"",
            " ",
            "     msg_hash = compute_hash(message, hash_method)",
            "     return sign_hash(msg_hash, priv_key, hash_method)",
            " ",
            " ",
            "-def verify(message, signature, pub_key):",
            "+def verify(message: bytes, signature: bytes, pub_key: key.PublicKey) -> str:",
            "     \"\"\"Verifies that the signature matches the message.",
            " ",
            "     The hash method is detected automatically from the signature.",
            " ",
            "     :param message: the signed message. Can be an 8-bit string or a file-like",
            "         object. If ``message`` has a ``read()`` method, it is assumed to be a",
            "         file-like object.",
            "@@ -334,24 +364,24 @@",
            "     message_hash = compute_hash(message, method_name)",
            " ",
            "     # Reconstruct the expected padded hash",
            "     cleartext = HASH_ASN1[method_name] + message_hash",
            "     expected = _pad_for_signing(cleartext, keylength)",
            " ",
            "     if len(signature) != keylength:",
            "-        raise VerificationError('Verification failed')",
            "+        raise VerificationError(\"Verification failed\")",
            " ",
            "     # Compare with the signed one",
            "     if expected != clearsig:",
            "-        raise VerificationError('Verification failed')",
            "+        raise VerificationError(\"Verification failed\")",
            " ",
            "     return method_name",
            " ",
            " ",
            "-def find_signature_hash(signature, pub_key):",
            "+def find_signature_hash(signature: bytes, pub_key: key.PublicKey) -> str:",
            "     \"\"\"Returns the hash name detected from the signature.",
            " ",
            "     If you also want to verify the message, use :py:func:`rsa.verify()` instead.",
            "     It also returns the name of the used hash.",
            " ",
            "     :param signature: the signature block, as created with :py:func:`rsa.sign`.",
            "     :param pub_key: the :py:class:`rsa.PublicKey` of the person signing the message.",
            "@@ -362,15 +392,15 @@",
            "     encrypted = transform.bytes2int(signature)",
            "     decrypted = core.decrypt_int(encrypted, pub_key.e, pub_key.n)",
            "     clearsig = transform.int2bytes(decrypted, keylength)",
            " ",
            "     return _find_method_hash(clearsig)",
            " ",
            " ",
            "-def yield_fixedblocks(infile, blocksize):",
            "+def yield_fixedblocks(infile: typing.BinaryIO, blocksize: int) -> typing.Iterator[bytes]:",
            "     \"\"\"Generator, yields each block of ``blocksize`` bytes in the input file.",
            " ",
            "     :param infile: file to read and separate in blocks.",
            "     :param blocksize: block size in bytes.",
            "     :returns: a generator that yields the contents of each block",
            "     \"\"\"",
            " ",
            "@@ -383,66 +413,73 @@",
            " ",
            "         yield block",
            " ",
            "         if read_bytes < blocksize:",
            "             break",
            " ",
            " ",
            "-def compute_hash(message, method_name):",
            "+def compute_hash(message: typing.Union[bytes, typing.BinaryIO], method_name: str) -> bytes:",
            "     \"\"\"Returns the message digest.",
            " ",
            "     :param message: the signed message. Can be an 8-bit string or a file-like",
            "         object. If ``message`` has a ``read()`` method, it is assumed to be a",
            "         file-like object.",
            "     :param method_name: the hash method, must be a key of",
            "-        :py:const:`HASH_METHODS`.",
            "+        :py:const:`rsa.pkcs1.HASH_METHODS`.",
            " ",
            "     \"\"\"",
            " ",
            "     if method_name not in HASH_METHODS:",
            "-        raise ValueError('Invalid hash method: %s' % method_name)",
            "+        raise ValueError(\"Invalid hash method: %s\" % method_name)",
            " ",
            "     method = HASH_METHODS[method_name]",
            "     hasher = method()",
            " ",
            "-    if hasattr(message, 'read') and hasattr(message.read, '__call__'):",
            "+    if isinstance(message, bytes):",
            "+        hasher.update(message)",
            "+    else:",
            "+        assert hasattr(message, \"read\") and hasattr(message.read, \"__call__\")",
            "         # read as 1K blocks",
            "         for block in yield_fixedblocks(message, 1024):",
            "             hasher.update(block)",
            "-    else:",
            "-        # hash the message object itself.",
            "-        hasher.update(message)",
            " ",
            "     return hasher.digest()",
            " ",
            " ",
            "-def _find_method_hash(clearsig):",
            "+def _find_method_hash(clearsig: bytes) -> str:",
            "     \"\"\"Finds the hash method.",
            " ",
            "     :param clearsig: full padded ASN1 and hash.",
            "     :return: the used hash method.",
            "     :raise VerificationFailed: when the hash method cannot be found",
            "     \"\"\"",
            " ",
            "     for (hashname, asn1code) in HASH_ASN1.items():",
            "         if asn1code in clearsig:",
            "             return hashname",
            " ",
            "-    raise VerificationError('Verification failed')",
            "+    raise VerificationError(\"Verification failed\")",
            " ",
            " ",
            "-__all__ = ['encrypt', 'decrypt', 'sign', 'verify',",
            "-           'DecryptionError', 'VerificationError', 'CryptoError']",
            "+__all__ = [",
            "+    \"encrypt\",",
            "+    \"decrypt\",",
            "+    \"sign\",",
            "+    \"verify\",",
            "+    \"DecryptionError\",",
            "+    \"VerificationError\",",
            "+    \"CryptoError\",",
            "+]",
            " ",
            "-if __name__ == '__main__':",
            "-    print('Running doctests 1000x or until failure')",
            "+if __name__ == \"__main__\":",
            "+    print(\"Running doctests 1000x or until failure\")",
            "     import doctest",
            " ",
            "     for count in range(1000):",
            "         (failures, tests) = doctest.testmod()",
            "         if failures:",
            "             break",
            " ",
            "         if count % 100 == 0 and count:",
            "-            print('%i times' % count)",
            "+            print(\"%i times\" % count)",
            " ",
            "-    print('Doctests done')",
            "+    print(\"Doctests done\")"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/pkcs1_v2.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/pkcs1_v2.py",
            "+++ /home/python-rsa-version-4.9/rsa/pkcs1_v2.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -16,23 +14,22 @@",
            " ",
            " \"\"\"Functions for PKCS#1 version 2 encryption and signing",
            " ",
            " This module implements certain functionality from PKCS#1 version 2. Main",
            " documentation is RFC 2437: https://tools.ietf.org/html/rfc2437",
            " \"\"\"",
            " ",
            "-from rsa._compat import range",
            " from rsa import (",
            "     common,",
            "     pkcs1,",
            "     transform,",
            " )",
            " ",
            " ",
            "-def mgf1(seed, length, hasher='SHA-1'):",
            "+def mgf1(seed: bytes, length: int, hasher: str = \"SHA-1\") -> bytes:",
            "     \"\"\"",
            "     MGF1 is a Mask Generation Function based on a hash function.",
            " ",
            "     A mask generation function takes an octet string of variable length and a",
            "     desired output length as input, and outputs an octet string of the desired",
            "     length. The plaintext-awareness of RSAES-OAEP relies on the random nature of",
            "     the output of the mask generation function, which in turn relies on the",
            "@@ -48,56 +45,56 @@",
            " ",
            "     :raise OverflowError: when `length` is too large for the specified `hasher`",
            "     :raise ValueError: when specified `hasher` is invalid",
            "     \"\"\"",
            " ",
            "     try:",
            "         hash_length = pkcs1.HASH_METHODS[hasher]().digest_size",
            "-    except KeyError:",
            "+    except KeyError as ex:",
            "         raise ValueError(",
            "-            'Invalid `hasher` specified. Please select one of: {hash_list}'.format(",
            "-                hash_list=', '.join(sorted(pkcs1.HASH_METHODS.keys()))",
            "+            \"Invalid `hasher` specified. Please select one of: {hash_list}\".format(",
            "+                hash_list=\", \".join(sorted(pkcs1.HASH_METHODS.keys()))",
            "             )",
            "-        )",
            "+        ) from ex",
            " ",
            "     # If l > 2^32(hLen), output \"mask too long\" and stop.",
            "-    if length > (2**32 * hash_length):",
            "+    if length > (2 ** 32 * hash_length):",
            "         raise OverflowError(",
            "             \"Desired length should be at most 2**32 times the hasher's output \"",
            "             \"length ({hash_length} for {hasher} function)\".format(",
            "                 hash_length=hash_length,",
            "                 hasher=hasher,",
            "             )",
            "         )",
            " ",
            "     # Looping `counter` from 0 to ceil(l / hLen)-1, build `output` based on the",
            "     # hashes formed by (`seed` + C), being `C` an octet string of length 4",
            "     # generated by converting `counter` with the primitive I2OSP",
            "-    output = b''.join(",
            "+    output = b\"\".join(",
            "         pkcs1.compute_hash(",
            "             seed + transform.int2bytes(counter, fill_size=4),",
            "             method_name=hasher,",
            "         )",
            "         for counter in range(common.ceil_div(length, hash_length) + 1)",
            "     )",
            " ",
            "     # Output the leading `length` octets of `output` as the octet string mask.",
            "     return output[:length]",
            " ",
            " ",
            " __all__ = [",
            "-    'mgf1',",
            "+    \"mgf1\",",
            " ]",
            " ",
            "-if __name__ == '__main__':",
            "-    print('Running doctests 1000x or until failure')",
            "+if __name__ == \"__main__\":",
            "+    print(\"Running doctests 1000x or until failure\")",
            "     import doctest",
            " ",
            "     for count in range(1000):",
            "         (failures, tests) = doctest.testmod()",
            "         if failures:",
            "             break",
            " ",
            "         if count % 100 == 0 and count:",
            "-            print('%i times' % count)",
            "+            print(\"%i times\" % count)",
            " ",
            "-    print('Doctests done')",
            "+    print(\"Doctests done\")"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/prime.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/prime.py",
            "+++ /home/python-rsa-version-4.9/rsa/prime.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -16,34 +14,33 @@",
            " ",
            " \"\"\"Numerical functions related to primes.",
            " ",
            " Implementation based on the book Algorithm Design by Michael T. Goodrich and",
            " Roberto Tamassia, 2002.",
            " \"\"\"",
            " ",
            "-from rsa._compat import range",
            " import rsa.common",
            " import rsa.randnum",
            " ",
            "-__all__ = ['getprime', 'are_relatively_prime']",
            "+__all__ = [\"getprime\", \"are_relatively_prime\"]",
            " ",
            " ",
            "-def gcd(p, q):",
            "+def gcd(p: int, q: int) -> int:",
            "     \"\"\"Returns the greatest common divisor of p and q",
            " ",
            "     >>> gcd(48, 180)",
            "     12",
            "     \"\"\"",
            " ",
            "     while q != 0:",
            "         (p, q) = (q, p % q)",
            "     return p",
            " ",
            " ",
            "-def get_primality_testing_rounds(number):",
            "+def get_primality_testing_rounds(number: int) -> int:",
            "     \"\"\"Returns minimum number of rounds for Miller-Rabing primality testing,",
            "     based on number bitsize.",
            " ",
            "     According to NIST FIPS 186-4, Appendix C, Table C.3, minimum number of",
            "     rounds of M-R testing, using an error probability of 2 ** (-100), for",
            "     different p, q bitsizes are:",
            "       * p, q bitsize: 512; rounds: 7",
            "@@ -61,15 +58,15 @@",
            "         return 4",
            "     if bitsize >= 512:",
            "         return 7",
            "     # For smaller bitsizes, set arbitrary number of rounds.",
            "     return 10",
            " ",
            " ",
            "-def miller_rabin_primality_testing(n, k):",
            "+def miller_rabin_primality_testing(n: int, k: int) -> bool:",
            "     \"\"\"Calculates whether n is composite (which is always correct) or prime",
            "     (which theoretically is incorrect with error probability 4**-k), by",
            "     applying Miller-Rabin primality testing.",
            " ",
            "     For reference and implementation example, see:",
            "     https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test",
            " ",
            "@@ -114,15 +111,15 @@",
            "         else:",
            "             # If loop doesn't break, n is composite.",
            "             return False",
            " ",
            "     return True",
            " ",
            " ",
            "-def is_prime(number):",
            "+def is_prime(number: int) -> bool:",
            "     \"\"\"Returns True if the number is prime, and False otherwise.",
            " ",
            "     >>> is_prime(2)",
            "     True",
            "     >>> is_prime(42)",
            "     False",
            "     >>> is_prime(41)",
            "@@ -140,15 +137,15 @@",
            "     # Calculate minimum number of rounds.",
            "     k = get_primality_testing_rounds(number)",
            " ",
            "     # Run primality testing with (minimum + 1) rounds.",
            "     return miller_rabin_primality_testing(number, k + 1)",
            " ",
            " ",
            "-def getprime(nbits):",
            "+def getprime(nbits: int) -> int:",
            "     \"\"\"Returns a prime number that can be stored in 'nbits' bits.",
            " ",
            "     >>> p = getprime(128)",
            "     >>> is_prime(p-1)",
            "     False",
            "     >>> is_prime(p)",
            "     True",
            "@@ -156,46 +153,46 @@",
            "     False",
            " ",
            "     >>> from rsa import common",
            "     >>> common.bit_size(p) == 128",
            "     True",
            "     \"\"\"",
            " ",
            "-    assert nbits > 3  # the loop wil hang on too small numbers",
            "+    assert nbits > 3  # the loop will hang on too small numbers",
            " ",
            "     while True:",
            "         integer = rsa.randnum.read_random_odd_int(nbits)",
            " ",
            "         # Test for primeness",
            "         if is_prime(integer):",
            "             return integer",
            " ",
            "             # Retry if not prime",
            " ",
            " ",
            "-def are_relatively_prime(a, b):",
            "+def are_relatively_prime(a: int, b: int) -> bool:",
            "     \"\"\"Returns True if a and b are relatively prime, and False if they",
            "     are not.",
            " ",
            "     >>> are_relatively_prime(2, 3)",
            "     True",
            "     >>> are_relatively_prime(2, 4)",
            "     False",
            "     \"\"\"",
            " ",
            "     d = gcd(a, b)",
            "     return d == 1",
            " ",
            " ",
            "-if __name__ == '__main__':",
            "-    print('Running doctests 1000x or until failure')",
            "+if __name__ == \"__main__\":",
            "+    print(\"Running doctests 1000x or until failure\")",
            "     import doctest",
            " ",
            "     for count in range(1000):",
            "         (failures, tests) = doctest.testmod()",
            "         if failures:",
            "             break",
            " ",
            "         if count % 100 == 0 and count:",
            "-            print('%i times' % count)",
            "+            print(\"%i times\" % count)",
            " ",
            "-    print('Doctests done')",
            "+    print(\"Doctests done\")"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/randnum.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/randnum.py",
            "+++ /home/python-rsa-version-4.9/rsa/randnum.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -15,68 +13,67 @@",
            " #  limitations under the License.",
            " ",
            " \"\"\"Functions for generating random numbers.\"\"\"",
            " ",
            " # Source inspired by code by Yesudeep Mangalapilly <yesudeep@gmail.com>",
            " ",
            " import os",
            "+import struct",
            " ",
            " from rsa import common, transform",
            "-from rsa._compat import byte",
            " ",
            " ",
            "-def read_random_bits(nbits):",
            "+def read_random_bits(nbits: int) -> bytes:",
            "     \"\"\"Reads 'nbits' random bits.",
            " ",
            "     If nbits isn't a whole number of bytes, an extra byte will be appended with",
            "     only the lower bits set.",
            "     \"\"\"",
            " ",
            "     nbytes, rbits = divmod(nbits, 8)",
            " ",
            "     # Get the random bytes",
            "     randomdata = os.urandom(nbytes)",
            " ",
            "     # Add the remaining random bits",
            "     if rbits > 0:",
            "         randomvalue = ord(os.urandom(1))",
            "-        randomvalue >>= (8 - rbits)",
            "-        randomdata = byte(randomvalue) + randomdata",
            "+        randomvalue >>= 8 - rbits",
            "+        randomdata = struct.pack(\"B\", randomvalue) + randomdata",
            " ",
            "     return randomdata",
            " ",
            " ",
            "-def read_random_int(nbits):",
            "-    \"\"\"Reads a random integer of approximately nbits bits.",
            "-    \"\"\"",
            "+def read_random_int(nbits: int) -> int:",
            "+    \"\"\"Reads a random integer of approximately nbits bits.\"\"\"",
            " ",
            "     randomdata = read_random_bits(nbits)",
            "     value = transform.bytes2int(randomdata)",
            " ",
            "     # Ensure that the number is large enough to just fill out the required",
            "     # number of bits.",
            "     value |= 1 << (nbits - 1)",
            " ",
            "     return value",
            " ",
            " ",
            "-def read_random_odd_int(nbits):",
            "+def read_random_odd_int(nbits: int) -> int:",
            "     \"\"\"Reads a random odd integer of approximately nbits bits.",
            " ",
            "     >>> read_random_odd_int(512) & 1",
            "     1",
            "     \"\"\"",
            " ",
            "     value = read_random_int(nbits)",
            " ",
            "     # Make sure it's odd",
            "     return value | 1",
            " ",
            " ",
            "-def randint(maxvalue):",
            "+def randint(maxvalue: int) -> int:",
            "     \"\"\"Returns a random integer x with 1 <= x <= maxvalue",
            " ",
            "     May take a very long time in specific situations. If maxvalue needs N bits",
            "     to store, the closer maxvalue is to (2 ** N) - 1, the faster this function",
            "     is.",
            "     \"\"\""
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/transform.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/transform.py",
            "+++ /home/python-rsa-version-4.9/rsa/transform.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -15,201 +13,60 @@",
            " #  limitations under the License.",
            " ",
            " \"\"\"Data transformation functions.",
            " ",
            " From bytes to a number, number to bytes, etc.",
            " \"\"\"",
            " ",
            "-from __future__ import absolute_import",
            "-",
            "-import binascii",
            "-from struct import pack",
            "+import math",
            " ",
            "-from rsa._compat import byte, is_integer",
            "-from rsa import common, machine_size",
            " ",
            "-",
            "-def bytes2int(raw_bytes):",
            "+def bytes2int(raw_bytes: bytes) -> int:",
            "     r\"\"\"Converts a list of bytes or an 8-bit string to an integer.",
            " ",
            "     When using unicode strings, encode it to some encoding like UTF8 first.",
            " ",
            "     >>> (((128 * 256) + 64) * 256) + 15",
            "     8405007",
            "     >>> bytes2int(b'\\x80@\\x0f')",
            "     8405007",
            " ",
            "     \"\"\"",
            "+    return int.from_bytes(raw_bytes, \"big\", signed=False)",
            " ",
            "-    return int(binascii.hexlify(raw_bytes), 16)",
            "-",
            "-",
            "-def _int2bytes(number, block_size=None):",
            "-    r\"\"\"Converts a number to a string of bytes.",
            "-",
            "-    Usage::",
            "-",
            "-        >>> _int2bytes(123456789)",
            "-        b'\\x07[\\xcd\\x15'",
            "-        >>> bytes2int(_int2bytes(123456789))",
            "-        123456789",
            "-",
            "-        >>> _int2bytes(123456789, 6)",
            "-        b'\\x00\\x00\\x07[\\xcd\\x15'",
            "-        >>> bytes2int(_int2bytes(123456789, 128))",
            "-        123456789",
            "-",
            "-        >>> _int2bytes(123456789, 3)",
            "-        Traceback (most recent call last):",
            "-        ...",
            "-        OverflowError: Needed 4 bytes for number, but block size is 3",
            "-",
            "-    @param number: the number to convert",
            "-    @param block_size: the number of bytes to output. If the number encoded to",
            "-        bytes is less than this, the block will be zero-padded. When not given,",
            "-        the returned block is not padded.",
            "-",
            "-    @throws OverflowError when block_size is given and the number takes up more",
            "-        bytes than fit into the block.",
            "-    \"\"\"",
            "-",
            "-    # Type checking",
            "-    if not is_integer(number):",
            "-        raise TypeError(\"You must pass an integer for 'number', not %s\" %",
            "-                        number.__class__)",
            "-",
            "-    if number < 0:",
            "-        raise ValueError('Negative numbers cannot be used: %i' % number)",
            "-",
            "-    # Do some bounds checking",
            "-    if number == 0:",
            "-        needed_bytes = 1",
            "-        raw_bytes = [b'\\x00']",
            "-    else:",
            "-        needed_bytes = common.byte_size(number)",
            "-        raw_bytes = []",
            "-",
            "-    # You cannot compare None > 0 in Python 3x. It will fail with a TypeError.",
            "-    if block_size and block_size > 0:",
            "-        if needed_bytes > block_size:",
            "-            raise OverflowError('Needed %i bytes for number, but block size '",
            "-                                'is %i' % (needed_bytes, block_size))",
            "-",
            "-    # Convert the number to bytes.",
            "-    while number > 0:",
            "-        raw_bytes.insert(0, byte(number & 0xFF))",
            "-        number >>= 8",
            "-",
            "-    # Pad with zeroes to fill the block",
            "-    if block_size and block_size > 0:",
            "-        padding = (block_size - needed_bytes) * b'\\x00'",
            "-    else:",
            "-        padding = b''",
            "-",
            "-    return padding + b''.join(raw_bytes)",
            "-",
            "-",
            "-def bytes_leading(raw_bytes, needle=b'\\x00'):",
            "-    \"\"\"",
            "-    Finds the number of prefixed byte occurrences in the haystack.",
            "-",
            "-    Useful when you want to deal with padding.",
            " ",
            "-    :param raw_bytes:",
            "-        Raw bytes.",
            "-    :param needle:",
            "-        The byte to count. Default \\x00.",
            "-    :returns:",
            "-        The number of leading needle bytes.",
            "+def int2bytes(number: int, fill_size: int = 0) -> bytes:",
            "     \"\"\"",
            "+    Convert an unsigned integer to bytes (big-endian)::",
            " ",
            "-    leading = 0",
            "-    # Indexing keeps compatibility between Python 2.x and Python 3.x",
            "-    _byte = needle[0]",
            "-    for x in raw_bytes:",
            "-        if x == _byte:",
            "-            leading += 1",
            "-        else:",
            "-            break",
            "-    return leading",
            "-",
            "-",
            "-def int2bytes(number, fill_size=None, chunk_size=None, overflow=False):",
            "-    \"\"\"",
            "-    Convert an unsigned integer to bytes (base-256 representation)::",
            "-",
            "-    Does not preserve leading zeros if you don't specify a chunk size or",
            "-    fill size.",
            "-",
            "-    .. NOTE:",
            "-        You must not specify both fill_size and chunk_size. Only one",
            "-        of them is allowed.",
            "+    Does not preserve leading zeros if you don't specify a fill size.",
            " ",
            "     :param number:",
            "         Integer value",
            "     :param fill_size:",
            "         If the optional fill size is given the length of the resulting",
            "         byte string is expected to be the fill size and will be padded",
            "         with prefix zero bytes to satisfy that length.",
            "-    :param chunk_size:",
            "-        If optional chunk size is given and greater than zero, pad the front of",
            "-        the byte string with binary zeros so that the length is a multiple of",
            "-        ``chunk_size``.",
            "-    :param overflow:",
            "-        ``False`` (default). If this is ``True``, no ``OverflowError``",
            "-        will be raised when the fill_size is shorter than the length",
            "-        of the generated byte sequence. Instead the byte sequence will",
            "-        be returned as is.",
            "     :returns:",
            "         Raw bytes (base-256 representation).",
            "     :raises:",
            "         ``OverflowError`` when fill_size is given and the number takes up more",
            "         bytes than fit into the block. This requires the ``overflow``",
            "         argument to this function to be set to ``False`` otherwise, no",
            "         error will be raised.",
            "     \"\"\"",
            " ",
            "     if number < 0:",
            "         raise ValueError(\"Number must be an unsigned integer: %d\" % number)",
            " ",
            "-    if fill_size and chunk_size:",
            "-        raise ValueError(\"You can either fill or pad chunks, but not both\")",
            "-",
            "-    # Ensure these are integers.",
            "-    number & 1",
            "+    bytes_required = max(1, math.ceil(number.bit_length() / 8))",
            " ",
            "-    raw_bytes = b''",
            "+    if fill_size > 0:",
            "+        return number.to_bytes(fill_size, \"big\")",
            " ",
            "-    # Pack the integer one machine word at a time into bytes.",
            "-    num = number",
            "-    word_bits, _, max_uint, pack_type = machine_size.get_word_alignment(num)",
            "-    pack_format = \">%s\" % pack_type",
            "-    while num > 0:",
            "-        raw_bytes = pack(pack_format, num & max_uint) + raw_bytes",
            "-        num >>= word_bits",
            "-    # Obtain the index of the first non-zero byte.",
            "-    zero_leading = bytes_leading(raw_bytes)",
            "-    if number == 0:",
            "-        raw_bytes = b'\\x00'",
            "-    # De-padding.",
            "-    raw_bytes = raw_bytes[zero_leading:]",
            "-",
            "-    length = len(raw_bytes)",
            "-    if fill_size and fill_size > 0:",
            "-        if not overflow and length > fill_size:",
            "-            raise OverflowError(",
            "-                    \"Need %d bytes for number, but fill size is %d\" %",
            "-                    (length, fill_size)",
            "-            )",
            "-        raw_bytes = raw_bytes.rjust(fill_size, b'\\x00')",
            "-    elif chunk_size and chunk_size > 0:",
            "-        remainder = length % chunk_size",
            "-        if remainder:",
            "-            padding_size = chunk_size - remainder",
            "-            raw_bytes = raw_bytes.rjust(length + padding_size, b'\\x00')",
            "-    return raw_bytes",
            "+    return number.to_bytes(bytes_required, \"big\")",
            " ",
            " ",
            "-if __name__ == '__main__':",
            "+if __name__ == \"__main__\":",
            "     import doctest",
            " ",
            "     doctest.testmod()"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/rsa/util.py",
          "change": [
            "--- /home/python-rsa-version-4.3/rsa/util.py",
            "+++ /home/python-rsa-version-4.9/rsa/util.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -12,68 +10,88 @@",
            " #  distributed under the License is distributed on an \"AS IS\" BASIS,",
            " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
            " #  See the License for the specific language governing permissions and",
            " #  limitations under the License.",
            " ",
            " \"\"\"Utility functions.\"\"\"",
            " ",
            "-from __future__ import with_statement, print_function",
            "-",
            " import sys",
            " from optparse import OptionParser",
            " ",
            " import rsa.key",
            " ",
            " ",
            "-def private_to_public():",
            "+def private_to_public() -> None:",
            "     \"\"\"Reads a private key and outputs the corresponding public key.\"\"\"",
            " ",
            "     # Parse the CLI options",
            "-    parser = OptionParser(usage='usage: %prog [options]',",
            "-                          description='Reads a private key and outputs the '",
            "-                                      'corresponding public key. Both private and public keys use '",
            "-                                      'the format described in PKCS#1 v1.5')",
            "-",
            "-    parser.add_option('-i', '--input', dest='infilename', type='string',",
            "-                      help='Input filename. Reads from stdin if not specified')",
            "-    parser.add_option('-o', '--output', dest='outfilename', type='string',",
            "-                      help='Output filename. Writes to stdout of not specified')",
            "-",
            "-    parser.add_option('--inform', dest='inform',",
            "-                      help='key format of input - default PEM',",
            "-                      choices=('PEM', 'DER'), default='PEM')",
            "-",
            "-    parser.add_option('--outform', dest='outform',",
            "-                      help='key format of output - default PEM',",
            "-                      choices=('PEM', 'DER'), default='PEM')",
            "+    parser = OptionParser(",
            "+        usage=\"usage: %prog [options]\",",
            "+        description=\"Reads a private key and outputs the \"",
            "+        \"corresponding public key. Both private and public keys use \"",
            "+        \"the format described in PKCS#1 v1.5\",",
            "+    )",
            "+",
            "+    parser.add_option(",
            "+        \"-i\",",
            "+        \"--input\",",
            "+        dest=\"infilename\",",
            "+        type=\"string\",",
            "+        help=\"Input filename. Reads from stdin if not specified\",",
            "+    )",
            "+    parser.add_option(",
            "+        \"-o\",",
            "+        \"--output\",",
            "+        dest=\"outfilename\",",
            "+        type=\"string\",",
            "+        help=\"Output filename. Writes to stdout of not specified\",",
            "+    )",
            "+",
            "+    parser.add_option(",
            "+        \"--inform\",",
            "+        dest=\"inform\",",
            "+        help=\"key format of input - default PEM\",",
            "+        choices=(\"PEM\", \"DER\"),",
            "+        default=\"PEM\",",
            "+    )",
            "+",
            "+    parser.add_option(",
            "+        \"--outform\",",
            "+        dest=\"outform\",",
            "+        help=\"key format of output - default PEM\",",
            "+        choices=(\"PEM\", \"DER\"),",
            "+        default=\"PEM\",",
            "+    )",
            " ",
            "     (cli, cli_args) = parser.parse_args(sys.argv)",
            " ",
            "     # Read the input data",
            "     if cli.infilename:",
            "-        print('Reading private key from %s in %s format' %",
            "-              (cli.infilename, cli.inform), file=sys.stderr)",
            "-        with open(cli.infilename, 'rb') as infile:",
            "+        print(",
            "+            \"Reading private key from %s in %s format\" % (cli.infilename, cli.inform),",
            "+            file=sys.stderr,",
            "+        )",
            "+        with open(cli.infilename, \"rb\") as infile:",
            "             in_data = infile.read()",
            "     else:",
            "-        print('Reading private key from stdin in %s format' % cli.inform,",
            "-              file=sys.stderr)",
            "-        in_data = sys.stdin.read().encode('ascii')",
            "+        print(\"Reading private key from stdin in %s format\" % cli.inform, file=sys.stderr)",
            "+        in_data = sys.stdin.read().encode(\"ascii\")",
            " ",
            "     assert type(in_data) == bytes, type(in_data)",
            " ",
            "     # Take the public fields and create a public key",
            "     priv_key = rsa.key.PrivateKey.load_pkcs1(in_data, cli.inform)",
            "     pub_key = rsa.key.PublicKey(priv_key.n, priv_key.e)",
            " ",
            "     # Save to the output file",
            "     out_data = pub_key.save_pkcs1(cli.outform)",
            " ",
            "     if cli.outfilename:",
            "-        print('Writing public key to %s in %s format' %",
            "-              (cli.outfilename, cli.outform), file=sys.stderr)",
            "-        with open(cli.outfilename, 'wb') as outfile:",
            "+        print(",
            "+            \"Writing public key to %s in %s format\" % (cli.outfilename, cli.outform),",
            "+            file=sys.stderr,",
            "+        )",
            "+        with open(cli.outfilename, \"wb\") as outfile:",
            "             outfile.write(out_data)",
            "     else:",
            "-        print('Writing public key to stdout in %s format' % cli.outform,",
            "-              file=sys.stderr)",
            "-        sys.stdout.write(out_data.decode('ascii'))",
            "+        print(\"Writing public key to stdout in %s format\" % cli.outform, file=sys.stderr)",
            "+        sys.stdout.write(out_data.decode(\"ascii\"))"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_cli.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_cli.py",
            "+++ /home/python-rsa-version-4.9/tests/test_cli.py",
            "@@ -1,54 +1,44 @@",
            " \"\"\"",
            " Unit tests for CLI entry points.",
            " \"\"\"",
            " ",
            " from __future__ import print_function",
            " ",
            "-import unittest",
            "-import sys",
            " import functools",
            "-from contextlib import contextmanager",
            "-",
            "+import io",
            " import os",
            "-from io import StringIO, BytesIO",
            "+import sys",
            "+import typing",
            "+import unittest",
            "+from contextlib import contextmanager, redirect_stdout, redirect_stderr",
            " ",
            " import rsa",
            " import rsa.cli",
            " import rsa.util",
            "-from rsa._compat import PY2",
            "-",
            "-",
            "-def make_buffer():",
            "-    if PY2:",
            "-        return BytesIO()",
            "-    buf = StringIO()",
            "-    buf.buffer = BytesIO()",
            "-    return buf",
            "-",
            "-",
            "-def get_bytes_out(out):",
            "-    if PY2:",
            "-        # Python 2.x writes 'str' to stdout",
            "-        return out.getvalue()",
            "-    # Python 3.x writes 'bytes' to stdout.buffer",
            "-    return out.buffer.getvalue()",
            " ",
            " ",
            " @contextmanager",
            "-def captured_output():",
            "+def captured_output() -> typing.Generator:",
            "     \"\"\"Captures output to stdout and stderr\"\"\"",
            " ",
            "-    new_out, new_err = make_buffer(), make_buffer()",
            "-    old_out, old_err = sys.stdout, sys.stderr",
            "-    try:",
            "-        sys.stdout, sys.stderr = new_out, new_err",
            "-        yield new_out, new_err",
            "-    finally:",
            "-        sys.stdout, sys.stderr = old_out, old_err",
            "+    # According to mypy, we're not supposed to change buf_out.buffer.",
            "+    # However, this is just a test, and it works, hence the 'type: ignore'.",
            "+    buf_out = io.StringIO()",
            "+    buf_out.buffer = io.BytesIO()  # type: ignore",
            "+",
            "+    buf_err = io.StringIO()",
            "+    buf_err.buffer = io.BytesIO()  # type: ignore",
            "+",
            "+    with redirect_stdout(buf_out), redirect_stderr(buf_err):",
            "+        yield buf_out, buf_err",
            "+",
            "+",
            "+def get_bytes_out(buf) -> bytes:",
            "+    return buf.buffer.getvalue()",
            " ",
            " ",
            " @contextmanager",
            " def cli_args(*new_argv):",
            "     \"\"\"Updates sys.argv[1:] for a single test.\"\"\"",
            " ",
            "     old_args = sys.argv[:]",
            "@@ -89,208 +79,213 @@",
            " ",
            " ",
            " class AbstractCliTest(unittest.TestCase):",
            "     @classmethod",
            "     def setUpClass(cls):",
            "         # Ensure there is a key to use",
            "         cls.pub_key, cls.priv_key = rsa.newkeys(512)",
            "-        cls.pub_fname = '%s.pub' % cls.__name__",
            "-        cls.priv_fname = '%s.key' % cls.__name__",
            "+        cls.pub_fname = \"%s.pub\" % cls.__name__",
            "+        cls.priv_fname = \"%s.key\" % cls.__name__",
            " ",
            "-        with open(cls.pub_fname, 'wb') as outfile:",
            "+        with open(cls.pub_fname, \"wb\") as outfile:",
            "             outfile.write(cls.pub_key.save_pkcs1())",
            " ",
            "-        with open(cls.priv_fname, 'wb') as outfile:",
            "+        with open(cls.priv_fname, \"wb\") as outfile:",
            "             outfile.write(cls.priv_key.save_pkcs1())",
            " ",
            "     @classmethod",
            "     def tearDownClass(cls):",
            "-        if hasattr(cls, 'pub_fname'):",
            "+        if hasattr(cls, \"pub_fname\"):",
            "             remove_if_exists(cls.pub_fname)",
            "-        if hasattr(cls, 'priv_fname'):",
            "+        if hasattr(cls, \"priv_fname\"):",
            "             remove_if_exists(cls.priv_fname)",
            " ",
            "     def assertExits(self, status_code, func, *args, **kwargs):",
            "         try:",
            "             func(*args, **kwargs)",
            "         except SystemExit as ex:",
            "             if status_code == ex.code:",
            "                 return",
            "-            self.fail('SystemExit() raised by %r, but exited with code %r, expected %r' % (",
            "-                func, ex.code, status_code))",
            "+            self.fail(",
            "+                \"SystemExit() raised by %r, but exited with code %r, expected %r\"",
            "+                % (func, ex.code, status_code)",
            "+            )",
            "         else:",
            "-            self.fail('SystemExit() not raised by %r' % func)",
            "+            self.fail(\"SystemExit() not raised by %r\" % func)",
            " ",
            " ",
            " class KeygenTest(AbstractCliTest):",
            "     def test_keygen_no_args(self):",
            "-        with cli_args():",
            "+        with captured_output(), cli_args():",
            "             self.assertExits(1, rsa.cli.keygen)",
            " ",
            "     def test_keygen_priv_stdout(self):",
            "         with captured_output() as (out, err):",
            "             with cli_args(128):",
            "                 rsa.cli.keygen()",
            " ",
            "         lines = get_bytes_out(out).splitlines()",
            "-        self.assertEqual(b'-----BEGIN RSA PRIVATE KEY-----', lines[0])",
            "-        self.assertEqual(b'-----END RSA PRIVATE KEY-----', lines[-1])",
            "+        self.assertEqual(b\"-----BEGIN RSA PRIVATE KEY-----\", lines[0])",
            "+        self.assertEqual(b\"-----END RSA PRIVATE KEY-----\", lines[-1])",
            " ",
            "         # The key size should be shown on stderr",
            "-        self.assertTrue('128-bit key' in err.getvalue())",
            "+        self.assertTrue(\"128-bit key\" in err.getvalue())",
            " ",
            "-    @cleanup_files('test_cli_privkey_out.pem')",
            "+    @cleanup_files(\"test_cli_privkey_out.pem\")",
            "     def test_keygen_priv_out_pem(self):",
            "         with captured_output() as (out, err):",
            "-            with cli_args('--out=test_cli_privkey_out.pem', '--form=PEM', 128):",
            "+            with cli_args(\"--out=test_cli_privkey_out.pem\", \"--form=PEM\", 128):",
            "                 rsa.cli.keygen()",
            " ",
            "         # The key size should be shown on stderr",
            "-        self.assertTrue('128-bit key' in err.getvalue())",
            "+        self.assertTrue(\"128-bit key\" in err.getvalue())",
            " ",
            "         # The output file should be shown on stderr",
            "-        self.assertTrue('test_cli_privkey_out.pem' in err.getvalue())",
            "+        self.assertTrue(\"test_cli_privkey_out.pem\" in err.getvalue())",
            " ",
            "         # If we can load the file as PEM, it's good enough.",
            "-        with open('test_cli_privkey_out.pem', 'rb') as pemfile:",
            "+        with open(\"test_cli_privkey_out.pem\", \"rb\") as pemfile:",
            "             rsa.PrivateKey.load_pkcs1(pemfile.read())",
            " ",
            "-    @cleanup_files('test_cli_privkey_out.der')",
            "+    @cleanup_files(\"test_cli_privkey_out.der\")",
            "     def test_keygen_priv_out_der(self):",
            "         with captured_output() as (out, err):",
            "-            with cli_args('--out=test_cli_privkey_out.der', '--form=DER', 128):",
            "+            with cli_args(\"--out=test_cli_privkey_out.der\", \"--form=DER\", 128):",
            "                 rsa.cli.keygen()",
            " ",
            "         # The key size should be shown on stderr",
            "-        self.assertTrue('128-bit key' in err.getvalue())",
            "+        self.assertTrue(\"128-bit key\" in err.getvalue())",
            " ",
            "         # The output file should be shown on stderr",
            "-        self.assertTrue('test_cli_privkey_out.der' in err.getvalue())",
            "+        self.assertTrue(\"test_cli_privkey_out.der\" in err.getvalue())",
            " ",
            "         # If we can load the file as der, it's good enough.",
            "-        with open('test_cli_privkey_out.der', 'rb') as derfile:",
            "-            rsa.PrivateKey.load_pkcs1(derfile.read(), format='DER')",
            "+        with open(\"test_cli_privkey_out.der\", \"rb\") as derfile:",
            "+            rsa.PrivateKey.load_pkcs1(derfile.read(), format=\"DER\")",
            " ",
            "-    @cleanup_files('test_cli_privkey_out.pem', 'test_cli_pubkey_out.pem')",
            "+    @cleanup_files(\"test_cli_privkey_out.pem\", \"test_cli_pubkey_out.pem\")",
            "     def test_keygen_pub_out_pem(self):",
            "         with captured_output() as (out, err):",
            "-            with cli_args('--out=test_cli_privkey_out.pem',",
            "-                          '--pubout=test_cli_pubkey_out.pem',",
            "-                          '--form=PEM', 256):",
            "+            with cli_args(",
            "+                \"--out=test_cli_privkey_out.pem\",",
            "+                \"--pubout=test_cli_pubkey_out.pem\",",
            "+                \"--form=PEM\",",
            "+                256,",
            "+            ):",
            "                 rsa.cli.keygen()",
            " ",
            "         # The key size should be shown on stderr",
            "-        self.assertTrue('256-bit key' in err.getvalue())",
            "+        self.assertTrue(\"256-bit key\" in err.getvalue())",
            " ",
            "         # The output files should be shown on stderr",
            "-        self.assertTrue('test_cli_privkey_out.pem' in err.getvalue())",
            "-        self.assertTrue('test_cli_pubkey_out.pem' in err.getvalue())",
            "+        self.assertTrue(\"test_cli_privkey_out.pem\" in err.getvalue())",
            "+        self.assertTrue(\"test_cli_pubkey_out.pem\" in err.getvalue())",
            " ",
            "         # If we can load the file as PEM, it's good enough.",
            "-        with open('test_cli_pubkey_out.pem', 'rb') as pemfile:",
            "+        with open(\"test_cli_pubkey_out.pem\", \"rb\") as pemfile:",
            "             rsa.PublicKey.load_pkcs1(pemfile.read())",
            " ",
            " ",
            " class EncryptDecryptTest(AbstractCliTest):",
            "     def test_empty_decrypt(self):",
            "-        with cli_args():",
            "+        with captured_output(), cli_args():",
            "             self.assertExits(1, rsa.cli.decrypt)",
            " ",
            "     def test_empty_encrypt(self):",
            "-        with cli_args():",
            "+        with captured_output(), cli_args():",
            "             self.assertExits(1, rsa.cli.encrypt)",
            " ",
            "-    @cleanup_files('encrypted.txt', 'cleartext.txt')",
            "+    @cleanup_files(\"encrypted.txt\", \"cleartext.txt\")",
            "     def test_encrypt_decrypt(self):",
            "-        with open('cleartext.txt', 'wb') as outfile:",
            "-            outfile.write(b'Hello cleartext RSA users!')",
            "+        with open(\"cleartext.txt\", \"wb\") as outfile:",
            "+            outfile.write(b\"Hello cleartext RSA users!\")",
            " ",
            "-        with cli_args('-i', 'cleartext.txt', '--out=encrypted.txt', self.pub_fname):",
            "+        with cli_args(\"-i\", \"cleartext.txt\", \"--out=encrypted.txt\", self.pub_fname):",
            "             with captured_output():",
            "                 rsa.cli.encrypt()",
            " ",
            "-        with cli_args('-i', 'encrypted.txt', self.priv_fname):",
            "+        with cli_args(\"-i\", \"encrypted.txt\", self.priv_fname):",
            "             with captured_output() as (out, err):",
            "                 rsa.cli.decrypt()",
            " ",
            "         # We should have the original cleartext on stdout now.",
            "         output = get_bytes_out(out)",
            "-        self.assertEqual(b'Hello cleartext RSA users!', output)",
            "+        self.assertEqual(b\"Hello cleartext RSA users!\", output)",
            " ",
            "-    @cleanup_files('encrypted.txt', 'cleartext.txt')",
            "+    @cleanup_files(\"encrypted.txt\", \"cleartext.txt\")",
            "     def test_encrypt_decrypt_unhappy(self):",
            "-        with open('cleartext.txt', 'wb') as outfile:",
            "-            outfile.write(b'Hello cleartext RSA users!')",
            "+        with open(\"cleartext.txt\", \"wb\") as outfile:",
            "+            outfile.write(b\"Hello cleartext RSA users!\")",
            " ",
            "-        with cli_args('-i', 'cleartext.txt', '--out=encrypted.txt', self.pub_fname):",
            "+        with cli_args(\"-i\", \"cleartext.txt\", \"--out=encrypted.txt\", self.pub_fname):",
            "             with captured_output():",
            "                 rsa.cli.encrypt()",
            " ",
            "         # Change a few bytes in the encrypted stream.",
            "-        with open('encrypted.txt', 'r+b') as encfile:",
            "+        with open(\"encrypted.txt\", \"r+b\") as encfile:",
            "             encfile.seek(40)",
            "-            encfile.write(b'hahaha')",
            "+            encfile.write(b\"hahaha\")",
            " ",
            "-        with cli_args('-i', 'encrypted.txt', self.priv_fname):",
            "+        with cli_args(\"-i\", \"encrypted.txt\", self.priv_fname):",
            "             with captured_output() as (out, err):",
            "                 self.assertRaises(rsa.DecryptionError, rsa.cli.decrypt)",
            " ",
            " ",
            " class SignVerifyTest(AbstractCliTest):",
            "     def test_empty_verify(self):",
            "-        with cli_args():",
            "+        with captured_output(), cli_args():",
            "             self.assertExits(1, rsa.cli.verify)",
            " ",
            "     def test_empty_sign(self):",
            "-        with cli_args():",
            "+        with captured_output(), cli_args():",
            "             self.assertExits(1, rsa.cli.sign)",
            " ",
            "-    @cleanup_files('signature.txt', 'cleartext.txt')",
            "+    @cleanup_files(\"signature.txt\", \"cleartext.txt\")",
            "     def test_sign_verify(self):",
            "-        with open('cleartext.txt', 'wb') as outfile:",
            "-            outfile.write(b'Hello RSA users!')",
            "+        with open(\"cleartext.txt\", \"wb\") as outfile:",
            "+            outfile.write(b\"Hello RSA users!\")",
            " ",
            "-        with cli_args('-i', 'cleartext.txt', '--out=signature.txt', self.priv_fname, 'SHA-256'):",
            "+        with cli_args(\"-i\", \"cleartext.txt\", \"--out=signature.txt\", self.priv_fname, \"SHA-256\"):",
            "             with captured_output():",
            "                 rsa.cli.sign()",
            " ",
            "-        with cli_args('-i', 'cleartext.txt', self.pub_fname, 'signature.txt'):",
            "+        with cli_args(\"-i\", \"cleartext.txt\", self.pub_fname, \"signature.txt\"):",
            "             with captured_output() as (out, err):",
            "                 rsa.cli.verify()",
            " ",
            "-        self.assertFalse(b'Verification OK' in get_bytes_out(out))",
            "+        self.assertFalse(b\"Verification OK\" in get_bytes_out(out))",
            " ",
            "-    @cleanup_files('signature.txt', 'cleartext.txt')",
            "+    @cleanup_files(\"signature.txt\", \"cleartext.txt\")",
            "     def test_sign_verify_unhappy(self):",
            "-        with open('cleartext.txt', 'wb') as outfile:",
            "-            outfile.write(b'Hello RSA users!')",
            "+        with open(\"cleartext.txt\", \"wb\") as outfile:",
            "+            outfile.write(b\"Hello RSA users!\")",
            " ",
            "-        with cli_args('-i', 'cleartext.txt', '--out=signature.txt', self.priv_fname, 'SHA-256'):",
            "+        with cli_args(\"-i\", \"cleartext.txt\", \"--out=signature.txt\", self.priv_fname, \"SHA-256\"):",
            "             with captured_output():",
            "                 rsa.cli.sign()",
            " ",
            "         # Change a few bytes in the cleartext file.",
            "-        with open('cleartext.txt', 'r+b') as encfile:",
            "+        with open(\"cleartext.txt\", \"r+b\") as encfile:",
            "             encfile.seek(6)",
            "-            encfile.write(b'DSA')",
            "+            encfile.write(b\"DSA\")",
            " ",
            "-        with cli_args('-i', 'cleartext.txt', self.pub_fname, 'signature.txt'):",
            "+        with cli_args(\"-i\", \"cleartext.txt\", self.pub_fname, \"signature.txt\"):",
            "             with captured_output() as (out, err):",
            "-                self.assertExits('Verification failed.', rsa.cli.verify)",
            "+                self.assertExits(\"Verification failed.\", rsa.cli.verify)",
            " ",
            " ",
            " class PrivatePublicTest(AbstractCliTest):",
            "     \"\"\"Test CLI command to convert a private to a public key.\"\"\"",
            " ",
            "-    @cleanup_files('test_private_to_public.pem')",
            "+    @cleanup_files(\"test_private_to_public.pem\")",
            "     def test_private_to_public(self):",
            " ",
            "-        with cli_args('-i', self.priv_fname, '-o', 'test_private_to_public.pem'):",
            "+        with cli_args(\"-i\", self.priv_fname, \"-o\", \"test_private_to_public.pem\"):",
            "             with captured_output():",
            "                 rsa.util.private_to_public()",
            " ",
            "         # Check that the key is indeed valid.",
            "-        with open('test_private_to_public.pem', 'rb') as pemfile:",
            "+        with open(\"test_private_to_public.pem\", \"rb\") as pemfile:",
            "             key = rsa.PublicKey.load_pkcs1(pemfile.read())",
            " ",
            "         self.assertEqual(self.priv_key.n, key.n)",
            "         self.assertEqual(self.priv_key.e, key.e)"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_common.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_common.py",
            "+++ /home/python-rsa-version-4.9/tests/test_common.py",
            "@@ -1,10 +1,8 @@",
            " #!/usr/bin/env python",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -13,42 +11,31 @@",
            " #  distributed under the License is distributed on an \"AS IS\" BASIS,",
            " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
            " #  See the License for the specific language governing permissions and",
            " #  limitations under the License.",
            " ",
            " import unittest",
            " import struct",
            "-from rsa._compat import byte",
            " from rsa.common import byte_size, bit_size, inverse",
            " ",
            " ",
            "-class TestByte(unittest.TestCase):",
            "-    def test_values(self):",
            "-        self.assertEqual(byte(0), b'\\x00')",
            "-        self.assertEqual(byte(255), b'\\xff')",
            "-",
            "-    def test_struct_error_when_out_of_bounds(self):",
            "-        self.assertRaises(struct.error, byte, 256)",
            "-        self.assertRaises(struct.error, byte, -1)",
            "-",
            "-",
            " class TestByteSize(unittest.TestCase):",
            "     def test_values(self):",
            "         self.assertEqual(byte_size(1 << 1023), 128)",
            "         self.assertEqual(byte_size((1 << 1024) - 1), 128)",
            "         self.assertEqual(byte_size(1 << 1024), 129)",
            "         self.assertEqual(byte_size(255), 1)",
            "         self.assertEqual(byte_size(256), 2)",
            "-        self.assertEqual(byte_size(0xffff), 2)",
            "-        self.assertEqual(byte_size(0xffffff), 3)",
            "-        self.assertEqual(byte_size(0xffffffff), 4)",
            "-        self.assertEqual(byte_size(0xffffffffff), 5)",
            "-        self.assertEqual(byte_size(0xffffffffffff), 6)",
            "-        self.assertEqual(byte_size(0xffffffffffffff), 7)",
            "-        self.assertEqual(byte_size(0xffffffffffffffff), 8)",
            "+        self.assertEqual(byte_size(0xFFFF), 2)",
            "+        self.assertEqual(byte_size(0xFFFFFF), 3)",
            "+        self.assertEqual(byte_size(0xFFFFFFFF), 4)",
            "+        self.assertEqual(byte_size(0xFFFFFFFFFF), 5)",
            "+        self.assertEqual(byte_size(0xFFFFFFFFFFFF), 6)",
            "+        self.assertEqual(byte_size(0xFFFFFFFFFFFFFF), 7)",
            "+        self.assertEqual(byte_size(0xFFFFFFFFFFFFFFFF), 8)",
            " ",
            "     def test_zero(self):",
            "         self.assertEqual(byte_size(0), 1)",
            " ",
            "     def test_bad_type(self):",
            "         self.assertRaises(TypeError, byte_size, [])",
            "         self.assertRaises(TypeError, byte_size, ())"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_integers.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_integers.py",
            "+++ /home/python-rsa-version-4.9/tests/test_integers.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -24,27 +22,27 @@",
            " ",
            " class IntegerTest(unittest.TestCase):",
            "     def setUp(self):",
            "         (self.pub, self.priv) = rsa.newkeys(64)",
            " ",
            "     def test_enc_dec(self):",
            "         message = 42",
            "-        print(\"\\tMessage:   %d\" % message)",
            "+        print(\"\\n\\tMessage:   %d\" % message)",
            " ",
            "         encrypted = rsa.core.encrypt_int(message, self.pub.e, self.pub.n)",
            "         print(\"\\tEncrypted: %d\" % encrypted)",
            " ",
            "         decrypted = rsa.core.decrypt_int(encrypted, self.priv.d, self.pub.n)",
            "         print(\"\\tDecrypted: %d\" % decrypted)",
            " ",
            "         self.assertEqual(message, decrypted)",
            " ",
            "     def test_sign_verify(self):",
            "         message = 42",
            " ",
            "         signed = rsa.core.encrypt_int(message, self.priv.d, self.pub.n)",
            "-        print(\"\\tSigned:    %d\" % signed)",
            "+        print(\"\\n\\tSigned:    %d\" % signed)",
            " ",
            "         verified = rsa.core.decrypt_int(signed, self.pub.e, self.pub.n)",
            "         print(\"\\tVerified:  %d\" % verified)",
            " ",
            "         self.assertEqual(message, verified)"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_key.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_key.py",
            "+++ /home/python-rsa-version-4.9/tests/test_key.py",
            "@@ -17,30 +17,39 @@",
            "         \"\"\"",
            " ",
            "         pk = rsa.key.PrivateKey(3727264081, 65537, 3349121513, 65063, 57287)",
            " ",
            "         message = 12345",
            "         encrypted = rsa.core.encrypt_int(message, pk.e, pk.n)",
            " ",
            "-        blinded = pk.blind(encrypted, 4134431)  # blind before decrypting",
            "-        decrypted = rsa.core.decrypt_int(blinded, pk.d, pk.n)",
            "-        unblinded = pk.unblind(decrypted, 4134431)",
            "-",
            "-        self.assertEqual(unblinded, message)",
            "+        blinded_1, unblind_1 = pk.blind(encrypted)  # blind before decrypting",
            "+        decrypted = rsa.core.decrypt_int(blinded_1, pk.d, pk.n)",
            "+        unblinded_1 = pk.unblind(decrypted, unblind_1)",
            "+",
            "+        self.assertEqual(unblinded_1, message)",
            "+",
            "+        # Re-blinding should use a different blinding factor.",
            "+        blinded_2, unblind_2 = pk.blind(encrypted)  # blind before decrypting",
            "+        self.assertNotEqual(blinded_1, blinded_2)",
            "+",
            "+        # The unblinding should still work, though.",
            "+        decrypted = rsa.core.decrypt_int(blinded_2, pk.d, pk.n)",
            "+        unblinded_2 = pk.unblind(decrypted, unblind_2)",
            "+        self.assertEqual(unblinded_2, message)",
            " ",
            " ",
            " class KeyGenTest(unittest.TestCase):",
            "     def test_custom_exponent(self):",
            "-        priv, pub = rsa.key.newkeys(16, exponent=3)",
            "+        pub, priv = rsa.key.newkeys(16, exponent=3)",
            " ",
            "         self.assertEqual(3, priv.e)",
            "         self.assertEqual(3, pub.e)",
            " ",
            "     def test_default_exponent(self):",
            "-        priv, pub = rsa.key.newkeys(16)",
            "+        pub, priv = rsa.key.newkeys(16)",
            " ",
            "         self.assertEqual(0x10001, priv.e)",
            "         self.assertEqual(0x10001, pub.e)",
            " ",
            "     def test_exponents_coefficient_calculation(self):",
            "         pk = rsa.key.PrivateKey(3727264081, 65537, 3349121513, 65063, 57287)",
            " ",
            "@@ -56,24 +65,23 @@",
            " ",
            "         def getprime(_):",
            "             return primes.pop(0)",
            " ",
            "         # This exponent will cause two other primes to be generated.",
            "         exponent = 136407",
            " ",
            "-        (p, q, e, d) = rsa.key.gen_keys(64,",
            "-                                        accurate=False,",
            "-                                        getprime_func=getprime,",
            "-                                        exponent=exponent)",
            "+        (p, q, e, d) = rsa.key.gen_keys(",
            "+            64, accurate=False, getprime_func=getprime, exponent=exponent",
            "+        )",
            "         self.assertEqual(39317, p)",
            "         self.assertEqual(33107, q)",
            " ",
            " ",
            " class HashTest(unittest.TestCase):",
            "     \"\"\"Test hashing of keys\"\"\"",
            " ",
            "     def test_hash_possible(self):",
            "-        priv, pub = rsa.key.newkeys(16)",
            "+        pub, priv = rsa.key.newkeys(16)",
            " ",
            "         # This raises a TypeError when hashing isn't possible.",
            "         hash(priv)",
            "         hash(pub)"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_load_save_keys.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_load_save_keys.py",
            "+++ /home/python-rsa-version-4.9/tests/test_load_save_keys.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -13,186 +11,201 @@",
            " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
            " #  See the License for the specific language governing permissions and",
            " #  limitations under the License.",
            " ",
            " \"\"\"Unittest for saving and loading keys.\"\"\"",
            " ",
            " import base64",
            "-import mock",
            " import os.path",
            " import pickle",
            " import unittest",
            " import warnings",
            "+from unittest import mock",
            " ",
            "-from rsa._compat import range",
            " import rsa.key",
            " ",
            "-B64PRIV_DER = b'MC4CAQACBQDeKYlRAgMBAAECBQDHn4npAgMA/icCAwDfxwIDANcXAgInbwIDAMZt'",
            "+B64PRIV_DER = b\"MC4CAQACBQDeKYlRAgMBAAECBQDHn4npAgMA/icCAwDfxwIDANcXAgInbwIDAMZt\"",
            " PRIVATE_DER = base64.standard_b64decode(B64PRIV_DER)",
            " ",
            "-B64PUB_DER = b'MAwCBQDeKYlRAgMBAAE='",
            "+B64PUB_DER = b\"MAwCBQDeKYlRAgMBAAE=\"",
            " PUBLIC_DER = base64.standard_b64decode(B64PUB_DER)",
            " ",
            "-PRIVATE_PEM = b'''\\",
            "+PRIVATE_PEM = (",
            "+    b\"\"\"\\",
            " -----BEGIN CONFUSING STUFF-----",
            " Cruft before the key",
            " ",
            " -----BEGIN RSA PRIVATE KEY-----",
            " Comment: something blah",
            " ",
            "-''' + B64PRIV_DER + b'''",
            "+\"\"\"",
            "+    + B64PRIV_DER",
            "+    + b\"\"\"",
            " -----END RSA PRIVATE KEY-----",
            " ",
            " Stuff after the key",
            " -----END CONFUSING STUFF-----",
            "-'''",
            "+\"\"\"",
            "+)",
            " ",
            "-CLEAN_PRIVATE_PEM = b'''\\",
            "+CLEAN_PRIVATE_PEM = (",
            "+    b\"\"\"\\",
            " -----BEGIN RSA PRIVATE KEY-----",
            "-''' + B64PRIV_DER + b'''",
            "+\"\"\"",
            "+    + B64PRIV_DER",
            "+    + b\"\"\"",
            " -----END RSA PRIVATE KEY-----",
            "-'''",
            "+\"\"\"",
            "+)",
            " ",
            "-PUBLIC_PEM = b'''\\",
            "+PUBLIC_PEM = (",
            "+    b\"\"\"\\",
            " -----BEGIN CONFUSING STUFF-----",
            " Cruft before the key",
            " ",
            " -----BEGIN RSA PUBLIC KEY-----",
            " Comment: something blah",
            " ",
            "-''' + B64PUB_DER + b'''",
            "+\"\"\"",
            "+    + B64PUB_DER",
            "+    + b\"\"\"",
            " -----END RSA PUBLIC KEY-----",
            " ",
            " Stuff after the key",
            " -----END CONFUSING STUFF-----",
            "-'''",
            "+\"\"\"",
            "+)",
            " ",
            "-CLEAN_PUBLIC_PEM = b'''\\",
            "+CLEAN_PUBLIC_PEM = (",
            "+    b\"\"\"\\",
            " -----BEGIN RSA PUBLIC KEY-----",
            "-''' + B64PUB_DER + b'''",
            "+\"\"\"",
            "+    + B64PUB_DER",
            "+    + b\"\"\"",
            " -----END RSA PUBLIC KEY-----",
            "-'''",
            "+\"\"\"",
            "+)",
            " ",
            " ",
            " class DerTest(unittest.TestCase):",
            "     \"\"\"Test saving and loading DER keys.\"\"\"",
            " ",
            "     def test_load_private_key(self):",
            "         \"\"\"Test loading private DER keys.\"\"\"",
            " ",
            "-        key = rsa.key.PrivateKey.load_pkcs1(PRIVATE_DER, 'DER')",
            "+        key = rsa.key.PrivateKey.load_pkcs1(PRIVATE_DER, \"DER\")",
            "         expected = rsa.key.PrivateKey(3727264081, 65537, 3349121513, 65063, 57287)",
            " ",
            "         self.assertEqual(expected, key)",
            "         self.assertEqual(key.exp1, 55063)",
            "         self.assertEqual(key.exp2, 10095)",
            "         self.assertEqual(key.coef, 50797)",
            " ",
            "-    @mock.patch('pyasn1.codec.der.decoder.decode')",
            "+    @mock.patch(\"pyasn1.codec.der.decoder.decode\")",
            "     def test_load_malformed_private_key(self, der_decode):",
            "         \"\"\"Test loading malformed private DER keys.\"\"\"",
            " ",
            "         # Decode returns an invalid exp2 value.",
            "         der_decode.return_value = (",
            "             [0, 3727264081, 65537, 3349121513, 65063, 57287, 55063, 0, 50797],",
            "             0,",
            "         )",
            " ",
            "         with warnings.catch_warnings(record=True) as w:",
            "             # Always print warnings",
            "-            warnings.simplefilter('always')",
            "+            warnings.simplefilter(\"always\")",
            " ",
            "             # Load 3 keys",
            "             for _ in range(3):",
            "-                key = rsa.key.PrivateKey.load_pkcs1(PRIVATE_DER, 'DER')",
            "+                key = rsa.key.PrivateKey.load_pkcs1(PRIVATE_DER, \"DER\")",
            " ",
            "             # Check that 3 warnings were generated.",
            "             self.assertEqual(3, len(w))",
            " ",
            "             for warning in w:",
            "                 self.assertTrue(issubclass(warning.category, UserWarning))",
            "-                self.assertIn('malformed', str(warning.message))",
            "+                self.assertIn(\"malformed\", str(warning.message))",
            " ",
            "         # Check that we are creating the key with correct values",
            "         self.assertEqual(key.exp1, 55063)",
            "         self.assertEqual(key.exp2, 10095)",
            "         self.assertEqual(key.coef, 50797)",
            " ",
            "     def test_save_private_key(self):",
            "         \"\"\"Test saving private DER keys.\"\"\"",
            " ",
            "         key = rsa.key.PrivateKey(3727264081, 65537, 3349121513, 65063, 57287)",
            "-        der = key.save_pkcs1('DER')",
            "+        der = key.save_pkcs1(\"DER\")",
            " ",
            "         self.assertIsInstance(der, bytes)",
            "         self.assertEqual(PRIVATE_DER, der)",
            " ",
            "     def test_load_public_key(self):",
            "         \"\"\"Test loading public DER keys.\"\"\"",
            " ",
            "-        key = rsa.key.PublicKey.load_pkcs1(PUBLIC_DER, 'DER')",
            "+        key = rsa.key.PublicKey.load_pkcs1(PUBLIC_DER, \"DER\")",
            "         expected = rsa.key.PublicKey(3727264081, 65537)",
            " ",
            "         self.assertEqual(expected, key)",
            " ",
            "     def test_save_public_key(self):",
            "         \"\"\"Test saving public DER keys.\"\"\"",
            " ",
            "         key = rsa.key.PublicKey(3727264081, 65537)",
            "-        der = key.save_pkcs1('DER')",
            "+        der = key.save_pkcs1(\"DER\")",
            " ",
            "         self.assertIsInstance(der, bytes)",
            "         self.assertEqual(PUBLIC_DER, der)",
            " ",
            " ",
            " class PemTest(unittest.TestCase):",
            "     \"\"\"Test saving and loading PEM keys.\"\"\"",
            " ",
            "     def test_load_private_key(self):",
            "         \"\"\"Test loading private PEM files.\"\"\"",
            " ",
            "-        key = rsa.key.PrivateKey.load_pkcs1(PRIVATE_PEM, 'PEM')",
            "+        key = rsa.key.PrivateKey.load_pkcs1(PRIVATE_PEM, \"PEM\")",
            "         expected = rsa.key.PrivateKey(3727264081, 65537, 3349121513, 65063, 57287)",
            " ",
            "         self.assertEqual(expected, key)",
            "         self.assertEqual(key.exp1, 55063)",
            "         self.assertEqual(key.exp2, 10095)",
            "         self.assertEqual(key.coef, 50797)",
            " ",
            "     def test_save_private_key(self):",
            "         \"\"\"Test saving private PEM files.\"\"\"",
            " ",
            "         key = rsa.key.PrivateKey(3727264081, 65537, 3349121513, 65063, 57287)",
            "-        pem = key.save_pkcs1('PEM')",
            "+        pem = key.save_pkcs1(\"PEM\")",
            " ",
            "         self.assertIsInstance(pem, bytes)",
            "         self.assertEqual(CLEAN_PRIVATE_PEM, pem)",
            " ",
            "     def test_load_public_key(self):",
            "         \"\"\"Test loading public PEM files.\"\"\"",
            " ",
            "-        key = rsa.key.PublicKey.load_pkcs1(PUBLIC_PEM, 'PEM')",
            "+        key = rsa.key.PublicKey.load_pkcs1(PUBLIC_PEM, \"PEM\")",
            "         expected = rsa.key.PublicKey(3727264081, 65537)",
            " ",
            "         self.assertEqual(expected, key)",
            " ",
            "     def test_save_public_key(self):",
            "         \"\"\"Test saving public PEM files.\"\"\"",
            " ",
            "         key = rsa.key.PublicKey(3727264081, 65537)",
            "-        pem = key.save_pkcs1('PEM')",
            "+        pem = key.save_pkcs1(\"PEM\")",
            " ",
            "         self.assertIsInstance(pem, bytes)",
            "         self.assertEqual(CLEAN_PUBLIC_PEM, pem)",
            " ",
            "     def test_load_from_disk(self):",
            "         \"\"\"Test loading a PEM file from disk.\"\"\"",
            " ",
            "-        fname = os.path.join(os.path.dirname(__file__), 'private.pem')",
            "-        with open(fname, mode='rb') as privatefile:",
            "+        fname = os.path.join(os.path.dirname(__file__), \"private.pem\")",
            "+        with open(fname, mode=\"rb\") as privatefile:",
            "             keydata = privatefile.read()",
            "         privkey = rsa.key.PrivateKey.load_pkcs1(keydata)",
            " ",
            "         self.assertEqual(15945948582725241569, privkey.p)",
            "         self.assertEqual(14617195220284816877, privkey.q)",
            " ",
            " ",
            "@@ -202,14 +215,19 @@",
            "     def test_private_key(self):",
            "         pk = rsa.key.PrivateKey(3727264081, 65537, 3349121513, 65063, 57287)",
            " ",
            "         pickled = pickle.dumps(pk)",
            "         unpickled = pickle.loads(pickled)",
            "         self.assertEqual(pk, unpickled)",
            " ",
            "+        for attr in rsa.key.AbstractKey.__slots__:",
            "+            self.assertTrue(hasattr(unpickled, attr))",
            "+",
            "     def test_public_key(self):",
            "         pk = rsa.key.PublicKey(3727264081, 65537)",
            " ",
            "         pickled = pickle.dumps(pk)",
            "         unpickled = pickle.loads(pickled)",
            " ",
            "         self.assertEqual(pk, unpickled)",
            "+        for attr in rsa.key.AbstractKey.__slots__:",
            "+            self.assertTrue(hasattr(unpickled, attr))"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_pem.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_pem.py",
            "+++ /home/python-rsa-version-4.9/tests/test_pem.py",
            "@@ -1,10 +1,8 @@",
            " #!/usr/bin/env python",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -13,90 +11,90 @@",
            " #  distributed under the License is distributed on an \"AS IS\" BASIS,",
            " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
            " #  See the License for the specific language governing permissions and",
            " #  limitations under the License.",
            " ",
            " import unittest",
            " ",
            "-from rsa._compat import is_bytes",
            " from rsa.pem import _markers",
            " import rsa.key",
            " ",
            " # 512-bit key. Too small for practical purposes, but good enough for testing with.",
            "-public_key_pem = '''",
            "+public_key_pem = \"\"\"",
            " -----BEGIN PUBLIC KEY-----",
            " MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKH0aYP9ZFuctlPnXhEyHjgc8ltKKx9M",
            " 0c+h4sKMXwjhjbQAZdtWIw8RRghpUJnKj+6bN2XzZDazyULxgPhtax0CAwEAAQ==",
            " -----END PUBLIC KEY-----",
            "-'''",
            "+\"\"\"",
            " ",
            "-private_key_pem = '''",
            "+private_key_pem = \"\"\"",
            " -----BEGIN RSA PRIVATE KEY-----",
            " MIIBOwIBAAJBAKH0aYP9ZFuctlPnXhEyHjgc8ltKKx9M0c+h4sKMXwjhjbQAZdtW",
            " Iw8RRghpUJnKj+6bN2XzZDazyULxgPhtax0CAwEAAQJADwR36EpNzQTqDzusCFIq",
            " ZS+h9X8aIovgBK3RNhMIGO2ThpsnhiDTcqIvgQ56knbl6B2W4iOl54tJ6CNtf6l6",
            " zQIhANTaNLFGsJfOvZHcI0WL1r89+1A4JVxR+lpslJJwAvgDAiEAwsjqqZ2wY2F0",
            " F8p1J98BEbtjU2mEZIVCMn6vQuhWdl8CIDRL4IJl4eGKlB0QP0JJF1wpeGO/R76l",
            " DaPF5cMM7k3NAiEAss28m/ck9BWBfFVdNjx/vsdFZkx2O9AX9EJWoBSnSgECIQCa",
            " +sVQMUVJFGsdE/31C7wCIbE3IpB7ziABZ7mN+V3Dhg==",
            " -----END RSA PRIVATE KEY-----",
            "-'''",
            "+\"\"\"",
            " ",
            " # Private key components",
            " prime1 = 96275860229939261876671084930484419185939191875438854026071315955024109172739",
            " prime2 = 88103681619592083641803383393198542599284510949756076218404908654323473741407",
            " ",
            " ",
            " class TestMarkers(unittest.TestCase):",
            "     def test_values(self):",
            "-        self.assertEqual(_markers('RSA PRIVATE KEY'),",
            "-                         (b'-----BEGIN RSA PRIVATE KEY-----',",
            "-                          b'-----END RSA PRIVATE KEY-----'))",
            "+        self.assertEqual(",
            "+            _markers(\"RSA PRIVATE KEY\"),",
            "+            (b\"-----BEGIN RSA PRIVATE KEY-----\", b\"-----END RSA PRIVATE KEY-----\"),",
            "+        )",
            " ",
            " ",
            " class TestBytesAndStrings(unittest.TestCase):",
            "     \"\"\"Test that we can use PEM in both Unicode strings and bytes.\"\"\"",
            " ",
            "     def test_unicode_public(self):",
            "         key = rsa.key.PublicKey.load_pkcs1_openssl_pem(public_key_pem)",
            "         self.assertEqual(prime1 * prime2, key.n)",
            " ",
            "     def test_bytes_public(self):",
            "-        key = rsa.key.PublicKey.load_pkcs1_openssl_pem(public_key_pem.encode('ascii'))",
            "+        key = rsa.key.PublicKey.load_pkcs1_openssl_pem(public_key_pem.encode(\"ascii\"))",
            "         self.assertEqual(prime1 * prime2, key.n)",
            " ",
            "     def test_unicode_private(self):",
            "         key = rsa.key.PrivateKey.load_pkcs1(private_key_pem)",
            "         self.assertEqual(prime1 * prime2, key.n)",
            " ",
            "     def test_bytes_private(self):",
            "-        key = rsa.key.PrivateKey.load_pkcs1(private_key_pem.encode('ascii'))",
            "+        key = rsa.key.PrivateKey.load_pkcs1(private_key_pem.encode(\"ascii\"))",
            "         self.assertEqual(prime1, key.p)",
            "         self.assertEqual(prime2, key.q)",
            " ",
            " ",
            " class TestByteOutput(unittest.TestCase):",
            "     \"\"\"Tests that PEM and DER are returned as bytes.\"\"\"",
            " ",
            "     def test_bytes_public(self):",
            "         key = rsa.key.PublicKey.load_pkcs1_openssl_pem(public_key_pem)",
            "-        self.assertTrue(is_bytes(key.save_pkcs1(format='DER')))",
            "-        self.assertTrue(is_bytes(key.save_pkcs1(format='PEM')))",
            "+        self.assertIsInstance(key.save_pkcs1(format=\"DER\"), bytes)",
            "+        self.assertIsInstance(key.save_pkcs1(format=\"PEM\"), bytes)",
            " ",
            "     def test_bytes_private(self):",
            "         key = rsa.key.PrivateKey.load_pkcs1(private_key_pem)",
            "-        self.assertTrue(is_bytes(key.save_pkcs1(format='DER')))",
            "-        self.assertTrue(is_bytes(key.save_pkcs1(format='PEM')))",
            "+        self.assertIsInstance(key.save_pkcs1(format=\"DER\"), bytes)",
            "+        self.assertIsInstance(key.save_pkcs1(format=\"PEM\"), bytes)",
            " ",
            " ",
            " class TestByteInput(unittest.TestCase):",
            "     \"\"\"Tests that PEM and DER can be loaded from bytes.\"\"\"",
            " ",
            "     def test_bytes_public(self):",
            "-        key = rsa.key.PublicKey.load_pkcs1_openssl_pem(public_key_pem.encode('ascii'))",
            "-        self.assertTrue(is_bytes(key.save_pkcs1(format='DER')))",
            "-        self.assertTrue(is_bytes(key.save_pkcs1(format='PEM')))",
            "+        key = rsa.key.PublicKey.load_pkcs1_openssl_pem(public_key_pem.encode(\"ascii\"))",
            "+        self.assertIsInstance(key.save_pkcs1(format=\"DER\"), bytes)",
            "+        self.assertIsInstance(key.save_pkcs1(format=\"PEM\"), bytes)",
            " ",
            "     def test_bytes_private(self):",
            "-        key = rsa.key.PrivateKey.load_pkcs1(private_key_pem.encode('ascii'))",
            "-        self.assertTrue(is_bytes(key.save_pkcs1(format='DER')))",
            "-        self.assertTrue(is_bytes(key.save_pkcs1(format='PEM')))",
            "+        key = rsa.key.PrivateKey.load_pkcs1(private_key_pem.encode(\"ascii\"))",
            "+        self.assertIsInstance(key.save_pkcs1(format=\"DER\"), bytes)",
            "+        self.assertIsInstance(key.save_pkcs1(format=\"PEM\"), bytes)"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_pkcs1.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_pkcs1.py",
            "+++ /home/python-rsa-version-4.9/tests/test_pkcs1.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -18,167 +16,203 @@",
            " ",
            " import struct",
            " import sys",
            " import unittest",
            " ",
            " import rsa",
            " from rsa import pkcs1",
            "-from rsa._compat import byte, is_bytes",
            " ",
            " ",
            " class BinaryTest(unittest.TestCase):",
            "     def setUp(self):",
            "         (self.pub, self.priv) = rsa.newkeys(256)",
            " ",
            "     def test_enc_dec(self):",
            "-        message = struct.pack('>IIII', 0, 0, 0, 1)",
            "-        print(\"\\tMessage:   %r\" % message)",
            "+        message = struct.pack(\">IIII\", 0, 0, 0, 1)",
            "+        print(\"\\n\\tMessage:   %r\" % message)",
            " ",
            "         encrypted = pkcs1.encrypt(message, self.pub)",
            "         print(\"\\tEncrypted: %r\" % encrypted)",
            " ",
            "         decrypted = pkcs1.decrypt(encrypted, self.priv)",
            "         print(\"\\tDecrypted: %r\" % decrypted)",
            " ",
            "         self.assertEqual(message, decrypted)",
            " ",
            "     def test_decoding_failure(self):",
            "-        message = struct.pack('>IIII', 0, 0, 0, 1)",
            "+        message = struct.pack(\">IIII\", 0, 0, 0, 1)",
            "         encrypted = pkcs1.encrypt(message, self.pub)",
            " ",
            "         # Alter the encrypted stream",
            "         a = encrypted[5]",
            "-        if is_bytes(a):",
            "-            a = ord(a)",
            "+        self.assertIsInstance(a, int)",
            "+",
            "         altered_a = (a + 1) % 256",
            "-        encrypted = encrypted[:5] + byte(altered_a) + encrypted[6:]",
            "+        encrypted = encrypted[:5] + bytes([altered_a]) + encrypted[6:]",
            " ",
            "-        self.assertRaises(pkcs1.DecryptionError, pkcs1.decrypt, encrypted,",
            "-                          self.priv)",
            "+        self.assertRaises(pkcs1.DecryptionError, pkcs1.decrypt, encrypted, self.priv)",
            " ",
            "     def test_randomness(self):",
            "         \"\"\"Encrypting the same message twice should result in different",
            "         cryptos.",
            "         \"\"\"",
            " ",
            "-        message = struct.pack('>IIII', 0, 0, 0, 1)",
            "+        message = struct.pack(\">IIII\", 0, 0, 0, 1)",
            "         encrypted1 = pkcs1.encrypt(message, self.pub)",
            "         encrypted2 = pkcs1.encrypt(message, self.pub)",
            " ",
            "         self.assertNotEqual(encrypted1, encrypted2)",
            " ",
            " ",
            " class ExtraZeroesTest(unittest.TestCase):",
            "     def setUp(self):",
            "         # Key, cyphertext, and plaintext taken from https://github.com/sybrenstuvel/python-rsa/issues/146",
            "         self.private_key = rsa.PrivateKey.load_pkcs1(",
            "             \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAs1EKK81M5kTFtZSuUFnhKy8FS2WNXaWVmi/fGHG4CLw98+Yo\\n0nkuUarVwSS0O9pFPcpc3kvPKOe9Tv+6DLS3Qru21aATy2PRqjqJ4CYn71OYtSwM\\n/ZfSCKvrjXybzgu+sBmobdtYm+sppbdL+GEHXGd8gdQw8DDCZSR6+dPJFAzLZTCd\\nB+Ctwe/RXPF+ewVdfaOGjkZIzDoYDw7n+OHnsYCYozkbTOcWHpjVevipR+IBpGPi\\n1rvKgFnlcG6d/tj0hWRl/6cS7RqhjoiNEtxqoJzpXs/Kg8xbCxXbCchkf11STA8u\\ndiCjQWuWI8rcDwl69XMmHJjIQAqhKvOOQ8rYTQIDAQABAoIBABpQLQ7qbHtp4h1Y\\nORAfcFRW7Q74UvtH/iEHH1TF8zyM6wZsYtcn4y0mxYE3Mp+J0xlTJbeVJkwZXYVH\\nL3UH29CWHSlR+TWiazTwrCTRVJDhEoqbcTiRW8fb+o/jljVxMcVDrpyYUHNo2c6w\\njBxhmKPtp66hhaDpds1Cwi0A8APZ8Z2W6kya/L/hRBzMgCz7Bon1nYBMak5PQEwV\\nF0dF7Wy4vIjvCzO6DSqA415DvJDzUAUucgFudbANNXo4HJwNRnBpymYIh8mHdmNJ\\n/MQ0YLSqUWvOB57dh7oWQwe3UsJ37ZUorTugvxh3NJ7Tt5ZqbCQBEECb9ND63gxo\\n/a3YR/0CgYEA7BJc834xCi/0YmO5suBinWOQAF7IiRPU+3G9TdhWEkSYquupg9e6\\nK9lC5k0iP+t6I69NYF7+6mvXDTmv6Z01o6oV50oXaHeAk74O3UqNCbLe9tybZ/+F\\ndkYlwuGSNttMQBzjCiVy0+y0+Wm3rRnFIsAtd0RlZ24aN3bFTWJINIsCgYEAwnQq\\nvNmJe9SwtnH5c/yCqPhKv1cF/4jdQZSGI6/p3KYNxlQzkHZ/6uvrU5V27ov6YbX8\\nvKlKfO91oJFQxUD6lpTdgAStI3GMiJBJIZNpyZ9EWNSvwUj28H34cySpbZz3s4Xd\\nhiJBShgy+fKURvBQwtWmQHZJ3EGrcOI7PcwiyYcCgYEAlql5jSUCY0ALtidzQogW\\nJ+B87N+RGHsBuJ/0cxQYinwg+ySAAVbSyF1WZujfbO/5+YBN362A/1dn3lbswCnH\\nK/bHF9+fZNqvwprPnceQj5oK1n4g6JSZNsy6GNAhosT+uwQ0misgR8SQE4W25dDG\\nkdEYsz+BgCsyrCcu8J5C+tUCgYAFVPQbC4f2ikVyKzvgz0qx4WUDTBqRACq48p6e\\n+eLatv7nskVbr7QgN+nS9+Uz80ihR0Ev1yCAvnwmM/XYAskcOea87OPmdeWZlQM8\\nVXNwINrZ6LMNBLgorfuTBK1UoRo1pPUHCYdqxbEYI2unak18mikd2WB7Fp3h0YI4\\nVpGZnwKBgBxkAYnZv+jGI4MyEKdsQgxvROXXYOJZkWzsKuKxVkVpYP2V4nR2YMOJ\\nViJQ8FUEnPq35cMDlUk4SnoqrrHIJNOvcJSCqM+bWHAioAsfByLbUPM8sm3CDdIk\\nXVJl32HuKYPJOMIWfc7hIfxLRHnCN+coz2M6tgqMDs0E/OfjuqVZ\\n-----END RSA PRIVATE KEY-----\",",
            "-            format='PEM')",
            "-        cyphertext = \"4501b4d669e01b9ef2dc800aa1b06d49196f5a09fe8fbcd037323c60eaf027bfb98432be4e4a26c567ffec718bcbea977dd26812fa071c33808b4d5ebb742d9879806094b6fbeea63d25ea3141733b60e31c6912106e1b758a7fe0014f075193faa8b4622bfd5d3013f0a32190a95de61a3604711bc62945f95a6522bd4dfed0a994ef185b28c281f7b5e4c8ed41176d12d9fc1b837e6a0111d0132d08a6d6f0580de0c9eed8ed105531799482d1e466c68c23b0c222af7fc12ac279bc4ff57e7b4586d209371b38c4c1035edd418dc5f960441cb21ea2bedbfea86de0d7861e81021b650a1de51002c315f1e7c12debe4dcebf790caaa54a2f26b149cf9e77d\"",
            "-        plaintext = \"54657374\"",
            "-",
            "-        if sys.version_info < (3, 0):",
            "-            self.cyphertext = cyphertext.decode(\"hex\")",
            "-            self.plaintext = plaintext.decode('hex')",
            "-        else:",
            "-            self.cyphertext = bytes.fromhex(cyphertext)",
            "-            self.plaintext = bytes.fromhex(plaintext)",
            "+            format=\"PEM\",",
            "+        )",
            "+        self.cyphertext = bytes.fromhex(",
            "+            \"4501b4d669e01b9ef2dc800aa1b06d49196f5a09fe8fbcd037323c60eaf027bfb98432be4e4a26c567ffec718bcbea977dd26812fa071c33808b4d5ebb742d9879806094b6fbeea63d25ea3141733b60e31c6912106e1b758a7fe0014f075193faa8b4622bfd5d3013f0a32190a95de61a3604711bc62945f95a6522bd4dfed0a994ef185b28c281f7b5e4c8ed41176d12d9fc1b837e6a0111d0132d08a6d6f0580de0c9eed8ed105531799482d1e466c68c23b0c222af7fc12ac279bc4ff57e7b4586d209371b38c4c1035edd418dc5f960441cb21ea2bedbfea86de0d7861e81021b650a1de51002c315f1e7c12debe4dcebf790caaa54a2f26b149cf9e77d\"",
            "+        )",
            "+        self.plaintext = bytes.fromhex(\"54657374\")",
            " ",
            "     def test_unmodified(self):",
            "         message = rsa.decrypt(self.cyphertext, self.private_key)",
            "         self.assertEqual(message, self.plaintext)",
            " ",
            "     def test_prepend_zeroes(self):",
            "-        cyphertext = b'\\00\\00' + self.cyphertext",
            "+        cyphertext = bytes.fromhex(\"0000\") + self.cyphertext",
            "         with self.assertRaises(rsa.DecryptionError):",
            "             rsa.decrypt(cyphertext, self.private_key)",
            " ",
            "     def test_append_zeroes(self):",
            "-        cyphertext = self.cyphertext + b'\\00\\00'",
            "+        cyphertext = self.cyphertext + bytes.fromhex(\"0000\")",
            "         with self.assertRaises(rsa.DecryptionError):",
            "             rsa.decrypt(cyphertext, self.private_key)",
            " ",
            " ",
            " class SignatureTest(unittest.TestCase):",
            "     def setUp(self):",
            "         (self.pub, self.priv) = rsa.newkeys(512)",
            " ",
            "     def test_sign_verify(self):",
            "         \"\"\"Test happy flow of sign and verify\"\"\"",
            " ",
            "-        message = b'je moeder'",
            "-        signature = pkcs1.sign(message, self.priv, 'SHA-256')",
            "-",
            "-        self.assertEqual('SHA-256', pkcs1.verify(message, signature, self.pub))",
            "+        message = b\"je moeder\"",
            "+        signature = pkcs1.sign(message, self.priv, \"SHA-256\")",
            "+        self.assertEqual(\"SHA-256\", pkcs1.verify(message, signature, self.pub))",
            "+",
            "+    @unittest.skipIf(sys.version_info < (3, 6), \"SHA3 requires Python 3.6+\")",
            "+    def test_sign_verify_sha3(self):",
            "+        \"\"\"Test happy flow of sign and verify with SHA3-256\"\"\"",
            "+",
            "+        message = b\"je moeder\"",
            "+        signature = pkcs1.sign(message, self.priv, \"SHA3-256\")",
            "+        self.assertEqual(\"SHA3-256\", pkcs1.verify(message, signature, self.pub))",
            " ",
            "     def test_find_signature_hash(self):",
            "         \"\"\"Test happy flow of sign and find_signature_hash\"\"\"",
            " ",
            "-        message = b'je moeder'",
            "-        signature = pkcs1.sign(message, self.priv, 'SHA-256')",
            "+        message = b\"je moeder\"",
            "+        signature = pkcs1.sign(message, self.priv, \"SHA-256\")",
            " ",
            "-        self.assertEqual('SHA-256', pkcs1.find_signature_hash(signature, self.pub))",
            "+        self.assertEqual(\"SHA-256\", pkcs1.find_signature_hash(signature, self.pub))",
            " ",
            "     def test_alter_message(self):",
            "         \"\"\"Altering the message should let the verification fail.\"\"\"",
            " ",
            "-        signature = pkcs1.sign(b'je moeder', self.priv, 'SHA-256')",
            "-        self.assertRaises(pkcs1.VerificationError, pkcs1.verify,",
            "-                          b'mijn moeder', signature, self.pub)",
            "+        signature = pkcs1.sign(b\"je moeder\", self.priv, \"SHA-256\")",
            "+        self.assertRaises(",
            "+            pkcs1.VerificationError, pkcs1.verify, b\"mijn moeder\", signature, self.pub",
            "+        )",
            " ",
            "     def test_sign_different_key(self):",
            "         \"\"\"Signing with another key should let the verification fail.\"\"\"",
            " ",
            "         (otherpub, _) = rsa.newkeys(512)",
            " ",
            "-        message = b'je moeder'",
            "-        signature = pkcs1.sign(message, self.priv, 'SHA-256')",
            "-        self.assertRaises(pkcs1.VerificationError, pkcs1.verify,",
            "-                          message, signature, otherpub)",
            "+        message = b\"je moeder\"",
            "+        signature = pkcs1.sign(message, self.priv, \"SHA-256\")",
            "+        self.assertRaises(pkcs1.VerificationError, pkcs1.verify, message, signature, otherpub)",
            " ",
            "     def test_multiple_signings(self):",
            "         \"\"\"Signing the same message twice should return the same signatures.\"\"\"",
            " ",
            "-        message = struct.pack('>IIII', 0, 0, 0, 1)",
            "-        signature1 = pkcs1.sign(message, self.priv, 'SHA-1')",
            "-        signature2 = pkcs1.sign(message, self.priv, 'SHA-1')",
            "+        message = struct.pack(\">IIII\", 0, 0, 0, 1)",
            "+        signature1 = pkcs1.sign(message, self.priv, \"SHA-1\")",
            "+        signature2 = pkcs1.sign(message, self.priv, \"SHA-1\")",
            " ",
            "         self.assertEqual(signature1, signature2)",
            " ",
            "     def test_split_hash_sign(self):",
            "-        \"\"\"Hashing and then signing should match with directly signing the message. \"\"\"",
            "+        \"\"\"Hashing and then signing should match with directly signing the message.\"\"\"",
            " ",
            "-        message = b'je moeder'",
            "-        msg_hash = pkcs1.compute_hash(message, 'SHA-256')",
            "-        signature1 = pkcs1.sign_hash(msg_hash, self.priv, 'SHA-256')",
            "+        message = b\"je moeder\"",
            "+        msg_hash = pkcs1.compute_hash(message, \"SHA-256\")",
            "+        signature1 = pkcs1.sign_hash(msg_hash, self.priv, \"SHA-256\")",
            " ",
            "         # Calculate the signature using the unified method",
            "-        signature2 = pkcs1.sign(message, self.priv, 'SHA-256')",
            "+        signature2 = pkcs1.sign(message, self.priv, \"SHA-256\")",
            " ",
            "         self.assertEqual(signature1, signature2)",
            " ",
            "     def test_hash_sign_verify(self):",
            "         \"\"\"Test happy flow of hash, sign, and verify\"\"\"",
            " ",
            "-        message = b'je moeder'",
            "-        msg_hash = pkcs1.compute_hash(message, 'SHA-224')",
            "-        signature = pkcs1.sign_hash(msg_hash, self.priv, 'SHA-224')",
            "+        message = b\"je moeder\"",
            "+        msg_hash = pkcs1.compute_hash(message, \"SHA-224\")",
            "+        signature = pkcs1.sign_hash(msg_hash, self.priv, \"SHA-224\")",
            " ",
            "         self.assertTrue(pkcs1.verify(message, signature, self.pub))",
            " ",
            "     def test_prepend_zeroes(self):",
            "         \"\"\"Prepending the signature with zeroes should be detected.\"\"\"",
            " ",
            "-        message = b'je moeder'",
            "-        signature = pkcs1.sign(message, self.priv, 'SHA-256')",
            "-        signature = b'\\00\\00' + signature",
            "+        message = b\"je moeder\"",
            "+        signature = pkcs1.sign(message, self.priv, \"SHA-256\")",
            "+        signature = bytes.fromhex(\"0000\") + signature",
            "         with self.assertRaises(rsa.VerificationError):",
            "             pkcs1.verify(message, signature, self.pub)",
            " ",
            "     def test_apppend_zeroes(self):",
            "         \"\"\"Apppending the signature with zeroes should be detected.\"\"\"",
            " ",
            "-        message = b'je moeder'",
            "-        signature = pkcs1.sign(message, self.priv, 'SHA-256')",
            "-        signature = signature + b'\\00\\00'",
            "+        message = b\"je moeder\"",
            "+        signature = pkcs1.sign(message, self.priv, \"SHA-256\")",
            "+        signature = signature + bytes.fromhex(\"0000\")",
            "         with self.assertRaises(rsa.VerificationError):",
            "             pkcs1.verify(message, signature, self.pub)",
            "+",
            "+",
            "+class PaddingSizeTest(unittest.TestCase):",
            "+    def test_too_little_padding(self):",
            "+        \"\"\"Padding less than 8 bytes should be rejected.\"\"\"",
            "+",
            "+        # Construct key that will be small enough to need only 7 bytes of padding.",
            "+        # This key is 168 bit long, and was generated with rsa.newkeys(nbits=168).",
            "+        self.private_key = rsa.PrivateKey.load_pkcs1(",
            "+            b\"\"\"",
            "+-----BEGIN RSA PRIVATE KEY-----",
            "+MHkCAQACFgCIGbbNSkIRLtprxka9NgOf5UxgxCMCAwEAAQIVQqymO0gHubdEVS68",
            "+CdCiWmOJxVfRAgwBQM+e1JJwMKmxSF0CCmya6CFxO8Evdn8CDACMM3AlVC4FhlN8",
            "+3QIKC9cjoam/swMirwIMAR7Br9tdouoH7jAE",
            "+-----END RSA PRIVATE KEY-----",
            "+        \"\"\"",
            "+        )",
            "+        self.public_key = rsa.PublicKey(n=self.private_key.n, e=self.private_key.e)",
            "+",
            "+        cyphertext = self.encrypt_with_short_padding(b\"op je hoofd\")",
            "+        with self.assertRaises(rsa.DecryptionError):",
            "+            rsa.decrypt(cyphertext, self.private_key)",
            "+",
            "+    def encrypt_with_short_padding(self, message: bytes) -> bytes:",
            "+        # This is a copy of rsa.pkcs1.encrypt() adjusted to use the wrong padding length.",
            "+        keylength = rsa.common.byte_size(self.public_key.n)",
            "+",
            "+        # The word 'padding' has 7 letters, so is one byte short of a valid padding length.",
            "+        padded = b\"\\x00\\x02padding\\x00\" + message",
            "+",
            "+        payload = rsa.transform.bytes2int(padded)",
            "+        encrypted_value = rsa.core.encrypt_int(payload, self.public_key.e, self.public_key.n)",
            "+        cyphertext = rsa.transform.int2bytes(encrypted_value, keylength)",
            "+",
            "+        return cyphertext"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_pkcs1_v2.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_pkcs1_v2.py",
            "+++ /home/python-rsa-version-4.9/tests/test_pkcs1_v2.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -24,60 +22,58 @@",
            " ",
            " from rsa import pkcs1_v2",
            " ",
            " ",
            " class MGFTest(unittest.TestCase):",
            "     def test_oaep_int_db_mask(self):",
            "         seed = (",
            "-            b'\\xaa\\xfd\\x12\\xf6\\x59\\xca\\xe6\\x34\\x89\\xb4\\x79\\xe5\\x07\\x6d\\xde\\xc2'",
            "-            b'\\xf0\\x6c\\xb5\\x8f'",
            "+            b\"\\xaa\\xfd\\x12\\xf6\\x59\\xca\\xe6\\x34\\x89\\xb4\\x79\\xe5\\x07\\x6d\\xde\\xc2\" b\"\\xf0\\x6c\\xb5\\x8f\"",
            "         )",
            "         db = (",
            "-            b'\\xda\\x39\\xa3\\xee\\x5e\\x6b\\x4b\\x0d\\x32\\x55\\xbf\\xef\\x95\\x60\\x18\\x90'",
            "-            b'\\xaf\\xd8\\x07\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'",
            "-            b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'",
            "-            b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'",
            "-            b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'",
            "-            b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xd4\\x36\\xe9\\x95\\x69'",
            "-            b'\\xfd\\x32\\xa7\\xc8\\xa0\\x5b\\xbc\\x90\\xd3\\x2c\\x49'",
            "+            b\"\\xda\\x39\\xa3\\xee\\x5e\\x6b\\x4b\\x0d\\x32\\x55\\xbf\\xef\\x95\\x60\\x18\\x90\"",
            "+            b\"\\xaf\\xd8\\x07\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"",
            "+            b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"",
            "+            b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"",
            "+            b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"",
            "+            b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xd4\\x36\\xe9\\x95\\x69\"",
            "+            b\"\\xfd\\x32\\xa7\\xc8\\xa0\\x5b\\xbc\\x90\\xd3\\x2c\\x49\"",
            "         )",
            "         masked_db = (",
            "-            b'\\xdc\\xd8\\x7d\\x5c\\x68\\xf1\\xee\\xa8\\xf5\\x52\\x67\\xc3\\x1b\\x2e\\x8b\\xb4'",
            "-            b'\\x25\\x1f\\x84\\xd7\\xe0\\xb2\\xc0\\x46\\x26\\xf5\\xaf\\xf9\\x3e\\xdc\\xfb\\x25'",
            "-            b'\\xc9\\xc2\\xb3\\xff\\x8a\\xe1\\x0e\\x83\\x9a\\x2d\\xdb\\x4c\\xdc\\xfe\\x4f\\xf4'",
            "-            b'\\x77\\x28\\xb4\\xa1\\xb7\\xc1\\x36\\x2b\\xaa\\xd2\\x9a\\xb4\\x8d\\x28\\x69\\xd5'",
            "-            b'\\x02\\x41\\x21\\x43\\x58\\x11\\x59\\x1b\\xe3\\x92\\xf9\\x82\\xfb\\x3e\\x87\\xd0'",
            "-            b'\\x95\\xae\\xb4\\x04\\x48\\xdb\\x97\\x2f\\x3a\\xc1\\x4f\\x7b\\xc2\\x75\\x19\\x52'",
            "-            b'\\x81\\xce\\x32\\xd2\\xf1\\xb7\\x6d\\x4d\\x35\\x3e\\x2d'",
            "+            b\"\\xdc\\xd8\\x7d\\x5c\\x68\\xf1\\xee\\xa8\\xf5\\x52\\x67\\xc3\\x1b\\x2e\\x8b\\xb4\"",
            "+            b\"\\x25\\x1f\\x84\\xd7\\xe0\\xb2\\xc0\\x46\\x26\\xf5\\xaf\\xf9\\x3e\\xdc\\xfb\\x25\"",
            "+            b\"\\xc9\\xc2\\xb3\\xff\\x8a\\xe1\\x0e\\x83\\x9a\\x2d\\xdb\\x4c\\xdc\\xfe\\x4f\\xf4\"",
            "+            b\"\\x77\\x28\\xb4\\xa1\\xb7\\xc1\\x36\\x2b\\xaa\\xd2\\x9a\\xb4\\x8d\\x28\\x69\\xd5\"",
            "+            b\"\\x02\\x41\\x21\\x43\\x58\\x11\\x59\\x1b\\xe3\\x92\\xf9\\x82\\xfb\\x3e\\x87\\xd0\"",
            "+            b\"\\x95\\xae\\xb4\\x04\\x48\\xdb\\x97\\x2f\\x3a\\xc1\\x4f\\x7b\\xc2\\x75\\x19\\x52\"",
            "+            b\"\\x81\\xce\\x32\\xd2\\xf1\\xb7\\x6d\\x4d\\x35\\x3e\\x2d\"",
            "         )",
            " ",
            "         # dbMask = MGF(seed, length(DB))",
            "         db_mask = pkcs1_v2.mgf1(seed, length=len(db))",
            "         expected_db_mask = (",
            "-            b'\\x06\\xe1\\xde\\xb2\\x36\\x9a\\xa5\\xa5\\xc7\\x07\\xd8\\x2c\\x8e\\x4e\\x93\\x24'",
            "-            b'\\x8a\\xc7\\x83\\xde\\xe0\\xb2\\xc0\\x46\\x26\\xf5\\xaf\\xf9\\x3e\\xdc\\xfb\\x25'",
            "-            b'\\xc9\\xc2\\xb3\\xff\\x8a\\xe1\\x0e\\x83\\x9a\\x2d\\xdb\\x4c\\xdc\\xfe\\x4f\\xf4'",
            "-            b'\\x77\\x28\\xb4\\xa1\\xb7\\xc1\\x36\\x2b\\xaa\\xd2\\x9a\\xb4\\x8d\\x28\\x69\\xd5'",
            "-            b'\\x02\\x41\\x21\\x43\\x58\\x11\\x59\\x1b\\xe3\\x92\\xf9\\x82\\xfb\\x3e\\x87\\xd0'",
            "-            b'\\x95\\xae\\xb4\\x04\\x48\\xdb\\x97\\x2f\\x3a\\xc1\\x4e\\xaf\\xf4\\x9c\\x8c\\x3b'",
            "-            b'\\x7c\\xfc\\x95\\x1a\\x51\\xec\\xd1\\xdd\\xe6\\x12\\x64'",
            "+            b\"\\x06\\xe1\\xde\\xb2\\x36\\x9a\\xa5\\xa5\\xc7\\x07\\xd8\\x2c\\x8e\\x4e\\x93\\x24\"",
            "+            b\"\\x8a\\xc7\\x83\\xde\\xe0\\xb2\\xc0\\x46\\x26\\xf5\\xaf\\xf9\\x3e\\xdc\\xfb\\x25\"",
            "+            b\"\\xc9\\xc2\\xb3\\xff\\x8a\\xe1\\x0e\\x83\\x9a\\x2d\\xdb\\x4c\\xdc\\xfe\\x4f\\xf4\"",
            "+            b\"\\x77\\x28\\xb4\\xa1\\xb7\\xc1\\x36\\x2b\\xaa\\xd2\\x9a\\xb4\\x8d\\x28\\x69\\xd5\"",
            "+            b\"\\x02\\x41\\x21\\x43\\x58\\x11\\x59\\x1b\\xe3\\x92\\xf9\\x82\\xfb\\x3e\\x87\\xd0\"",
            "+            b\"\\x95\\xae\\xb4\\x04\\x48\\xdb\\x97\\x2f\\x3a\\xc1\\x4e\\xaf\\xf4\\x9c\\x8c\\x3b\"",
            "+            b\"\\x7c\\xfc\\x95\\x1a\\x51\\xec\\xd1\\xdd\\xe6\\x12\\x64\"",
            "         )",
            " ",
            "         self.assertEqual(db_mask, expected_db_mask)",
            " ",
            "         # seedMask = MGF(maskedDB, length(seed))",
            "         seed_mask = pkcs1_v2.mgf1(masked_db, length=len(seed))",
            "         expected_seed_mask = (",
            "-            b'\\x41\\x87\\x0b\\x5a\\xb0\\x29\\xe6\\x57\\xd9\\x57\\x50\\xb5\\x4c\\x28\\x3c\\x08'",
            "-            b'\\x72\\x5d\\xbe\\xa9'",
            "+            b\"\\x41\\x87\\x0b\\x5a\\xb0\\x29\\xe6\\x57\\xd9\\x57\\x50\\xb5\\x4c\\x28\\x3c\\x08\" b\"\\x72\\x5d\\xbe\\xa9\"",
            "         )",
            " ",
            "         self.assertEqual(seed_mask, expected_seed_mask)",
            " ",
            "     def test_invalid_hasher(self):",
            "         \"\"\"Tests an invalid hasher generates an exception\"\"\"",
            "         with self.assertRaises(ValueError):",
            "-            pkcs1_v2.mgf1(b'\\x06\\xe1\\xde\\xb2', length=8, hasher='SHA2')",
            "+            pkcs1_v2.mgf1(b\"\\x06\\xe1\\xde\\xb2\", length=8, hasher=\"SHA2\")",
            " ",
            "     def test_invalid_length(self):",
            "         with self.assertRaises(OverflowError):",
            "-            pkcs1_v2.mgf1(b'\\x06\\xe1\\xde\\xb2', length=2**50)",
            "+            pkcs1_v2.mgf1(b\"\\x06\\xe1\\xde\\xb2\", length=2 ** 50)"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_prime.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_prime.py",
            "+++ /home/python-rsa-version-4.9/tests/test_prime.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      http://www.apache.org/licenses/LICENSE-2.0",
            "@@ -14,15 +12,14 @@",
            " #  See the License for the specific language governing permissions and",
            " #  limitations under the License.",
            " ",
            " \"\"\"Tests prime functions.\"\"\"",
            " ",
            " import unittest",
            " ",
            "-from rsa._compat import range",
            " import rsa.prime",
            " import rsa.randnum",
            " ",
            " ",
            " class PrimeTest(unittest.TestCase):",
            "     def test_is_prime(self):",
            "         \"\"\"Test some common primes.\"\"\"",
            "@@ -34,15 +31,15 @@",
            "         self.assertTrue(rsa.prime.is_prime(2))",
            "         self.assertFalse(rsa.prime.is_prime(42))",
            "         self.assertTrue(rsa.prime.is_prime(41))",
            " ",
            "         # Test some slightly larger numbers",
            "         self.assertEqual(",
            "             [907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997],",
            "-            [x for x in range(901, 1000) if rsa.prime.is_prime(x)]",
            "+            [x for x in range(901, 1000) if rsa.prime.is_prime(x)],",
            "         )",
            " ",
            "         # Test around the 50th millionth known prime.",
            "         self.assertTrue(rsa.prime.is_prime(982451653))",
            "         self.assertFalse(rsa.prime.is_prime(982451653 * 961748941))",
            " ",
            "     def test_miller_rabin_primality_testing(self):",
            "@@ -61,21 +58,31 @@",
            "         try:",
            "             # 'n is composite'",
            "             randints.append(2630484832)  # causes the 'n is composite' case with n=3784949785",
            "             self.assertEqual(False, rsa.prime.miller_rabin_primality_testing(2787998641, 7))",
            "             self.assertEqual([], randints)",
            " ",
            "             # 'Exit inner loop and continue with next witness'",
            "-            randints.extend([",
            "-                2119139098,  # causes 'Exit inner loop and continue with next witness'",
            "-                # the next witnesses for the above case:",
            "-                3051067716, 3603501763, 3230895847, 3687808133, 3760099987, 4026931495, 3022471882,",
            "-            ])",
            "-            self.assertEqual(True, rsa.prime.miller_rabin_primality_testing(2211417913,",
            "-                                                                            len(randints)))",
            "+            randints.extend(",
            "+                [",
            "+                    2119139098,  # causes 'Exit inner loop and continue with next witness'",
            "+                    # the next witnesses for the above case:",
            "+                    3051067716,",
            "+                    3603501763,",
            "+                    3230895847,",
            "+                    3687808133,",
            "+                    3760099987,",
            "+                    4026931495,",
            "+                    3022471882,",
            "+                ]",
            "+            )",
            "+            self.assertEqual(",
            "+                True,",
            "+                rsa.prime.miller_rabin_primality_testing(2211417913, len(randints)),",
            "+            )",
            "             self.assertEqual([], randints)",
            "         finally:",
            "             rsa.randnum.randint = orig_randint",
            " ",
            "     def test_mersenne_primes(self):",
            "         \"\"\"Tests first known Mersenne primes.",
            " ",
            "@@ -83,28 +90,44 @@",
            "         `Mn = 2**n - 1` for some integer `n`. For the list of known Mersenne",
            "         primes, see:",
            "         https://en.wikipedia.org/wiki/Mersenne_prime#List_of_known_Mersenne_primes",
            "         \"\"\"",
            " ",
            "         # List of known Mersenne exponents.",
            "         known_mersenne_exponents = [",
            "-            2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279,",
            "-            2203, 2281, 4423,",
            "+            2,",
            "+            3,",
            "+            5,",
            "+            7,",
            "+            13,",
            "+            17,",
            "+            19,",
            "+            31,",
            "+            61,",
            "+            89,",
            "+            107,",
            "+            127,",
            "+            521,",
            "+            607,",
            "+            1279,",
            "+            2203,",
            "+            2281,",
            "+            4423,",
            "         ]",
            " ",
            "         # Test Mersenne primes.",
            "         for exp in known_mersenne_exponents:",
            "-            self.assertTrue(rsa.prime.is_prime(2**exp - 1))",
            "+            self.assertTrue(rsa.prime.is_prime(2 ** exp - 1))",
            " ",
            "     def test_get_primality_testing_rounds(self):",
            "         \"\"\"Test round calculation for primality testing.\"\"\"",
            " ",
            "-        self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 63),  10)",
            "+        self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 63), 10)",
            "         self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 127), 10)",
            "         self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 255), 10)",
            "-        self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 511),  7)",
            "-        self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 767),  7)",
            "+        self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 511), 7)",
            "+        self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 767), 7)",
            "         self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 1023), 4)",
            "         self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 1279), 4)",
            "         self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 1535), 3)",
            "         self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 2047), 3)",
            "         self.assertEqual(rsa.prime.get_primality_testing_rounds(1 << 4095), 3)"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_strings.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_strings.py",
            "+++ /home/python-rsa-version-4.9/tests/test_strings.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -26,17 +24,17 @@",
            " ",
            " ",
            " class StringTest(unittest.TestCase):",
            "     def setUp(self):",
            "         (self.pub, self.priv) = rsa.newkeys(384)",
            " ",
            "     def test_enc_dec(self):",
            "-        message = unicode_string.encode('utf-8')",
            "-        print(\"\\tMessage:   %s\" % message)",
            "+        message = unicode_string.encode(\"utf-8\")",
            "+        print(\"\\n\\tMessage:   %r\" % message)",
            " ",
            "         encrypted = rsa.encrypt(message, self.pub)",
            "-        print(\"\\tEncrypted: %s\" % encrypted)",
            "+        print(\"\\tEncrypted: %r\" % encrypted)",
            " ",
            "         decrypted = rsa.decrypt(encrypted, self.priv)",
            "-        print(\"\\tDecrypted: %s\" % decrypted)",
            "+        print(\"\\tDecrypted: %r\" % decrypted)",
            " ",
            "         self.assertEqual(message, decrypted)"
          ]
        },
        {
          "file": "/home/python-rsa-version-4.9/tests/test_transform.py",
          "change": [
            "--- /home/python-rsa-version-4.3/tests/test_transform.py",
            "+++ /home/python-rsa-version-4.9/tests/test_transform.py",
            "@@ -1,9 +1,7 @@",
            "-# -*- coding: utf-8 -*-",
            "-#",
            " #  Copyright 2011 Sybren A. Stüvel <sybren@stuvel.eu>",
            " #",
            " #  Licensed under the Apache License, Version 2.0 (the \"License\");",
            " #  you may not use this file except in compliance with the License.",
            " #  You may obtain a copy of the License at",
            " #",
            " #      https://www.apache.org/licenses/LICENSE-2.0",
            "@@ -11,69 +9,45 @@",
            " #  Unless required by applicable law or agreed to in writing, software",
            " #  distributed under the License is distributed on an \"AS IS\" BASIS,",
            " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
            " #  See the License for the specific language governing permissions and",
            " #  limitations under the License.",
            " ",
            " import unittest",
            "-from rsa.transform import int2bytes, bytes2int, _int2bytes",
            "+from rsa.transform import int2bytes, bytes2int",
            " ",
            " ",
            " class Test_int2bytes(unittest.TestCase):",
            "     def test_accuracy(self):",
            "-        self.assertEqual(int2bytes(123456789), b'\\x07[\\xcd\\x15')",
            "-        self.assertEqual(_int2bytes(123456789), b'\\x07[\\xcd\\x15')",
            "+        self.assertEqual(int2bytes(123456789), b\"\\x07[\\xcd\\x15\")",
            " ",
            "     def test_codec_identity(self):",
            "         self.assertEqual(bytes2int(int2bytes(123456789, 128)), 123456789)",
            "-        self.assertEqual(bytes2int(_int2bytes(123456789, 128)), 123456789)",
            " ",
            "     def test_chunk_size(self):",
            "-        self.assertEqual(int2bytes(123456789, 6), b'\\x00\\x00\\x07[\\xcd\\x15')",
            "-        self.assertEqual(int2bytes(123456789, 7),",
            "-                         b'\\x00\\x00\\x00\\x07[\\xcd\\x15')",
            "-",
            "-        self.assertEqual(_int2bytes(123456789, 6),",
            "-                         b'\\x00\\x00\\x07[\\xcd\\x15')",
            "-        self.assertEqual(_int2bytes(123456789, 7),",
            "-                         b'\\x00\\x00\\x00\\x07[\\xcd\\x15')",
            "+        self.assertEqual(int2bytes(123456789, 6), b\"\\x00\\x00\\x07[\\xcd\\x15\")",
            "+        self.assertEqual(int2bytes(123456789, 7), b\"\\x00\\x00\\x00\\x07[\\xcd\\x15\")",
            " ",
            "     def test_zero(self):",
            "-        self.assertEqual(int2bytes(0, 4), b'\\x00' * 4)",
            "-        self.assertEqual(int2bytes(0, 7), b'\\x00' * 7)",
            "-        self.assertEqual(int2bytes(0), b'\\x00')",
            "-",
            "-        self.assertEqual(_int2bytes(0, 4), b'\\x00' * 4)",
            "-        self.assertEqual(_int2bytes(0, 7), b'\\x00' * 7)",
            "-        self.assertEqual(_int2bytes(0), b'\\x00')",
            "+        self.assertEqual(int2bytes(0, 4), b\"\\x00\" * 4)",
            "+        self.assertEqual(int2bytes(0, 7), b\"\\x00\" * 7)",
            "+        self.assertEqual(int2bytes(0), b\"\\x00\")",
            " ",
            "     def test_correctness_against_base_implementation(self):",
            "         # Slow test.",
            "         values = [",
            "             1 << 512,",
            "             1 << 8192,",
            "             1 << 77,",
            "         ]",
            "         for value in values:",
            "-            self.assertEqual(int2bytes(value), _int2bytes(value),",
            "-                             \"Boom %d\" % value)",
            "-            self.assertEqual(bytes2int(int2bytes(value)),",
            "-                             value,",
            "-                             \"Boom %d\" % value)",
            "-            self.assertEqual(bytes2int(_int2bytes(value)),",
            "-                             value,",
            "-                             \"Boom %d\" % value)",
            "+            self.assertEqual(bytes2int(int2bytes(value)), value, \"Boom %d\" % value)",
            " ",
            "     def test_raises_OverflowError_when_chunk_size_is_insufficient(self):",
            "         self.assertRaises(OverflowError, int2bytes, 123456789, 3)",
            "         self.assertRaises(OverflowError, int2bytes, 299999999999, 4)",
            " ",
            "-        self.assertRaises(OverflowError, _int2bytes, 123456789, 3)",
            "-        self.assertRaises(OverflowError, _int2bytes, 299999999999, 4)",
            "-",
            "     def test_raises_ValueError_when_negative_integer(self):",
            "         self.assertRaises(ValueError, int2bytes, -1)",
            "-        self.assertRaises(ValueError, _int2bytes, -1)",
            " ",
            "     def test_raises_TypeError_when_not_integer(self):",
            "         self.assertRaises(TypeError, int2bytes, None)",
            "-        self.assertRaises(TypeError, _int2bytes, None)"
          ]
        }
      ]
    }
  }
}